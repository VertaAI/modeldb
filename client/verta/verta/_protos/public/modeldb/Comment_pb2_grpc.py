# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..modeldb import Comment_pb2 as modeldb_dot_Comment__pb2


class CommentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addExperimentRunComment = channel.unary_unary(
                '/ai.verta.modeldb.CommentService/addExperimentRunComment',
                request_serializer=modeldb_dot_Comment__pb2.AddComment.SerializeToString,
                response_deserializer=modeldb_dot_Comment__pb2.AddComment.Response.FromString,
                )
        self.updateExperimentRunComment = channel.unary_unary(
                '/ai.verta.modeldb.CommentService/updateExperimentRunComment',
                request_serializer=modeldb_dot_Comment__pb2.UpdateComment.SerializeToString,
                response_deserializer=modeldb_dot_Comment__pb2.UpdateComment.Response.FromString,
                )
        self.getExperimentRunComments = channel.unary_unary(
                '/ai.verta.modeldb.CommentService/getExperimentRunComments',
                request_serializer=modeldb_dot_Comment__pb2.GetComments.SerializeToString,
                response_deserializer=modeldb_dot_Comment__pb2.GetComments.Response.FromString,
                )
        self.deleteExperimentRunComment = channel.unary_unary(
                '/ai.verta.modeldb.CommentService/deleteExperimentRunComment',
                request_serializer=modeldb_dot_Comment__pb2.DeleteComment.SerializeToString,
                response_deserializer=modeldb_dot_Comment__pb2.DeleteComment.Response.FromString,
                )


class CommentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addExperimentRunComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateExperimentRunComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getExperimentRunComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteExperimentRunComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addExperimentRunComment': grpc.unary_unary_rpc_method_handler(
                    servicer.addExperimentRunComment,
                    request_deserializer=modeldb_dot_Comment__pb2.AddComment.FromString,
                    response_serializer=modeldb_dot_Comment__pb2.AddComment.Response.SerializeToString,
            ),
            'updateExperimentRunComment': grpc.unary_unary_rpc_method_handler(
                    servicer.updateExperimentRunComment,
                    request_deserializer=modeldb_dot_Comment__pb2.UpdateComment.FromString,
                    response_serializer=modeldb_dot_Comment__pb2.UpdateComment.Response.SerializeToString,
            ),
            'getExperimentRunComments': grpc.unary_unary_rpc_method_handler(
                    servicer.getExperimentRunComments,
                    request_deserializer=modeldb_dot_Comment__pb2.GetComments.FromString,
                    response_serializer=modeldb_dot_Comment__pb2.GetComments.Response.SerializeToString,
            ),
            'deleteExperimentRunComment': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteExperimentRunComment,
                    request_deserializer=modeldb_dot_Comment__pb2.DeleteComment.FromString,
                    response_serializer=modeldb_dot_Comment__pb2.DeleteComment.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai.verta.modeldb.CommentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addExperimentRunComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.CommentService/addExperimentRunComment',
            modeldb_dot_Comment__pb2.AddComment.SerializeToString,
            modeldb_dot_Comment__pb2.AddComment.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateExperimentRunComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.CommentService/updateExperimentRunComment',
            modeldb_dot_Comment__pb2.UpdateComment.SerializeToString,
            modeldb_dot_Comment__pb2.UpdateComment.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getExperimentRunComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.CommentService/getExperimentRunComments',
            modeldb_dot_Comment__pb2.GetComments.SerializeToString,
            modeldb_dot_Comment__pb2.GetComments.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteExperimentRunComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.CommentService/deleteExperimentRunComment',
            modeldb_dot_Comment__pb2.DeleteComment.SerializeToString,
            modeldb_dot_Comment__pb2.DeleteComment.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
