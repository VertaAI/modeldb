# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..registry import RegistryService_pb2 as registry_dot_RegistryService__pb2


class RegistryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindRegisteredModel = channel.unary_unary(
                '/ai.verta.registry.RegistryService/FindRegisteredModel',
                request_serializer=registry_dot_RegistryService__pb2.FindRegisteredModelRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.FindRegisteredModelRequest.Response.FromString,
                )
        self.GetRegisteredModel = channel.unary_unary(
                '/ai.verta.registry.RegistryService/GetRegisteredModel',
                request_serializer=registry_dot_RegistryService__pb2.GetRegisteredModelRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.GetRegisteredModelRequest.Response.FromString,
                )
        self.GetRegisteredModelCount = channel.unary_unary(
                '/ai.verta.registry.RegistryService/GetRegisteredModelCount',
                request_serializer=registry_dot_RegistryService__pb2.GetRegisteredModelCountRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.GetRegisteredModelCountRequest.Response.FromString,
                )
        self.CreateRegisteredModel = channel.unary_unary(
                '/ai.verta.registry.RegistryService/CreateRegisteredModel',
                request_serializer=registry_dot_RegistryService__pb2.SetRegisteredModel.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.SetRegisteredModel.Response.FromString,
                )
        self.UpdateRegisteredModel = channel.unary_unary(
                '/ai.verta.registry.RegistryService/UpdateRegisteredModel',
                request_serializer=registry_dot_RegistryService__pb2.SetRegisteredModel.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.SetRegisteredModel.Response.FromString,
                )
        self.DeleteRegisteredModel = channel.unary_unary(
                '/ai.verta.registry.RegistryService/DeleteRegisteredModel',
                request_serializer=registry_dot_RegistryService__pb2.DeleteRegisteredModelRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.DeleteRegisteredModelRequest.Response.FromString,
                )
        self.FindModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/FindModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.FindModelVersionRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.FindModelVersionRequest.Response.FromString,
                )
        self.GetModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/GetModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.GetModelVersionRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.GetModelVersionRequest.Response.FromString,
                )
        self.CreateModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/CreateModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.SetModelVersion.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.SetModelVersion.Response.FromString,
                )
        self.UpdateModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/UpdateModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.SetModelVersion.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.SetModelVersion.Response.FromString,
                )
        self.SetLockModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/SetLockModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.SetLockModelVersionRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.SetLockModelVersionRequest.Response.FromString,
                )
        self.DeleteModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/DeleteModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.DeleteModelVersionRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.DeleteModelVersionRequest.Response.FromString,
                )
        self.getUrlForArtifact = channel.unary_unary(
                '/ai.verta.registry.RegistryService/getUrlForArtifact',
                request_serializer=registry_dot_RegistryService__pb2.GetUrlForArtifact.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.GetUrlForArtifact.Response.FromString,
                )
        self.commitArtifactPart = channel.unary_unary(
                '/ai.verta.registry.RegistryService/commitArtifactPart',
                request_serializer=registry_dot_RegistryService__pb2.CommitArtifactPart.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.CommitArtifactPart.Response.FromString,
                )
        self.getCommittedArtifactParts = channel.unary_unary(
                '/ai.verta.registry.RegistryService/getCommittedArtifactParts',
                request_serializer=registry_dot_RegistryService__pb2.GetCommittedArtifactParts.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.GetCommittedArtifactParts.Response.FromString,
                )
        self.commitMultipartArtifact = channel.unary_unary(
                '/ai.verta.registry.RegistryService/commitMultipartArtifact',
                request_serializer=registry_dot_RegistryService__pb2.CommitMultipartArtifact.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.CommitMultipartArtifact.Response.FromString,
                )
        self.logDatasetsInModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/logDatasetsInModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.LogDatasetsInModelVersion.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.LogDatasetsInModelVersion.Response.FromString,
                )
        self.logCodeBlobInModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/logCodeBlobInModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.LogCodeBlobInModelVersion.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.LogCodeBlobInModelVersion.Response.FromString,
                )
        self.logAttributesInModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/logAttributesInModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.LogAttributesInModelVersion.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.LogAttributesInModelVersion.Response.FromString,
                )
        self.logDockerMetadataInModelVersion = channel.unary_unary(
                '/ai.verta.registry.RegistryService/logDockerMetadataInModelVersion',
                request_serializer=registry_dot_RegistryService__pb2.LogDockerMetadataInModelVersion.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.LogDockerMetadataInModelVersion.Response.FromString,
                )
        self.GetExternalDeployment = channel.unary_unary(
                '/ai.verta.registry.RegistryService/GetExternalDeployment',
                request_serializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.FromString,
                )
        self.CreateExternalDeployment = channel.unary_unary(
                '/ai.verta.registry.RegistryService/CreateExternalDeployment',
                request_serializer=registry_dot_RegistryService__pb2.ExternalDeployment.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.FromString,
                )
        self.UpdateExternalDeployment = channel.unary_unary(
                '/ai.verta.registry.RegistryService/UpdateExternalDeployment',
                request_serializer=registry_dot_RegistryService__pb2.ExternalDeployment.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.FromString,
                )
        self.DeleteExternalDeployment = channel.unary_unary(
                '/ai.verta.registry.RegistryService/DeleteExternalDeployment',
                request_serializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.SerializeToString,
                response_deserializer=registry_dot_RegistryService__pb2.Empty.FromString,
                )


class RegistryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindRegisteredModel(self, request, context):
        """CRUD for RegisteredModel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisteredModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisteredModelCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRegisteredModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRegisteredModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRegisteredModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindModelVersion(self, request, context):
        """CRUD for Model Version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLockModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUrlForArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commitArtifactPart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCommittedArtifactParts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commitMultipartArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logDatasetsInModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logCodeBlobInModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logAttributesInModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logDockerMetadataInModelVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExternalDeployment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateExternalDeployment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateExternalDeployment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExternalDeployment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindRegisteredModel': grpc.unary_unary_rpc_method_handler(
                    servicer.FindRegisteredModel,
                    request_deserializer=registry_dot_RegistryService__pb2.FindRegisteredModelRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.FindRegisteredModelRequest.Response.SerializeToString,
            ),
            'GetRegisteredModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisteredModel,
                    request_deserializer=registry_dot_RegistryService__pb2.GetRegisteredModelRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.GetRegisteredModelRequest.Response.SerializeToString,
            ),
            'GetRegisteredModelCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisteredModelCount,
                    request_deserializer=registry_dot_RegistryService__pb2.GetRegisteredModelCountRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.GetRegisteredModelCountRequest.Response.SerializeToString,
            ),
            'CreateRegisteredModel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRegisteredModel,
                    request_deserializer=registry_dot_RegistryService__pb2.SetRegisteredModel.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.SetRegisteredModel.Response.SerializeToString,
            ),
            'UpdateRegisteredModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRegisteredModel,
                    request_deserializer=registry_dot_RegistryService__pb2.SetRegisteredModel.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.SetRegisteredModel.Response.SerializeToString,
            ),
            'DeleteRegisteredModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRegisteredModel,
                    request_deserializer=registry_dot_RegistryService__pb2.DeleteRegisteredModelRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.DeleteRegisteredModelRequest.Response.SerializeToString,
            ),
            'FindModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.FindModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.FindModelVersionRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.FindModelVersionRequest.Response.SerializeToString,
            ),
            'GetModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.GetModelVersionRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.GetModelVersionRequest.Response.SerializeToString,
            ),
            'CreateModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.SetModelVersion.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.SetModelVersion.Response.SerializeToString,
            ),
            'UpdateModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.SetModelVersion.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.SetModelVersion.Response.SerializeToString,
            ),
            'SetLockModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLockModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.SetLockModelVersionRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.SetLockModelVersionRequest.Response.SerializeToString,
            ),
            'DeleteModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.DeleteModelVersionRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.DeleteModelVersionRequest.Response.SerializeToString,
            ),
            'getUrlForArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.getUrlForArtifact,
                    request_deserializer=registry_dot_RegistryService__pb2.GetUrlForArtifact.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.GetUrlForArtifact.Response.SerializeToString,
            ),
            'commitArtifactPart': grpc.unary_unary_rpc_method_handler(
                    servicer.commitArtifactPart,
                    request_deserializer=registry_dot_RegistryService__pb2.CommitArtifactPart.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.CommitArtifactPart.Response.SerializeToString,
            ),
            'getCommittedArtifactParts': grpc.unary_unary_rpc_method_handler(
                    servicer.getCommittedArtifactParts,
                    request_deserializer=registry_dot_RegistryService__pb2.GetCommittedArtifactParts.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.GetCommittedArtifactParts.Response.SerializeToString,
            ),
            'commitMultipartArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.commitMultipartArtifact,
                    request_deserializer=registry_dot_RegistryService__pb2.CommitMultipartArtifact.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.CommitMultipartArtifact.Response.SerializeToString,
            ),
            'logDatasetsInModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.logDatasetsInModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.LogDatasetsInModelVersion.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.LogDatasetsInModelVersion.Response.SerializeToString,
            ),
            'logCodeBlobInModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.logCodeBlobInModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.LogCodeBlobInModelVersion.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.LogCodeBlobInModelVersion.Response.SerializeToString,
            ),
            'logAttributesInModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.logAttributesInModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.LogAttributesInModelVersion.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.LogAttributesInModelVersion.Response.SerializeToString,
            ),
            'logDockerMetadataInModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.logDockerMetadataInModelVersion,
                    request_deserializer=registry_dot_RegistryService__pb2.LogDockerMetadataInModelVersion.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.LogDockerMetadataInModelVersion.Response.SerializeToString,
            ),
            'GetExternalDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExternalDeployment,
                    request_deserializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.SerializeToString,
            ),
            'CreateExternalDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExternalDeployment,
                    request_deserializer=registry_dot_RegistryService__pb2.ExternalDeployment.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.SerializeToString,
            ),
            'UpdateExternalDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateExternalDeployment,
                    request_deserializer=registry_dot_RegistryService__pb2.ExternalDeployment.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.SerializeToString,
            ),
            'DeleteExternalDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteExternalDeployment,
                    request_deserializer=registry_dot_RegistryService__pb2.ExternalDeploymentRequest.FromString,
                    response_serializer=registry_dot_RegistryService__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai.verta.registry.RegistryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegistryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindRegisteredModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/FindRegisteredModel',
            registry_dot_RegistryService__pb2.FindRegisteredModelRequest.SerializeToString,
            registry_dot_RegistryService__pb2.FindRegisteredModelRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegisteredModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/GetRegisteredModel',
            registry_dot_RegistryService__pb2.GetRegisteredModelRequest.SerializeToString,
            registry_dot_RegistryService__pb2.GetRegisteredModelRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegisteredModelCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/GetRegisteredModelCount',
            registry_dot_RegistryService__pb2.GetRegisteredModelCountRequest.SerializeToString,
            registry_dot_RegistryService__pb2.GetRegisteredModelCountRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRegisteredModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/CreateRegisteredModel',
            registry_dot_RegistryService__pb2.SetRegisteredModel.SerializeToString,
            registry_dot_RegistryService__pb2.SetRegisteredModel.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRegisteredModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/UpdateRegisteredModel',
            registry_dot_RegistryService__pb2.SetRegisteredModel.SerializeToString,
            registry_dot_RegistryService__pb2.SetRegisteredModel.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRegisteredModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/DeleteRegisteredModel',
            registry_dot_RegistryService__pb2.DeleteRegisteredModelRequest.SerializeToString,
            registry_dot_RegistryService__pb2.DeleteRegisteredModelRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/FindModelVersion',
            registry_dot_RegistryService__pb2.FindModelVersionRequest.SerializeToString,
            registry_dot_RegistryService__pb2.FindModelVersionRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/GetModelVersion',
            registry_dot_RegistryService__pb2.GetModelVersionRequest.SerializeToString,
            registry_dot_RegistryService__pb2.GetModelVersionRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/CreateModelVersion',
            registry_dot_RegistryService__pb2.SetModelVersion.SerializeToString,
            registry_dot_RegistryService__pb2.SetModelVersion.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/UpdateModelVersion',
            registry_dot_RegistryService__pb2.SetModelVersion.SerializeToString,
            registry_dot_RegistryService__pb2.SetModelVersion.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLockModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/SetLockModelVersion',
            registry_dot_RegistryService__pb2.SetLockModelVersionRequest.SerializeToString,
            registry_dot_RegistryService__pb2.SetLockModelVersionRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/DeleteModelVersion',
            registry_dot_RegistryService__pb2.DeleteModelVersionRequest.SerializeToString,
            registry_dot_RegistryService__pb2.DeleteModelVersionRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUrlForArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/getUrlForArtifact',
            registry_dot_RegistryService__pb2.GetUrlForArtifact.SerializeToString,
            registry_dot_RegistryService__pb2.GetUrlForArtifact.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commitArtifactPart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/commitArtifactPart',
            registry_dot_RegistryService__pb2.CommitArtifactPart.SerializeToString,
            registry_dot_RegistryService__pb2.CommitArtifactPart.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCommittedArtifactParts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/getCommittedArtifactParts',
            registry_dot_RegistryService__pb2.GetCommittedArtifactParts.SerializeToString,
            registry_dot_RegistryService__pb2.GetCommittedArtifactParts.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commitMultipartArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/commitMultipartArtifact',
            registry_dot_RegistryService__pb2.CommitMultipartArtifact.SerializeToString,
            registry_dot_RegistryService__pb2.CommitMultipartArtifact.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logDatasetsInModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/logDatasetsInModelVersion',
            registry_dot_RegistryService__pb2.LogDatasetsInModelVersion.SerializeToString,
            registry_dot_RegistryService__pb2.LogDatasetsInModelVersion.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logCodeBlobInModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/logCodeBlobInModelVersion',
            registry_dot_RegistryService__pb2.LogCodeBlobInModelVersion.SerializeToString,
            registry_dot_RegistryService__pb2.LogCodeBlobInModelVersion.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logAttributesInModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/logAttributesInModelVersion',
            registry_dot_RegistryService__pb2.LogAttributesInModelVersion.SerializeToString,
            registry_dot_RegistryService__pb2.LogAttributesInModelVersion.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logDockerMetadataInModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/logDockerMetadataInModelVersion',
            registry_dot_RegistryService__pb2.LogDockerMetadataInModelVersion.SerializeToString,
            registry_dot_RegistryService__pb2.LogDockerMetadataInModelVersion.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExternalDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/GetExternalDeployment',
            registry_dot_RegistryService__pb2.ExternalDeploymentRequest.SerializeToString,
            registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateExternalDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/CreateExternalDeployment',
            registry_dot_RegistryService__pb2.ExternalDeployment.SerializeToString,
            registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateExternalDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/UpdateExternalDeployment',
            registry_dot_RegistryService__pb2.ExternalDeployment.SerializeToString,
            registry_dot_RegistryService__pb2.ExternalDeploymentRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteExternalDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.registry.RegistryService/DeleteExternalDeployment',
            registry_dot_RegistryService__pb2.ExternalDeploymentRequest.SerializeToString,
            registry_dot_RegistryService__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
