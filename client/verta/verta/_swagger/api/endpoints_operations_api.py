# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from verta._swagger.api_client import ApiClient


class EndpointsOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def operations_manifest_post(self, body, **kwargs):  # noqa: E501
        """Download the manifest to deploy to Verta via configuration as code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operations_manifest_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OperationsManifest body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operations_manifest_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.operations_manifest_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def operations_manifest_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download the manifest to deploy to Verta via configuration as code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operations_manifest_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OperationsManifest body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operations_manifest_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `operations_manifest_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/operations/manifest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get  # noqa: E501

        Get the metrics available for use as autoscaling parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get_with_http_info(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get  # noqa: E501

        Get the metrics available for use as autoscaling parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get_with_http_info(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_autoscalingmetrics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/autoscalingmetrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get  # noqa: E501

        Get the rules available for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :param int build_id: ID of the build
        :param str before: blob marking the cursor used to find the results before the last set
        :param int count: max number of entries to return
        :return: StageLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get_with_http_info(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get  # noqa: E501

        Get the rules available for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get_with_http_info(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :param int build_id: ID of the build
        :param str before: blob marking the cursor used to find the results before the last set
        :param int count: max number of entries to return
        :return: StageLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id', 'build_id', 'before', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_logs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []
        if 'build_id' in params:
            query_params.append(('buildId', params['build_id']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StageLogs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get(self, workspace_name, endpoint_id, stage_id, start, end, time_step, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get  # noqa: E501

        Get the rollout status over time for an endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get(workspace_name, endpoint_id, stage_id, start, end, time_step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :param int start: Start time of the query in seconds since epoch, in UTC (required)
        :param int end: End time of the query in seconds since epoch, in UTC (required)
        :param int time_step: Time in seconds to skip between samples (required)
        :return: CanaryRollout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get_with_http_info(workspace_name, endpoint_id, stage_id, start, end, time_step, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get_with_http_info(workspace_name, endpoint_id, stage_id, start, end, time_step, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get_with_http_info(self, workspace_name, endpoint_id, stage_id, start, end, time_step, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get  # noqa: E501

        Get the rollout status over time for an endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get_with_http_info(workspace_name, endpoint_id, stage_id, start, end, time_step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :param int start: Start time of the query in seconds since epoch, in UTC (required)
        :param int end: End time of the query in seconds since epoch, in UTC (required)
        :param int time_step: Time in seconds to skip between samples (required)
        :return: CanaryRollout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id', 'start', 'end', 'time_step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get`")  # noqa: E501
        # verify the required parameter 'time_step' is set
        if ('time_step' not in params or
                params['time_step'] is None):
            raise ValueError("Missing the required parameter `time_step` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rollout_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'time_step' in params:
            query_params.append(('time_step', params['time_step']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/rollout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CanaryRollout',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get  # noqa: E501

        Get the rules available for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get_with_http_info(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get  # noqa: E501

        Get the rules available for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get_with_http_info(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_rules_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put  # noqa: E501

        Disables prediction in the stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put_with_http_info(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put  # noqa: E501

        Disables prediction in the stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put_with_http_info(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_shutdown_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/shutdown', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get  # noqa: E501

        Get update status on the endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: StageStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get_with_http_info(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get  # noqa: E501

        Get update status on the endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get_with_http_info(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: StageStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StageStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete  # noqa: E501

        Stops an update and rollback to the previous stable version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete_with_http_info(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete  # noqa: E501

        Stops an update and rollback to the previous stable version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete_with_http_info(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/update', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put(self, body, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put  # noqa: E501

        Perform an update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put(body, workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StageUpdateRequest body: (required)
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put_with_http_info(body, workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put_with_http_info(body, workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put_with_http_info(self, body, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put  # noqa: E501

        Perform an update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put_with_http_info(body, workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StageUpdateRequest body: (required)
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'endpoint_id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_update_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get  # noqa: E501

        List previous versions of the stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get_with_http_info(workspace_name, endpoint_id, stage_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get_with_http_info(self, workspace_name, endpoint_id, stage_id, **kwargs):  # noqa: E501
        """workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get  # noqa: E501

        List previous versions of the stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get_with_http_info(workspace_name, endpoint_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the endpoint is located (required)
        :param int endpoint_id: ID of the endpoint (required)
        :param int stage_id: ID of the stage (required)
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'endpoint_id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `workspace_workspace_name_endpoints_endpoint_id_stages_stage_id_versions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/endpoints/{endpointId}/stages/{stageId}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2002]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
