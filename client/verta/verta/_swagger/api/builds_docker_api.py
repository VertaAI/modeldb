# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BuildsDockerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def builds_build_id_dockercontext_get(self, build_id, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_dockercontext_get(build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: ID of the build (required)
        :param bool self_contained:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_build_id_dockercontext_get_with_http_info(build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_build_id_dockercontext_get_with_http_info(build_id, **kwargs)  # noqa: E501
            return data

    def builds_build_id_dockercontext_get_with_http_info(self, build_id, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_dockercontext_get_with_http_info(build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: ID of the build (required)
        :param bool self_contained:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id', 'self_contained']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_build_id_dockercontext_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_build_id_dockercontext_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []
        if 'self_contained' in params:
            query_params.append(('self_contained', params['self_contained']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/{buildId}/dockercontext', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_dockercontext_get(self, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str run_id:
        :param int model_version_id:
        :param bool self_contained:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_dockercontext_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.builds_dockercontext_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def builds_dockercontext_get_with_http_info(self, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str run_id:
        :param int model_version_id:
        :param bool self_contained:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['run_id', 'model_version_id', 'self_contained']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_dockercontext_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501
        if 'model_version_id' in params:
            query_params.append(('model_version_id', params['model_version_id']))  # noqa: E501
        if 'self_contained' in params:
            query_params.append(('self_contained', params['self_contained']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/dockercontext', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_dockercontext_post(self, body, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildCreate body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_dockercontext_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_dockercontext_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def builds_dockercontext_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildCreate body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_dockercontext_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `builds_dockercontext_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/dockercontext', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_dockercontext_update_artifacts_get(self, base_image, **kwargs):  # noqa: E501
        """Download a docker context to update an image with different artifacts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_update_artifacts_get(base_image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_image: (required)
        :param str run_id:
        :param int model_version_id:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_dockercontext_update_artifacts_get_with_http_info(base_image, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_dockercontext_update_artifacts_get_with_http_info(base_image, **kwargs)  # noqa: E501
            return data

    def builds_dockercontext_update_artifacts_get_with_http_info(self, base_image, **kwargs):  # noqa: E501
        """Download a docker context to update an image with different artifacts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_update_artifacts_get_with_http_info(base_image, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_image: (required)
        :param str run_id:
        :param int model_version_id:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base_image', 'run_id', 'model_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_dockercontext_update_artifacts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'base_image' is set
        if ('base_image' not in params or
                params['base_image'] is None):
            raise ValueError("Missing the required parameter `base_image` when calling `builds_dockercontext_update_artifacts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501
        if 'model_version_id' in params:
            query_params.append(('model_version_id', params['model_version_id']))  # noqa: E501
        if 'base_image' in params:
            query_params.append(('base_image', params['base_image']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/dockercontext/update-artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_dockercontext_update_artifacts_post(self, body, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_update_artifacts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildUpdateArtifacts body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_dockercontext_update_artifacts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_dockercontext_update_artifacts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def builds_dockercontext_update_artifacts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_dockercontext_update_artifacts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildUpdateArtifacts body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_dockercontext_update_artifacts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `builds_dockercontext_update_artifacts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/dockercontext/update-artifacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_build_id_dockercontext_get(self, workspace_name, build_id, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_dockercontext_get(workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :param bool self_contained:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_build_id_dockercontext_get_with_http_info(workspace_name, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_build_id_dockercontext_get_with_http_info(workspace_name, build_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_build_id_dockercontext_get_with_http_info(self, workspace_name, build_id, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_dockercontext_get_with_http_info(workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :param bool self_contained:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'build_id', 'self_contained']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_build_id_dockercontext_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_build_id_dockercontext_get`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `workspace_workspace_name_builds_build_id_dockercontext_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []
        if 'self_contained' in params:
            query_params.append(('self_contained', params['self_contained']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds/{buildId}/dockercontext', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_build_id_dockercontext_post(self, body, workspace_name, build_id, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_dockercontext_post(body, workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildCreate body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_build_id_dockercontext_post_with_http_info(body, workspace_name, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_build_id_dockercontext_post_with_http_info(body, workspace_name, build_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_build_id_dockercontext_post_with_http_info(self, body, workspace_name, build_id, **kwargs):  # noqa: E501
        """Download a docker context to build an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_dockercontext_post_with_http_info(body, workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildCreate body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_build_id_dockercontext_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workspace_workspace_name_builds_build_id_dockercontext_post`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_build_id_dockercontext_post`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `workspace_workspace_name_builds_build_id_dockercontext_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds/{buildId}/dockercontext', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
