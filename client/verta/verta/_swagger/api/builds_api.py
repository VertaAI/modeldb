# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class BuildsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def builds_build_id_delete(self, build_id, **kwargs):  # noqa: E501
        """Delete a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_delete(build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_build_id_delete_with_http_info(build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_build_id_delete_with_http_info(build_id, **kwargs)  # noqa: E501
            return data

    def builds_build_id_delete_with_http_info(self, build_id, **kwargs):  # noqa: E501
        """Delete a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_delete_with_http_info(build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_build_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_build_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/{buildId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_build_id_get(self, build_id, **kwargs):  # noqa: E501
        """Get information about a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_get(build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: ID of the build (required)
        :return: BuildResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_build_id_get_with_http_info(build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_build_id_get_with_http_info(build_id, **kwargs)  # noqa: E501
            return data

    def builds_build_id_get_with_http_info(self, build_id, **kwargs):  # noqa: E501
        """Get information about a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_get_with_http_info(build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: ID of the build (required)
        :return: BuildResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_build_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_build_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/{buildId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_build_id_message_put(self, body, build_id, **kwargs):  # noqa: E501
        """Update the message of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_message_put(body, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_build_id_message_put_with_http_info(body, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_build_id_message_put_with_http_info(body, build_id, **kwargs)  # noqa: E501
            return data

    def builds_build_id_message_put_with_http_info(self, body, build_id, **kwargs):  # noqa: E501
        """Update the message of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_message_put_with_http_info(body, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_build_id_message_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `builds_build_id_message_put`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_build_id_message_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/{buildId}/message', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_build_id_status_put(self, body, build_id, **kwargs):  # noqa: E501
        """Update the status of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_status_put(body, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_build_id_status_put_with_http_info(body, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_build_id_status_put_with_http_info(body, build_id, **kwargs)  # noqa: E501
            return data

    def builds_build_id_status_put_with_http_info(self, body, build_id, **kwargs):  # noqa: E501
        """Update the status of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_build_id_status_put_with_http_info(body, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_build_id_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `builds_build_id_status_put`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_build_id_status_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds/{buildId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_get(self, **kwargs):  # noqa: E501
        """List builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located
        :param str run_id: ID of the experiment run to search for
        :param int model_version_id: ID of the model version to search for
        :param list[str] status: Fetch only build that have the given status
        :param int limit:
        :return: BuildsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.builds_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def builds_get_with_http_info(self, **kwargs):  # noqa: E501
        """List builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located
        :param str run_id: ID of the experiment run to search for
        :param int model_version_id: ID of the model version to search for
        :param list[str] status: Fetch only build that have the given status
        :param int limit:
        :return: BuildsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'run_id', 'model_version_id', 'status', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'workspace_name' in params:
            query_params.append(('workspaceName', params['workspace_name']))  # noqa: E501
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501
        if 'model_version_id' in params:
            query_params.append(('model_version_id', params['model_version_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_build_id_delete(self, workspace_name, build_id, **kwargs):  # noqa: E501
        """Delete a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_delete(workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_build_id_delete_with_http_info(workspace_name, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_build_id_delete_with_http_info(workspace_name, build_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_build_id_delete_with_http_info(self, workspace_name, build_id, **kwargs):  # noqa: E501
        """Delete a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_delete_with_http_info(workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_build_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_build_id_delete`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `workspace_workspace_name_builds_build_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds/{buildId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_build_id_get(self, workspace_name, build_id, **kwargs):  # noqa: E501
        """Get information about a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_get(workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: BuildResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_build_id_get_with_http_info(workspace_name, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_build_id_get_with_http_info(workspace_name, build_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_build_id_get_with_http_info(self, workspace_name, build_id, **kwargs):  # noqa: E501
        """Get information about a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_get_with_http_info(workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: BuildResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_build_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_build_id_get`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `workspace_workspace_name_builds_build_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds/{buildId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_build_id_message_put(self, body, workspace_name, build_id, **kwargs):  # noqa: E501
        """Update the message of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_message_put(body, workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_build_id_message_put_with_http_info(body, workspace_name, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_build_id_message_put_with_http_info(body, workspace_name, build_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_build_id_message_put_with_http_info(self, body, workspace_name, build_id, **kwargs):  # noqa: E501
        """Update the message of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_message_put_with_http_info(body, workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_build_id_message_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workspace_workspace_name_builds_build_id_message_put`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_build_id_message_put`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `workspace_workspace_name_builds_build_id_message_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds/{buildId}/message', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_build_id_status_put(self, body, workspace_name, build_id, **kwargs):  # noqa: E501
        """Update the status of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_status_put(body, workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_build_id_status_put_with_http_info(body, workspace_name, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_build_id_status_put_with_http_info(body, workspace_name, build_id, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_build_id_status_put_with_http_info(self, body, workspace_name, build_id, **kwargs):  # noqa: E501
        """Update the status of a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_build_id_status_put_with_http_info(body, workspace_name, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param int build_id: ID of the build (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_build_id_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workspace_workspace_name_builds_build_id_status_put`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_build_id_status_put`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `workspace_workspace_name_builds_build_id_status_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds/{buildId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_get(self, workspace_name, **kwargs):  # noqa: E501
        """List builds in the workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_get(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param str run_id: ID of the experiment run to search for
        :param int model_version_id: ID of the model version to search for
        :param list[str] status: Fetch only build that have the given status
        :return: BuildsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_get_with_http_info(workspace_name, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_get_with_http_info(workspace_name, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_get_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """List builds in the workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_get_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :param str run_id: ID of the experiment run to search for
        :param int model_version_id: ID of the model version to search for
        :param list[str] status: Fetch only build that have the given status
        :return: BuildsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'run_id', 'model_version_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501

        query_params = []
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501
        if 'model_version_id' in params:
            query_params.append(('model_version_id', params['model_version_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_workspace_name_builds_post(self, body, workspace_name, **kwargs):  # noqa: E501
        """Create a new build in the workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_post(body, workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildCreate body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :return: BuildResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_workspace_name_builds_post_with_http_info(body, workspace_name, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_workspace_name_builds_post_with_http_info(body, workspace_name, **kwargs)  # noqa: E501
            return data

    def workspace_workspace_name_builds_post_with_http_info(self, body, workspace_name, **kwargs):  # noqa: E501
        """Create a new build in the workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_workspace_name_builds_post_with_http_info(body, workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildCreate body: (required)
        :param str workspace_name: Name of the workspace in which the build is located (required)
        :return: BuildResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_workspace_name_builds_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `workspace_workspace_name_builds_post`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `workspace_workspace_name_builds_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspace/{workspaceName}/builds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
