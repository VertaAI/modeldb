# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KafkaConfigKerberos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_name': 'str',
        'conf': 'str',
        'keytab': 'str',
        'service_name': 'str'
    }

    attribute_map = {
        'client_name': 'client_name',
        'conf': 'conf',
        'keytab': 'keytab',
        'service_name': 'service_name'
    }

    def __init__(self, client_name=None, conf=None, keytab=None, service_name=None):  # noqa: E501
        """KafkaConfigKerberos - a model defined in Swagger"""  # noqa: E501
        self._client_name = None
        self._conf = None
        self._keytab = None
        self._service_name = None
        self.discriminator = None
        if client_name is not None:
            self.client_name = client_name
        if conf is not None:
            self.conf = conf
        if keytab is not None:
            self.keytab = keytab
        if service_name is not None:
            self.service_name = service_name

    @property
    def client_name(self):
        """Gets the client_name of this KafkaConfigKerberos.  # noqa: E501


        :return: The client_name of this KafkaConfigKerberos.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this KafkaConfigKerberos.


        :param client_name: The client_name of this KafkaConfigKerberos.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def conf(self):
        """Gets the conf of this KafkaConfigKerberos.  # noqa: E501


        :return: The conf of this KafkaConfigKerberos.  # noqa: E501
        :rtype: str
        """
        return self._conf

    @conf.setter
    def conf(self, conf):
        """Sets the conf of this KafkaConfigKerberos.


        :param conf: The conf of this KafkaConfigKerberos.  # noqa: E501
        :type: str
        """

        self._conf = conf

    @property
    def keytab(self):
        """Gets the keytab of this KafkaConfigKerberos.  # noqa: E501


        :return: The keytab of this KafkaConfigKerberos.  # noqa: E501
        :rtype: str
        """
        return self._keytab

    @keytab.setter
    def keytab(self, keytab):
        """Sets the keytab of this KafkaConfigKerberos.


        :param keytab: The keytab of this KafkaConfigKerberos.  # noqa: E501
        :type: str
        """

        self._keytab = keytab

    @property
    def service_name(self):
        """Gets the service_name of this KafkaConfigKerberos.  # noqa: E501


        :return: The service_name of this KafkaConfigKerberos.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this KafkaConfigKerberos.


        :param service_name: The service_name of this KafkaConfigKerberos.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KafkaConfigKerberos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KafkaConfigKerberos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
