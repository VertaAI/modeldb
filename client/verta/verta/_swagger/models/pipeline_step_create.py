# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PipelineStepCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'model_version_id': 'int',
        'pipeline_id': 'int',
        'manifest': 'PipelineStepManifest',
        'attributes': 'PipelineStepAttributes'
    }

    attribute_map = {
        'name': 'name',
        'model_version_id': 'model_version_id',
        'pipeline_id': 'pipeline_id',
        'manifest': 'manifest',
        'attributes': 'attributes'
    }

    def __init__(self, name=None, model_version_id=None, pipeline_id=None, manifest=None, attributes=None):  # noqa: E501
        """PipelineStepCreate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._model_version_id = None
        self._pipeline_id = None
        self._manifest = None
        self._attributes = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if model_version_id is not None:
            self.model_version_id = model_version_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if manifest is not None:
            self.manifest = manifest
        if attributes is not None:
            self.attributes = attributes

    @property
    def name(self):
        """Gets the name of this PipelineStepCreate.  # noqa: E501


        :return: The name of this PipelineStepCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineStepCreate.


        :param name: The name of this PipelineStepCreate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model_version_id(self):
        """Gets the model_version_id of this PipelineStepCreate.  # noqa: E501


        :return: The model_version_id of this PipelineStepCreate.  # noqa: E501
        :rtype: int
        """
        return self._model_version_id

    @model_version_id.setter
    def model_version_id(self, model_version_id):
        """Sets the model_version_id of this PipelineStepCreate.


        :param model_version_id: The model_version_id of this PipelineStepCreate.  # noqa: E501
        :type: int
        """

        self._model_version_id = model_version_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PipelineStepCreate.  # noqa: E501


        :return: The pipeline_id of this PipelineStepCreate.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PipelineStepCreate.


        :param pipeline_id: The pipeline_id of this PipelineStepCreate.  # noqa: E501
        :type: int
        """

        self._pipeline_id = pipeline_id

    @property
    def manifest(self):
        """Gets the manifest of this PipelineStepCreate.  # noqa: E501


        :return: The manifest of this PipelineStepCreate.  # noqa: E501
        :rtype: PipelineStepManifest
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this PipelineStepCreate.


        :param manifest: The manifest of this PipelineStepCreate.  # noqa: E501
        :type: PipelineStepManifest
        """

        self._manifest = manifest

    @property
    def attributes(self):
        """Gets the attributes of this PipelineStepCreate.  # noqa: E501


        :return: The attributes of this PipelineStepCreate.  # noqa: E501
        :rtype: PipelineStepAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PipelineStepCreate.


        :param attributes: The attributes of this PipelineStepCreate.  # noqa: E501
        :type: PipelineStepAttributes
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineStepCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineStepCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
