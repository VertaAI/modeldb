# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KafkaConfigUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_config_id': 'str',
        'input_topic': 'str',
        'output_topic': 'str',
        'error_topic': 'str',
        'disabled': 'bool',
        'reprocess_from_scratch': 'bool',
        'reprocess_from_index': 'int',
        'reprocess_from_timestamp': 'str'
    }

    attribute_map = {
        'cluster_config_id': 'cluster_config_id',
        'input_topic': 'input_topic',
        'output_topic': 'output_topic',
        'error_topic': 'error_topic',
        'disabled': 'disabled',
        'reprocess_from_scratch': 'reprocess_from_scratch',
        'reprocess_from_index': 'reprocess_from_index',
        'reprocess_from_timestamp': 'reprocess_from_timestamp'
    }

    def __init__(self, cluster_config_id=None, input_topic=None, output_topic=None, error_topic=None, disabled=False, reprocess_from_scratch=None, reprocess_from_index=None, reprocess_from_timestamp=None):  # noqa: E501
        """KafkaConfigUpdate - a model defined in Swagger"""  # noqa: E501
        self._cluster_config_id = None
        self._input_topic = None
        self._output_topic = None
        self._error_topic = None
        self._disabled = None
        self._reprocess_from_scratch = None
        self._reprocess_from_index = None
        self._reprocess_from_timestamp = None
        self.discriminator = None
        if cluster_config_id is not None:
            self.cluster_config_id = cluster_config_id
        if input_topic is not None:
            self.input_topic = input_topic
        if output_topic is not None:
            self.output_topic = output_topic
        if error_topic is not None:
            self.error_topic = error_topic
        if disabled is not None:
            self.disabled = disabled
        if reprocess_from_scratch is not None:
            self.reprocess_from_scratch = reprocess_from_scratch
        if reprocess_from_index is not None:
            self.reprocess_from_index = reprocess_from_index
        if reprocess_from_timestamp is not None:
            self.reprocess_from_timestamp = reprocess_from_timestamp

    @property
    def cluster_config_id(self):
        """Gets the cluster_config_id of this KafkaConfigUpdate.  # noqa: E501


        :return: The cluster_config_id of this KafkaConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._cluster_config_id

    @cluster_config_id.setter
    def cluster_config_id(self, cluster_config_id):
        """Sets the cluster_config_id of this KafkaConfigUpdate.


        :param cluster_config_id: The cluster_config_id of this KafkaConfigUpdate.  # noqa: E501
        :type: str
        """

        self._cluster_config_id = cluster_config_id

    @property
    def input_topic(self):
        """Gets the input_topic of this KafkaConfigUpdate.  # noqa: E501


        :return: The input_topic of this KafkaConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._input_topic

    @input_topic.setter
    def input_topic(self, input_topic):
        """Sets the input_topic of this KafkaConfigUpdate.


        :param input_topic: The input_topic of this KafkaConfigUpdate.  # noqa: E501
        :type: str
        """

        self._input_topic = input_topic

    @property
    def output_topic(self):
        """Gets the output_topic of this KafkaConfigUpdate.  # noqa: E501


        :return: The output_topic of this KafkaConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._output_topic

    @output_topic.setter
    def output_topic(self, output_topic):
        """Sets the output_topic of this KafkaConfigUpdate.


        :param output_topic: The output_topic of this KafkaConfigUpdate.  # noqa: E501
        :type: str
        """

        self._output_topic = output_topic

    @property
    def error_topic(self):
        """Gets the error_topic of this KafkaConfigUpdate.  # noqa: E501


        :return: The error_topic of this KafkaConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._error_topic

    @error_topic.setter
    def error_topic(self, error_topic):
        """Sets the error_topic of this KafkaConfigUpdate.


        :param error_topic: The error_topic of this KafkaConfigUpdate.  # noqa: E501
        :type: str
        """

        self._error_topic = error_topic

    @property
    def disabled(self):
        """Gets the disabled of this KafkaConfigUpdate.  # noqa: E501


        :return: The disabled of this KafkaConfigUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this KafkaConfigUpdate.


        :param disabled: The disabled of this KafkaConfigUpdate.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def reprocess_from_scratch(self):
        """Gets the reprocess_from_scratch of this KafkaConfigUpdate.  # noqa: E501


        :return: The reprocess_from_scratch of this KafkaConfigUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._reprocess_from_scratch

    @reprocess_from_scratch.setter
    def reprocess_from_scratch(self, reprocess_from_scratch):
        """Sets the reprocess_from_scratch of this KafkaConfigUpdate.


        :param reprocess_from_scratch: The reprocess_from_scratch of this KafkaConfigUpdate.  # noqa: E501
        :type: bool
        """

        self._reprocess_from_scratch = reprocess_from_scratch

    @property
    def reprocess_from_index(self):
        """Gets the reprocess_from_index of this KafkaConfigUpdate.  # noqa: E501


        :return: The reprocess_from_index of this KafkaConfigUpdate.  # noqa: E501
        :rtype: int
        """
        return self._reprocess_from_index

    @reprocess_from_index.setter
    def reprocess_from_index(self, reprocess_from_index):
        """Sets the reprocess_from_index of this KafkaConfigUpdate.


        :param reprocess_from_index: The reprocess_from_index of this KafkaConfigUpdate.  # noqa: E501
        :type: int
        """

        self._reprocess_from_index = reprocess_from_index

    @property
    def reprocess_from_timestamp(self):
        """Gets the reprocess_from_timestamp of this KafkaConfigUpdate.  # noqa: E501


        :return: The reprocess_from_timestamp of this KafkaConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._reprocess_from_timestamp

    @reprocess_from_timestamp.setter
    def reprocess_from_timestamp(self, reprocess_from_timestamp):
        """Sets the reprocess_from_timestamp of this KafkaConfigUpdate.


        :param reprocess_from_timestamp: The reprocess_from_timestamp of this KafkaConfigUpdate.  # noqa: E501
        :type: str
        """

        self._reprocess_from_timestamp = reprocess_from_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KafkaConfigUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KafkaConfigUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
