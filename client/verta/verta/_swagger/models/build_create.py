# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BuildCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_id': 'str',
        'model_version_id': 'int',
        'self_contained': 'bool',
        'external_location': 'str',
        'requires_root': 'bool',
        'uses_flask': 'bool',
        'scan_external': 'bool'
    }

    attribute_map = {
        'run_id': 'run_id',
        'model_version_id': 'model_version_id',
        'self_contained': 'self_contained',
        'external_location': 'external_location',
        'requires_root': 'requires_root',
        'uses_flask': 'uses_flask',
        'scan_external': 'scan_external'
    }

    def __init__(self, run_id=None, model_version_id=None, self_contained=None, external_location=None, requires_root=False, uses_flask=False, scan_external=False):  # noqa: E501
        """BuildCreate - a model defined in Swagger"""  # noqa: E501
        self._run_id = None
        self._model_version_id = None
        self._self_contained = None
        self._external_location = None
        self._requires_root = None
        self._uses_flask = None
        self._scan_external = None
        self.discriminator = None
        if run_id is not None:
            self.run_id = run_id
        if model_version_id is not None:
            self.model_version_id = model_version_id
        if self_contained is not None:
            self.self_contained = self_contained
        if external_location is not None:
            self.external_location = external_location
        if requires_root is not None:
            self.requires_root = requires_root
        if uses_flask is not None:
            self.uses_flask = uses_flask
        if scan_external is not None:
            self.scan_external = scan_external

    @property
    def run_id(self):
        """Gets the run_id of this BuildCreate.  # noqa: E501


        :return: The run_id of this BuildCreate.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this BuildCreate.


        :param run_id: The run_id of this BuildCreate.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def model_version_id(self):
        """Gets the model_version_id of this BuildCreate.  # noqa: E501


        :return: The model_version_id of this BuildCreate.  # noqa: E501
        :rtype: int
        """
        return self._model_version_id

    @model_version_id.setter
    def model_version_id(self, model_version_id):
        """Sets the model_version_id of this BuildCreate.


        :param model_version_id: The model_version_id of this BuildCreate.  # noqa: E501
        :type: int
        """

        self._model_version_id = model_version_id

    @property
    def self_contained(self):
        """Gets the self_contained of this BuildCreate.  # noqa: E501


        :return: The self_contained of this BuildCreate.  # noqa: E501
        :rtype: bool
        """
        return self._self_contained

    @self_contained.setter
    def self_contained(self, self_contained):
        """Sets the self_contained of this BuildCreate.


        :param self_contained: The self_contained of this BuildCreate.  # noqa: E501
        :type: bool
        """

        self._self_contained = self_contained

    @property
    def external_location(self):
        """Gets the external_location of this BuildCreate.  # noqa: E501


        :return: The external_location of this BuildCreate.  # noqa: E501
        :rtype: str
        """
        return self._external_location

    @external_location.setter
    def external_location(self, external_location):
        """Sets the external_location of this BuildCreate.


        :param external_location: The external_location of this BuildCreate.  # noqa: E501
        :type: str
        """

        self._external_location = external_location

    @property
    def requires_root(self):
        """Gets the requires_root of this BuildCreate.  # noqa: E501


        :return: The requires_root of this BuildCreate.  # noqa: E501
        :rtype: bool
        """
        return self._requires_root

    @requires_root.setter
    def requires_root(self, requires_root):
        """Sets the requires_root of this BuildCreate.


        :param requires_root: The requires_root of this BuildCreate.  # noqa: E501
        :type: bool
        """

        self._requires_root = requires_root

    @property
    def uses_flask(self):
        """Gets the uses_flask of this BuildCreate.  # noqa: E501


        :return: The uses_flask of this BuildCreate.  # noqa: E501
        :rtype: bool
        """
        return self._uses_flask

    @uses_flask.setter
    def uses_flask(self, uses_flask):
        """Sets the uses_flask of this BuildCreate.


        :param uses_flask: The uses_flask of this BuildCreate.  # noqa: E501
        :type: bool
        """

        self._uses_flask = uses_flask

    @property
    def scan_external(self):
        """Gets the scan_external of this BuildCreate.  # noqa: E501


        :return: The scan_external of this BuildCreate.  # noqa: E501
        :rtype: bool
        """
        return self._scan_external

    @scan_external.setter
    def scan_external(self, scan_external):
        """Sets the scan_external of this BuildCreate.


        :param scan_external: The scan_external of this BuildCreate.  # noqa: E501
        :type: bool
        """

        self._scan_external = scan_external

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuildCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
