# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BuildResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'status': 'BuildStatus',
        'message': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'creator_request': 'BuildCreate',
        'location': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'message': 'message',
        'date_created': 'date_created',
        'date_updated': 'date_updated',
        'creator_request': 'creator_request',
        'location': 'location'
    }

    def __init__(self, id=None, status=None, message=None, date_created=None, date_updated=None, creator_request=None, location=None):  # noqa: E501
        """BuildResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._message = None
        self._date_created = None
        self._date_updated = None
        self._creator_request = None
        self._location = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if creator_request is not None:
            self.creator_request = creator_request
        if location is not None:
            self.location = location

    @property
    def id(self):
        """Gets the id of this BuildResponse.  # noqa: E501


        :return: The id of this BuildResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildResponse.


        :param id: The id of this BuildResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this BuildResponse.  # noqa: E501


        :return: The status of this BuildResponse.  # noqa: E501
        :rtype: BuildStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildResponse.


        :param status: The status of this BuildResponse.  # noqa: E501
        :type: BuildStatus
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this BuildResponse.  # noqa: E501


        :return: The message of this BuildResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BuildResponse.


        :param message: The message of this BuildResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def date_created(self):
        """Gets the date_created of this BuildResponse.  # noqa: E501


        :return: The date_created of this BuildResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BuildResponse.


        :param date_created: The date_created of this BuildResponse.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this BuildResponse.  # noqa: E501


        :return: The date_updated of this BuildResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this BuildResponse.


        :param date_updated: The date_updated of this BuildResponse.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def creator_request(self):
        """Gets the creator_request of this BuildResponse.  # noqa: E501


        :return: The creator_request of this BuildResponse.  # noqa: E501
        :rtype: BuildCreate
        """
        return self._creator_request

    @creator_request.setter
    def creator_request(self, creator_request):
        """Sets the creator_request of this BuildResponse.


        :param creator_request: The creator_request of this BuildResponse.  # noqa: E501
        :type: BuildCreate
        """

        self._creator_request = creator_request

    @property
    def location(self):
        """Gets the location of this BuildResponse.  # noqa: E501


        :return: The location of this BuildResponse.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BuildResponse.


        :param location: The location of this BuildResponse.  # noqa: E501
        :type: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuildResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
