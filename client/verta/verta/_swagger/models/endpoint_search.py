# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndpointSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workspace_name': 'str',
        'ids': 'list[int]',
        'exact_paths': 'list[str]',
        'fuzzy_paths': 'list[str]',
        'labels': 'list[str]'
    }

    attribute_map = {
        'workspace_name': 'workspaceName',
        'ids': 'ids',
        'exact_paths': 'exactPaths',
        'fuzzy_paths': 'fuzzyPaths',
        'labels': 'labels'
    }

    def __init__(self, workspace_name=None, ids=None, exact_paths=None, fuzzy_paths=None, labels=None):  # noqa: E501
        """EndpointSearch - a model defined in Swagger"""  # noqa: E501
        self._workspace_name = None
        self._ids = None
        self._exact_paths = None
        self._fuzzy_paths = None
        self._labels = None
        self.discriminator = None
        if workspace_name is not None:
            self.workspace_name = workspace_name
        if ids is not None:
            self.ids = ids
        if exact_paths is not None:
            self.exact_paths = exact_paths
        if fuzzy_paths is not None:
            self.fuzzy_paths = fuzzy_paths
        if labels is not None:
            self.labels = labels

    @property
    def workspace_name(self):
        """Gets the workspace_name of this EndpointSearch.  # noqa: E501

        Workspace name  # noqa: E501

        :return: The workspace_name of this EndpointSearch.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this EndpointSearch.

        Workspace name  # noqa: E501

        :param workspace_name: The workspace_name of this EndpointSearch.  # noqa: E501
        :type: str
        """

        self._workspace_name = workspace_name

    @property
    def ids(self):
        """Gets the ids of this EndpointSearch.  # noqa: E501


        :return: The ids of this EndpointSearch.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this EndpointSearch.


        :param ids: The ids of this EndpointSearch.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def exact_paths(self):
        """Gets the exact_paths of this EndpointSearch.  # noqa: E501

        List of endpoint paths, uses \"OR\" logic when multiple provided.  # noqa: E501

        :return: The exact_paths of this EndpointSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._exact_paths

    @exact_paths.setter
    def exact_paths(self, exact_paths):
        """Sets the exact_paths of this EndpointSearch.

        List of endpoint paths, uses \"OR\" logic when multiple provided.  # noqa: E501

        :param exact_paths: The exact_paths of this EndpointSearch.  # noqa: E501
        :type: list[str]
        """

        self._exact_paths = exact_paths

    @property
    def fuzzy_paths(self):
        """Gets the fuzzy_paths of this EndpointSearch.  # noqa: E501

        List of partial endpoint paths to match as substring, uses \"OR\" logic when multiple provided.  # noqa: E501

        :return: The fuzzy_paths of this EndpointSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._fuzzy_paths

    @fuzzy_paths.setter
    def fuzzy_paths(self, fuzzy_paths):
        """Sets the fuzzy_paths of this EndpointSearch.

        List of partial endpoint paths to match as substring, uses \"OR\" logic when multiple provided.  # noqa: E501

        :param fuzzy_paths: The fuzzy_paths of this EndpointSearch.  # noqa: E501
        :type: list[str]
        """

        self._fuzzy_paths = fuzzy_paths

    @property
    def labels(self):
        """Gets the labels of this EndpointSearch.  # noqa: E501

        Endpoint labels to match for query.  # noqa: E501

        :return: The labels of this EndpointSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EndpointSearch.

        Endpoint labels to match for query.  # noqa: E501

        :param labels: The labels of this EndpointSearch.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
