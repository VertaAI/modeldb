# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StageUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strategy': 'str',
        'build_id': 'int',
        'canary_strategy': 'CanaryStrategy',
        'resources': 'StageUpdateRequestResources',
        'env': 'list[StageUpdateRequestEnv]',
        'autoscaling': 'AutoscalingRequest',
        'isolation_level': 'IsolationLevel'
    }

    attribute_map = {
        'strategy': 'strategy',
        'build_id': 'build_id',
        'canary_strategy': 'canary_strategy',
        'resources': 'resources',
        'env': 'env',
        'autoscaling': 'autoscaling',
        'isolation_level': 'isolation_level'
    }

    def __init__(self, strategy=None, build_id=None, canary_strategy=None, resources=None, env=None, autoscaling=None, isolation_level=None):  # noqa: E501
        """StageUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._strategy = None
        self._build_id = None
        self._canary_strategy = None
        self._resources = None
        self._env = None
        self._autoscaling = None
        self._isolation_level = None
        self.discriminator = None
        if strategy is not None:
            self.strategy = strategy
        if build_id is not None:
            self.build_id = build_id
        if canary_strategy is not None:
            self.canary_strategy = canary_strategy
        if resources is not None:
            self.resources = resources
        if env is not None:
            self.env = env
        if autoscaling is not None:
            self.autoscaling = autoscaling
        if isolation_level is not None:
            self.isolation_level = isolation_level

    @property
    def strategy(self):
        """Gets the strategy of this StageUpdateRequest.  # noqa: E501


        :return: The strategy of this StageUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this StageUpdateRequest.


        :param strategy: The strategy of this StageUpdateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["rollout", "canary"]  # noqa: E501
        if strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(strategy, allowed_values)
            )

        self._strategy = strategy

    @property
    def build_id(self):
        """Gets the build_id of this StageUpdateRequest.  # noqa: E501


        :return: The build_id of this StageUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this StageUpdateRequest.


        :param build_id: The build_id of this StageUpdateRequest.  # noqa: E501
        :type: int
        """

        self._build_id = build_id

    @property
    def canary_strategy(self):
        """Gets the canary_strategy of this StageUpdateRequest.  # noqa: E501


        :return: The canary_strategy of this StageUpdateRequest.  # noqa: E501
        :rtype: CanaryStrategy
        """
        return self._canary_strategy

    @canary_strategy.setter
    def canary_strategy(self, canary_strategy):
        """Sets the canary_strategy of this StageUpdateRequest.


        :param canary_strategy: The canary_strategy of this StageUpdateRequest.  # noqa: E501
        :type: CanaryStrategy
        """

        self._canary_strategy = canary_strategy

    @property
    def resources(self):
        """Gets the resources of this StageUpdateRequest.  # noqa: E501


        :return: The resources of this StageUpdateRequest.  # noqa: E501
        :rtype: StageUpdateRequestResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this StageUpdateRequest.


        :param resources: The resources of this StageUpdateRequest.  # noqa: E501
        :type: StageUpdateRequestResources
        """

        self._resources = resources

    @property
    def env(self):
        """Gets the env of this StageUpdateRequest.  # noqa: E501


        :return: The env of this StageUpdateRequest.  # noqa: E501
        :rtype: list[StageUpdateRequestEnv]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this StageUpdateRequest.


        :param env: The env of this StageUpdateRequest.  # noqa: E501
        :type: list[StageUpdateRequestEnv]
        """

        self._env = env

    @property
    def autoscaling(self):
        """Gets the autoscaling of this StageUpdateRequest.  # noqa: E501


        :return: The autoscaling of this StageUpdateRequest.  # noqa: E501
        :rtype: AutoscalingRequest
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling):
        """Sets the autoscaling of this StageUpdateRequest.


        :param autoscaling: The autoscaling of this StageUpdateRequest.  # noqa: E501
        :type: AutoscalingRequest
        """

        self._autoscaling = autoscaling

    @property
    def isolation_level(self):
        """Gets the isolation_level of this StageUpdateRequest.  # noqa: E501


        :return: The isolation_level of this StageUpdateRequest.  # noqa: E501
        :rtype: IsolationLevel
        """
        return self._isolation_level

    @isolation_level.setter
    def isolation_level(self, isolation_level):
        """Sets the isolation_level of this StageUpdateRequest.


        :param isolation_level: The isolation_level of this StageUpdateRequest.  # noqa: E501
        :type: IsolationLevel
        """

        self._isolation_level = isolation_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StageUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StageUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
