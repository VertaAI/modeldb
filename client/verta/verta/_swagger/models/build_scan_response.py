# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BuildScanResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'scan_status': 'BuildScanStatus',
        'safety_status': 'BuildScanSafetyStatus',
        'scanner': 'str',
        'date_updated': 'datetime',
        'details': 'list[BuildScanDetail]',
        'creator_request': 'BuildScanCreate',
        'scan_external_results': 'BuildScanExternalResults'
    }

    attribute_map = {
        'id': 'id',
        'scan_status': 'scan_status',
        'safety_status': 'safety_status',
        'scanner': 'scanner',
        'date_updated': 'date_updated',
        'details': 'details',
        'creator_request': 'creator_request',
        'scan_external_results': 'scan_external_results'
    }

    def __init__(self, id=None, scan_status=None, safety_status=None, scanner=None, date_updated=None, details=None, creator_request=None, scan_external_results=None):  # noqa: E501
        """BuildScanResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._scan_status = None
        self._safety_status = None
        self._scanner = None
        self._date_updated = None
        self._details = None
        self._creator_request = None
        self._scan_external_results = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if scan_status is not None:
            self.scan_status = scan_status
        if safety_status is not None:
            self.safety_status = safety_status
        if scanner is not None:
            self.scanner = scanner
        if date_updated is not None:
            self.date_updated = date_updated
        if details is not None:
            self.details = details
        if creator_request is not None:
            self.creator_request = creator_request
        if scan_external_results is not None:
            self.scan_external_results = scan_external_results

    @property
    def id(self):
        """Gets the id of this BuildScanResponse.  # noqa: E501


        :return: The id of this BuildScanResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildScanResponse.


        :param id: The id of this BuildScanResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def scan_status(self):
        """Gets the scan_status of this BuildScanResponse.  # noqa: E501


        :return: The scan_status of this BuildScanResponse.  # noqa: E501
        :rtype: BuildScanStatus
        """
        return self._scan_status

    @scan_status.setter
    def scan_status(self, scan_status):
        """Sets the scan_status of this BuildScanResponse.


        :param scan_status: The scan_status of this BuildScanResponse.  # noqa: E501
        :type: BuildScanStatus
        """

        self._scan_status = scan_status

    @property
    def safety_status(self):
        """Gets the safety_status of this BuildScanResponse.  # noqa: E501


        :return: The safety_status of this BuildScanResponse.  # noqa: E501
        :rtype: BuildScanSafetyStatus
        """
        return self._safety_status

    @safety_status.setter
    def safety_status(self, safety_status):
        """Sets the safety_status of this BuildScanResponse.


        :param safety_status: The safety_status of this BuildScanResponse.  # noqa: E501
        :type: BuildScanSafetyStatus
        """

        self._safety_status = safety_status

    @property
    def scanner(self):
        """Gets the scanner of this BuildScanResponse.  # noqa: E501


        :return: The scanner of this BuildScanResponse.  # noqa: E501
        :rtype: str
        """
        return self._scanner

    @scanner.setter
    def scanner(self, scanner):
        """Sets the scanner of this BuildScanResponse.


        :param scanner: The scanner of this BuildScanResponse.  # noqa: E501
        :type: str
        """

        self._scanner = scanner

    @property
    def date_updated(self):
        """Gets the date_updated of this BuildScanResponse.  # noqa: E501


        :return: The date_updated of this BuildScanResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this BuildScanResponse.


        :param date_updated: The date_updated of this BuildScanResponse.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def details(self):
        """Gets the details of this BuildScanResponse.  # noqa: E501


        :return: The details of this BuildScanResponse.  # noqa: E501
        :rtype: list[BuildScanDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BuildScanResponse.


        :param details: The details of this BuildScanResponse.  # noqa: E501
        :type: list[BuildScanDetail]
        """

        self._details = details

    @property
    def creator_request(self):
        """Gets the creator_request of this BuildScanResponse.  # noqa: E501


        :return: The creator_request of this BuildScanResponse.  # noqa: E501
        :rtype: BuildScanCreate
        """
        return self._creator_request

    @creator_request.setter
    def creator_request(self, creator_request):
        """Sets the creator_request of this BuildScanResponse.


        :param creator_request: The creator_request of this BuildScanResponse.  # noqa: E501
        :type: BuildScanCreate
        """

        self._creator_request = creator_request

    @property
    def scan_external_results(self):
        """Gets the scan_external_results of this BuildScanResponse.  # noqa: E501


        :return: The scan_external_results of this BuildScanResponse.  # noqa: E501
        :rtype: BuildScanExternalResults
        """
        return self._scan_external_results

    @scan_external_results.setter
    def scan_external_results(self, scan_external_results):
        """Sets the scan_external_results of this BuildScanResponse.


        :param scan_external_results: The scan_external_results of this BuildScanResponse.  # noqa: E501
        :type: BuildScanExternalResults
        """

        self._scan_external_results = scan_external_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuildScanResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildScanResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
