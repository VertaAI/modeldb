# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StageLogItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stream': 'str',
        'build_id': 'int',
        'endpoint_id': 'int',
        'stage_id': 'int',
        'timestamp': 'datetime',
        'message': 'str',
        'id': 'str'
    }

    attribute_map = {
        'stream': 'stream',
        'build_id': 'build_id',
        'endpoint_id': 'endpoint_id',
        'stage_id': 'stage_id',
        'timestamp': 'timestamp',
        'message': 'message',
        'id': 'id'
    }

    def __init__(self, stream=None, build_id=None, endpoint_id=None, stage_id=None, timestamp=None, message=None, id=None):  # noqa: E501
        """StageLogItem - a model defined in Swagger"""  # noqa: E501
        self._stream = None
        self._build_id = None
        self._endpoint_id = None
        self._stage_id = None
        self._timestamp = None
        self._message = None
        self._id = None
        self.discriminator = None
        if stream is not None:
            self.stream = stream
        if build_id is not None:
            self.build_id = build_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if stage_id is not None:
            self.stage_id = stage_id
        if timestamp is not None:
            self.timestamp = timestamp
        if message is not None:
            self.message = message
        if id is not None:
            self.id = id

    @property
    def stream(self):
        """Gets the stream of this StageLogItem.  # noqa: E501


        :return: The stream of this StageLogItem.  # noqa: E501
        :rtype: str
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this StageLogItem.


        :param stream: The stream of this StageLogItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["stdout", "stderr"]  # noqa: E501
        if stream not in allowed_values:
            raise ValueError(
                "Invalid value for `stream` ({0}), must be one of {1}"  # noqa: E501
                .format(stream, allowed_values)
            )

        self._stream = stream

    @property
    def build_id(self):
        """Gets the build_id of this StageLogItem.  # noqa: E501


        :return: The build_id of this StageLogItem.  # noqa: E501
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this StageLogItem.


        :param build_id: The build_id of this StageLogItem.  # noqa: E501
        :type: int
        """

        self._build_id = build_id

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this StageLogItem.  # noqa: E501


        :return: The endpoint_id of this StageLogItem.  # noqa: E501
        :rtype: int
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this StageLogItem.


        :param endpoint_id: The endpoint_id of this StageLogItem.  # noqa: E501
        :type: int
        """

        self._endpoint_id = endpoint_id

    @property
    def stage_id(self):
        """Gets the stage_id of this StageLogItem.  # noqa: E501


        :return: The stage_id of this StageLogItem.  # noqa: E501
        :rtype: int
        """
        return self._stage_id

    @stage_id.setter
    def stage_id(self, stage_id):
        """Sets the stage_id of this StageLogItem.


        :param stage_id: The stage_id of this StageLogItem.  # noqa: E501
        :type: int
        """

        self._stage_id = stage_id

    @property
    def timestamp(self):
        """Gets the timestamp of this StageLogItem.  # noqa: E501


        :return: The timestamp of this StageLogItem.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StageLogItem.


        :param timestamp: The timestamp of this StageLogItem.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def message(self):
        """Gets the message of this StageLogItem.  # noqa: E501


        :return: The message of this StageLogItem.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StageLogItem.


        :param message: The message of this StageLogItem.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def id(self):
        """Gets the id of this StageLogItem.  # noqa: E501


        :return: The id of this StageLogItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StageLogItem.


        :param id: The id of this StageLogItem.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StageLogItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StageLogItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
