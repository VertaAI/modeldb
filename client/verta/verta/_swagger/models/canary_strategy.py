# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CanaryStrategy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'progress_step': 'float',
        'progress_interval_seconds': 'int',
        'rules': 'list[CanaryStrategyRules]'
    }

    attribute_map = {
        'progress_step': 'progress_step',
        'progress_interval_seconds': 'progress_interval_seconds',
        'rules': 'rules'
    }

    def __init__(self, progress_step=None, progress_interval_seconds=None, rules=None):  # noqa: E501
        """CanaryStrategy - a model defined in Swagger"""  # noqa: E501
        self._progress_step = None
        self._progress_interval_seconds = None
        self._rules = None
        self.discriminator = None
        if progress_step is not None:
            self.progress_step = progress_step
        if progress_interval_seconds is not None:
            self.progress_interval_seconds = progress_interval_seconds
        if rules is not None:
            self.rules = rules

    @property
    def progress_step(self):
        """Gets the progress_step of this CanaryStrategy.  # noqa: E501


        :return: The progress_step of this CanaryStrategy.  # noqa: E501
        :rtype: float
        """
        return self._progress_step

    @progress_step.setter
    def progress_step(self, progress_step):
        """Sets the progress_step of this CanaryStrategy.


        :param progress_step: The progress_step of this CanaryStrategy.  # noqa: E501
        :type: float
        """

        self._progress_step = progress_step

    @property
    def progress_interval_seconds(self):
        """Gets the progress_interval_seconds of this CanaryStrategy.  # noqa: E501


        :return: The progress_interval_seconds of this CanaryStrategy.  # noqa: E501
        :rtype: int
        """
        return self._progress_interval_seconds

    @progress_interval_seconds.setter
    def progress_interval_seconds(self, progress_interval_seconds):
        """Sets the progress_interval_seconds of this CanaryStrategy.


        :param progress_interval_seconds: The progress_interval_seconds of this CanaryStrategy.  # noqa: E501
        :type: int
        """

        self._progress_interval_seconds = progress_interval_seconds

    @property
    def rules(self):
        """Gets the rules of this CanaryStrategy.  # noqa: E501


        :return: The rules of this CanaryStrategy.  # noqa: E501
        :rtype: list[CanaryStrategyRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CanaryStrategy.


        :param rules: The rules of this CanaryStrategy.  # noqa: E501
        :type: list[CanaryStrategyRules]
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CanaryStrategy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CanaryStrategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
