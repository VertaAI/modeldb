# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PipelineResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'registered_model_id': 'int',
        'model_version_id': 'int',
        'status': 'PipelineStatusEnum',
        'steps': 'list[PipelineStep]',
        'graph': 'PipelineGraph'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'registered_model_id': 'registered_model_id',
        'model_version_id': 'model_version_id',
        'status': 'status',
        'steps': 'steps',
        'graph': 'graph'
    }

    def __init__(self, id=None, name=None, registered_model_id=None, model_version_id=None, status=None, steps=None, graph=None):  # noqa: E501
        """PipelineResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._registered_model_id = None
        self._model_version_id = None
        self._status = None
        self._steps = None
        self._graph = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if registered_model_id is not None:
            self.registered_model_id = registered_model_id
        if model_version_id is not None:
            self.model_version_id = model_version_id
        if status is not None:
            self.status = status
        if steps is not None:
            self.steps = steps
        if graph is not None:
            self.graph = graph

    @property
    def id(self):
        """Gets the id of this PipelineResponse.  # noqa: E501


        :return: The id of this PipelineResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineResponse.


        :param id: The id of this PipelineResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PipelineResponse.  # noqa: E501


        :return: The name of this PipelineResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineResponse.


        :param name: The name of this PipelineResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def registered_model_id(self):
        """Gets the registered_model_id of this PipelineResponse.  # noqa: E501


        :return: The registered_model_id of this PipelineResponse.  # noqa: E501
        :rtype: int
        """
        return self._registered_model_id

    @registered_model_id.setter
    def registered_model_id(self, registered_model_id):
        """Sets the registered_model_id of this PipelineResponse.


        :param registered_model_id: The registered_model_id of this PipelineResponse.  # noqa: E501
        :type: int
        """

        self._registered_model_id = registered_model_id

    @property
    def model_version_id(self):
        """Gets the model_version_id of this PipelineResponse.  # noqa: E501


        :return: The model_version_id of this PipelineResponse.  # noqa: E501
        :rtype: int
        """
        return self._model_version_id

    @model_version_id.setter
    def model_version_id(self, model_version_id):
        """Sets the model_version_id of this PipelineResponse.


        :param model_version_id: The model_version_id of this PipelineResponse.  # noqa: E501
        :type: int
        """

        self._model_version_id = model_version_id

    @property
    def status(self):
        """Gets the status of this PipelineResponse.  # noqa: E501


        :return: The status of this PipelineResponse.  # noqa: E501
        :rtype: PipelineStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineResponse.


        :param status: The status of this PipelineResponse.  # noqa: E501
        :type: PipelineStatusEnum
        """

        self._status = status

    @property
    def steps(self):
        """Gets the steps of this PipelineResponse.  # noqa: E501


        :return: The steps of this PipelineResponse.  # noqa: E501
        :rtype: list[PipelineStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this PipelineResponse.


        :param steps: The steps of this PipelineResponse.  # noqa: E501
        :type: list[PipelineStep]
        """

        self._steps = steps

    @property
    def graph(self):
        """Gets the graph of this PipelineResponse.  # noqa: E501


        :return: The graph of this PipelineResponse.  # noqa: E501
        :rtype: PipelineGraph
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this PipelineResponse.


        :param graph: The graph of this PipelineResponse.  # noqa: E501
        :type: PipelineGraph
        """

        self._graph = graph

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
