# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndpointCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'description': 'str',
        'visibility': 'str',
        'resource_visibility': 'str',
        'custom_permission': 'EndpointCreateCustomPermission'
    }

    attribute_map = {
        'path': 'path',
        'description': 'description',
        'visibility': 'visibility',
        'resource_visibility': 'resource_visibility',
        'custom_permission': 'custom_permission'
    }

    def __init__(self, path=None, description=None, visibility=None, resource_visibility=None, custom_permission=None):  # noqa: E501
        """EndpointCreate - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._description = None
        self._visibility = None
        self._resource_visibility = None
        self._custom_permission = None
        self.discriminator = None
        self.path = path
        if description is not None:
            self.description = description
        if visibility is not None:
            self.visibility = visibility
        if resource_visibility is not None:
            self.resource_visibility = resource_visibility
        if custom_permission is not None:
            self.custom_permission = custom_permission

    @property
    def path(self):
        """Gets the path of this EndpointCreate.  # noqa: E501


        :return: The path of this EndpointCreate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this EndpointCreate.


        :param path: The path of this EndpointCreate.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def description(self):
        """Gets the description of this EndpointCreate.  # noqa: E501


        :return: The description of this EndpointCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EndpointCreate.


        :param description: The description of this EndpointCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def visibility(self):
        """Gets the visibility of this EndpointCreate.  # noqa: E501


        :return: The visibility of this EndpointCreate.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this EndpointCreate.


        :param visibility: The visibility of this EndpointCreate.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIVATE", "ORG_SCOPED_PUBLIC"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def resource_visibility(self):
        """Gets the resource_visibility of this EndpointCreate.  # noqa: E501


        :return: The resource_visibility of this EndpointCreate.  # noqa: E501
        :rtype: str
        """
        return self._resource_visibility

    @resource_visibility.setter
    def resource_visibility(self, resource_visibility):
        """Sets the resource_visibility of this EndpointCreate.


        :param resource_visibility: The resource_visibility of this EndpointCreate.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIVATE", "WORKSPACE_DEFAULT", "ORG_DEFAULT", "ORG_CUSTOM"]  # noqa: E501
        if resource_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_visibility, allowed_values)
            )

        self._resource_visibility = resource_visibility

    @property
    def custom_permission(self):
        """Gets the custom_permission of this EndpointCreate.  # noqa: E501


        :return: The custom_permission of this EndpointCreate.  # noqa: E501
        :rtype: EndpointCreateCustomPermission
        """
        return self._custom_permission

    @custom_permission.setter
    def custom_permission(self, custom_permission):
        """Sets the custom_permission of this EndpointCreate.


        :param custom_permission: The custom_permission of this EndpointCreate.  # noqa: E501
        :type: EndpointCreateCustomPermission
        """

        self._custom_permission = custom_permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
