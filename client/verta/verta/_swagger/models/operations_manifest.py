# coding: utf-8

"""
    Deployment API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OperationsManifest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'workspace_name': 'str',
        'endpoint': 'EndpointCreate',
        'update': 'StageUpdateRequest',
        'tokens': 'list[str]',
        'image': 'OperationsManifestImage'
    }

    attribute_map = {
        'name': 'name',
        'workspace_name': 'workspace_name',
        'endpoint': 'endpoint',
        'update': 'update',
        'tokens': 'tokens',
        'image': 'image'
    }

    def __init__(self, name=None, workspace_name=None, endpoint=None, update=None, tokens=None, image=None):  # noqa: E501
        """OperationsManifest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._workspace_name = None
        self._endpoint = None
        self._update = None
        self._tokens = None
        self._image = None
        self.discriminator = None
        self.name = name
        self.workspace_name = workspace_name
        self.endpoint = endpoint
        self.update = update
        if tokens is not None:
            self.tokens = tokens
        if image is not None:
            self.image = image

    @property
    def name(self):
        """Gets the name of this OperationsManifest.  # noqa: E501


        :return: The name of this OperationsManifest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperationsManifest.


        :param name: The name of this OperationsManifest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def workspace_name(self):
        """Gets the workspace_name of this OperationsManifest.  # noqa: E501


        :return: The workspace_name of this OperationsManifest.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this OperationsManifest.


        :param workspace_name: The workspace_name of this OperationsManifest.  # noqa: E501
        :type: str
        """
        if workspace_name is None:
            raise ValueError("Invalid value for `workspace_name`, must not be `None`")  # noqa: E501

        self._workspace_name = workspace_name

    @property
    def endpoint(self):
        """Gets the endpoint of this OperationsManifest.  # noqa: E501


        :return: The endpoint of this OperationsManifest.  # noqa: E501
        :rtype: EndpointCreate
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this OperationsManifest.


        :param endpoint: The endpoint of this OperationsManifest.  # noqa: E501
        :type: EndpointCreate
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def update(self):
        """Gets the update of this OperationsManifest.  # noqa: E501


        :return: The update of this OperationsManifest.  # noqa: E501
        :rtype: StageUpdateRequest
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this OperationsManifest.


        :param update: The update of this OperationsManifest.  # noqa: E501
        :type: StageUpdateRequest
        """
        if update is None:
            raise ValueError("Invalid value for `update`, must not be `None`")  # noqa: E501

        self._update = update

    @property
    def tokens(self):
        """Gets the tokens of this OperationsManifest.  # noqa: E501


        :return: The tokens of this OperationsManifest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this OperationsManifest.


        :param tokens: The tokens of this OperationsManifest.  # noqa: E501
        :type: list[str]
        """

        self._tokens = tokens

    @property
    def image(self):
        """Gets the image of this OperationsManifest.  # noqa: E501


        :return: The image of this OperationsManifest.  # noqa: E501
        :rtype: OperationsManifestImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OperationsManifest.


        :param image: The image of this OperationsManifest.  # noqa: E501
        :type: OperationsManifestImage
        """

        self._image = image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperationsManifest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationsManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
