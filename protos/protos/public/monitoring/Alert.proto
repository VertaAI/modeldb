syntax = "proto3";

package ai.verta.monitoring;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/monitoring";

option java_multiple_files = true;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

import "common/CommonService.proto";

import "monitoring/Summary.proto";

/************************
 * Notification channel *
 ************************/

message NotificationChannelTypeEnum {
    enum NotificationChannelType {
        UNKNOWN = 0;
        SLACK = 1;
    }
}

// Content of an notification channel
message NotificationChannel {
    uint64 id = 1;
    string name = 2;
    uint64 created_at_millis = 3;
    uint64 updated_at_millis = 4;

    NotificationChannelTypeEnum.NotificationChannelType type = 5;
    oneof channel {
        NotificationChannelSlackWebhook slack_webhook = 6;
    }
}

// Configuration for an notification channel for slack webhooks
message NotificationChannelSlackWebhook {
    string url = 1;
}

// Create a new notification channel. Names must be unique
message CreateNotificationChannelRequest {
    NotificationChannel channel = 1; // ID must be empty
}

// Updates an notification channel. The matching with a previous one happens from the id being the same
message UpdateNotificationChannelRequest {
    NotificationChannel channel = 1;
}

// Find an notification channel based on the different fields
message FindNotificationChannelRequest {
    repeated uint64 ids = 1;
    repeated string names = 2;
    repeated NotificationChannelTypeEnum types = 3;

    // Pagination
    int32 page_number = 4;
    int32 page_limit = 5;

    message Response {
        repeated NotificationChannel channels = 1;
        int32 total_records = 2;
    }
}

// Delete notification channels
message DeleteNotificationChannelRequest {
    repeated uint64 ids = 1;
}

/*********
 * Alert *
 *********/

message AlerterTypeEnum {
    enum AlerterType {
        UNKNOWN = 0;
        FIXED = 1;
        REFERENCE = 2;
    }
}

message AlertStatusEnum {
    enum AlertStatus {
        UNKNOWN = 0;
        OK = 1;
        ALERTING = 2;
    }
}

message Alert {
    uint64 id = 1;
    string name = 2; // Names are unique within a monitored entity
    uint64 monitored_entity_id = 3;
    uint64 created_at_millis = 4;
    uint64 updated_at_millis = 5;

    // Add some robustness in case the alert isn't evaluated in a while
    uint64 last_evaluated_at_millis = 6;

    // We're explicitly not adding the frequency evaluation period as it's not super relevant for the batch case, as long as it's "fast"
    // We'll revisit this later for live

    // Use a map instead of a list to represent that this is a set
    map<uint64,bool> notification_channels = 7;

    // Base for finding samples to be evaluated. The time will be the only field changing here
    FindSummarySampleRequest sample_find_base = 8;

    // Current status of this alert
    AlertStatusEnum.AlertStatus status = 9;

    // If the alert is triggering right now, then this contains the list of sample ids that are making it trigger
    repeated uint64 violating_summary_sample_ids = 10;

    // Information about the alerter that should be used to evaluate this alert
    AlerterTypeEnum.AlerterType alerter_type = 11;
    oneof alerter {
        AlertFixed alerter_fixed = 12;
        AlertReference alerter_reference = 13;
    }
}

message AlertFixed {
    // Alert is fired if summary sample is $operator $threshold
    float threshold = 1;
    common.OperatorEnum.Operator operator = 2; // Default = GTE
}

message AlertReference {
    // Alert is fired if summary sample is $operator $threshold
    float threshold = 1;
    uint64 reference_sample_id = 2;
    common.OperatorEnum.Operator operator = 3; // Default = GTE
    // TODO: add some information about the comparison type
    // For now, assume it's the default defined in the data format
}

message CreateAlertRequest {
    Alert alert = 1; // ID must be empty
}

message UpdateAlertRequest {
    Alert alert = 2;
}

message FindAlertRequest {
    repeated uint64 ids = 1;
    repeated string names = 2;
    repeated uint64 monitored_entity_ids = 3;

    // Find alerts based on when they were last evaluated
    uint64 last_evaluated_at_millis_after = 4;

    // Allow alerters to filter to only their own types
    repeated AlerterTypeEnum.AlerterType alerter_types = 5;

    // Allow filtering to see only failing alerts
    repeated AlertStatusEnum.AlertStatus status = 6;

    // Pagination
    int32 page_number = 7;
    int32 page_limit = 8;

    message Response {
        repeated Alert alerts = 1;
        int32 total_records = 2;
    }
}

message DeleteAlertRequest {
    repeated uint64 ids = 1;
}

// Allow the alerter to trigger an alert (in which case it shares what is the sample that failed)
// or change the status (most likely to OK if was triggering before)
// We provide this in addition to UpdateAlertRequest so that we can do the small change to this field atomically
message UpdateAlertStatusRequest {
    uint64 alert_id = 1;
    uint64 event_time_millis = 2; // Optional field that the alerter can set to provide past events (backfill)
    AlertStatusEnum.AlertStatus status = 3;
    repeated uint64 violating_summary_sample_ids = 4; // Must contain at least one item if moving the status to Alerting. Optional if moving the status to OK.
}

// History of the status of the alerts
message ListAlertHistoryRequest {
    uint64 id = 1;

    message Response {
        repeated ListAlertHistoryItem history = 1;
    }
}

// Tracks previous calls to (UpdateAlertStatusRequest) based on its arguments
message ListAlertHistoryItem {
    uint64 event_time_millis = 1;
    AlertStatusEnum.AlertStatus status = 2;
    repeated uint64 violating_summary_sample_ids = 3;
}

service AlertService {
    rpc createNotificationChannel(CreateNotificationChannelRequest) returns (NotificationChannel) {
        option (google.api.http) = {
            post: "/v1/alerts/createNotificationChannel"
            body: "*"
        };
    };

    rpc updateNotificationChannel(UpdateNotificationChannelRequest) returns (NotificationChannel) {
        option (google.api.http) = {
            post: "/v1/alerts/updateNotificationChannel"
            body: "*"
        };
    };

    rpc findNotificationChannel(FindNotificationChannelRequest) returns (FindNotificationChannelRequest.Response) {
        option (google.api.http) = {
            post: "/v1/alerts/findNotificationChannel"
            body: "*"
        };
    };

    rpc deleteNotificationChannel(DeleteNotificationChannelRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/alerts/deleteNotificationChannel"
            body: "*"
        };
    };

    rpc createAlert(CreateAlertRequest) returns (Alert) {
        option (google.api.http) = {
            post: "/v1/alerts/createAlert"
            body: "*"
        };
    };

    rpc updateAlert(UpdateAlertRequest) returns (Alert) {
        option (google.api.http) = {
            post: "/v1/alerts/updateAlert"
            body: "*"
        };
    };

    rpc updateAlertStatus(UpdateAlertStatusRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/alerts/updateAlertStatus"
            body: "*"
        };
    };

    rpc findAlert(FindAlertRequest) returns (FindAlertRequest.Response) {
        option (google.api.http) = {
            post: "/v1/alerts/findAlert"
            body: "*"
        };
    };

    rpc listAlertHistory(ListAlertHistoryRequest) returns (ListAlertHistoryRequest.Response) {
    option (google.api.http) = {
            post: "/v1/alerts/listAlertHistory"
            body: "*"
        };
    };

    rpc deleteAlert(DeleteAlertRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/alerts/deleteAlert"
            body: "*"
        };
    };
}
