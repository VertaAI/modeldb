syntax = "proto3";

package ai.verta.monitoring;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/monitoring";

option java_multiple_files = true;

import "uac/Collaborator.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

import "monitoring/MonitoredEntity.proto";


message Schema {
  uint64 monitored_entity_id = 1;
  uint64 version = 2;
  uint64 created_at_millis = 3;
  map<string, FeatureSchema> features = 4;
}

message FeatureSchema {
  enum Type {
    UNDEFINED = 0;
    STRING = 1;
    LONG = 2;
    DOUBLE = 3;
    BOOLEAN = 4;
  }
  
  Type type = 1;
}

message CreateSchema {
  uint64 monitored_entity_id = 1;
  map<string, FeatureSchema> features = 2;
  message Response {
    Schema schema = 1;
  }
}

message UpdateSchema {
  Schema schema = 1;

  message Response {
    Schema schema = 1;
  }
}

message FindSchemas {
  FindMonitoredEntityRequest find_entities = 1;
  repeated uint64 versions = 2;

  message Response {
    repeated Schema schemas = 1;
  }
}

message DeleteSchema {
  uint64 monitored_entity_id = 1;

  message Response {
  }
}

service SchemaService {
  rpc createSchema(CreateSchema) returns (Schema) {
    option (google.api.http) = {
      post: "/api/v1/monitoring/schema/createSchema"
      body: "*"
    };
  };

  rpc updateSchema(UpdateSchema) returns (Schema) {
    option (google.api.http) = {
      post: "/api/v1/monitoring/schema/updateSchema"
      body: "*"
    };
  };

  rpc findSchema(FindSchemas) returns (FindSchemas.Response) {
    option (google.api.http) = {
      post: "/api/v1/monitoring/schema/findSchema"
      body: "*"
    };
  };

  rpc deleteSchema(DeleteSchema) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/v1/monitoring/schema/deleteSchema"
      body: "*"
    };
  };
}