syntax = "proto3";

package ai.verta.modeldb;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb";

option java_multiple_files = true;
import "google/api/annotations.proto";
import "protos/public/uac/UACService.proto";
import "protos/public/uac/Organization.proto";
import "protos/public/uac/Team.proto";
import "protos/public/uac/Collaborator.proto";
import "protos/public/modeldb/Comment.proto";
import "protos/public/modeldb/ProjectService.proto";
import "protos/public/modeldb/ExperimentService.proto";
import "protos/public/modeldb/ExperimentRunService.proto";
import "protos/public/modeldb/DatasetService.proto";
import "protos/public/modeldb/DatasetVersionService.proto";
import "protos/public/uac/RoleService.proto";
import "protos/public/common/CommonService.proto";

/*
*   Hydrated Entity Data
*/
message GetHydratedProjects {
    int32 page_number = 1;
    int32 page_limit = 2;
    bool ascending = 3;
    string sort_key = 4;
    string workspace_name = 5;

    message Response {
        repeated HydratedProject hydrated_projects = 1;
        int64 total_records = 2;
    }
}

message CollaboratorUserInfo {
    oneof collaborator {
      uac.UserInfo collaborator_user_info = 1;
      uac.Organization collaborator_organization = 3;
      uac.Team collaborator_team = 4;
    }
    common.CollaboratorTypeEnum.CollaboratorType collaborator_type = 2;
    common.TernaryEnum.Ternary can_deploy = 8;
    uac.EntitiesEnum.EntitiesTypes entity_type = 9;
}

message HydratedProject {
    Project project = 1;
    repeated CollaboratorUserInfo collaborator_user_infos  = 2;
    uac.UserInfo owner_user_info = 3;
    repeated uac.Action allowed_actions = 5;
}

message GetHydratedProjectById {
    string id = 1;

    message Response {
        HydratedProject hydrated_project = 1;
    }
}

message HydratedExperiment {
    Experiment experiment = 1;
    uac.UserInfo owner_user_info = 2;
    repeated uac.Action allowed_actions = 5;
}

message GetHydratedExperimentsByProjectId {
    string project_id = 1;
    int32 page_number = 2;
    int32 page_limit = 3;
    bool ascending = 4;
    string sort_key = 5;

    message Response {
        repeated HydratedExperiment hydrated_experiments = 1;
        int64 total_records = 2;
    }
}

message HydratedExperimentRun {
    ExperimentRun experiment_run = 1;
    repeated Comment comments  = 2;
    uac.UserInfo owner_user_info = 3;
    Experiment experiment = 4;
    repeated uac.Action allowed_actions = 5;
}

message GetHydratedExperimentRunsByProjectId {
    string project_id = 1;
    int32 page_number = 2;
    int32 page_limit = 3;
    bool ascending = 4;
    string sort_key = 5;

    message Response {
        repeated HydratedExperimentRun hydrated_experiment_runs = 1;
        int64 total_records = 2;
    }
}

message GetHydratedExperimentRunById {
    string id = 1;

    message Response {
        HydratedExperimentRun hydrated_experiment_run = 1;
    }
}

message AdvancedQueryExperimentRunsResponse {
    repeated HydratedExperimentRun hydrated_experiment_runs = 1;
    int64 total_records = 2;
}

message AdvancedQueryExperimentsResponse {
    repeated HydratedExperiment hydrated_experiments = 1;
    int64 total_records = 2;
}

message FindHydratedProjectsByUser {
    FindProjects find_projects = 1;
    oneof host_user_details {
        string email = 2;
        string username = 3 [deprecated = true];
        string verta_id = 4;
    }
}

message FindHydratedProjectsByOrganization {
    FindProjects find_projects = 1;
    oneof host_organization {
        string name = 3;
        string id = 4;
    }
}

message FindHydratedProjectsByTeam {
    FindProjects find_projects = 1;
    string org_id = 2; // necessary if host_team is name
    oneof host_team {
        string name = 3;
        string id = 4;
    }
}

message FindHydratedDatasetsByOrganization {
    FindDatasets find_datasets = 1;
    oneof host_organization {
        string name = 3;
        string id = 4;
    }
}

message FindHydratedDatasetsByTeam {
    FindDatasets find_datasets = 1;
    string org_id = 2;
    oneof host_team {
        string name = 3;
        string id = 4;
    }
}


message AdvancedQueryProjectsResponse {
    repeated HydratedProject hydrated_projects = 1;
    int64 total_records = 2;
}

message HydratedDataset {
    Dataset dataset = 1;
    repeated CollaboratorUserInfo collaborator_user_infos  = 2;
    uac.UserInfo owner_user_info = 3;
    repeated uac.Action allowed_actions = 5;
}

message AdvancedQueryDatasetsResponse {
    repeated HydratedDataset hydrated_datasets = 1;
    int64 total_records = 2;
}

message HydratedDatasetVersion {
    DatasetVersion dataset_version = 1;
    uac.UserInfo owner_user_info = 3;
    repeated uac.Action allowed_actions = 4;
}

message AdvancedQueryDatasetVersionsResponse {
    repeated HydratedDatasetVersion hydrated_dataset_versions = 1;
    int64 total_records = 2;
}

//getDatasetByName
message GetHydratedDatasetByName {
    string name = 1;
    string workspace_name = 2;

    message Response {
        HydratedDataset hydrated_dataset_by_user = 1;
        repeated HydratedDataset shared_hydrated_datasets = 2;
    }
}

message GetHydratedDatasetsByProjectId {
    string project_id = 1;
    int32 page_number = 2;
    int32 page_limit = 3;
    bool ascending = 4;
    string sort_key = 5;

    message Response {
        repeated HydratedDataset hydrated_datasets = 1;
        int64 total_records = 2;
    }
}

service HydratedService {
    rpc getHydratedProjects (GetHydratedProjects) returns (GetHydratedProjects.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedProjects"
        };
    };

    rpc getHydratedPublicProjects (GetHydratedProjects) returns (GetHydratedProjects.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedPublicProjects"
        };
    };

    rpc getHydratedProjectById (GetHydratedProjectById) returns (GetHydratedProjectById.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedProjectById"
        };
    };

    rpc getHydratedExperimentsByProjectId (GetHydratedExperimentsByProjectId) returns (GetHydratedExperimentsByProjectId.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedExperimentsByProjectId"
        };
    };

    rpc getHydratedExperimentRunsInProject (GetHydratedExperimentRunsByProjectId) returns (GetHydratedExperimentRunsByProjectId.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedExperimentRunsInProject"
        };
    };

    rpc getHydratedExperimentRunById (GetHydratedExperimentRunById) returns (GetHydratedExperimentRunById.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedExperimentRunById"
        };
    };

    // queries
    rpc findHydratedExperimentRuns(FindExperimentRuns) returns (AdvancedQueryExperimentRunsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedExperimentRuns"
            body: "*"
        };
    };

    rpc sortHydratedExperimentRuns (SortExperimentRuns) returns (AdvancedQueryExperimentRunsResponse){
        option (google.api.http) = {
            get: "/v1/hydratedData/sortHydratedExperimentRuns"
        };
    };

    rpc getTopHydratedExperimentRuns (TopExperimentRunsSelector) returns (AdvancedQueryExperimentRunsResponse){
        option (google.api.http) = {
            get: "/v1/hydratedData/getTopHydratedExperimentRuns"
        };
    };

    // queries
    rpc findHydratedExperiments(FindExperiments) returns (AdvancedQueryExperimentsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedExperiments"
            body: "*"
        };
    };

    // queries
    rpc findHydratedProjects(FindProjects) returns (AdvancedQueryProjectsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedProjects"
            body: "*"
        };
    };

    // queries
    rpc findHydratedPublicProjects(FindProjects) returns (AdvancedQueryProjectsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedPublicProjects"
            body: "*"
        };
    };

    // queries
    rpc findHydratedProjectsByUser(FindHydratedProjectsByUser) returns (AdvancedQueryProjectsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedProjectsByUser"
            body: "*"
        };
    };

    // queries
    rpc findHydratedProjectsByOrganization(FindHydratedProjectsByOrganization) returns (AdvancedQueryProjectsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedProjectsByOrganization"
            body: "*"
        };
    };

    // queries
    rpc findHydratedProjectsByTeam(FindHydratedProjectsByTeam) returns (AdvancedQueryProjectsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedProjectsByTeam"
            body: "*"
        };
    };

    // queries
    rpc findHydratedDatasetsByOrganization(FindHydratedDatasetsByOrganization) returns (AdvancedQueryDatasetsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedDatasetsByOrganization"
            body: "*"
        };
    };

    // queries
    rpc findHydratedDatasetsByTeam(FindHydratedDatasetsByTeam) returns (AdvancedQueryDatasetsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedDatasetsByTeam"
            body: "*"
        };
    };

    // queries
    rpc findHydratedDatasets(FindDatasets) returns (AdvancedQueryDatasetsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedDatasets"
            body: "*"
        };
    };

    // queries
    rpc findHydratedPublicDatasets(FindDatasets) returns (AdvancedQueryDatasetsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedPublicDatasets"
            body: "*"
        };
    };

    // queries
    rpc findHydratedDatasetVersions(FindDatasetVersions) returns (AdvancedQueryDatasetVersionsResponse){
        option (google.api.http) = {
            post: "/v1/hydratedData/findHydratedDatasetVersions"
            body: "*"
        };
    };

    rpc getHydratedDatasetByName (GetHydratedDatasetByName) returns (GetHydratedDatasetByName.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedDatasetByName"
        };
    };

    rpc getHydratedDatasetsByProjectId (GetHydratedDatasetsByProjectId) returns (GetHydratedDatasetsByProjectId.Response){
        option (google.api.http) = {
            get: "/v1/hydratedData/getHydratedDatasetsByProjectId"
        };
    };
}
