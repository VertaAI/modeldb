syntax = "proto3";

package ai.verta.modeldb;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb";

option java_multiple_files = true;
import "google/protobuf/struct.proto";
import "common/CommonService.proto";

message Feature {
    string name = 1;
}

// attributes
message GetAttributes {
    string id = 1;
    repeated string attribute_keys = 2;
    bool get_all = 3;

    message Response {
        repeated common.KeyValue attributes = 1;
    }
}

// TODO: make this update attribute
message AddAttributes {
    string id = 1;
    common.KeyValue attribute = 2;

    message Response {
        bool status = 1;
    }
}

message GetTags {
    string id = 1;

    message Response {
        repeated string tags = 1;
    }
}

// code version
message CodeVersion {
    oneof code {
        GitSnapshot git_snapshot = 1;
        common.Artifact code_archive = 2; // ZIP archive of source code
    }
    uint64 date_logged = 3;
}

message GitSnapshot {
    repeated string filepaths = 1; // paths to relevant source code
    string repo = 2; // URL to remote repository
    string hash = 3; // commit hash
    common.TernaryEnum.Ternary is_dirty = 4;
}

message GetUrlForArtifact {
    string id = 1; // can be Proj, Expt, or Run depending on handling service
    string key = 2;
    string method = 3; //This is either GET or PUT
    common.ArtifactTypeEnum.ArtifactType artifact_type = 4; //can inform which slot to check
    uint64 part_number = 5;  // if 0, donâ€™t do multipart

    message Response {
        string url = 1;
        map<string, string> fields = 2;
        bool multipart_upload_ok = 3;  // for backcompat: new Client, old Backend
    }
}

message CommitArtifactPart {
    string id = 1;  // Run ID
    string key = 2;
    common.ArtifactPart artifact_part = 3;

    message Response{
    }
}

message GetCommittedArtifactParts {
    string id = 1;  // Run ID
    string key = 2;

    message Response {
        repeated common.ArtifactPart artifact_parts = 1;
    }
}

message CommitMultipartArtifact {
    string id = 1;  // Run ID
    string key = 2;

    message Response {
    }
}

// TODO: add bulk and get_all
message GetArtifacts {
    string id = 1;
    string key = 2;

    message Response {
        repeated common.Artifact artifacts = 1;
    }
}
