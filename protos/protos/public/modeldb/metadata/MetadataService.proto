syntax = "proto3";

package ai.verta.modeldb.metadata;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb/metadata";

option java_multiple_files = true;

import "google/api/annotations.proto";
import "common/CommonService.proto";

message IDTypeEnum {
    enum IDType {
        UNKNOWN = 0; // Type 0 should always cause an error
        VERSIONING_REPOSITORY = 1;
        VERSIONING_COMMIT = 2;
        VERSIONING_REPO_COMMIT_BLOB = 3;
        VERSIONING_REPO_COMMIT = 4;
    }
}

message IdentificationType {
    IDTypeEnum.IDType id_type = 1;
    oneof id {
        uint64 int_id = 2;
        string string_id = 3;
    }
}

message GetLabelsRequest {
    // If only id_type is provided, gather from all of such sources
    IdentificationType id = 1;

    message Response {
        repeated string labels = 1;
    }
}

message GetLabelIdsRequest {
    repeated string labels = 1;
    common.OperatorEnum.Operator operator = 2; // Default = EQ

    message Response {
        repeated IdentificationType ids = 1;
    }
}

message AddLabelsRequest {
    IdentificationType id = 1;
    repeated string labels = 2;

    message Response {
        bool status = 1;
    }
}

message DeleteLabelsRequest {
    IdentificationType id = 1;
    repeated string labels = 2;
    bool delete_all = 3;

    message Response {
        bool status = 1;
    }
}

message GetPropertyRequest {
    // If only id_type is provided, gather from all of such sources
    IdentificationType id = 1;
    string key = 2;

    message Response {
        string value = 3;
    }
}

message AddPropertyRequest {
    IdentificationType id = 1;
    string key = 2;
    string value = 3;

    message Response {
    }
}

message DeletePropertyRequest {
    IdentificationType id = 1;
    string key = 2;

    message Response {
    }
}

message KeyValueStringProperty {
    string key = 1;
    string value = 2;
}

message AddKeyValuePropertiesRequest {
    IdentificationType id = 1;
    string property_name = 2;
    repeated KeyValueStringProperty key_value_property = 3;

    message Response {
    }
}

// if getAll flag is true ignores keys and gets all key value properties corresponding to id and property_name
message GetKeyValuePropertiesRequest {
    IdentificationType id = 1;
    string property_name = 2;
    repeated string keys = 3;
    bool getAll = 4;

    message Response {
        repeated KeyValueStringProperty key_value_property = 1;
    }
}

// if deleteAll flag is true ignores keys and deletes all key value properties corresponding to id and property_name
message DeleteKeyValuePropertiesRequest {
    IdentificationType id = 1;
    string property_name = 2;
    repeated string keys = 3;
    bool deleteAll = 4;

    message Response {
    }
}

service MetadataService {
    rpc GetLabels(GetLabelsRequest) returns (GetLabelsRequest.Response) {
        option (google.api.http) = {
            get: "/v1/metadata/labels"
        };
    };

    rpc GetLabelIds(GetLabelIdsRequest) returns (GetLabelIdsRequest.Response) {
        option (google.api.http) = {
            get: "/v1/metadata/getLabelIds"
        };
    };

    rpc AddLabels(AddLabelsRequest) returns (AddLabelsRequest.Response) {
        option (google.api.http) = {
            put: "/v1/metadata/labels"
            body: "*"
        };
    };

    rpc UpdateLabels(AddLabelsRequest) returns (AddLabelsRequest.Response) {
        option (google.api.http) = {
            post: "/v1/metadata/labels"
            body: "*"
        };
    };

    rpc DeleteLabels(DeleteLabelsRequest) returns (DeleteLabelsRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/metadata/labels"
            body: "*"
        };
    };

    rpc GetProperty(GetPropertyRequest) returns (GetPropertyRequest.Response) {
        option (google.api.http) = {
            get: "/v1/metadata/property"
        };
    };

    rpc AddProperty(AddPropertyRequest) returns (AddPropertyRequest.Response) {
        option (google.api.http) = {
            put: "/v1/metadata/property"
            body: "*"
        };
    };

    rpc DeleteProperty(DeletePropertyRequest) returns (DeletePropertyRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/metadata/property"
            body: "*"
        };
    };

    rpc AddKeyValueProperties(AddKeyValuePropertiesRequest) returns (AddKeyValuePropertiesRequest.Response) {
        option (google.api.http) = {
            put: "/v1/metadata/keyValueProperties"
            body: "*"
        };
    };

    rpc GetKeyValueProperties(GetKeyValuePropertiesRequest) returns (GetKeyValuePropertiesRequest.Response) {
        option (google.api.http) = {
            get: "/v1/metadata/keyValueProperties"
        };
    };

    rpc DeleteKeyValueProperties(DeleteKeyValuePropertiesRequest) returns (DeleteKeyValuePropertiesRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/metadata/keyValueProperties"
            body: "*"
        };
    };
}
