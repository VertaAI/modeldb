syntax = "proto3";

package ai.verta.registry;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/registry";

option java_multiple_files = true;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "modeldb/CommonService.proto";
import "common/CommonService.proto";
import "modeldb/versioning/Environment.proto";
import "registry/StageService.proto";
import "uac/Collaborator.proto";

message RegisteredModel {
    // internal id
    uint64 id = 1;

    // Unique name for the model within the workspace.
    string name = 2;

    // Timestamp recorded when this ``registered_model`` was created.
    int64 time_created = 3;

    // Timestamp recorded when metadata for this ``registered_model`` was last updated.
    int64 time_updated = 4;

    // Description of this ``registered_model``.
    string description = 5;

    // Labels added to the registered models
    repeated string labels = 6;

    // Visibility of Registered Models
    common.VisibilityEnum.Visibility visibility = 7;

    // id of the workspace this belongs to
    //not storing workspace_type uac should support https://github.com/VertaAI/protos-all/pull/19/files
    string workspace_id = 8;

    uint64 workspace_service_id = 12;

    //readme
    string readme_text = 9;

    //owner's verta_id
    string owner = 10;

    // Other attributes
    repeated common.KeyValue attributes = 11;
    // The next field only makes sense when visibility == ORG_CUSTOM
    // They will be empty otherwise
    uac.CollaboratorPermissions custom_permission = 13;
    uac.ResourceVisibility resource_visibility = 14;
}

//CRUD for Registred Models
message FindRegisteredModelRequest{
    //User or organization name
    string workspace_name = 1;
    //Filtering supported on
    // 1. name
    // 2. labels
    // 3. description
    repeated common.KeyValueQuery predicates = 2;
    //If not present will default to page 1 page_size 10
    common.Pagination pagination = 3;
    bool ascending = 4;
    string sort_key = 5;

    message Response {
        repeated RegisteredModel registered_models = 1;
        int64 total_records = 2;
    }
}

message GetRegisteredModelRequest {
    RegisteredModelIdentification id = 1;

    message Response {
        RegisteredModel registered_model = 1;
    }
}

message GetRegisteredModelCountRequest {
    string project_id = 1;

    message Response {
        int64 registered_model_count = 1;
    }
}

message RegisteredModelNamedIdentification {
    //Model Name
    string name = 1;
    // WorkspaceName
    string workspace_name = 2;
}

// changed from oneof because of that bug: https://github.com/grpc-ecosystem/grpc-gateway/issues/753
message RegisteredModelIdentification {
    // Model refered to by workspace name , model nmae combination
    RegisteredModelNamedIdentification named_id = 1;
    // Model refered to by id
    uint64 registered_model_id = 2;
}

message SetRegisteredModel {
    RegisteredModelIdentification id = 1;
    RegisteredModel registered_model = 2;
    google.protobuf.FieldMask update_mask = 3;

    message Response {
        RegisteredModel registered_model = 1;
    }
}

message DeleteRegisteredModelRequest {
    RegisteredModelIdentification id = 1;

    message Response { }
}

message ModelVersionLockLevelEnum {
    enum ModelVersionLockLevel {
        UNKNOWN = 0;
        OPEN = 1;
        CLOSED = 2;
        REDACT = 3;
    }
}

message ModelVersion {

    // internal id
    uint64 id = 1;

    // id of the model this belongs to
    uint64 registered_model_id = 2;

    // Model's tag. Unique for a model nmae
    string version = 3;

    // Timestamp recorded when metadata for this ``model_version`` was last updated.
    int64 time_updated = 4;

    // Timestamp recorded when this ``model_version`` was created.
    int64 time_created = 5;

    // Description of this ``model_version``.
    string description = 6;

    // ModelDB run ID used when creating ``model_version``, if ``model_source`` was generated by an
    // experiment run stored in ModelDB tracking server.
    oneof source {
        string experiment_run_id = 7;
        // string model_url = 15; NOT SUPPORTED YET
    }

    // Labels added to the registered models
    repeated string labels = 8;

    // Model
    common.Artifact model = 9;

    //Requirement
    modeldb.versioning.EnvironmentBlob environment = 10;

    // Other artifacts
    repeated common.Artifact artifacts = 11;

    //flag to archive a model version currently does nothing other than storing the information in DB
    common.TernaryEnum.Ternary archived = 12;

    //readme
    string readme_text = 13;

    //APIs
    repeated string apis = 15;

    //owner's verta_id
    string owner = 16;

    // Other attributes
    repeated common.KeyValue attributes = 17;

    // Stage of the model version. This field must be searchable as per our "find" operation
    StageEnum.Stage stage = 18;

    // Current lock level for this model version
    ModelVersionLockLevelEnum.ModelVersionLockLevel lock_level = 19;

    repeated common.Artifact datasets = 20;
    map<string, common.CodeVersion> code_version_from_blob = 21;
}

message SetLockModelVersionRequest {
    //User or organization name
    ModelVersionIdentification id = 1;
    ModelVersionLockLevelEnum.ModelVersionLockLevel lock_level = 2;

    message Response {}
}

message ModelVersionIdentification {
    // ModelVersion referred to by id
    uint64 model_version_id = 1;

    //Registered Model referred to by id
    RegisteredModelIdentification model_id = 2; //Compulsory
}

//  CRUD for Model Version
message GetModelVersionRequest{
    //User or organization name
    ModelVersionIdentification id = 1;

    message Response {
        ModelVersion model_version = 1;
    }
}

message FindModelVersionRequest{
    //identity of parent registered model
    RegisteredModelIdentification id = 1;
    //Filtering supported on
    // 1. version
    // 2. labels
    // 3. description
    // 4. model_source
    // 5. experiment_run_id
    // 6. status
    // 7. archived status
    repeated common.KeyValueQuery predicates = 2;
    //If not present will default to page 1 page_size 10
    common.Pagination pagination = 3;
    bool ascending = 4;
    string sort_key = 5;

    message Response {
        repeated ModelVersion model_versions = 1;
        int64 total_records = 2;
    }
}

message SetModelVersion {
    ModelVersionIdentification id = 1;
    ModelVersion model_version = 2;
    google.protobuf.FieldMask update_mask = 3;

    message Response {
        ModelVersion model_version = 1;
    }

}

message DeleteModelVersionRequest {
    ModelVersionIdentification id = 1;

    message Response { }
}

message LogDatasetsInModelVersion {
    uint64 model_version_id = 1;
    repeated common.Artifact datasets = 2;

    message Response { }
}

message LogCodeVersionFromBlobInModelVersion {
    uint64 model_version_id = 1;
    map<string, common.CodeVersion> code_version_from_blob = 2;

    message Response { }
}

message LogAttributesInModelVersion {
    uint64 model_version_id = 1;
    repeated common.KeyValue attributes = 2;

    message Response { }
}

service RegistryService {
   // CRUD for RegisteredModel
    rpc FindRegisteredModel(FindRegisteredModelRequest) returns (FindRegisteredModelRequest.Response) {
        option (google.api.http) = {
            post: "/v1/registry/workspaces/{workspace_name}/registered_models/find"
            body: "*"
            additional_bindings {
                post: "/v1/registry/registered_models/find"
                body: "*"
            }
        };

    };

    rpc GetRegisteredModel(GetRegisteredModelRequest) returns (GetRegisteredModelRequest.Response) {
        option (google.api.http) = {
            get: "/v1/registry/workspaces/{id.named_id.workspace_name}/registered_models/{id.named_id.name}"
            additional_bindings {
                get: "/v1/registry/registered_models/{id.registered_model_id}"
            }
        };
    };

    rpc GetRegisteredModelCount(GetRegisteredModelCountRequest) returns (GetRegisteredModelCountRequest.Response) {
        option (google.api.http) = {
            get: "/v1/registry/registered_models/count"
        };
    };

    rpc CreateRegisteredModel(SetRegisteredModel) returns (SetRegisteredModel.Response) {
        option (google.api.http) = {
            post: "/v1/registry/workspaces/{id.named_id.workspace_name}/registered_models"
            body: "registered_model"
        };
    }

    rpc UpdateRegisteredModel(SetRegisteredModel) returns (SetRegisteredModel.Response) {
        option (google.api.http) = {
            patch: "/v1/registry/workspaces/{id.named_id.workspace_name}/registered_models/{id.named_id.name}"
            body: "registered_model"
            additional_bindings {
                patch: "/v1/registry/registered_models/{id.registered_model_id}"
                body: "registered_model"
            }
            additional_bindings {
                patch: "/v1/registry/workspaces/{id.named_id.workspace_name}/registered_models/{id.named_id.name}/full_body"
                body: "*"
            }
            additional_bindings {
                patch: "/v1/registry/registered_models/{id.registered_model_id}/full_body"
                body: "*"
            }
            additional_bindings {
                put: "/v1/registry/workspaces/{id.named_id.workspace_name}/registered_models/{id.named_id.name}"
                body: "registered_model"
            }
            additional_bindings {
                put: "/v1/registry/registered_models/{id.registered_model_id}"
                body: "registered_model"
            }
        };
    }

    rpc DeleteRegisteredModel(DeleteRegisteredModelRequest) returns (DeleteRegisteredModelRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/registry/workspaces/{id.named_id.workspace_name}/registered_models/{id.named_id.name}"
            additional_bindings {
                delete: "/v1/registry/registered_models/{id.registered_model_id}"
            }
        };
    }

    //CRUD for Model Version
    rpc FindModelVersion(FindModelVersionRequest) returns (FindModelVersionRequest.Response) {
        option (google.api.http) = {
            post: "/v1/registry/workspaces/{id.named_id.workspace_name}/registered_models/{id.named_id.name}/model_versions/find"
            body: "*"
            additional_bindings {
                post: "/v1/registry/registered_models/{id.registered_model_id}/model_versions/find"
                body: "*"
            }
            additional_bindings {
                post: "/v1/registry/workspaces/{id.named_id.workspace_name}/model_versions/find"
                body: "*"
            }
            additional_bindings {
                post: "/v1/registry/model_versions/find"
                body: "*"
            }
        };
    };

    rpc GetModelVersion(GetModelVersionRequest) returns (GetModelVersionRequest.Response) {
        option (google.api.http) = {
            get: "/v1/registry/workspaces/{id.model_id.named_id.workspace_name}/registered_models/{id.model_id.named_id.name}/model_versions/{id.model_version_id}"
            additional_bindings {
                get: "/v1/registry/model_versions/{id.model_version_id}"
            }
        };
    };


    rpc CreateModelVersion(SetModelVersion) returns (SetModelVersion.Response) {
        option (google.api.http) = {
            post: "/v1/registry/workspaces/{id.model_id.named_id.workspace_name}/registered_models/{id.model_id.named_id.name}/model_versions"
            body: "model_version"
            additional_bindings {
                post: "/v1/registry/registered_models/{id.model_id.registered_model_id}/model_versions"
                body: "model_version"
            }
        };
    }

    rpc UpdateModelVersion(SetModelVersion) returns (SetModelVersion.Response) {
        option (google.api.http) = {
            patch: "/v1/registry/workspaces/{id.model_id.named_id.workspace_name}/registered_models/{id.model_id.named_id.name}/model_versions/{id.model_version_id}"
            body: "model_version"
            additional_bindings {
                patch: "/v1/registry/registered_models/{id.model_id.registered_model_id}/model_versions/{id.model_version_id}"
                body: "model_version"
            }
            additional_bindings {
                patch: "/v1/registry/workspaces/{id.model_id.named_id.workspace_name}/registered_models/{id.model_id.named_id.name}/model_versions/{id.model_version_id}/full_body"
                body: "*"
            }
            additional_bindings {
                patch: "/v1/registry/registered_models/{id.model_id.registered_model_id}/model_versions/{id.model_version_id}/full_body"
                body: "*"
            }
            additional_bindings {
                put: "/v1/registry/workspaces/{id.model_id.named_id.workspace_name}/registered_models/{id.model_id.named_id.name}/model_versions/{id.model_version_id}"
                body: "model_version"
            }
            additional_bindings {
                put: "/v1/registry/registered_models/{id.model_id.registered_model_id}/model_versions/{id.model_version_id}"
                body: "model_version"
            }
        };
    }

    rpc SetLockModelVersion(SetLockModelVersionRequest) returns (SetLockModelVersionRequest.Response) {
        option (google.api.http) = {
            put: "/v1/registry/model_versions/{id.model_version_id}/lock"
            body: "*"
        };
    };

    rpc DeleteModelVersion(DeleteModelVersionRequest) returns (DeleteModelVersionRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/registry/workspaces/{id.model_id.named_id.workspace_name}/registered_models/{id.model_id.named_id.name}/model_versions/{id.model_version_id}"
            additional_bindings {
                delete: "/v1/registry/registered_models/{id.model_id.registered_model_id}/model_versions/{id.model_version_id}"
            }
            additional_bindings {
                delete: "/v1/registry/model_versions/{id.model_version_id}"
            }
        };
    }

    rpc getUrlForArtifact(modeldb.GetUrlForArtifact) returns (modeldb.GetUrlForArtifact.Response) {
        option (google.api.http) = {
            post: "/v1/registry/model_versions/{id}/getUrlForArtifact"
            body: "*"
        };
    };

    rpc commitArtifactPart(modeldb.CommitArtifactPart) returns (modeldb.CommitArtifactPart.Response) {
        option (google.api.http) = {
            post: "/v1/registry/model_versions/{id}/commitArtifactPart"
            body: "*"
        };
    };

    rpc getCommittedArtifactParts(modeldb.GetCommittedArtifactParts) returns (modeldb.GetCommittedArtifactParts.Response) {
        option (google.api.http) = {
            get: "/v1/registry/model_versions/{id}/getCommittedArtifactParts"
        };
    };

    rpc commitMultipartArtifact(modeldb.CommitMultipartArtifact) returns (modeldb.CommitMultipartArtifact.Response) {
        option (google.api.http) = {
            post: "/v1/registry/model_versions/{id}/commitMultipartArtifact"
            body: "*"
        };
    };

    rpc logDatasetsInModelVersion(LogDatasetsInModelVersion) returns (LogDatasetsInModelVersion.Response) {
        option (google.api.http) = {
            post: "/v1/registry/model_versions/{model_version_id}/logDatasets"
            body: "*"
        };
    };

    rpc logCodeVersionFromBlobInModelVersion(LogCodeVersionFromBlobInModelVersion) returns (LogCodeVersionFromBlobInModelVersion.Response) {
        option (google.api.http) = {
            post: "/v1/registry/model_versions/{model_version_id}/logCodeVersionFromBlob"
            body: "*"
        };
    };

    rpc logAttributesInModelVersion(LogAttributesInModelVersion) returns (LogAttributesInModelVersion.Response) {
        option (google.api.http) = {
            post: "/v1/registry/model_versions/{model_version_id}/logAttributes"
            body: "*"
        };
    };

}
