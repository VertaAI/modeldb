syntax = "proto3";

package ai.verta.uac;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac";

option java_multiple_files = true;
import "google/api/annotations.proto";
import "common/CommonService.proto";
import "uac/UACService.proto";

message UserDetails {
    string user_id = 1;
    string email_address = 2;
    int64 last_signed_in = 3;
    bool service_account = 4;

    message UserGroup {
        string group_id = 1;
        string group_name = 2;
    }

    message UserWorkspace {
        string workspace_id = 1;
        string workspace_name = 2;
    }

    repeated UserGroup groups = 5;
    repeated UserWorkspace workspaces = 6;
}

enum UserSearchOptions {
    SEARCH_OPTION_UNKNOWN = 0;
    ONLY_SERVICE_ACCOUNTS = 1;
}

message SearchUsersInput {
    string search_string = 1;
    repeated UserSearchOptions search_options = 2;
    repeated string group_id = 3;
}

message SearchUsers {
    string org_id = 1;
    SearchUsersInput search_input = 2;
    common.Pagination pagination = 3;

    message Response {
        repeated UserDetails user_details = 1;
        int64 total_records = 2;
        common.Pagination pagination = 3;
    }
}

message AddUserV2 {
    string org_id = 1;
    oneof user_identifier {
        string email_address = 2;
        string user_id = 3;
    }

    message Response {
    }
}

message RemoveUserV2 {
    string org_id = 1;
    string user_id = 3;

    message Response {
    }
}

message ServiceAccountV2 {
    string org_id = 1;
    string id = 2;
    string username = 3;
    string description = 4;
    string primary_key = 5;
    string secondary_key = 6;
}

message AddServiceAccount {
    ServiceAccountV2 service_account = 1;
    message Response {
        ServiceAccountV2 service_account = 1;
    }
}

message RemoveServiceAccount {
    string org_id = 1;
    string service_account_id = 2;

    message Response {
    }
}

service UserServiceV2 {
    // List for users inside an organization, returning details
    rpc searchUsers (SearchUsers) returns (SearchUsers.Response) {
        option (google.api.http) = {
            get: "/v2/organization/{org_id}/users"
        };
    }

    // Adds the given user to the organization
    rpc addUser (AddUserV2) returns (AddUserV2.Response){
        option (google.api.http) = {
            post: "/v2/organization/{org_id}/users"
            body: "*"
        };
    };

    // Removes the given user to the organization
    rpc removeUser (RemoveUserV2) returns (RemoveUserV2.Response){
        option (google.api.http) = {
            delete: "/v2/organization/{org_id}/users/{user_id}"
        };
    };

    // Adds a service account to the organization
    rpc addServiceAccount (AddServiceAccount) returns (AddServiceAccount.Response) {
        option (google.api.http) = {
            post: "/v2/organization/{service_account.org_id}/serviceAccounts"
            body: "*"
        };
    }

    // Removes a service account from the organization
    rpc removeServiceAccount (RemoveServiceAccount) returns (RemoveServiceAccount.Response) {
        option (google.api.http) = {
            delete: "/v2/organization/{org_id}/serviceAccounts/{service_account_id}"
        };
    }
}
