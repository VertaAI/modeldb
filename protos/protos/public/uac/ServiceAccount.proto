syntax = "proto3";

package ai.verta.uac;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac";

option java_multiple_files = true;
import "google/api/annotations.proto";
import "uac/UACService.proto";

// A service account is a subtype of User. So we can use the UAC APIs to manipulate the service account.
// Besides the service account itself, the organization admin should be able to get and manipulate the user details, like dev keys.
message ServiceAccount {
    uint64 id = 1;
    string user_id = 2; // This is the verta user id that we use all across the system
    // A service account belongs to a fixed workspace
    uint64 associated_workspace_id = 3;
}

// Only the org admins can create a service account. This is controlled by RBAC.
message CreateServiceAccountRequest {
    // The final username for the service account will be "workspace_name/username". We should prevent usernames that have a "/" otherwise.
    string username = 1;
    uint64 associated_workspace_id = 2;
}

// Only the org admins can delete a service account. This is controlled by RBAC.
message DeleteServiceAccountRequest {
    repeated uint64 ids = 1;
}

// Perform the query computing an AND of all the fields that are present, with IN operator for the list items.
// The user must be authorized to READ all IDs it's requesting.
// A user can READ a service account if they belong to the same workspace.
message FindServiceAccountRequest {
    repeated uint64 ids = 1;
    repeated uint64 associated_workspace_ids = 2;

    message Response {
        repeated ServiceAccount service_accounts = 1;
    }
}

service ServiceAccountService {
    rpc createServiceAccount (CreateServiceAccountRequest) returns (ServiceAccount) {
        option (google.api.http) = {
            post : "/v1/service_account/createServiceAccount"
            body : "*"
        };
    };
    rpc findServiceAccount (FindServiceAccountRequest) returns (FindServiceAccountRequest.Response) {
        option (google.api.http) = {
            post : "/v1/service_account/findServiceAccount"
            body : "*"
        };
    };
    rpc deleteServiceAccount (DeleteServiceAccountRequest) returns (Empty) {
        option (google.api.http) = {
            delete : "/v1/service_account/deleteServiceAccount"
            body : "*"
        };
    };
}
