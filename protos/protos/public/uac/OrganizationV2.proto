syntax = "proto3";

package ai.verta.uac;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac";

option java_multiple_files = true;
import "google/api/annotations.proto";
import "common/CommonService.proto";
import "uac/UACService.proto";

message OrgAdminV2 {
    string email = 1;
}

message ContainerRegistryConfiguration {
    uint64 id = 1;
    string base = 2; // Unique per workspace
    string username = 3;
    string secret_key = 4; // Should be hidden from non-admins
    string org_id = 6;
}

message OrganizationV2 {
    string id = 1;
    string name = 2;
    string description = 3;
    repeated OrgAdminV2 admins = 6;

    int64 created_timestamp = 4;
    int64 updated_timestamp = 5;

    repeated ContainerRegistryConfiguration container_registries = 7;
    bool current_user_is_admin = 8;
}

message OrganizationStats {
    string org_id = 1;
    int32 num_users = 2;
    int32 num_registered_models = 3;
    int32 num_endpoints = 4;
}

message GetOrganizationByIdV2 {
    string org_id = 1;

    message Response {
        OrganizationV2 organization = 1;
    }
}

message GetOrganizationByNameV2 {
    string org_name = 1;

    message Response {
        OrganizationV2 organization = 1;
    }
}

message ListOrganizationsV2 {
    common.Pagination pagination = 1;
    common.TernaryEnum.Ternary current_user_is_admin = 2;
    message Response {
        repeated OrganizationV2 organizations = 1;
        int64 total_records = 2;
        common.Pagination pagination = 3;
        repeated OrganizationStats organization_stats = 4;
    }
}

message SetOrganizationV2 {
    OrganizationV2 organization = 1;

    message Response {
        OrganizationV2 organization = 1;
    }
}

message DeleteOrganizationV2 {
    string org_id = 1;

    message Response {
    }
}

service OrganizationServiceV2 {
    // Gets information from a given organization
    rpc getOrganizationById (GetOrganizationByIdV2) returns (GetOrganizationByIdV2.Response){
        option (google.api.http) = {
            get: "/v2/organization/{org_id}"
        };
    };

    // Gets information from a given organization
    rpc getOrganizationByName (GetOrganizationByNameV2) returns (GetOrganizationByNameV2.Response){
        option (google.api.http) = {
            get: "/v2/organization/getOrganizationByName"
        };
    };

    // Lists the organizations that the current user can access
    rpc listOrganizations (ListOrganizationsV2) returns (ListOrganizationsV2.Response){
        option (google.api.http) = {
            get: "/v2/organization"
        };
    };

    // Create or update an organization
    // Automatically sets the user making the call as owner and adds to the organization
    rpc setOrganization (SetOrganizationV2) returns (SetOrganizationV2.Response){
        option (google.api.http) = {
            post: "/v2/organization"
            body: "*"
        };
    };

    // Delete an existing organization
    rpc deleteOrganization (DeleteOrganizationV2) returns (DeleteOrganizationV2.Response){
        option (google.api.http) = {
            delete: "/v2/organization/{org_id}"
            body: "*"
        };
    };

    rpc createOrUpdateContainerRegistryConfiguration (ContainerRegistryConfiguration) returns (ContainerRegistryConfiguration) {
        option (google.api.http) = {
            post : "/v2/organization/{org_id}/createOrUpdateContainerRegistryConfiguration"
            body : "*"
        };
    };

    rpc deleteContainerRegistryConfiguration (ContainerRegistryConfiguration) returns (Empty) {
        option (google.api.http) = {
            post : "/v2/organization/{org_id}/workspace/deleteContainerRegistryConfiguration"
            body : "*"
        };
    };
}
