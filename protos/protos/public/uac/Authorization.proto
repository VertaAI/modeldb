syntax = "proto3";

package ai.verta.uac;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac";

option java_multiple_files = true;
import "google/api/annotations.proto";
import "protos/public/uac/RoleService.proto";

// Answers the question "is any of `entities` allowed to perform any of `actions` on any of `resources`?"
// This allows sending a single query for a user+his teams and a resource+parents
// If the user wants more granularity, they should make multiple requests
message IsAllowed {
    repeated Entities entities = 1;
    repeated Action actions = 2;
    repeated Resources resources = 3;
    message Response {
        bool allowed = 1;
    }
};

// Same as above, but lists all entities that are allowed to perform a certain action on certain resources
message GetAllowedEntities {
    repeated Action actions = 1;
    repeated Resources resources = 2;

    message Response {
        repeated Entities entities = 1;
    };
};

// Same as above, but lists the resources on which actions can be performed by entities
message GetAllowedResources {
    repeated Entities entities = 1;
    repeated Action actions = 2;

    message Response {
        repeated Resources resources = 1;
    };
};

// Same as IsAllowed, but infers entities from the current logged user
message IsSelfAllowed {
    repeated Action actions = 2;
    repeated Resources resources = 3;

    message Response {
        bool allowed = 1;
    }
};

// Same as GetAllowedResources, but infers entities from the current logged user
message GetSelfAllowedResources {
    repeated Action actions = 2;

    message Response {
        repeated Resources resources = 1;
    };
};

message Actions {
  repeated Action actions = 2;
}

message GetSelfAllowedActionsBatch {
   Resources resources = 3;
   message Response {
       map<string, Actions> actions = 2; // key is resource id
   };
};

service AuthzService {
    rpc isAllowed (IsAllowed) returns (IsAllowed.Response) {
        option (google.api.http) = {
            post : "/v1/authz/isAllowed"
            body : "*"
        };
    };
    rpc getAllowedEntities (GetAllowedEntities) returns (GetAllowedEntities.Response) {
        option (google.api.http) = {
            post : "/v1/authz/getAllowedEntities"
            body : "*"
        };
    };
    rpc getAllowedResources (GetAllowedResources) returns (GetAllowedResources.Response) {
        option (google.api.http) = {
            post : "/v1/authz/getAllowedResources"
            body : "*"
        };
    };
    rpc getDireclyAllowedResources (GetAllowedResources) returns (GetAllowedResources.Response) {
        option (google.api.http) = {
            post : "/v1/authz/getDirectlyAllowedResources"
            body : "*"
        };
    };
    rpc isSelfAllowed (IsSelfAllowed) returns (IsSelfAllowed.Response) {
        option (google.api.http) = {
            post : "/v1/authz/isSelfAllowed"
            body : "*"
        };
    };
    rpc getSelfAllowedResources (GetSelfAllowedResources) returns (GetSelfAllowedResources.Response) {
        option (google.api.http) = {
            post : "/v1/authz/getSelfAllowedResources"
            body : "*"
        };
    };
    rpc getSelfDirectlyAllowedResources (GetSelfAllowedResources) returns (GetSelfAllowedResources.Response) {
        option (google.api.http) = {
            post : "/v1/authz/getSelfDirectlyAllowedResources"
            body : "*"
        };
    };
    rpc getSelfAllowedActionsBatch (GetSelfAllowedActionsBatch) returns (GetSelfAllowedActionsBatch.Response) {
        option (google.api.http) = {
            post : "/v1/authz/getSelfAllowedActionsBatch"
            body : "*"
        };
    };
};
