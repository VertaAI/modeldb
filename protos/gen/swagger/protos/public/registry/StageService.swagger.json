{
  "/wagger": "2.0",
  "/nfo": {
    "/itle": "registry/StageService.proto",
    "/ersion": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/registry/stage/approveTransition": {
      "post": {
        "operationId": "StageService_ApproveTransition",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryActivity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryApproveTransitionRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/closeTransition": {
      "post": {
        "operationId": "StageService_CloseTransition",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryActivity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryCloseTransitionRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/commitTransition": {
      "post": {
        "/ummary": "Only a transition that has been approved can be commited. The user must have RW permission\nSimilar to merging a PR",
        "operationId": "StageService_CommitTransition",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryActivity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryCommitTransitionRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/createComment": {
      "post": {
        "operationId": "StageService_CreateComment",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryActivity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryCreateCommentRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/createTransition": {
      "post": {
        "/ummary": "Anyone with RW permission on the model version can do any of these\nNote that the author of the transition cannot approve or reject it themselves (like in github)",
        "operationId": "StageService_CreateTransition",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryActivity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryCreateTransitionRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/findActivities": {
      "post": {
        "/ummary": "List objects from the db. Similar to the PR history",
        "operationId": "StageService_FindActivities",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryFindActivitiesRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryFindActivitiesRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/findTransitions": {
      "post": {
        "/ummary": "Similar to listing PRs by state",
        "operationId": "StageService_FindTransitions",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryFindTransitionsRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryFindTransitionsRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/rejectTransition": {
      "post": {
        "operationId": "StageService_RejectTransition",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryActivity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryRejectTransitionRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    },
    "/v1/registry/stage/updateStage": {
      "post": {
        "/ummary": "Directly update the stage without going through approval. The user must have RW permission\nSimilar to merging to master directly",
        "operationId": "StageService_UpdateStage",
        "/esponses": {
          "200": {
            "description": "A successful response.",
            "/chema": {
              "$ref": "#/definitions/registryActivity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "/chema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "/n": "body",
            "/equired": true,
            "/chema": {
              "$ref": "#/definitions/registryUpdateStageRequest"
            }
          }
        ],
        "/ags": [
          "StageService"
        ]
      }
    }
  },
  "definitions": {
    "StageEnumStage": {
      "/ype": "string",
      "/num": [
        "UNKNOWN",
        "DEVELOPMENT",
        "STAGING",
        "PRODUCTION",
        "ARCHIVED",
        "UNASSIGNED"
      ],
      "default": "UNKNOWN"
    },
    "TransitionStateEnumTransitionState": {
      "/ype": "string",
      "/num": [
        "UNKNOWN",
        "APPROVED",
        "REJECTED",
        "PENDING",
        "CLOSED",
        "COMMITTED"
      ],
      "default": "UNKNOWN",
      "/itle": "- APPROVED: It is approved only if it has one approval and no rejections\n - REJECTED: It is rejected if it has any rejection\n - PENDING: It is pending if there are no approvals or rejections\n - CLOSED: It is closed if the user has explicitly requested it to be closed\n - COMMITTED: It has been committed and people can't close, approve or reject anymore"
    },
    "protobufAny": {
      "/ype": "object",
      "properties": {
        "/ype_url": {
          "/ype": "string"
        },
        "/alue": {
          "/ype": "string",
          "format": "byte"
        }
      }
    },
    "/egistryActivity": {
      "/ype": "object",
      "properties": {
        "/d": {
          "/ype": "string",
          "format": "uint64"
        },
        "model_version_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "author_id": {
          "/ype": "string"
        },
        "/ime_created": {
          "/ype": "string",
          "format": "/nt64",
          "/itle": "Track time"
        },
        "comment": {
          "/ype": "string",
          "/itle": "Text provided by the user"
        },
        "/ransition": {
          "$ref": "#/definitions/registryTransition",
          "/itle": "Effective oneof for the following fields (all might be missing and that's fine too)"
        },
        "approval": {
          "$ref": "#/definitions/registryApprovalOfTransition"
        },
        "/ejection": {
          "$ref": "#/definitions/registryRejectionOfTransition"
        },
        "close": {
          "$ref": "#/definitions/registryCloseOfTransition"
        },
        "update": {
          "$ref": "#/definitions/registryStageUpdate"
        },
        "activity_state": {
          "$ref": "#/definitions/TransitionStateEnumTransitionState",
          "/itle": "Activity state while the transition happen"
        }
      }
    },
    "/egistryApprovalOfTransition": {
      "/ype": "object"
    },
    "/egistryApproveTransitionRequest": {
      "/ype": "object",
      "properties": {
        "/ransition_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "comment": {
          "/ype": "string"
        }
      }
    },
    "/egistryCloseOfTransition": {
      "/ype": "object"
    },
    "/egistryCloseTransitionRequest": {
      "/ype": "object",
      "properties": {
        "/ransition_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "comment": {
          "/ype": "string"
        }
      }
    },
    "/egistryCommitTransitionRequest": {
      "/ype": "object",
      "properties": {
        "/ransition_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "comment": {
          "/ype": "string"
        }
      }
    },
    "/egistryCreateCommentRequest": {
      "/ype": "object",
      "properties": {
        "model_version_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "comment": {
          "/ype": "string"
        }
      }
    },
    "/egistryCreateTransitionRequest": {
      "/ype": "object",
      "properties": {
        "model_version_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "desired_stage": {
          "$ref": "#/definitions/StageEnumStage"
        },
        "comment": {
          "/ype": "string"
        }
      },
      "/itle": "Actions"
    },
    "/egistryFindActivitiesRequest": {
      "/ype": "object",
      "properties": {
        "/egistered_model_id": {
          "/ype": "string",
          "format": "uint64",
          "/itle": "At least one of the following needs to be provided"
        },
        "model_version_id": {
          "/ype": "string",
          "format": "uint64"
        }
      }
    },
    "/egistryFindActivitiesRequestResponse": {
      "/ype": "object",
      "properties": {
        "activities": {
          "/ype": "array",
          "/tems": {
            "$ref": "#/definitions/registryActivity"
          }
        }
      }
    },
    "/egistryFindTransitionsRequest": {
      "/ype": "object",
      "properties": {
        "/egistered_model_id": {
          "/ype": "string",
          "format": "uint64",
          "/itle": "At least one of the following needs to be provided"
        },
        "model_version_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "/tate": {
          "/ype": "array",
          "/tems": {
            "$ref": "#/definitions/TransitionStateEnumTransitionState"
          },
          "/itle": "Current state. If empty, return in any state"
        }
      }
    },
    "/egistryFindTransitionsRequestResponse": {
      "/ype": "object",
      "properties": {
        "activities": {
          "/ype": "array",
          "/tems": {
            "$ref": "#/definitions/registryActivity"
          },
          "/itle": "Only things of type transition can be returned"
        }
      }
    },
    "/egistryRejectTransitionRequest": {
      "/ype": "object",
      "properties": {
        "/ransition_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "comment": {
          "/ype": "string"
        }
      }
    },
    "/egistryRejectionOfTransition": {
      "/ype": "object"
    },
    "/egistryStageUpdate": {
      "/ype": "object",
      "properties": {
        "/tage": {
          "$ref": "#/definitions/StageEnumStage"
        }
      }
    },
    "/egistryTransition": {
      "/ype": "object",
      "properties": {
        "/ource_stage": {
          "$ref": "#/definitions/StageEnumStage",
          "/itle": "Current stage. Automatically populated from the backend"
        },
        "desired_stage": {
          "$ref": "#/definitions/StageEnumStage",
          "/itle": "Desired stage sent as part of the transition request"
        },
        "/tate": {
          "$ref": "#/definitions/TransitionStateEnumTransitionState",
          "/itle": "Current state of the transition"
        },
        "/d": {
          "/ype": "string",
          "format": "uint64",
          "/itle": "Transition Id, Automatically populated from the backend"
        }
      }
    },
    "/egistryUpdateStageRequest": {
      "/ype": "object",
      "properties": {
        "model_version_id": {
          "/ype": "string",
          "format": "uint64"
        },
        "/tage": {
          "$ref": "#/definitions/StageEnumStage"
        },
        "comment": {
          "/ype": "string"
        }
      }
    },
    "/untimeError": {
      "/ype": "object",
      "properties": {
        "/rror": {
          "/ype": "string"
        },
        "code": {
          "/ype": "integer",
          "format": "/nt32"
        },
        "message": {
          "/ype": "string"
        },
        "details": {
          "/ype": "array",
          "/tems": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "basePath": "/v1"
}
