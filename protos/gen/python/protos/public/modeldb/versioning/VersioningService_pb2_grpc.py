# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...modeldb.versioning import VersioningService_pb2 as modeldb_dot_versioning_dot_VersioningService__pb2


class VersioningServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListRepositories = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/ListRepositories',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListRepositoriesRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListRepositoriesRequest.Response.FromString,
                )
        self.GetRepository = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/GetRepository',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetRepositoryRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetRepositoryRequest.Response.FromString,
                )
        self.CreateRepository = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/CreateRepository',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.Response.FromString,
                )
        self.UpdateRepository = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/UpdateRepository',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.Response.FromString,
                )
        self.DeleteRepository = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/DeleteRepository',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteRepositoryRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteRepositoryRequest.Response.FromString,
                )
        self.ListCommits = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/ListCommits',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsRequest.Response.FromString,
                )
        self.GetCommit = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/GetCommit',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitRequest.Response.FromString,
                )
        self.CreateCommit = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/CreateCommit',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.CreateCommitRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.CreateCommitRequest.Response.FromString,
                )
        self.DeleteCommit = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/DeleteCommit',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteCommitRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteCommitRequest.Response.FromString,
                )
        self.ListCommitBlobs = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitBlobsRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitBlobsRequest.Response.FromString,
                )
        self.GetCommitComponent = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitComponentRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitComponentRequest.Response.FromString,
                )
        self.ComputeRepositoryDiff = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ComputeRepositoryDiffRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ComputeRepositoryDiffRequest.Response.FromString,
                )
        self.ListBranches = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/ListBranches',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListBranchesRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListBranchesRequest.Response.FromString,
                )
        self.GetBranch = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/GetBranch',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetBranchRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetBranchRequest.Response.FromString,
                )
        self.SetBranch = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/SetBranch',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetBranchRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetBranchRequest.Response.FromString,
                )
        self.DeleteBranch = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/DeleteBranch',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteBranchRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteBranchRequest.Response.FromString,
                )
        self.ListCommitsLog = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsLogRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsLogRequest.Response.FromString,
                )
        self.MergeRepositoryCommits = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.MergeRepositoryCommitsRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.MergeRepositoryCommitsRequest.Response.FromString,
                )
        self.RevertRepositoryCommits = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.RevertRepositoryCommitsRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.RevertRepositoryCommitsRequest.Response.FromString,
                )
        self.ListTags = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/ListTags',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListTagsRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListTagsRequest.Response.FromString,
                )
        self.GetTag = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/GetTag',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetTagRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetTagRequest.Response.FromString,
                )
        self.SetTag = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/SetTag',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetTagRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetTagRequest.Response.FromString,
                )
        self.DeleteTag = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/DeleteTag',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteTagRequest.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteTagRequest.Response.FromString,
                )
        self.findRepositories = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/findRepositories',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositories.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositories.Response.FromString,
                )
        self.findRepositoriesBlobs = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/findRepositoriesBlobs',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositoriesBlobs.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositoriesBlobs.Response.FromString,
                )
        self.getUrlForBlobVersioned = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/getUrlForBlobVersioned',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetUrlForBlobVersioned.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetUrlForBlobVersioned.Response.FromString,
                )
        self.commitVersionedBlobArtifactPart = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/commitVersionedBlobArtifactPart',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitVersionedBlobArtifactPart.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitVersionedBlobArtifactPart.Response.FromString,
                )
        self.getCommittedVersionedBlobArtifactParts = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/getCommittedVersionedBlobArtifactParts',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommittedVersionedBlobArtifactParts.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommittedVersionedBlobArtifactParts.Response.FromString,
                )
        self.commitMultipartVersionedBlobArtifact = channel.unary_unary(
                '/ai.verta.modeldb.versioning.VersioningService/commitMultipartVersionedBlobArtifact',
                request_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitMultipartVersionedBlobArtifact.SerializeToString,
                response_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitMultipartVersionedBlobArtifact.Response.FromString,
                )


class VersioningServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListRepositories(self, request, context):
        """CRUD for repositories
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRepository(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCommits(self, request, context):
        """CRUD for commits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCommitBlobs(self, request, context):
        """Getting blobs and folders in a commit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommitComponent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeRepositoryDiff(self, request, context):
        """Git-like operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBranches(self, request, context):
        """CRUD for Branches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBranch(self, request, context):
        """Unlike tags, branches can be updated. The API must verify that the new commit is a child of the current branch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCommitsLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MergeRepositoryCommits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevertRepositoryCommits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTags(self, request, context):
        """CRUD for tags
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTag(self, request, context):
        """Can't update a tag. If someone tries to set one that exists, we should error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findRepositories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findRepositoriesBlobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUrlForBlobVersioned(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commitVersionedBlobArtifactPart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCommittedVersionedBlobArtifactParts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commitMultipartVersionedBlobArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VersioningServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListRepositories': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRepositories,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListRepositoriesRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListRepositoriesRequest.Response.SerializeToString,
            ),
            'GetRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRepository,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetRepositoryRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetRepositoryRequest.Response.SerializeToString,
            ),
            'CreateRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRepository,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.Response.SerializeToString,
            ),
            'UpdateRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRepository,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.Response.SerializeToString,
            ),
            'DeleteRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRepository,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteRepositoryRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteRepositoryRequest.Response.SerializeToString,
            ),
            'ListCommits': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCommits,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsRequest.Response.SerializeToString,
            ),
            'GetCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommit,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitRequest.Response.SerializeToString,
            ),
            'CreateCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCommit,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.CreateCommitRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.CreateCommitRequest.Response.SerializeToString,
            ),
            'DeleteCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCommit,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteCommitRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteCommitRequest.Response.SerializeToString,
            ),
            'ListCommitBlobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCommitBlobs,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitBlobsRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitBlobsRequest.Response.SerializeToString,
            ),
            'GetCommitComponent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommitComponent,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitComponentRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitComponentRequest.Response.SerializeToString,
            ),
            'ComputeRepositoryDiff': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeRepositoryDiff,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ComputeRepositoryDiffRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ComputeRepositoryDiffRequest.Response.SerializeToString,
            ),
            'ListBranches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBranches,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListBranchesRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListBranchesRequest.Response.SerializeToString,
            ),
            'GetBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBranch,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetBranchRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetBranchRequest.Response.SerializeToString,
            ),
            'SetBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBranch,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetBranchRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetBranchRequest.Response.SerializeToString,
            ),
            'DeleteBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBranch,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteBranchRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteBranchRequest.Response.SerializeToString,
            ),
            'ListCommitsLog': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCommitsLog,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsLogRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsLogRequest.Response.SerializeToString,
            ),
            'MergeRepositoryCommits': grpc.unary_unary_rpc_method_handler(
                    servicer.MergeRepositoryCommits,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.MergeRepositoryCommitsRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.MergeRepositoryCommitsRequest.Response.SerializeToString,
            ),
            'RevertRepositoryCommits': grpc.unary_unary_rpc_method_handler(
                    servicer.RevertRepositoryCommits,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.RevertRepositoryCommitsRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.RevertRepositoryCommitsRequest.Response.SerializeToString,
            ),
            'ListTags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTags,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListTagsRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.ListTagsRequest.Response.SerializeToString,
            ),
            'GetTag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTag,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetTagRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetTagRequest.Response.SerializeToString,
            ),
            'SetTag': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTag,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetTagRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.SetTagRequest.Response.SerializeToString,
            ),
            'DeleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTag,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteTagRequest.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.DeleteTagRequest.Response.SerializeToString,
            ),
            'findRepositories': grpc.unary_unary_rpc_method_handler(
                    servicer.findRepositories,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositories.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositories.Response.SerializeToString,
            ),
            'findRepositoriesBlobs': grpc.unary_unary_rpc_method_handler(
                    servicer.findRepositoriesBlobs,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositoriesBlobs.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositoriesBlobs.Response.SerializeToString,
            ),
            'getUrlForBlobVersioned': grpc.unary_unary_rpc_method_handler(
                    servicer.getUrlForBlobVersioned,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetUrlForBlobVersioned.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetUrlForBlobVersioned.Response.SerializeToString,
            ),
            'commitVersionedBlobArtifactPart': grpc.unary_unary_rpc_method_handler(
                    servicer.commitVersionedBlobArtifactPart,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitVersionedBlobArtifactPart.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitVersionedBlobArtifactPart.Response.SerializeToString,
            ),
            'getCommittedVersionedBlobArtifactParts': grpc.unary_unary_rpc_method_handler(
                    servicer.getCommittedVersionedBlobArtifactParts,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommittedVersionedBlobArtifactParts.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.GetCommittedVersionedBlobArtifactParts.Response.SerializeToString,
            ),
            'commitMultipartVersionedBlobArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.commitMultipartVersionedBlobArtifact,
                    request_deserializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitMultipartVersionedBlobArtifact.FromString,
                    response_serializer=modeldb_dot_versioning_dot_VersioningService__pb2.CommitMultipartVersionedBlobArtifact.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai.verta.modeldb.versioning.VersioningService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VersioningService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListRepositories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/ListRepositories',
            modeldb_dot_versioning_dot_VersioningService__pb2.ListRepositoriesRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.ListRepositoriesRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/GetRepository',
            modeldb_dot_versioning_dot_VersioningService__pb2.GetRepositoryRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.GetRepositoryRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/CreateRepository',
            modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/UpdateRepository',
            modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.SetRepository.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/DeleteRepository',
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteRepositoryRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteRepositoryRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCommits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/ListCommits',
            modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/GetCommit',
            modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/CreateCommit',
            modeldb_dot_versioning_dot_VersioningService__pb2.CreateCommitRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.CreateCommitRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/DeleteCommit',
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteCommitRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteCommitRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCommitBlobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs',
            modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitBlobsRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitBlobsRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommitComponent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent',
            modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitComponentRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.GetCommitComponentRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputeRepositoryDiff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff',
            modeldb_dot_versioning_dot_VersioningService__pb2.ComputeRepositoryDiffRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.ComputeRepositoryDiffRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBranches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/ListBranches',
            modeldb_dot_versioning_dot_VersioningService__pb2.ListBranchesRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.ListBranchesRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/GetBranch',
            modeldb_dot_versioning_dot_VersioningService__pb2.GetBranchRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.GetBranchRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/SetBranch',
            modeldb_dot_versioning_dot_VersioningService__pb2.SetBranchRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.SetBranchRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/DeleteBranch',
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteBranchRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteBranchRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCommitsLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog',
            modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsLogRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.ListCommitsLogRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MergeRepositoryCommits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits',
            modeldb_dot_versioning_dot_VersioningService__pb2.MergeRepositoryCommitsRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.MergeRepositoryCommitsRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevertRepositoryCommits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits',
            modeldb_dot_versioning_dot_VersioningService__pb2.RevertRepositoryCommitsRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.RevertRepositoryCommitsRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/ListTags',
            modeldb_dot_versioning_dot_VersioningService__pb2.ListTagsRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.ListTagsRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/GetTag',
            modeldb_dot_versioning_dot_VersioningService__pb2.GetTagRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.GetTagRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/SetTag',
            modeldb_dot_versioning_dot_VersioningService__pb2.SetTagRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.SetTagRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/DeleteTag',
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteTagRequest.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.DeleteTagRequest.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findRepositories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/findRepositories',
            modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositories.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositories.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findRepositoriesBlobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/findRepositoriesBlobs',
            modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositoriesBlobs.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.FindRepositoriesBlobs.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUrlForBlobVersioned(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/getUrlForBlobVersioned',
            modeldb_dot_versioning_dot_VersioningService__pb2.GetUrlForBlobVersioned.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.GetUrlForBlobVersioned.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commitVersionedBlobArtifactPart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/commitVersionedBlobArtifactPart',
            modeldb_dot_versioning_dot_VersioningService__pb2.CommitVersionedBlobArtifactPart.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.CommitVersionedBlobArtifactPart.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCommittedVersionedBlobArtifactParts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/getCommittedVersionedBlobArtifactParts',
            modeldb_dot_versioning_dot_VersioningService__pb2.GetCommittedVersionedBlobArtifactParts.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.GetCommittedVersionedBlobArtifactParts.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commitMultipartVersionedBlobArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.modeldb.versioning.VersioningService/commitMultipartVersionedBlobArtifact',
            modeldb_dot_versioning_dot_VersioningService__pb2.CommitMultipartVersionedBlobArtifact.SerializeToString,
            modeldb_dot_versioning_dot_VersioningService__pb2.CommitMultipartVersionedBlobArtifact.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
