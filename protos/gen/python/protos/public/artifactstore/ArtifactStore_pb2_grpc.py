# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..artifactstore import ArtifactStore_pb2 as artifactstore_dot_ArtifactStore__pb2


class ArtifactStoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.storeArtifact = channel.unary_unary(
                '/ai.verta.artifactstore.ArtifactStore/storeArtifact',
                request_serializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifact.SerializeToString,
                response_deserializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifact.Response.FromString,
                )
        self.storeArtifactWithStream = channel.unary_unary(
                '/ai.verta.artifactstore.ArtifactStore/storeArtifactWithStream',
                request_serializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifactWithStream.SerializeToString,
                response_deserializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifactWithStream.Response.FromString,
                )
        self.getArtifact = channel.unary_unary(
                '/ai.verta.artifactstore.ArtifactStore/getArtifact',
                request_serializer=artifactstore_dot_ArtifactStore__pb2.GetArtifact.SerializeToString,
                response_deserializer=artifactstore_dot_ArtifactStore__pb2.GetArtifact.Response.FromString,
                )
        self.deleteArtifact = channel.unary_unary(
                '/ai.verta.artifactstore.ArtifactStore/deleteArtifact',
                request_serializer=artifactstore_dot_ArtifactStore__pb2.DeleteArtifact.SerializeToString,
                response_deserializer=artifactstore_dot_ArtifactStore__pb2.DeleteArtifact.Response.FromString,
                )


class ArtifactStoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def storeArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def storeArtifactWithStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArtifactStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'storeArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.storeArtifact,
                    request_deserializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifact.FromString,
                    response_serializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifact.Response.SerializeToString,
            ),
            'storeArtifactWithStream': grpc.unary_unary_rpc_method_handler(
                    servicer.storeArtifactWithStream,
                    request_deserializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifactWithStream.FromString,
                    response_serializer=artifactstore_dot_ArtifactStore__pb2.StoreArtifactWithStream.Response.SerializeToString,
            ),
            'getArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.getArtifact,
                    request_deserializer=artifactstore_dot_ArtifactStore__pb2.GetArtifact.FromString,
                    response_serializer=artifactstore_dot_ArtifactStore__pb2.GetArtifact.Response.SerializeToString,
            ),
            'deleteArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteArtifact,
                    request_deserializer=artifactstore_dot_ArtifactStore__pb2.DeleteArtifact.FromString,
                    response_serializer=artifactstore_dot_ArtifactStore__pb2.DeleteArtifact.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai.verta.artifactstore.ArtifactStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArtifactStore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def storeArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.artifactstore.ArtifactStore/storeArtifact',
            artifactstore_dot_ArtifactStore__pb2.StoreArtifact.SerializeToString,
            artifactstore_dot_ArtifactStore__pb2.StoreArtifact.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def storeArtifactWithStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.artifactstore.ArtifactStore/storeArtifactWithStream',
            artifactstore_dot_ArtifactStore__pb2.StoreArtifactWithStream.SerializeToString,
            artifactstore_dot_ArtifactStore__pb2.StoreArtifactWithStream.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.artifactstore.ArtifactStore/getArtifact',
            artifactstore_dot_ArtifactStore__pb2.GetArtifact.SerializeToString,
            artifactstore_dot_ArtifactStore__pb2.GetArtifact.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai.verta.artifactstore.ArtifactStore/deleteArtifact',
            artifactstore_dot_ArtifactStore__pb2.DeleteArtifact.SerializeToString,
            artifactstore_dot_ArtifactStore__pb2.DeleteArtifact.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
