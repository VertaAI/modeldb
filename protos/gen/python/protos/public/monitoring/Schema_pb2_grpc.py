# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from ..monitoring import MonitoredEntity_pb2 as monitoring_dot_MonitoredEntity__pb2
from ..monitoring import Schema_pb2 as monitoring_dot_Schema__pb2


class SchemaServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.createSchema = channel.unary_unary(
        '/ai.verta.monitoring.SchemaService/createSchema',
        request_serializer=monitoring_dot_Schema__pb2.CreateSchema.SerializeToString,
        response_deserializer=monitoring_dot_Schema__pb2.Schema.FromString,
        )
    self.updateSchema = channel.unary_unary(
        '/ai.verta.monitoring.SchemaService/updateSchema',
        request_serializer=monitoring_dot_Schema__pb2.UpdateSchema.SerializeToString,
        response_deserializer=monitoring_dot_Schema__pb2.Schema.FromString,
        )
    self.findSchema = channel.unary_unary(
        '/ai.verta.monitoring.SchemaService/findSchema',
        request_serializer=monitoring_dot_Schema__pb2.FindSchemas.SerializeToString,
        response_deserializer=monitoring_dot_Schema__pb2.FindSchemas.Response.FromString,
        )
    self.deleteSchema = channel.unary_unary(
        '/ai.verta.monitoring.SchemaService/deleteSchema',
        request_serializer=monitoring_dot_Schema__pb2.DeleteSchema.SerializeToString,
        response_deserializer=monitoring_dot_MonitoredEntity__pb2.Empty.FromString,
        )


class SchemaServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def createSchema(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateSchema(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def findSchema(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteSchema(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SchemaServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'createSchema': grpc.unary_unary_rpc_method_handler(
          servicer.createSchema,
          request_deserializer=monitoring_dot_Schema__pb2.CreateSchema.FromString,
          response_serializer=monitoring_dot_Schema__pb2.Schema.SerializeToString,
      ),
      'updateSchema': grpc.unary_unary_rpc_method_handler(
          servicer.updateSchema,
          request_deserializer=monitoring_dot_Schema__pb2.UpdateSchema.FromString,
          response_serializer=monitoring_dot_Schema__pb2.Schema.SerializeToString,
      ),
      'findSchema': grpc.unary_unary_rpc_method_handler(
          servicer.findSchema,
          request_deserializer=monitoring_dot_Schema__pb2.FindSchemas.FromString,
          response_serializer=monitoring_dot_Schema__pb2.FindSchemas.Response.SerializeToString,
      ),
      'deleteSchema': grpc.unary_unary_rpc_method_handler(
          servicer.deleteSchema,
          request_deserializer=monitoring_dot_Schema__pb2.DeleteSchema.FromString,
          response_serializer=monitoring_dot_MonitoredEntity__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ai.verta.monitoring.SchemaService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
