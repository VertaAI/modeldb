// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: monitoring/Alert.proto

package monitoring

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NotificationChannelTypeEnum_NotificationChannelType int32

const (
	NotificationChannelTypeEnum_UNKNOWN NotificationChannelTypeEnum_NotificationChannelType = 0
	NotificationChannelTypeEnum_SLACK   NotificationChannelTypeEnum_NotificationChannelType = 1
)

// Enum value maps for NotificationChannelTypeEnum_NotificationChannelType.
var (
	NotificationChannelTypeEnum_NotificationChannelType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SLACK",
	}
	NotificationChannelTypeEnum_NotificationChannelType_value = map[string]int32{
		"UNKNOWN": 0,
		"SLACK":   1,
	}
)

func (x NotificationChannelTypeEnum_NotificationChannelType) Enum() *NotificationChannelTypeEnum_NotificationChannelType {
	p := new(NotificationChannelTypeEnum_NotificationChannelType)
	*p = x
	return p
}

func (x NotificationChannelTypeEnum_NotificationChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationChannelTypeEnum_NotificationChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Alert_proto_enumTypes[0].Descriptor()
}

func (NotificationChannelTypeEnum_NotificationChannelType) Type() protoreflect.EnumType {
	return &file_monitoring_Alert_proto_enumTypes[0]
}

func (x NotificationChannelTypeEnum_NotificationChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationChannelTypeEnum_NotificationChannelType.Descriptor instead.
func (NotificationChannelTypeEnum_NotificationChannelType) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{0, 0}
}

type AlerterTypeEnum_AlerterType int32

const (
	AlerterTypeEnum_UNKNOWN   AlerterTypeEnum_AlerterType = 0
	AlerterTypeEnum_FIXED     AlerterTypeEnum_AlerterType = 1
	AlerterTypeEnum_REFERENCE AlerterTypeEnum_AlerterType = 2
	AlerterTypeEnum_RANGE     AlerterTypeEnum_AlerterType = 3
)

// Enum value maps for AlerterTypeEnum_AlerterType.
var (
	AlerterTypeEnum_AlerterType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FIXED",
		2: "REFERENCE",
		3: "RANGE",
	}
	AlerterTypeEnum_AlerterType_value = map[string]int32{
		"UNKNOWN":   0,
		"FIXED":     1,
		"REFERENCE": 2,
		"RANGE":     3,
	}
)

func (x AlerterTypeEnum_AlerterType) Enum() *AlerterTypeEnum_AlerterType {
	p := new(AlerterTypeEnum_AlerterType)
	*p = x
	return p
}

func (x AlerterTypeEnum_AlerterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlerterTypeEnum_AlerterType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Alert_proto_enumTypes[1].Descriptor()
}

func (AlerterTypeEnum_AlerterType) Type() protoreflect.EnumType {
	return &file_monitoring_Alert_proto_enumTypes[1]
}

func (x AlerterTypeEnum_AlerterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlerterTypeEnum_AlerterType.Descriptor instead.
func (AlerterTypeEnum_AlerterType) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{7, 0}
}

type AlertStatusEnum_AlertStatus int32

const (
	AlertStatusEnum_UNKNOWN  AlertStatusEnum_AlertStatus = 0
	AlertStatusEnum_OK       AlertStatusEnum_AlertStatus = 1
	AlertStatusEnum_ALERTING AlertStatusEnum_AlertStatus = 2
)

// Enum value maps for AlertStatusEnum_AlertStatus.
var (
	AlertStatusEnum_AlertStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "ALERTING",
	}
	AlertStatusEnum_AlertStatus_value = map[string]int32{
		"UNKNOWN":  0,
		"OK":       1,
		"ALERTING": 2,
	}
)

func (x AlertStatusEnum_AlertStatus) Enum() *AlertStatusEnum_AlertStatus {
	p := new(AlertStatusEnum_AlertStatus)
	*p = x
	return p
}

func (x AlertStatusEnum_AlertStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertStatusEnum_AlertStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Alert_proto_enumTypes[2].Descriptor()
}

func (AlertStatusEnum_AlertStatus) Type() protoreflect.EnumType {
	return &file_monitoring_Alert_proto_enumTypes[2]
}

func (x AlertStatusEnum_AlertStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertStatusEnum_AlertStatus.Descriptor instead.
func (AlertStatusEnum_AlertStatus) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{8, 0}
}

type NotificationChannelTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotificationChannelTypeEnum) Reset() {
	*x = NotificationChannelTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannelTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannelTypeEnum) ProtoMessage() {}

func (x *NotificationChannelTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannelTypeEnum.ProtoReflect.Descriptor instead.
func (*NotificationChannelTypeEnum) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{0}
}

// Content of an notification channel
type NotificationChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                                              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAtMillis uint64                                              `protobuf:"varint,3,opt,name=created_at_millis,json=createdAtMillis,proto3" json:"created_at_millis,omitempty"`
	UpdatedAtMillis uint64                                              `protobuf:"varint,4,opt,name=updated_at_millis,json=updatedAtMillis,proto3" json:"updated_at_millis,omitempty"`
	Type            NotificationChannelTypeEnum_NotificationChannelType `protobuf:"varint,5,opt,name=type,proto3,enum=ai.verta.monitoring.NotificationChannelTypeEnum_NotificationChannelType" json:"type,omitempty"`
	// Types that are assignable to Channel:
	//	*NotificationChannel_SlackWebhook
	Channel     isNotificationChannel_Channel `protobuf_oneof:"channel"`
	WorkspaceId uint64                        `protobuf:"varint,7,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *NotificationChannel) Reset() {
	*x = NotificationChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannel) ProtoMessage() {}

func (x *NotificationChannel) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannel.ProtoReflect.Descriptor instead.
func (*NotificationChannel) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationChannel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NotificationChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotificationChannel) GetCreatedAtMillis() uint64 {
	if x != nil {
		return x.CreatedAtMillis
	}
	return 0
}

func (x *NotificationChannel) GetUpdatedAtMillis() uint64 {
	if x != nil {
		return x.UpdatedAtMillis
	}
	return 0
}

func (x *NotificationChannel) GetType() NotificationChannelTypeEnum_NotificationChannelType {
	if x != nil {
		return x.Type
	}
	return NotificationChannelTypeEnum_UNKNOWN
}

func (m *NotificationChannel) GetChannel() isNotificationChannel_Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (x *NotificationChannel) GetSlackWebhook() *NotificationChannelSlackWebhook {
	if x, ok := x.GetChannel().(*NotificationChannel_SlackWebhook); ok {
		return x.SlackWebhook
	}
	return nil
}

func (x *NotificationChannel) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

type isNotificationChannel_Channel interface {
	isNotificationChannel_Channel()
}

type NotificationChannel_SlackWebhook struct {
	SlackWebhook *NotificationChannelSlackWebhook `protobuf:"bytes,6,opt,name=slack_webhook,json=slackWebhook,proto3,oneof"`
}

func (*NotificationChannel_SlackWebhook) isNotificationChannel_Channel() {}

// Configuration for an notification channel for slack webhooks
type NotificationChannelSlackWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NotificationChannelSlackWebhook) Reset() {
	*x = NotificationChannelSlackWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannelSlackWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannelSlackWebhook) ProtoMessage() {}

func (x *NotificationChannelSlackWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannelSlackWebhook.ProtoReflect.Descriptor instead.
func (*NotificationChannelSlackWebhook) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{2}
}

func (x *NotificationChannelSlackWebhook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Create a new notification channel. Names must be unique
type CreateNotificationChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel         *NotificationChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"` // Deprecated. But keeping for now for compatibility
	Name            string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAtMillis uint64               `protobuf:"varint,3,opt,name=created_at_millis,json=createdAtMillis,proto3" json:"created_at_millis,omitempty"`
	UpdatedAtMillis uint64               `protobuf:"varint,4,opt,name=updated_at_millis,json=updatedAtMillis,proto3" json:"updated_at_millis,omitempty"`
	// Types that are assignable to WorkspaceIdentifier:
	//	*CreateNotificationChannelRequest_WorkspaceId
	//	*CreateNotificationChannelRequest_WorkspaceName
	WorkspaceIdentifier isCreateNotificationChannelRequest_WorkspaceIdentifier `protobuf_oneof:"workspace_identifier"`
	Type                NotificationChannelTypeEnum_NotificationChannelType    `protobuf:"varint,5,opt,name=type,proto3,enum=ai.verta.monitoring.NotificationChannelTypeEnum_NotificationChannelType" json:"type,omitempty"`
	// Types that are assignable to NotificationChannel:
	//	*CreateNotificationChannelRequest_SlackWebhook
	NotificationChannel isCreateNotificationChannelRequest_NotificationChannel `protobuf_oneof:"notification_channel"`
}

func (x *CreateNotificationChannelRequest) Reset() {
	*x = CreateNotificationChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationChannelRequest) ProtoMessage() {}

func (x *CreateNotificationChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateNotificationChannelRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNotificationChannelRequest) GetChannel() *NotificationChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *CreateNotificationChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNotificationChannelRequest) GetCreatedAtMillis() uint64 {
	if x != nil {
		return x.CreatedAtMillis
	}
	return 0
}

func (x *CreateNotificationChannelRequest) GetUpdatedAtMillis() uint64 {
	if x != nil {
		return x.UpdatedAtMillis
	}
	return 0
}

func (m *CreateNotificationChannelRequest) GetWorkspaceIdentifier() isCreateNotificationChannelRequest_WorkspaceIdentifier {
	if m != nil {
		return m.WorkspaceIdentifier
	}
	return nil
}

func (x *CreateNotificationChannelRequest) GetWorkspaceId() uint64 {
	if x, ok := x.GetWorkspaceIdentifier().(*CreateNotificationChannelRequest_WorkspaceId); ok {
		return x.WorkspaceId
	}
	return 0
}

func (x *CreateNotificationChannelRequest) GetWorkspaceName() string {
	if x, ok := x.GetWorkspaceIdentifier().(*CreateNotificationChannelRequest_WorkspaceName); ok {
		return x.WorkspaceName
	}
	return ""
}

func (x *CreateNotificationChannelRequest) GetType() NotificationChannelTypeEnum_NotificationChannelType {
	if x != nil {
		return x.Type
	}
	return NotificationChannelTypeEnum_UNKNOWN
}

func (m *CreateNotificationChannelRequest) GetNotificationChannel() isCreateNotificationChannelRequest_NotificationChannel {
	if m != nil {
		return m.NotificationChannel
	}
	return nil
}

func (x *CreateNotificationChannelRequest) GetSlackWebhook() *NotificationChannelSlackWebhook {
	if x, ok := x.GetNotificationChannel().(*CreateNotificationChannelRequest_SlackWebhook); ok {
		return x.SlackWebhook
	}
	return nil
}

type isCreateNotificationChannelRequest_WorkspaceIdentifier interface {
	isCreateNotificationChannelRequest_WorkspaceIdentifier()
}

type CreateNotificationChannelRequest_WorkspaceId struct {
	WorkspaceId uint64 `protobuf:"varint,7,opt,name=workspace_id,json=workspaceId,proto3,oneof"`
}

type CreateNotificationChannelRequest_WorkspaceName struct {
	WorkspaceName string `protobuf:"bytes,8,opt,name=workspace_name,json=workspaceName,proto3,oneof"`
}

func (*CreateNotificationChannelRequest_WorkspaceId) isCreateNotificationChannelRequest_WorkspaceIdentifier() {
}

func (*CreateNotificationChannelRequest_WorkspaceName) isCreateNotificationChannelRequest_WorkspaceIdentifier() {
}

type isCreateNotificationChannelRequest_NotificationChannel interface {
	isCreateNotificationChannelRequest_NotificationChannel()
}

type CreateNotificationChannelRequest_SlackWebhook struct {
	SlackWebhook *NotificationChannelSlackWebhook `protobuf:"bytes,6,opt,name=slack_webhook,json=slackWebhook,proto3,oneof"`
}

func (*CreateNotificationChannelRequest_SlackWebhook) isCreateNotificationChannelRequest_NotificationChannel() {
}

// Updates an notification channel. The matching with a previous one happens from the id being the same
type UpdateNotificationChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *NotificationChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *UpdateNotificationChannelRequest) Reset() {
	*x = UpdateNotificationChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationChannelRequest) ProtoMessage() {}

func (x *UpdateNotificationChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotificationChannelRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNotificationChannelRequest) GetChannel() *NotificationChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

// Find an notification channel based on the different fields
type FindNotificationChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids   []uint64                       `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Names []string                       `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Types []*NotificationChannelTypeEnum `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	// Pagination
	PageNumber int32 `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32 `protobuf:"varint,5,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	// Types that are assignable to WorkspaceIdentifier:
	//	*FindNotificationChannelRequest_WorkspaceId
	//	*FindNotificationChannelRequest_WorkspaceName
	WorkspaceIdentifier isFindNotificationChannelRequest_WorkspaceIdentifier `protobuf_oneof:"workspace_identifier"`
}

func (x *FindNotificationChannelRequest) Reset() {
	*x = FindNotificationChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNotificationChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNotificationChannelRequest) ProtoMessage() {}

func (x *FindNotificationChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNotificationChannelRequest.ProtoReflect.Descriptor instead.
func (*FindNotificationChannelRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{5}
}

func (x *FindNotificationChannelRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FindNotificationChannelRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FindNotificationChannelRequest) GetTypes() []*NotificationChannelTypeEnum {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *FindNotificationChannelRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindNotificationChannelRequest) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (m *FindNotificationChannelRequest) GetWorkspaceIdentifier() isFindNotificationChannelRequest_WorkspaceIdentifier {
	if m != nil {
		return m.WorkspaceIdentifier
	}
	return nil
}

func (x *FindNotificationChannelRequest) GetWorkspaceId() uint64 {
	if x, ok := x.GetWorkspaceIdentifier().(*FindNotificationChannelRequest_WorkspaceId); ok {
		return x.WorkspaceId
	}
	return 0
}

func (x *FindNotificationChannelRequest) GetWorkspaceName() string {
	if x, ok := x.GetWorkspaceIdentifier().(*FindNotificationChannelRequest_WorkspaceName); ok {
		return x.WorkspaceName
	}
	return ""
}

type isFindNotificationChannelRequest_WorkspaceIdentifier interface {
	isFindNotificationChannelRequest_WorkspaceIdentifier()
}

type FindNotificationChannelRequest_WorkspaceId struct {
	WorkspaceId uint64 `protobuf:"varint,6,opt,name=workspace_id,json=workspaceId,proto3,oneof"`
}

type FindNotificationChannelRequest_WorkspaceName struct {
	WorkspaceName string `protobuf:"bytes,7,opt,name=workspace_name,json=workspaceName,proto3,oneof"`
}

func (*FindNotificationChannelRequest_WorkspaceId) isFindNotificationChannelRequest_WorkspaceIdentifier() {
}

func (*FindNotificationChannelRequest_WorkspaceName) isFindNotificationChannelRequest_WorkspaceIdentifier() {
}

// Delete notification channels
type DeleteNotificationChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteNotificationChannelRequest) Reset() {
	*x = DeleteNotificationChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotificationChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotificationChannelRequest) ProtoMessage() {}

func (x *DeleteNotificationChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotificationChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteNotificationChannelRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteNotificationChannelRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type AlerterTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlerterTypeEnum) Reset() {
	*x = AlerterTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlerterTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlerterTypeEnum) ProtoMessage() {}

func (x *AlerterTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlerterTypeEnum.ProtoReflect.Descriptor instead.
func (*AlerterTypeEnum) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{7}
}

type AlertStatusEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlertStatusEnum) Reset() {
	*x = AlertStatusEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertStatusEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertStatusEnum) ProtoMessage() {}

func (x *AlertStatusEnum) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertStatusEnum.ProtoReflect.Descriptor instead.
func (*AlertStatusEnum) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{8}
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Names are unique within a monitored entity
	MonitoredEntityId uint64 `protobuf:"varint,3,opt,name=monitored_entity_id,json=monitoredEntityId,proto3" json:"monitored_entity_id,omitempty"`
	CreatedAtMillis   uint64 `protobuf:"varint,4,opt,name=created_at_millis,json=createdAtMillis,proto3" json:"created_at_millis,omitempty"`
	UpdatedAtMillis   uint64 `protobuf:"varint,5,opt,name=updated_at_millis,json=updatedAtMillis,proto3" json:"updated_at_millis,omitempty"`
	// Add some robustness in case the alert isn't evaluated in a while
	LastEvaluatedAtMillis uint64 `protobuf:"varint,6,opt,name=last_evaluated_at_millis,json=lastEvaluatedAtMillis,proto3" json:"last_evaluated_at_millis,omitempty"`
	// Use a map instead of a list to represent that this is a set
	NotificationChannels map[uint64]bool `protobuf:"bytes,7,rep,name=notification_channels,json=notificationChannels,proto3" json:"notification_channels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Base for finding samples to be evaluated. The time will be the only field changing here
	// If the base defines an aggregation, the alert is an aggregate alert.
	SampleFindBase *FindSummarySampleRequest `protobuf:"bytes,8,opt,name=sample_find_base,json=sampleFindBase,proto3" json:"sample_find_base,omitempty"`
	// Current status of this alert
	Status AlertStatusEnum_AlertStatus `protobuf:"varint,9,opt,name=status,proto3,enum=ai.verta.monitoring.AlertStatusEnum_AlertStatus" json:"status,omitempty"`
	// If the alert is triggering right now, then this contains the list of sample ids that are making it trigger
	ViolatingSummarySampleIds []uint64 `protobuf:"varint,10,rep,packed,name=violating_summary_sample_ids,json=violatingSummarySampleIds,proto3" json:"violating_summary_sample_ids,omitempty"`
	// Information about the alerter that should be used to evaluate this alert
	AlerterType AlerterTypeEnum_AlerterType `protobuf:"varint,11,opt,name=alerter_type,json=alerterType,proto3,enum=ai.verta.monitoring.AlerterTypeEnum_AlerterType" json:"alerter_type,omitempty"`
	// Types that are assignable to Alerter:
	//	*Alert_AlerterFixed
	//	*Alert_AlerterReference
	//	*Alert_AlerterRange
	Alerter       isAlert_Alerter `protobuf_oneof:"alerter"`
	VersionNumber uint64          `protobuf:"varint,15,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{9}
}

func (x *Alert) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Alert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Alert) GetMonitoredEntityId() uint64 {
	if x != nil {
		return x.MonitoredEntityId
	}
	return 0
}

func (x *Alert) GetCreatedAtMillis() uint64 {
	if x != nil {
		return x.CreatedAtMillis
	}
	return 0
}

func (x *Alert) GetUpdatedAtMillis() uint64 {
	if x != nil {
		return x.UpdatedAtMillis
	}
	return 0
}

func (x *Alert) GetLastEvaluatedAtMillis() uint64 {
	if x != nil {
		return x.LastEvaluatedAtMillis
	}
	return 0
}

func (x *Alert) GetNotificationChannels() map[uint64]bool {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

func (x *Alert) GetSampleFindBase() *FindSummarySampleRequest {
	if x != nil {
		return x.SampleFindBase
	}
	return nil
}

func (x *Alert) GetStatus() AlertStatusEnum_AlertStatus {
	if x != nil {
		return x.Status
	}
	return AlertStatusEnum_UNKNOWN
}

func (x *Alert) GetViolatingSummarySampleIds() []uint64 {
	if x != nil {
		return x.ViolatingSummarySampleIds
	}
	return nil
}

func (x *Alert) GetAlerterType() AlerterTypeEnum_AlerterType {
	if x != nil {
		return x.AlerterType
	}
	return AlerterTypeEnum_UNKNOWN
}

func (m *Alert) GetAlerter() isAlert_Alerter {
	if m != nil {
		return m.Alerter
	}
	return nil
}

func (x *Alert) GetAlerterFixed() *AlertFixed {
	if x, ok := x.GetAlerter().(*Alert_AlerterFixed); ok {
		return x.AlerterFixed
	}
	return nil
}

func (x *Alert) GetAlerterReference() *AlertReference {
	if x, ok := x.GetAlerter().(*Alert_AlerterReference); ok {
		return x.AlerterReference
	}
	return nil
}

func (x *Alert) GetAlerterRange() *AlertRange {
	if x, ok := x.GetAlerter().(*Alert_AlerterRange); ok {
		return x.AlerterRange
	}
	return nil
}

func (x *Alert) GetVersionNumber() uint64 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

type isAlert_Alerter interface {
	isAlert_Alerter()
}

type Alert_AlerterFixed struct {
	AlerterFixed *AlertFixed `protobuf:"bytes,12,opt,name=alerter_fixed,json=alerterFixed,proto3,oneof"`
}

type Alert_AlerterReference struct {
	AlerterReference *AlertReference `protobuf:"bytes,13,opt,name=alerter_reference,json=alerterReference,proto3,oneof"`
}

type Alert_AlerterRange struct {
	AlerterRange *AlertRange `protobuf:"bytes,14,opt,name=alerter_range,json=alerterRange,proto3,oneof"`
}

func (*Alert_AlerterFixed) isAlert_Alerter() {}

func (*Alert_AlerterReference) isAlert_Alerter() {}

func (*Alert_AlerterRange) isAlert_Alerter() {}

type AlertFixed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alert is fired if summary sample is $operator $threshold
	Threshold float32                      `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Operator  common.OperatorEnum_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=ai.verta.common.OperatorEnum_Operator" json:"operator,omitempty"` // Default = GTE
}

func (x *AlertFixed) Reset() {
	*x = AlertFixed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertFixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertFixed) ProtoMessage() {}

func (x *AlertFixed) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertFixed.ProtoReflect.Descriptor instead.
func (*AlertFixed) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{10}
}

func (x *AlertFixed) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AlertFixed) GetOperator() common.OperatorEnum_Operator {
	if x != nil {
		return x.Operator
	}
	return common.OperatorEnum_EQ
}

type AlertRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerBound          float32 `protobuf:"fixed32,1,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound          float32 `protobuf:"fixed32,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	AlertIfOutsideRange bool    `protobuf:"varint,3,opt,name=alert_if_outside_range,json=alertIfOutsideRange,proto3" json:"alert_if_outside_range,omitempty"` // if true, alert when sample value is outside the range.  If false, alert when sample value is inside the range.
}

func (x *AlertRange) Reset() {
	*x = AlertRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRange) ProtoMessage() {}

func (x *AlertRange) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRange.ProtoReflect.Descriptor instead.
func (*AlertRange) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{11}
}

func (x *AlertRange) GetLowerBound() float32 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *AlertRange) GetUpperBound() float32 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *AlertRange) GetAlertIfOutsideRange() bool {
	if x != nil {
		return x.AlertIfOutsideRange
	}
	return false
}

type AlertReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alert is fired if summary sample is $operator $threshold
	Threshold         float32                      `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	ReferenceSampleId uint64                       `protobuf:"varint,2,opt,name=reference_sample_id,json=referenceSampleId,proto3" json:"reference_sample_id,omitempty"`
	Operator          common.OperatorEnum_Operator `protobuf:"varint,3,opt,name=operator,proto3,enum=ai.verta.common.OperatorEnum_Operator" json:"operator,omitempty"` // Default = GTE
}

func (x *AlertReference) Reset() {
	*x = AlertReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertReference) ProtoMessage() {}

func (x *AlertReference) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertReference.ProtoReflect.Descriptor instead.
func (*AlertReference) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{12}
}

func (x *AlertReference) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AlertReference) GetReferenceSampleId() uint64 {
	if x != nil {
		return x.ReferenceSampleId
	}
	return 0
}

func (x *AlertReference) GetOperator() common.OperatorEnum_Operator {
	if x != nil {
		return x.Operator
	}
	return common.OperatorEnum_EQ
}

type CreateAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert *Alert `protobuf:"bytes,1,opt,name=alert,proto3" json:"alert,omitempty"` // ID must be empty
}

func (x *CreateAlertRequest) Reset() {
	*x = CreateAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertRequest) ProtoMessage() {}

func (x *CreateAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{13}
}

func (x *CreateAlertRequest) GetAlert() *Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type UpdateAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert *Alert `protobuf:"bytes,2,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *UpdateAlertRequest) Reset() {
	*x = UpdateAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertRequest) ProtoMessage() {}

func (x *UpdateAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateAlertRequest) GetAlert() *Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type FindAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids                []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Names              []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	MonitoredEntityIds []uint64 `protobuf:"varint,3,rep,packed,name=monitored_entity_ids,json=monitoredEntityIds,proto3" json:"monitored_entity_ids,omitempty"`
	// Find alerts based on when they were last evaluated
	LastEvaluatedAtMillisAfter uint64 `protobuf:"varint,4,opt,name=last_evaluated_at_millis_after,json=lastEvaluatedAtMillisAfter,proto3" json:"last_evaluated_at_millis_after,omitempty"`
	// Allow alerters to filter to only their own types
	AlerterTypes []AlerterTypeEnum_AlerterType `protobuf:"varint,5,rep,packed,name=alerter_types,json=alerterTypes,proto3,enum=ai.verta.monitoring.AlerterTypeEnum_AlerterType" json:"alerter_types,omitempty"`
	// Allow filtering to see only failing alerts
	Status []AlertStatusEnum_AlertStatus `protobuf:"varint,6,rep,packed,name=status,proto3,enum=ai.verta.monitoring.AlertStatusEnum_AlertStatus" json:"status,omitempty"`
	// Pagination
	PageNumber int32 `protobuf:"varint,7,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32 `protobuf:"varint,8,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (x *FindAlertRequest) Reset() {
	*x = FindAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAlertRequest) ProtoMessage() {}

func (x *FindAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAlertRequest.ProtoReflect.Descriptor instead.
func (*FindAlertRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{15}
}

func (x *FindAlertRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FindAlertRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FindAlertRequest) GetMonitoredEntityIds() []uint64 {
	if x != nil {
		return x.MonitoredEntityIds
	}
	return nil
}

func (x *FindAlertRequest) GetLastEvaluatedAtMillisAfter() uint64 {
	if x != nil {
		return x.LastEvaluatedAtMillisAfter
	}
	return 0
}

func (x *FindAlertRequest) GetAlerterTypes() []AlerterTypeEnum_AlerterType {
	if x != nil {
		return x.AlerterTypes
	}
	return nil
}

func (x *FindAlertRequest) GetStatus() []AlertStatusEnum_AlertStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindAlertRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindAlertRequest) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

type DeleteAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteAlertRequest) Reset() {
	*x = DeleteAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertRequest) ProtoMessage() {}

func (x *DeleteAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertRequest.ProtoReflect.Descriptor instead.
func (*DeleteAlertRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteAlertRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Allow the alerter to trigger an alert (in which case it shares what is the sample that failed)
// or change the status (most likely to OK if was triggering before)
// We provide this in addition to UpdateAlertRequest so that we can do the small change to this field atomically
type UpdateAlertStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId                uint64                      `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3" json:"alert_id,omitempty"`
	EventTimeMillis        uint64                      `protobuf:"varint,2,opt,name=event_time_millis,json=eventTimeMillis,proto3" json:"event_time_millis,omitempty"` // Optional field that the alerter can set to provide past events (backfill)
	Status                 AlertStatusEnum_AlertStatus `protobuf:"varint,3,opt,name=status,proto3,enum=ai.verta.monitoring.AlertStatusEnum_AlertStatus" json:"status,omitempty"`
	AlertingSampleIds      []uint64                    `protobuf:"varint,5,rep,packed,name=alerting_sample_ids,json=alertingSampleIds,proto3" json:"alerting_sample_ids,omitempty"`           // If status is ALERTING, adds these sample IDs to the violating samples
	OkSampleIds            []uint64                    `protobuf:"varint,6,rep,packed,name=ok_sample_ids,json=okSampleIds,proto3" json:"ok_sample_ids,omitempty"`                             // If status is OK, clears these sample IDs from the violating samples
	ClearAlertingSampleIds bool                        `protobuf:"varint,7,opt,name=clear_alerting_sample_ids,json=clearAlertingSampleIds,proto3" json:"clear_alerting_sample_ids,omitempty"` // If status is OK clears all samples IDs from the violating samples
}

func (x *UpdateAlertStatusRequest) Reset() {
	*x = UpdateAlertStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertStatusRequest) ProtoMessage() {}

func (x *UpdateAlertStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertStatusRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateAlertStatusRequest) GetAlertId() uint64 {
	if x != nil {
		return x.AlertId
	}
	return 0
}

func (x *UpdateAlertStatusRequest) GetEventTimeMillis() uint64 {
	if x != nil {
		return x.EventTimeMillis
	}
	return 0
}

func (x *UpdateAlertStatusRequest) GetStatus() AlertStatusEnum_AlertStatus {
	if x != nil {
		return x.Status
	}
	return AlertStatusEnum_UNKNOWN
}

func (x *UpdateAlertStatusRequest) GetAlertingSampleIds() []uint64 {
	if x != nil {
		return x.AlertingSampleIds
	}
	return nil
}

func (x *UpdateAlertStatusRequest) GetOkSampleIds() []uint64 {
	if x != nil {
		return x.OkSampleIds
	}
	return nil
}

func (x *UpdateAlertStatusRequest) GetClearAlertingSampleIds() bool {
	if x != nil {
		return x.ClearAlertingSampleIds
	}
	return false
}

// History of the status of the alerts
type ListAlertHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListAlertHistoryRequest) Reset() {
	*x = ListAlertHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAlertHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertHistoryRequest) ProtoMessage() {}

func (x *ListAlertHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListAlertHistoryRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{18}
}

func (x *ListAlertHistoryRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Tracks previous calls to (UpdateAlertStatusRequest) based on its arguments
type ListAlertHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTimeMillis           uint64                      `protobuf:"varint,1,opt,name=event_time_millis,json=eventTimeMillis,proto3" json:"event_time_millis,omitempty"`
	Status                    AlertStatusEnum_AlertStatus `protobuf:"varint,2,opt,name=status,proto3,enum=ai.verta.monitoring.AlertStatusEnum_AlertStatus" json:"status,omitempty"`
	ViolatingSummarySampleIds []uint64                    `protobuf:"varint,3,rep,packed,name=violating_summary_sample_ids,json=violatingSummarySampleIds,proto3" json:"violating_summary_sample_ids,omitempty"`
	// Optional. Doesn't need to be output on the response
	EventId string `protobuf:"bytes,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *ListAlertHistoryItem) Reset() {
	*x = ListAlertHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAlertHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertHistoryItem) ProtoMessage() {}

func (x *ListAlertHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertHistoryItem.ProtoReflect.Descriptor instead.
func (*ListAlertHistoryItem) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{19}
}

func (x *ListAlertHistoryItem) GetEventTimeMillis() uint64 {
	if x != nil {
		return x.EventTimeMillis
	}
	return 0
}

func (x *ListAlertHistoryItem) GetStatus() AlertStatusEnum_AlertStatus {
	if x != nil {
		return x.Status
	}
	return AlertStatusEnum_UNKNOWN
}

func (x *ListAlertHistoryItem) GetViolatingSummarySampleIds() []uint64 {
	if x != nil {
		return x.ViolatingSummarySampleIds
	}
	return nil
}

func (x *ListAlertHistoryItem) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type FindNotificationChannelRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels     []*NotificationChannel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	TotalRecords int32                  `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindNotificationChannelRequest_Response) Reset() {
	*x = FindNotificationChannelRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNotificationChannelRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNotificationChannelRequest_Response) ProtoMessage() {}

func (x *FindNotificationChannelRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNotificationChannelRequest_Response.ProtoReflect.Descriptor instead.
func (*FindNotificationChannelRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{5, 0}
}

func (x *FindNotificationChannelRequest_Response) GetChannels() []*NotificationChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *FindNotificationChannelRequest_Response) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type FindAlertRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alerts       []*Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	TotalRecords int32    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindAlertRequest_Response) Reset() {
	*x = FindAlertRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAlertRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAlertRequest_Response) ProtoMessage() {}

func (x *FindAlertRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAlertRequest_Response.ProtoReflect.Descriptor instead.
func (*FindAlertRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{15, 0}
}

func (x *FindAlertRequest_Response) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *FindAlertRequest_Response) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type ListAlertHistoryRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*ListAlertHistoryItem `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *ListAlertHistoryRequest_Response) Reset() {
	*x = ListAlertHistoryRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Alert_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAlertHistoryRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertHistoryRequest_Response) ProtoMessage() {}

func (x *ListAlertHistoryRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Alert_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertHistoryRequest_Response.ProtoReflect.Descriptor instead.
func (*ListAlertHistoryRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Alert_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListAlertHistoryRequest_Response) GetHistory() []*ListAlertHistoryItem {
	if x != nil {
		return x.History
	}
	return nil
}

var File_monitoring_Alert_proto protoreflect.FileDescriptor

var file_monitoring_Alert_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x50, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x31,
	0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0x01, 0x22, 0xfa, 0x02, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x33,
	0x0a, 0x1f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x8b, 0x04, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x42, 0x16, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x66, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xad, 0x03, 0x0a, 0x1e, 0x46, 0x69,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x75, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x42, 0x16, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x52, 0x0a, 0x0f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x22, 0x3f, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x03, 0x22, 0x43, 0x0a, 0x0f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x30, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xef, 0x07, 0x0a, 0x05, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6e,
	0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x19, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x47, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x0a, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x49, 0x66, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x46, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x46, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x88, 0x04, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x63, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4a, 0x04,
	0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c,
	0x22, 0x26, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6b, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x6f,
	0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x7a, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x4f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xe8, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x19, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x32, 0xfe, 0x0c, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a,
	0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01,
	0x2a, 0x12, 0xca, 0x01, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xae,
	0x01, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x35, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12,
	0x84, 0x01, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x66,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x3a, 0x01, 0x2a, 0x42, 0x45, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_monitoring_Alert_proto_rawDescOnce sync.Once
	file_monitoring_Alert_proto_rawDescData = file_monitoring_Alert_proto_rawDesc
)

func file_monitoring_Alert_proto_rawDescGZIP() []byte {
	file_monitoring_Alert_proto_rawDescOnce.Do(func() {
		file_monitoring_Alert_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitoring_Alert_proto_rawDescData)
	})
	return file_monitoring_Alert_proto_rawDescData
}

var file_monitoring_Alert_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_monitoring_Alert_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_monitoring_Alert_proto_goTypes = []interface{}{
	(NotificationChannelTypeEnum_NotificationChannelType)(0), // 0: ai.verta.monitoring.NotificationChannelTypeEnum.NotificationChannelType
	(AlerterTypeEnum_AlerterType)(0),                         // 1: ai.verta.monitoring.AlerterTypeEnum.AlerterType
	(AlertStatusEnum_AlertStatus)(0),                         // 2: ai.verta.monitoring.AlertStatusEnum.AlertStatus
	(*NotificationChannelTypeEnum)(nil),                      // 3: ai.verta.monitoring.NotificationChannelTypeEnum
	(*NotificationChannel)(nil),                              // 4: ai.verta.monitoring.NotificationChannel
	(*NotificationChannelSlackWebhook)(nil),                  // 5: ai.verta.monitoring.NotificationChannelSlackWebhook
	(*CreateNotificationChannelRequest)(nil),                 // 6: ai.verta.monitoring.CreateNotificationChannelRequest
	(*UpdateNotificationChannelRequest)(nil),                 // 7: ai.verta.monitoring.UpdateNotificationChannelRequest
	(*FindNotificationChannelRequest)(nil),                   // 8: ai.verta.monitoring.FindNotificationChannelRequest
	(*DeleteNotificationChannelRequest)(nil),                 // 9: ai.verta.monitoring.DeleteNotificationChannelRequest
	(*AlerterTypeEnum)(nil),                                  // 10: ai.verta.monitoring.AlerterTypeEnum
	(*AlertStatusEnum)(nil),                                  // 11: ai.verta.monitoring.AlertStatusEnum
	(*Alert)(nil),                                            // 12: ai.verta.monitoring.Alert
	(*AlertFixed)(nil),                                       // 13: ai.verta.monitoring.AlertFixed
	(*AlertRange)(nil),                                       // 14: ai.verta.monitoring.AlertRange
	(*AlertReference)(nil),                                   // 15: ai.verta.monitoring.AlertReference
	(*CreateAlertRequest)(nil),                               // 16: ai.verta.monitoring.CreateAlertRequest
	(*UpdateAlertRequest)(nil),                               // 17: ai.verta.monitoring.UpdateAlertRequest
	(*FindAlertRequest)(nil),                                 // 18: ai.verta.monitoring.FindAlertRequest
	(*DeleteAlertRequest)(nil),                               // 19: ai.verta.monitoring.DeleteAlertRequest
	(*UpdateAlertStatusRequest)(nil),                         // 20: ai.verta.monitoring.UpdateAlertStatusRequest
	(*ListAlertHistoryRequest)(nil),                          // 21: ai.verta.monitoring.ListAlertHistoryRequest
	(*ListAlertHistoryItem)(nil),                             // 22: ai.verta.monitoring.ListAlertHistoryItem
	(*FindNotificationChannelRequest_Response)(nil),          // 23: ai.verta.monitoring.FindNotificationChannelRequest.Response
	nil,                                      // 24: ai.verta.monitoring.Alert.NotificationChannelsEntry
	(*FindAlertRequest_Response)(nil),        // 25: ai.verta.monitoring.FindAlertRequest.Response
	(*ListAlertHistoryRequest_Response)(nil), // 26: ai.verta.monitoring.ListAlertHistoryRequest.Response
	(*FindSummarySampleRequest)(nil),         // 27: ai.verta.monitoring.FindSummarySampleRequest
	(common.OperatorEnum_Operator)(0),        // 28: ai.verta.common.OperatorEnum.Operator
	(*Empty)(nil),                            // 29: ai.verta.monitoring.Empty
}
var file_monitoring_Alert_proto_depIdxs = []int32{
	0,  // 0: ai.verta.monitoring.NotificationChannel.type:type_name -> ai.verta.monitoring.NotificationChannelTypeEnum.NotificationChannelType
	5,  // 1: ai.verta.monitoring.NotificationChannel.slack_webhook:type_name -> ai.verta.monitoring.NotificationChannelSlackWebhook
	4,  // 2: ai.verta.monitoring.CreateNotificationChannelRequest.channel:type_name -> ai.verta.monitoring.NotificationChannel
	0,  // 3: ai.verta.monitoring.CreateNotificationChannelRequest.type:type_name -> ai.verta.monitoring.NotificationChannelTypeEnum.NotificationChannelType
	5,  // 4: ai.verta.monitoring.CreateNotificationChannelRequest.slack_webhook:type_name -> ai.verta.monitoring.NotificationChannelSlackWebhook
	4,  // 5: ai.verta.monitoring.UpdateNotificationChannelRequest.channel:type_name -> ai.verta.monitoring.NotificationChannel
	3,  // 6: ai.verta.monitoring.FindNotificationChannelRequest.types:type_name -> ai.verta.monitoring.NotificationChannelTypeEnum
	24, // 7: ai.verta.monitoring.Alert.notification_channels:type_name -> ai.verta.monitoring.Alert.NotificationChannelsEntry
	27, // 8: ai.verta.monitoring.Alert.sample_find_base:type_name -> ai.verta.monitoring.FindSummarySampleRequest
	2,  // 9: ai.verta.monitoring.Alert.status:type_name -> ai.verta.monitoring.AlertStatusEnum.AlertStatus
	1,  // 10: ai.verta.monitoring.Alert.alerter_type:type_name -> ai.verta.monitoring.AlerterTypeEnum.AlerterType
	13, // 11: ai.verta.monitoring.Alert.alerter_fixed:type_name -> ai.verta.monitoring.AlertFixed
	15, // 12: ai.verta.monitoring.Alert.alerter_reference:type_name -> ai.verta.monitoring.AlertReference
	14, // 13: ai.verta.monitoring.Alert.alerter_range:type_name -> ai.verta.monitoring.AlertRange
	28, // 14: ai.verta.monitoring.AlertFixed.operator:type_name -> ai.verta.common.OperatorEnum.Operator
	28, // 15: ai.verta.monitoring.AlertReference.operator:type_name -> ai.verta.common.OperatorEnum.Operator
	12, // 16: ai.verta.monitoring.CreateAlertRequest.alert:type_name -> ai.verta.monitoring.Alert
	12, // 17: ai.verta.monitoring.UpdateAlertRequest.alert:type_name -> ai.verta.monitoring.Alert
	1,  // 18: ai.verta.monitoring.FindAlertRequest.alerter_types:type_name -> ai.verta.monitoring.AlerterTypeEnum.AlerterType
	2,  // 19: ai.verta.monitoring.FindAlertRequest.status:type_name -> ai.verta.monitoring.AlertStatusEnum.AlertStatus
	2,  // 20: ai.verta.monitoring.UpdateAlertStatusRequest.status:type_name -> ai.verta.monitoring.AlertStatusEnum.AlertStatus
	2,  // 21: ai.verta.monitoring.ListAlertHistoryItem.status:type_name -> ai.verta.monitoring.AlertStatusEnum.AlertStatus
	4,  // 22: ai.verta.monitoring.FindNotificationChannelRequest.Response.channels:type_name -> ai.verta.monitoring.NotificationChannel
	12, // 23: ai.verta.monitoring.FindAlertRequest.Response.alerts:type_name -> ai.verta.monitoring.Alert
	22, // 24: ai.verta.monitoring.ListAlertHistoryRequest.Response.history:type_name -> ai.verta.monitoring.ListAlertHistoryItem
	6,  // 25: ai.verta.monitoring.AlertService.createNotificationChannel:input_type -> ai.verta.monitoring.CreateNotificationChannelRequest
	7,  // 26: ai.verta.monitoring.AlertService.updateNotificationChannel:input_type -> ai.verta.monitoring.UpdateNotificationChannelRequest
	8,  // 27: ai.verta.monitoring.AlertService.findNotificationChannel:input_type -> ai.verta.monitoring.FindNotificationChannelRequest
	9,  // 28: ai.verta.monitoring.AlertService.deleteNotificationChannel:input_type -> ai.verta.monitoring.DeleteNotificationChannelRequest
	16, // 29: ai.verta.monitoring.AlertService.createAlert:input_type -> ai.verta.monitoring.CreateAlertRequest
	17, // 30: ai.verta.monitoring.AlertService.updateAlert:input_type -> ai.verta.monitoring.UpdateAlertRequest
	20, // 31: ai.verta.monitoring.AlertService.updateAlertStatus:input_type -> ai.verta.monitoring.UpdateAlertStatusRequest
	18, // 32: ai.verta.monitoring.AlertService.findAlert:input_type -> ai.verta.monitoring.FindAlertRequest
	21, // 33: ai.verta.monitoring.AlertService.listAlertHistory:input_type -> ai.verta.monitoring.ListAlertHistoryRequest
	19, // 34: ai.verta.monitoring.AlertService.deleteAlert:input_type -> ai.verta.monitoring.DeleteAlertRequest
	4,  // 35: ai.verta.monitoring.AlertService.createNotificationChannel:output_type -> ai.verta.monitoring.NotificationChannel
	4,  // 36: ai.verta.monitoring.AlertService.updateNotificationChannel:output_type -> ai.verta.monitoring.NotificationChannel
	23, // 37: ai.verta.monitoring.AlertService.findNotificationChannel:output_type -> ai.verta.monitoring.FindNotificationChannelRequest.Response
	29, // 38: ai.verta.monitoring.AlertService.deleteNotificationChannel:output_type -> ai.verta.monitoring.Empty
	12, // 39: ai.verta.monitoring.AlertService.createAlert:output_type -> ai.verta.monitoring.Alert
	12, // 40: ai.verta.monitoring.AlertService.updateAlert:output_type -> ai.verta.monitoring.Alert
	29, // 41: ai.verta.monitoring.AlertService.updateAlertStatus:output_type -> ai.verta.monitoring.Empty
	25, // 42: ai.verta.monitoring.AlertService.findAlert:output_type -> ai.verta.monitoring.FindAlertRequest.Response
	26, // 43: ai.verta.monitoring.AlertService.listAlertHistory:output_type -> ai.verta.monitoring.ListAlertHistoryRequest.Response
	29, // 44: ai.verta.monitoring.AlertService.deleteAlert:output_type -> ai.verta.monitoring.Empty
	35, // [35:45] is the sub-list for method output_type
	25, // [25:35] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_monitoring_Alert_proto_init() }
func file_monitoring_Alert_proto_init() {
	if File_monitoring_Alert_proto != nil {
		return
	}
	file_monitoring_Summary_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_monitoring_Alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannelSlackWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNotificationChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotificationChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlerterTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertStatusEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertFixed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlertHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlertHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNotificationChannelRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAlertRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Alert_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlertHistoryRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_monitoring_Alert_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*NotificationChannel_SlackWebhook)(nil),
	}
	file_monitoring_Alert_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateNotificationChannelRequest_WorkspaceId)(nil),
		(*CreateNotificationChannelRequest_WorkspaceName)(nil),
		(*CreateNotificationChannelRequest_SlackWebhook)(nil),
	}
	file_monitoring_Alert_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FindNotificationChannelRequest_WorkspaceId)(nil),
		(*FindNotificationChannelRequest_WorkspaceName)(nil),
	}
	file_monitoring_Alert_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Alert_AlerterFixed)(nil),
		(*Alert_AlerterReference)(nil),
		(*Alert_AlerterRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitoring_Alert_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monitoring_Alert_proto_goTypes,
		DependencyIndexes: file_monitoring_Alert_proto_depIdxs,
		EnumInfos:         file_monitoring_Alert_proto_enumTypes,
		MessageInfos:      file_monitoring_Alert_proto_msgTypes,
	}.Build()
	File_monitoring_Alert_proto = out.File
	file_monitoring_Alert_proto_rawDesc = nil
	file_monitoring_Alert_proto_goTypes = nil
	file_monitoring_Alert_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertServiceClient interface {
	CreateNotificationChannel(ctx context.Context, in *CreateNotificationChannelRequest, opts ...grpc.CallOption) (*NotificationChannel, error)
	UpdateNotificationChannel(ctx context.Context, in *UpdateNotificationChannelRequest, opts ...grpc.CallOption) (*NotificationChannel, error)
	FindNotificationChannel(ctx context.Context, in *FindNotificationChannelRequest, opts ...grpc.CallOption) (*FindNotificationChannelRequest_Response, error)
	DeleteNotificationChannel(ctx context.Context, in *DeleteNotificationChannelRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*Alert, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*Alert, error)
	UpdateAlertStatus(ctx context.Context, in *UpdateAlertStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	FindAlert(ctx context.Context, in *FindAlertRequest, opts ...grpc.CallOption) (*FindAlertRequest_Response, error)
	ListAlertHistory(ctx context.Context, in *ListAlertHistoryRequest, opts ...grpc.CallOption) (*ListAlertHistoryRequest_Response, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*Empty, error)
}

type alertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) CreateNotificationChannel(ctx context.Context, in *CreateNotificationChannelRequest, opts ...grpc.CallOption) (*NotificationChannel, error) {
	out := new(NotificationChannel)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/createNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateNotificationChannel(ctx context.Context, in *UpdateNotificationChannelRequest, opts ...grpc.CallOption) (*NotificationChannel, error) {
	out := new(NotificationChannel)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/updateNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) FindNotificationChannel(ctx context.Context, in *FindNotificationChannelRequest, opts ...grpc.CallOption) (*FindNotificationChannelRequest_Response, error) {
	out := new(FindNotificationChannelRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/findNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteNotificationChannel(ctx context.Context, in *DeleteNotificationChannelRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/deleteNotificationChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/createAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/updateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlertStatus(ctx context.Context, in *UpdateAlertStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/updateAlertStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) FindAlert(ctx context.Context, in *FindAlertRequest, opts ...grpc.CallOption) (*FindAlertRequest_Response, error) {
	out := new(FindAlertRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/findAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) ListAlertHistory(ctx context.Context, in *ListAlertHistoryRequest, opts ...grpc.CallOption) (*ListAlertHistoryRequest_Response, error) {
	out := new(ListAlertHistoryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/listAlertHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.AlertService/deleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServiceServer is the server API for AlertService service.
type AlertServiceServer interface {
	CreateNotificationChannel(context.Context, *CreateNotificationChannelRequest) (*NotificationChannel, error)
	UpdateNotificationChannel(context.Context, *UpdateNotificationChannelRequest) (*NotificationChannel, error)
	FindNotificationChannel(context.Context, *FindNotificationChannelRequest) (*FindNotificationChannelRequest_Response, error)
	DeleteNotificationChannel(context.Context, *DeleteNotificationChannelRequest) (*Empty, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*Alert, error)
	UpdateAlert(context.Context, *UpdateAlertRequest) (*Alert, error)
	UpdateAlertStatus(context.Context, *UpdateAlertStatusRequest) (*Empty, error)
	FindAlert(context.Context, *FindAlertRequest) (*FindAlertRequest_Response, error)
	ListAlertHistory(context.Context, *ListAlertHistoryRequest) (*ListAlertHistoryRequest_Response, error)
	DeleteAlert(context.Context, *DeleteAlertRequest) (*Empty, error)
}

// UnimplementedAlertServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (*UnimplementedAlertServiceServer) CreateNotificationChannel(context.Context, *CreateNotificationChannelRequest) (*NotificationChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationChannel not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateNotificationChannel(context.Context, *UpdateNotificationChannelRequest) (*NotificationChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationChannel not implemented")
}
func (*UnimplementedAlertServiceServer) FindNotificationChannel(context.Context, *FindNotificationChannelRequest) (*FindNotificationChannelRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNotificationChannel not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteNotificationChannel(context.Context, *DeleteNotificationChannelRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationChannel not implemented")
}
func (*UnimplementedAlertServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlertStatus(context.Context, *UpdateAlertStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertStatus not implemented")
}
func (*UnimplementedAlertServiceServer) FindAlert(context.Context, *FindAlertRequest) (*FindAlertRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAlert not implemented")
}
func (*UnimplementedAlertServiceServer) ListAlertHistory(context.Context, *ListAlertHistoryRequest) (*ListAlertHistoryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertHistory not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}

func RegisterAlertServiceServer(s *grpc.Server, srv AlertServiceServer) {
	s.RegisterService(&_AlertService_serviceDesc, srv)
}

func _AlertService_CreateNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).CreateNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/CreateNotificationChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).CreateNotificationChannel(ctx, req.(*CreateNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_UpdateNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).UpdateNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/UpdateNotificationChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).UpdateNotificationChannel(ctx, req.(*UpdateNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_FindNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).FindNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/FindNotificationChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).FindNotificationChannel(ctx, req.(*FindNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_DeleteNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).DeleteNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/DeleteNotificationChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).DeleteNotificationChannel(ctx, req.(*DeleteNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/CreateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_UpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).UpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/UpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_UpdateAlertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).UpdateAlertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/UpdateAlertStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).UpdateAlertStatus(ctx, req.(*UpdateAlertStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_FindAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).FindAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/FindAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).FindAlert(ctx, req.(*FindAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_ListAlertHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).ListAlertHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/ListAlertHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).ListAlertHistory(ctx, req.(*ListAlertHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.AlertService/DeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.monitoring.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNotificationChannel",
			Handler:    _AlertService_CreateNotificationChannel_Handler,
		},
		{
			MethodName: "updateNotificationChannel",
			Handler:    _AlertService_UpdateNotificationChannel_Handler,
		},
		{
			MethodName: "findNotificationChannel",
			Handler:    _AlertService_FindNotificationChannel_Handler,
		},
		{
			MethodName: "deleteNotificationChannel",
			Handler:    _AlertService_DeleteNotificationChannel_Handler,
		},
		{
			MethodName: "createAlert",
			Handler:    _AlertService_CreateAlert_Handler,
		},
		{
			MethodName: "updateAlert",
			Handler:    _AlertService_UpdateAlert_Handler,
		},
		{
			MethodName: "updateAlertStatus",
			Handler:    _AlertService_UpdateAlertStatus_Handler,
		},
		{
			MethodName: "findAlert",
			Handler:    _AlertService_FindAlert_Handler,
		},
		{
			MethodName: "listAlertHistory",
			Handler:    _AlertService_ListAlertHistory_Handler,
		},
		{
			MethodName: "deleteAlert",
			Handler:    _AlertService_DeleteAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/Alert.proto",
}
