// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: monitoring/Labels.proto

package monitoring

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Request to fetch the existing labels for a given subset of summary samples
type FindSampleLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FilterQuerySummarySample `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"` // Optional
	// Pagination
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32 `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (x *FindSampleLabelsRequest) Reset() {
	*x = FindSampleLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Labels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSampleLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSampleLabelsRequest) ProtoMessage() {}

func (x *FindSampleLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Labels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSampleLabelsRequest.ProtoReflect.Descriptor instead.
func (*FindSampleLabelsRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Labels_proto_rawDescGZIP(), []int{0}
}

func (x *FindSampleLabelsRequest) GetFilter() *FilterQuerySummarySample {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FindSampleLabelsRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindSampleLabelsRequest) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

// Request to fetch the existing label values for a given subset of summary samples
type FindSampleLabelValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FilterQuerySummarySample `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"` // Optional
	Labels []string                  `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Pagination
	PageNumber int32 `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32 `protobuf:"varint,4,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (x *FindSampleLabelValuesRequest) Reset() {
	*x = FindSampleLabelValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Labels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSampleLabelValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSampleLabelValuesRequest) ProtoMessage() {}

func (x *FindSampleLabelValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Labels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSampleLabelValuesRequest.ProtoReflect.Descriptor instead.
func (*FindSampleLabelValuesRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Labels_proto_rawDescGZIP(), []int{1}
}

func (x *FindSampleLabelValuesRequest) GetFilter() *FilterQuerySummarySample {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FindSampleLabelValuesRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FindSampleLabelValuesRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindSampleLabelValuesRequest) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

type FindSampleLabelValuesItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FindSampleLabelValuesItem) Reset() {
	*x = FindSampleLabelValuesItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Labels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSampleLabelValuesItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSampleLabelValuesItem) ProtoMessage() {}

func (x *FindSampleLabelValuesItem) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Labels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSampleLabelValuesItem.ProtoReflect.Descriptor instead.
func (*FindSampleLabelValuesItem) Descriptor() ([]byte, []int) {
	return file_monitoring_Labels_proto_rawDescGZIP(), []int{2}
}

func (x *FindSampleLabelValuesItem) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FindSampleLabelsRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels       []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	TotalRecords int32    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindSampleLabelsRequest_Response) Reset() {
	*x = FindSampleLabelsRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Labels_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSampleLabelsRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSampleLabelsRequest_Response) ProtoMessage() {}

func (x *FindSampleLabelsRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Labels_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSampleLabelsRequest_Response.ProtoReflect.Descriptor instead.
func (*FindSampleLabelsRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Labels_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FindSampleLabelsRequest_Response) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FindSampleLabelsRequest_Response) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type FindSampleLabelValuesRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels       map[string]*FindSampleLabelValuesItem `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalRecords int32                                 `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindSampleLabelValuesRequest_Response) Reset() {
	*x = FindSampleLabelValuesRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Labels_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSampleLabelValuesRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSampleLabelValuesRequest_Response) ProtoMessage() {}

func (x *FindSampleLabelValuesRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Labels_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSampleLabelValuesRequest_Response.ProtoReflect.Descriptor instead.
func (*FindSampleLabelValuesRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Labels_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FindSampleLabelValuesRequest_Response) GetLabels() map[string]*FindSampleLabelValuesItem {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FindSampleLabelValuesRequest_Response) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

var File_monitoring_Labels_proto protoreflect.FileDescriptor

var file_monitoring_Labels_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xba, 0x03, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x1a, 0xfa, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x1a, 0x69, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a,
	0x19, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x32, 0xec, 0x02, 0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x66, 0x69, 0x6e,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x66,
	0x69, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x42, 0x45, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_monitoring_Labels_proto_rawDescOnce sync.Once
	file_monitoring_Labels_proto_rawDescData = file_monitoring_Labels_proto_rawDesc
)

func file_monitoring_Labels_proto_rawDescGZIP() []byte {
	file_monitoring_Labels_proto_rawDescOnce.Do(func() {
		file_monitoring_Labels_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitoring_Labels_proto_rawDescData)
	})
	return file_monitoring_Labels_proto_rawDescData
}

var file_monitoring_Labels_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_monitoring_Labels_proto_goTypes = []interface{}{
	(*FindSampleLabelsRequest)(nil),               // 0: ai.verta.monitoring.FindSampleLabelsRequest
	(*FindSampleLabelValuesRequest)(nil),          // 1: ai.verta.monitoring.FindSampleLabelValuesRequest
	(*FindSampleLabelValuesItem)(nil),             // 2: ai.verta.monitoring.FindSampleLabelValuesItem
	(*FindSampleLabelsRequest_Response)(nil),      // 3: ai.verta.monitoring.FindSampleLabelsRequest.Response
	(*FindSampleLabelValuesRequest_Response)(nil), // 4: ai.verta.monitoring.FindSampleLabelValuesRequest.Response
	nil,                              // 5: ai.verta.monitoring.FindSampleLabelValuesRequest.Response.LabelsEntry
	(*FilterQuerySummarySample)(nil), // 6: ai.verta.monitoring.FilterQuerySummarySample
}
var file_monitoring_Labels_proto_depIdxs = []int32{
	6, // 0: ai.verta.monitoring.FindSampleLabelsRequest.filter:type_name -> ai.verta.monitoring.FilterQuerySummarySample
	6, // 1: ai.verta.monitoring.FindSampleLabelValuesRequest.filter:type_name -> ai.verta.monitoring.FilterQuerySummarySample
	5, // 2: ai.verta.monitoring.FindSampleLabelValuesRequest.Response.labels:type_name -> ai.verta.monitoring.FindSampleLabelValuesRequest.Response.LabelsEntry
	2, // 3: ai.verta.monitoring.FindSampleLabelValuesRequest.Response.LabelsEntry.value:type_name -> ai.verta.monitoring.FindSampleLabelValuesItem
	0, // 4: ai.verta.monitoring.LabelService.findLabels:input_type -> ai.verta.monitoring.FindSampleLabelsRequest
	1, // 5: ai.verta.monitoring.LabelService.findLabelValues:input_type -> ai.verta.monitoring.FindSampleLabelValuesRequest
	3, // 6: ai.verta.monitoring.LabelService.findLabels:output_type -> ai.verta.monitoring.FindSampleLabelsRequest.Response
	4, // 7: ai.verta.monitoring.LabelService.findLabelValues:output_type -> ai.verta.monitoring.FindSampleLabelValuesRequest.Response
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_monitoring_Labels_proto_init() }
func file_monitoring_Labels_proto_init() {
	if File_monitoring_Labels_proto != nil {
		return
	}
	file_monitoring_Summary_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_monitoring_Labels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSampleLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Labels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSampleLabelValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Labels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSampleLabelValuesItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Labels_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSampleLabelsRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Labels_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSampleLabelValuesRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitoring_Labels_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monitoring_Labels_proto_goTypes,
		DependencyIndexes: file_monitoring_Labels_proto_depIdxs,
		MessageInfos:      file_monitoring_Labels_proto_msgTypes,
	}.Build()
	File_monitoring_Labels_proto = out.File
	file_monitoring_Labels_proto_rawDesc = nil
	file_monitoring_Labels_proto_goTypes = nil
	file_monitoring_Labels_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LabelServiceClient is the client API for LabelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabelServiceClient interface {
	FindLabels(ctx context.Context, in *FindSampleLabelsRequest, opts ...grpc.CallOption) (*FindSampleLabelsRequest_Response, error)
	FindLabelValues(ctx context.Context, in *FindSampleLabelValuesRequest, opts ...grpc.CallOption) (*FindSampleLabelValuesRequest_Response, error)
}

type labelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelServiceClient(cc grpc.ClientConnInterface) LabelServiceClient {
	return &labelServiceClient{cc}
}

func (c *labelServiceClient) FindLabels(ctx context.Context, in *FindSampleLabelsRequest, opts ...grpc.CallOption) (*FindSampleLabelsRequest_Response, error) {
	out := new(FindSampleLabelsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.LabelService/findLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) FindLabelValues(ctx context.Context, in *FindSampleLabelValuesRequest, opts ...grpc.CallOption) (*FindSampleLabelValuesRequest_Response, error) {
	out := new(FindSampleLabelValuesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.LabelService/findLabelValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelServiceServer is the server API for LabelService service.
type LabelServiceServer interface {
	FindLabels(context.Context, *FindSampleLabelsRequest) (*FindSampleLabelsRequest_Response, error)
	FindLabelValues(context.Context, *FindSampleLabelValuesRequest) (*FindSampleLabelValuesRequest_Response, error)
}

// UnimplementedLabelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLabelServiceServer struct {
}

func (*UnimplementedLabelServiceServer) FindLabels(context.Context, *FindSampleLabelsRequest) (*FindSampleLabelsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLabels not implemented")
}
func (*UnimplementedLabelServiceServer) FindLabelValues(context.Context, *FindSampleLabelValuesRequest) (*FindSampleLabelValuesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLabelValues not implemented")
}

func RegisterLabelServiceServer(s *grpc.Server, srv LabelServiceServer) {
	s.RegisterService(&_LabelService_serviceDesc, srv)
}

func _LabelService_FindLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSampleLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).FindLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.LabelService/FindLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).FindLabels(ctx, req.(*FindSampleLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_FindLabelValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSampleLabelValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).FindLabelValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.LabelService/FindLabelValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).FindLabelValues(ctx, req.(*FindSampleLabelValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.monitoring.LabelService",
	HandlerType: (*LabelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findLabels",
			Handler:    _LabelService_FindLabels_Handler,
		},
		{
			MethodName: "findLabelValues",
			Handler:    _LabelService_FindLabelValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/Labels.proto",
}
