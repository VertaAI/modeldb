// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngestServiceClient is the client API for IngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestServiceClient interface {
	Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestRequest_Response, error)
	BatchIngest(ctx context.Context, in *BatchIngestRequest, opts ...grpc.CallOption) (*BatchIngestRequest_Response, error)
}

type ingestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestServiceClient(cc grpc.ClientConnInterface) IngestServiceClient {
	return &ingestServiceClient{cc}
}

func (c *ingestServiceClient) Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestRequest_Response, error) {
	out := new(IngestRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.IngestService/ingest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestServiceClient) BatchIngest(ctx context.Context, in *BatchIngestRequest, opts ...grpc.CallOption) (*BatchIngestRequest_Response, error) {
	out := new(BatchIngestRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.IngestService/batchIngest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestServiceServer is the server API for IngestService service.
type IngestServiceServer interface {
	Ingest(context.Context, *IngestRequest) (*IngestRequest_Response, error)
	BatchIngest(context.Context, *BatchIngestRequest) (*BatchIngestRequest_Response, error)
}

// UnimplementedIngestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIngestServiceServer struct {
}

func (*UnimplementedIngestServiceServer) Ingest(context.Context, *IngestRequest) (*IngestRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (*UnimplementedIngestServiceServer) BatchIngest(context.Context, *BatchIngestRequest) (*BatchIngestRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchIngest not implemented")
}

func RegisterIngestServiceServer(s *grpc.Server, srv IngestServiceServer) {
	s.RegisterService(&_IngestService_serviceDesc, srv)
}

func _IngestService_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestServiceServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.IngestService/Ingest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestServiceServer).Ingest(ctx, req.(*IngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestService_BatchIngest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchIngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestServiceServer).BatchIngest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.IngestService/BatchIngest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestServiceServer).BatchIngest(ctx, req.(*BatchIngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IngestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.monitoring.IngestService",
	HandlerType: (*IngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ingest",
			Handler:    _IngestService_Ingest_Handler,
		},
		{
			MethodName: "batchIngest",
			Handler:    _IngestService_BatchIngest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/Ingest.proto",
}
