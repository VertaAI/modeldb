// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: monitoring/MonitoredModel.proto

package monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitoredModelServiceClient is the client API for MonitoredModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoredModelServiceClient interface {
	CreateMonitoredModel(ctx context.Context, in *CreateMonitoredModel, opts ...grpc.CallOption) (*MonitoredModel, error)
	UpdateMonitoredModel(ctx context.Context, in *UpdateMonitoredModel, opts ...grpc.CallOption) (*MonitoredModel, error)
	FindMonitoredModel(ctx context.Context, in *FindMonitoredModels, opts ...grpc.CallOption) (*FindMonitoredModels_Response, error)
	DeleteMonitoredModel(ctx context.Context, in *DeleteMonitoredModel, opts ...grpc.CallOption) (*Empty, error)
}

type monitoredModelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoredModelServiceClient(cc grpc.ClientConnInterface) MonitoredModelServiceClient {
	return &monitoredModelServiceClient{cc}
}

func (c *monitoredModelServiceClient) CreateMonitoredModel(ctx context.Context, in *CreateMonitoredModel, opts ...grpc.CallOption) (*MonitoredModel, error) {
	out := new(MonitoredModel)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.MonitoredModelService/createMonitoredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoredModelServiceClient) UpdateMonitoredModel(ctx context.Context, in *UpdateMonitoredModel, opts ...grpc.CallOption) (*MonitoredModel, error) {
	out := new(MonitoredModel)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.MonitoredModelService/updateMonitoredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoredModelServiceClient) FindMonitoredModel(ctx context.Context, in *FindMonitoredModels, opts ...grpc.CallOption) (*FindMonitoredModels_Response, error) {
	out := new(FindMonitoredModels_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.MonitoredModelService/findMonitoredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoredModelServiceClient) DeleteMonitoredModel(ctx context.Context, in *DeleteMonitoredModel, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.MonitoredModelService/deleteMonitoredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoredModelServiceServer is the server API for MonitoredModelService service.
// All implementations must embed UnimplementedMonitoredModelServiceServer
// for forward compatibility
type MonitoredModelServiceServer interface {
	CreateMonitoredModel(context.Context, *CreateMonitoredModel) (*MonitoredModel, error)
	UpdateMonitoredModel(context.Context, *UpdateMonitoredModel) (*MonitoredModel, error)
	FindMonitoredModel(context.Context, *FindMonitoredModels) (*FindMonitoredModels_Response, error)
	DeleteMonitoredModel(context.Context, *DeleteMonitoredModel) (*Empty, error)
	mustEmbedUnimplementedMonitoredModelServiceServer()
}

// UnimplementedMonitoredModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoredModelServiceServer struct {
}

func (UnimplementedMonitoredModelServiceServer) CreateMonitoredModel(context.Context, *CreateMonitoredModel) (*MonitoredModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitoredModel not implemented")
}
func (UnimplementedMonitoredModelServiceServer) UpdateMonitoredModel(context.Context, *UpdateMonitoredModel) (*MonitoredModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitoredModel not implemented")
}
func (UnimplementedMonitoredModelServiceServer) FindMonitoredModel(context.Context, *FindMonitoredModels) (*FindMonitoredModels_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonitoredModel not implemented")
}
func (UnimplementedMonitoredModelServiceServer) DeleteMonitoredModel(context.Context, *DeleteMonitoredModel) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitoredModel not implemented")
}
func (UnimplementedMonitoredModelServiceServer) mustEmbedUnimplementedMonitoredModelServiceServer() {}

// UnsafeMonitoredModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoredModelServiceServer will
// result in compilation errors.
type UnsafeMonitoredModelServiceServer interface {
	mustEmbedUnimplementedMonitoredModelServiceServer()
}

func RegisterMonitoredModelServiceServer(s grpc.ServiceRegistrar, srv MonitoredModelServiceServer) {
	s.RegisterService(&MonitoredModelService_ServiceDesc, srv)
}

func _MonitoredModelService_CreateMonitoredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitoredModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoredModelServiceServer).CreateMonitoredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.MonitoredModelService/createMonitoredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoredModelServiceServer).CreateMonitoredModel(ctx, req.(*CreateMonitoredModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoredModelService_UpdateMonitoredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitoredModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoredModelServiceServer).UpdateMonitoredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.MonitoredModelService/updateMonitoredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoredModelServiceServer).UpdateMonitoredModel(ctx, req.(*UpdateMonitoredModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoredModelService_FindMonitoredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMonitoredModels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoredModelServiceServer).FindMonitoredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.MonitoredModelService/findMonitoredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoredModelServiceServer).FindMonitoredModel(ctx, req.(*FindMonitoredModels))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoredModelService_DeleteMonitoredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitoredModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoredModelServiceServer).DeleteMonitoredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.MonitoredModelService/deleteMonitoredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoredModelServiceServer).DeleteMonitoredModel(ctx, req.(*DeleteMonitoredModel))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoredModelService_ServiceDesc is the grpc.ServiceDesc for MonitoredModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoredModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.monitoring.MonitoredModelService",
	HandlerType: (*MonitoredModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createMonitoredModel",
			Handler:    _MonitoredModelService_CreateMonitoredModel_Handler,
		},
		{
			MethodName: "updateMonitoredModel",
			Handler:    _MonitoredModelService_UpdateMonitoredModel_Handler,
		},
		{
			MethodName: "findMonitoredModel",
			Handler:    _MonitoredModelService_FindMonitoredModel_Handler,
		},
		{
			MethodName: "deleteMonitoredModel",
			Handler:    _MonitoredModelService_DeleteMonitoredModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/MonitoredModel.proto",
}
