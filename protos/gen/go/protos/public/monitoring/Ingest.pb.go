// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.6
// source: monitoring/Ingest.proto

package monitoring

import (
	context "context"
	versioning "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb/versioning"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchIngestRequest_SourceTypeEnum_SourceType int32

const (
	BatchIngestRequest_SourceTypeEnum_UNKNOWN      BatchIngestRequest_SourceTypeEnum_SourceType = 0 // Error
	BatchIngestRequest_SourceTypeEnum_REFERENCE    BatchIngestRequest_SourceTypeEnum_SourceType = 1
	BatchIngestRequest_SourceTypeEnum_GROUND_TRUTH BatchIngestRequest_SourceTypeEnum_SourceType = 2
	BatchIngestRequest_SourceTypeEnum_PREDICTION   BatchIngestRequest_SourceTypeEnum_SourceType = 3
)

// Enum value maps for BatchIngestRequest_SourceTypeEnum_SourceType.
var (
	BatchIngestRequest_SourceTypeEnum_SourceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "REFERENCE",
		2: "GROUND_TRUTH",
		3: "PREDICTION",
	}
	BatchIngestRequest_SourceTypeEnum_SourceType_value = map[string]int32{
		"UNKNOWN":      0,
		"REFERENCE":    1,
		"GROUND_TRUTH": 2,
		"PREDICTION":   3,
	}
)

func (x BatchIngestRequest_SourceTypeEnum_SourceType) Enum() *BatchIngestRequest_SourceTypeEnum_SourceType {
	p := new(BatchIngestRequest_SourceTypeEnum_SourceType)
	*p = x
	return p
}

func (x BatchIngestRequest_SourceTypeEnum_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchIngestRequest_SourceTypeEnum_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Ingest_proto_enumTypes[0].Descriptor()
}

func (BatchIngestRequest_SourceTypeEnum_SourceType) Type() protoreflect.EnumType {
	return &file_monitoring_Ingest_proto_enumTypes[0]
}

func (x BatchIngestRequest_SourceTypeEnum_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchIngestRequest_SourceTypeEnum_SourceType.Descriptor instead.
func (BatchIngestRequest_SourceTypeEnum_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 0, 0}
}

type BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType int32

const (
	BatchIngestRequest_ColumnSpec_IOTypeEnum_UNKNOWN      BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType = 0
	BatchIngestRequest_ColumnSpec_IOTypeEnum_INPUT        BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType = 1
	BatchIngestRequest_ColumnSpec_IOTypeEnum_OUTPUT       BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType = 2
	BatchIngestRequest_ColumnSpec_IOTypeEnum_GROUND_TRUTH BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType = 3
)

// Enum value maps for BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType.
var (
	BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType_name = map[int32]string{
		0: "UNKNOWN",
		1: "INPUT",
		2: "OUTPUT",
		3: "GROUND_TRUTH",
	}
	BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType_value = map[string]int32{
		"UNKNOWN":      0,
		"INPUT":        1,
		"OUTPUT":       2,
		"GROUND_TRUTH": 3,
	}
)

func (x BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType) Enum() *BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType {
	p := new(BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType)
	*p = x
	return p
}

func (x BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Ingest_proto_enumTypes[1].Descriptor()
}

func (BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType) Type() protoreflect.EnumType {
	return &file_monitoring_Ingest_proto_enumTypes[1]
}

func (x BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType.Descriptor instead.
func (BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type BatchIngestRequest_EncodingTypeEnum_EncodingType int32

const (
	BatchIngestRequest_EncodingTypeEnum_UNKNOWN BatchIngestRequest_EncodingTypeEnum_EncodingType = 0
	BatchIngestRequest_EncodingTypeEnum_CSV     BatchIngestRequest_EncodingTypeEnum_EncodingType = 1
	BatchIngestRequest_EncodingTypeEnum_JSON    BatchIngestRequest_EncodingTypeEnum_EncodingType = 2
	BatchIngestRequest_EncodingTypeEnum_PARQUET BatchIngestRequest_EncodingTypeEnum_EncodingType = 3
)

// Enum value maps for BatchIngestRequest_EncodingTypeEnum_EncodingType.
var (
	BatchIngestRequest_EncodingTypeEnum_EncodingType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CSV",
		2: "JSON",
		3: "PARQUET",
	}
	BatchIngestRequest_EncodingTypeEnum_EncodingType_value = map[string]int32{
		"UNKNOWN": 0,
		"CSV":     1,
		"JSON":    2,
		"PARQUET": 3,
	}
)

func (x BatchIngestRequest_EncodingTypeEnum_EncodingType) Enum() *BatchIngestRequest_EncodingTypeEnum_EncodingType {
	p := new(BatchIngestRequest_EncodingTypeEnum_EncodingType)
	*p = x
	return p
}

func (x BatchIngestRequest_EncodingTypeEnum_EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchIngestRequest_EncodingTypeEnum_EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Ingest_proto_enumTypes[2].Descriptor()
}

func (BatchIngestRequest_EncodingTypeEnum_EncodingType) Type() protoreflect.EnumType {
	return &file_monitoring_Ingest_proto_enumTypes[2]
}

func (x BatchIngestRequest_EncodingTypeEnum_EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchIngestRequest_EncodingTypeEnum_EncodingType.Descriptor instead.
func (BatchIngestRequest_EncodingTypeEnum_EncodingType) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 3, 0}
}

type BatchIngestRequest_CompressionTypeEnum_CompressionType int32

const (
	BatchIngestRequest_CompressionTypeEnum_UNKNOWN BatchIngestRequest_CompressionTypeEnum_CompressionType = 0
	BatchIngestRequest_CompressionTypeEnum_RAW     BatchIngestRequest_CompressionTypeEnum_CompressionType = 1
	BatchIngestRequest_CompressionTypeEnum_GZIP    BatchIngestRequest_CompressionTypeEnum_CompressionType = 2
)

// Enum value maps for BatchIngestRequest_CompressionTypeEnum_CompressionType.
var (
	BatchIngestRequest_CompressionTypeEnum_CompressionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "RAW",
		2: "GZIP",
	}
	BatchIngestRequest_CompressionTypeEnum_CompressionType_value = map[string]int32{
		"UNKNOWN": 0,
		"RAW":     1,
		"GZIP":    2,
	}
)

func (x BatchIngestRequest_CompressionTypeEnum_CompressionType) Enum() *BatchIngestRequest_CompressionTypeEnum_CompressionType {
	p := new(BatchIngestRequest_CompressionTypeEnum_CompressionType)
	*p = x
	return p
}

func (x BatchIngestRequest_CompressionTypeEnum_CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchIngestRequest_CompressionTypeEnum_CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Ingest_proto_enumTypes[3].Descriptor()
}

func (BatchIngestRequest_CompressionTypeEnum_CompressionType) Type() protoreflect.EnumType {
	return &file_monitoring_Ingest_proto_enumTypes[3]
}

func (x BatchIngestRequest_CompressionTypeEnum_CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchIngestRequest_CompressionTypeEnum_CompressionType.Descriptor instead.
func (BatchIngestRequest_CompressionTypeEnum_CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 4, 0}
}

type BatchIngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType BatchIngestRequest_SourceTypeEnum_SourceType `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=ai.verta.monitoring.BatchIngestRequest_SourceTypeEnum_SourceType" json:"source_type,omitempty"`
	// Name of the column in the data that can be used as the prediction id.
	// Required for ground truth and predictions.
	IdColumnName string `protobuf:"bytes,2,opt,name=id_column_name,json=idColumnName,proto3" json:"id_column_name,omitempty"`
	// Timestamp associated with the samples in the batch. If not provided, the current timestamp will be used.
	//
	// Types that are assignable to Timestamp:
	//	*BatchIngestRequest_ColumnName
	//	*BatchIngestRequest_Rfc3339Nano
	//	*BatchIngestRequest_UnixUtcNano
	Timestamp isBatchIngestRequest_Timestamp `protobuf_oneof:"timestamp"`
	// Only datasets saved in buckets owned by Verta are supported to start.
	//
	// Types that are assignable to Dataset:
	//	*BatchIngestRequest_DatasetVersionId
	//	*BatchIngestRequest_Config
	Dataset isBatchIngestRequest_Dataset `protobuf_oneof:"dataset"`
	// Map from name of the column in the original data to a specification of how to ingest it.
	IngestColumns map[string]*BatchIngestRequest_ColumnSpec `protobuf:"bytes,8,rep,name=ingest_columns,json=ingestColumns,proto3" json:"ingest_columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Unique ID associated with this batch of data.
	// Optional.
	BatchId         string                                                 `protobuf:"bytes,9,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	EncodingType    BatchIngestRequest_EncodingTypeEnum_EncodingType       `protobuf:"varint,10,opt,name=encoding_type,json=encodingType,proto3,enum=ai.verta.monitoring.BatchIngestRequest_EncodingTypeEnum_EncodingType" json:"encoding_type,omitempty"`
	CompressionType BatchIngestRequest_CompressionTypeEnum_CompressionType `protobuf:"varint,11,opt,name=compression_type,json=compressionType,proto3,enum=ai.verta.monitoring.BatchIngestRequest_CompressionTypeEnum_CompressionType" json:"compression_type,omitempty"`
	// MonitoredEntity to attach this batch to.
	MonitoredEntityId uint64 `protobuf:"varint,12,opt,name=monitored_entity_id,json=monitoredEntityId,proto3" json:"monitored_entity_id,omitempty"`
	// ModelVersion to which this batch is associated.
	// TOOD: make this optional? We don't need a specific model to monitor data
	ModelVersionId uint64 `protobuf:"varint,13,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
}

func (x *BatchIngestRequest) Reset() {
	*x = BatchIngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Ingest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIngestRequest) ProtoMessage() {}

func (x *BatchIngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Ingest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIngestRequest.ProtoReflect.Descriptor instead.
func (*BatchIngestRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0}
}

func (x *BatchIngestRequest) GetSourceType() BatchIngestRequest_SourceTypeEnum_SourceType {
	if x != nil {
		return x.SourceType
	}
	return BatchIngestRequest_SourceTypeEnum_UNKNOWN
}

func (x *BatchIngestRequest) GetIdColumnName() string {
	if x != nil {
		return x.IdColumnName
	}
	return ""
}

func (m *BatchIngestRequest) GetTimestamp() isBatchIngestRequest_Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (x *BatchIngestRequest) GetColumnName() string {
	if x, ok := x.GetTimestamp().(*BatchIngestRequest_ColumnName); ok {
		return x.ColumnName
	}
	return ""
}

func (x *BatchIngestRequest) GetRfc3339Nano() string {
	if x, ok := x.GetTimestamp().(*BatchIngestRequest_Rfc3339Nano); ok {
		return x.Rfc3339Nano
	}
	return ""
}

func (x *BatchIngestRequest) GetUnixUtcNano() uint64 {
	if x, ok := x.GetTimestamp().(*BatchIngestRequest_UnixUtcNano); ok {
		return x.UnixUtcNano
	}
	return 0
}

func (m *BatchIngestRequest) GetDataset() isBatchIngestRequest_Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (x *BatchIngestRequest) GetDatasetVersionId() string {
	if x, ok := x.GetDataset().(*BatchIngestRequest_DatasetVersionId); ok {
		return x.DatasetVersionId
	}
	return ""
}

func (x *BatchIngestRequest) GetConfig() *versioning.DatasetBlob {
	if x, ok := x.GetDataset().(*BatchIngestRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *BatchIngestRequest) GetIngestColumns() map[string]*BatchIngestRequest_ColumnSpec {
	if x != nil {
		return x.IngestColumns
	}
	return nil
}

func (x *BatchIngestRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchIngestRequest) GetEncodingType() BatchIngestRequest_EncodingTypeEnum_EncodingType {
	if x != nil {
		return x.EncodingType
	}
	return BatchIngestRequest_EncodingTypeEnum_UNKNOWN
}

func (x *BatchIngestRequest) GetCompressionType() BatchIngestRequest_CompressionTypeEnum_CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return BatchIngestRequest_CompressionTypeEnum_UNKNOWN
}

func (x *BatchIngestRequest) GetMonitoredEntityId() uint64 {
	if x != nil {
		return x.MonitoredEntityId
	}
	return 0
}

func (x *BatchIngestRequest) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

type isBatchIngestRequest_Timestamp interface {
	isBatchIngestRequest_Timestamp()
}

type BatchIngestRequest_ColumnName struct {
	// Name of the column in the data that can be used as the timestamp for each row.
	ColumnName string `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3,oneof"`
}

type BatchIngestRequest_Rfc3339Nano struct {
	// String representation of the timestamp in RFC3339 format.
	Rfc3339Nano string `protobuf:"bytes,4,opt,name=rfc3339_nano,json=rfc3339Nano,proto3,oneof"`
}

type BatchIngestRequest_UnixUtcNano struct {
	// UTC unix time in nanoseconds.
	UnixUtcNano uint64 `protobuf:"varint,5,opt,name=unix_utc_nano,json=unixUtcNano,proto3,oneof"`
}

func (*BatchIngestRequest_ColumnName) isBatchIngestRequest_Timestamp() {}

func (*BatchIngestRequest_Rfc3339Nano) isBatchIngestRequest_Timestamp() {}

func (*BatchIngestRequest_UnixUtcNano) isBatchIngestRequest_Timestamp() {}

type isBatchIngestRequest_Dataset interface {
	isBatchIngestRequest_Dataset()
}

type BatchIngestRequest_DatasetVersionId struct {
	// ID of the dataset version inside Verta to be used for ingestion.
	DatasetVersionId string `protobuf:"bytes,6,opt,name=dataset_version_id,json=datasetVersionId,proto3,oneof"`
}

type BatchIngestRequest_Config struct {
	// DatasetBlob that is equivalent to a dataset version, but not registered in the system.
	Config *versioning.DatasetBlob `protobuf:"bytes,7,opt,name=config,proto3,oneof"`
}

func (*BatchIngestRequest_DatasetVersionId) isBatchIngestRequest_Dataset() {}

func (*BatchIngestRequest_Config) isBatchIngestRequest_Dataset() {}

type BatchIngestRequest_SourceTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchIngestRequest_SourceTypeEnum) Reset() {
	*x = BatchIngestRequest_SourceTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Ingest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIngestRequest_SourceTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIngestRequest_SourceTypeEnum) ProtoMessage() {}

func (x *BatchIngestRequest_SourceTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Ingest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIngestRequest_SourceTypeEnum.ProtoReflect.Descriptor instead.
func (*BatchIngestRequest_SourceTypeEnum) Descriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 0}
}

type BatchIngestRequest_ColumnSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column that is associated with the monitoring system. Used to enable datasets to have different column names.
	// Equivalent to x-verta-monitoring-name in the model API.
	// Optional (will default to the original column name).
	MonitoringName string `protobuf:"bytes,1,opt,name=monitoring_name,json=monitoringName,proto3" json:"monitoring_name,omitempty"`
	// Type of the IO entry so that it can be mapped correctly.
	IoType BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType `protobuf:"varint,2,opt,name=io_type,json=ioType,proto3,enum=ai.verta.monitoring.BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType" json:"io_type,omitempty"`
	// Name of the "monitoring_name" entry that this column corresponds to a confidence for.
	// Equivalent to x-verta-monitoring-confidence-for in the model API.
	// Optional.
	ConfidenceFor string `protobuf:"bytes,3,opt,name=confidence_for,json=confidenceFor,proto3" json:"confidence_for,omitempty"`
	// Name of the "monitoring_name" entry that this column corresponds to the ground truth for.
	// Optional.
	GroundTruthFor string `protobuf:"bytes,4,opt,name=ground_truth_for,json=groundTruthFor,proto3" json:"ground_truth_for,omitempty"`
}

func (x *BatchIngestRequest_ColumnSpec) Reset() {
	*x = BatchIngestRequest_ColumnSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Ingest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIngestRequest_ColumnSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIngestRequest_ColumnSpec) ProtoMessage() {}

func (x *BatchIngestRequest_ColumnSpec) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Ingest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIngestRequest_ColumnSpec.ProtoReflect.Descriptor instead.
func (*BatchIngestRequest_ColumnSpec) Descriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BatchIngestRequest_ColumnSpec) GetMonitoringName() string {
	if x != nil {
		return x.MonitoringName
	}
	return ""
}

func (x *BatchIngestRequest_ColumnSpec) GetIoType() BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType {
	if x != nil {
		return x.IoType
	}
	return BatchIngestRequest_ColumnSpec_IOTypeEnum_UNKNOWN
}

func (x *BatchIngestRequest_ColumnSpec) GetConfidenceFor() string {
	if x != nil {
		return x.ConfidenceFor
	}
	return ""
}

func (x *BatchIngestRequest_ColumnSpec) GetGroundTruthFor() string {
	if x != nil {
		return x.GroundTruthFor
	}
	return ""
}

type BatchIngestRequest_EncodingTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchIngestRequest_EncodingTypeEnum) Reset() {
	*x = BatchIngestRequest_EncodingTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Ingest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIngestRequest_EncodingTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIngestRequest_EncodingTypeEnum) ProtoMessage() {}

func (x *BatchIngestRequest_EncodingTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Ingest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIngestRequest_EncodingTypeEnum.ProtoReflect.Descriptor instead.
func (*BatchIngestRequest_EncodingTypeEnum) Descriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 3}
}

type BatchIngestRequest_CompressionTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchIngestRequest_CompressionTypeEnum) Reset() {
	*x = BatchIngestRequest_CompressionTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Ingest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIngestRequest_CompressionTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIngestRequest_CompressionTypeEnum) ProtoMessage() {}

func (x *BatchIngestRequest_CompressionTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Ingest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIngestRequest_CompressionTypeEnum.ProtoReflect.Descriptor instead.
func (*BatchIngestRequest_CompressionTypeEnum) Descriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 4}
}

type BatchIngestRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchIngestRequest_Response) Reset() {
	*x = BatchIngestRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Ingest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIngestRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIngestRequest_Response) ProtoMessage() {}

func (x *BatchIngestRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Ingest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIngestRequest_Response.ProtoReflect.Descriptor instead.
func (*BatchIngestRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 5}
}

type BatchIngestRequest_ColumnSpec_IOTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchIngestRequest_ColumnSpec_IOTypeEnum) Reset() {
	*x = BatchIngestRequest_ColumnSpec_IOTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Ingest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchIngestRequest_ColumnSpec_IOTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchIngestRequest_ColumnSpec_IOTypeEnum) ProtoMessage() {}

func (x *BatchIngestRequest_ColumnSpec_IOTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Ingest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchIngestRequest_ColumnSpec_IOTypeEnum.ProtoReflect.Descriptor instead.
func (*BatchIngestRequest_ColumnSpec_IOTypeEnum) Descriptor() ([]byte, []int) {
	return file_monitoring_Ingest_proto_rawDescGZIP(), []int{0, 1, 0}
}

var File_monitoring_Ingest_proto protoreflect.FileDescriptor

var file_monitoring_Ingest_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85,
	0x0c, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x72, 0x66, 0x63, 0x33, 0x33, 0x33, 0x39, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x66, 0x63, 0x33,
	0x33, 0x33, 0x39, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x78, 0x5f,
	0x75, 0x74, 0x63, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x6e, 0x69, 0x78, 0x55, 0x74, 0x63, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x2e, 0x0a,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x61, 0x0a, 0x0e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x6a, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x5c, 0x0a,
	0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22,
	0x4a, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x55, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0xb3, 0x02, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x69, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68,
	0x46, 0x6f, 0x72, 0x1a, 0x4c, 0x0a, 0x0a, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x22, 0x3e, 0x0a, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x55, 0x54, 0x48, 0x10,
	0x03, 0x1a, 0x74, 0x0a, 0x12, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x3b, 0x0a, 0x0c, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x10, 0x03, 0x1a, 0x48, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22,
	0x31, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50,
	0x10, 0x02, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x32, 0xac, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x45, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_monitoring_Ingest_proto_rawDescOnce sync.Once
	file_monitoring_Ingest_proto_rawDescData = file_monitoring_Ingest_proto_rawDesc
)

func file_monitoring_Ingest_proto_rawDescGZIP() []byte {
	file_monitoring_Ingest_proto_rawDescOnce.Do(func() {
		file_monitoring_Ingest_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitoring_Ingest_proto_rawDescData)
	})
	return file_monitoring_Ingest_proto_rawDescData
}

var file_monitoring_Ingest_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_monitoring_Ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_monitoring_Ingest_proto_goTypes = []interface{}{
	(BatchIngestRequest_SourceTypeEnum_SourceType)(0),           // 0: ai.verta.monitoring.BatchIngestRequest.SourceTypeEnum.SourceType
	(BatchIngestRequest_ColumnSpec_IOTypeEnum_IOType)(0),        // 1: ai.verta.monitoring.BatchIngestRequest.ColumnSpec.IOTypeEnum.IOType
	(BatchIngestRequest_EncodingTypeEnum_EncodingType)(0),       // 2: ai.verta.monitoring.BatchIngestRequest.EncodingTypeEnum.EncodingType
	(BatchIngestRequest_CompressionTypeEnum_CompressionType)(0), // 3: ai.verta.monitoring.BatchIngestRequest.CompressionTypeEnum.CompressionType
	(*BatchIngestRequest)(nil),                                  // 4: ai.verta.monitoring.BatchIngestRequest
	(*BatchIngestRequest_SourceTypeEnum)(nil),                   // 5: ai.verta.monitoring.BatchIngestRequest.SourceTypeEnum
	(*BatchIngestRequest_ColumnSpec)(nil),                       // 6: ai.verta.monitoring.BatchIngestRequest.ColumnSpec
	nil,                                                         // 7: ai.verta.monitoring.BatchIngestRequest.IngestColumnsEntry
	(*BatchIngestRequest_EncodingTypeEnum)(nil),                 // 8: ai.verta.monitoring.BatchIngestRequest.EncodingTypeEnum
	(*BatchIngestRequest_CompressionTypeEnum)(nil),              // 9: ai.verta.monitoring.BatchIngestRequest.CompressionTypeEnum
	(*BatchIngestRequest_Response)(nil),                         // 10: ai.verta.monitoring.BatchIngestRequest.Response
	(*BatchIngestRequest_ColumnSpec_IOTypeEnum)(nil),            // 11: ai.verta.monitoring.BatchIngestRequest.ColumnSpec.IOTypeEnum
	(*versioning.DatasetBlob)(nil),                              // 12: ai.verta.modeldb.versioning.DatasetBlob
}
var file_monitoring_Ingest_proto_depIdxs = []int32{
	0,  // 0: ai.verta.monitoring.BatchIngestRequest.source_type:type_name -> ai.verta.monitoring.BatchIngestRequest.SourceTypeEnum.SourceType
	12, // 1: ai.verta.monitoring.BatchIngestRequest.config:type_name -> ai.verta.modeldb.versioning.DatasetBlob
	7,  // 2: ai.verta.monitoring.BatchIngestRequest.ingest_columns:type_name -> ai.verta.monitoring.BatchIngestRequest.IngestColumnsEntry
	2,  // 3: ai.verta.monitoring.BatchIngestRequest.encoding_type:type_name -> ai.verta.monitoring.BatchIngestRequest.EncodingTypeEnum.EncodingType
	3,  // 4: ai.verta.monitoring.BatchIngestRequest.compression_type:type_name -> ai.verta.monitoring.BatchIngestRequest.CompressionTypeEnum.CompressionType
	1,  // 5: ai.verta.monitoring.BatchIngestRequest.ColumnSpec.io_type:type_name -> ai.verta.monitoring.BatchIngestRequest.ColumnSpec.IOTypeEnum.IOType
	6,  // 6: ai.verta.monitoring.BatchIngestRequest.IngestColumnsEntry.value:type_name -> ai.verta.monitoring.BatchIngestRequest.ColumnSpec
	4,  // 7: ai.verta.monitoring.IngestService.batchIngest:input_type -> ai.verta.monitoring.BatchIngestRequest
	10, // 8: ai.verta.monitoring.IngestService.batchIngest:output_type -> ai.verta.monitoring.BatchIngestRequest.Response
	8,  // [8:9] is the sub-list for method output_type
	7,  // [7:8] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_monitoring_Ingest_proto_init() }
func file_monitoring_Ingest_proto_init() {
	if File_monitoring_Ingest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_monitoring_Ingest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Ingest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIngestRequest_SourceTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Ingest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIngestRequest_ColumnSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Ingest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIngestRequest_EncodingTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Ingest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIngestRequest_CompressionTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Ingest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIngestRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Ingest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchIngestRequest_ColumnSpec_IOTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_monitoring_Ingest_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BatchIngestRequest_ColumnName)(nil),
		(*BatchIngestRequest_Rfc3339Nano)(nil),
		(*BatchIngestRequest_UnixUtcNano)(nil),
		(*BatchIngestRequest_DatasetVersionId)(nil),
		(*BatchIngestRequest_Config)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitoring_Ingest_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monitoring_Ingest_proto_goTypes,
		DependencyIndexes: file_monitoring_Ingest_proto_depIdxs,
		EnumInfos:         file_monitoring_Ingest_proto_enumTypes,
		MessageInfos:      file_monitoring_Ingest_proto_msgTypes,
	}.Build()
	File_monitoring_Ingest_proto = out.File
	file_monitoring_Ingest_proto_rawDesc = nil
	file_monitoring_Ingest_proto_goTypes = nil
	file_monitoring_Ingest_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngestServiceClient is the client API for IngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestServiceClient interface {
	BatchIngest(ctx context.Context, in *BatchIngestRequest, opts ...grpc.CallOption) (*BatchIngestRequest_Response, error)
}

type ingestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestServiceClient(cc grpc.ClientConnInterface) IngestServiceClient {
	return &ingestServiceClient{cc}
}

func (c *ingestServiceClient) BatchIngest(ctx context.Context, in *BatchIngestRequest, opts ...grpc.CallOption) (*BatchIngestRequest_Response, error) {
	out := new(BatchIngestRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.IngestService/batchIngest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestServiceServer is the server API for IngestService service.
type IngestServiceServer interface {
	BatchIngest(context.Context, *BatchIngestRequest) (*BatchIngestRequest_Response, error)
}

// UnimplementedIngestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIngestServiceServer struct {
}

func (*UnimplementedIngestServiceServer) BatchIngest(context.Context, *BatchIngestRequest) (*BatchIngestRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchIngest not implemented")
}

func RegisterIngestServiceServer(s *grpc.Server, srv IngestServiceServer) {
	s.RegisterService(&_IngestService_serviceDesc, srv)
}

func _IngestService_BatchIngest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchIngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestServiceServer).BatchIngest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.IngestService/BatchIngest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestServiceServer).BatchIngest(ctx, req.(*BatchIngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IngestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.monitoring.IngestService",
	HandlerType: (*IngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "batchIngest",
			Handler:    _IngestService_BatchIngest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/Ingest.proto",
}
