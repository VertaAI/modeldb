// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.11.2
// source: monitoring/MonitoredEntity.proto

package monitoring

import (
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	uac "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{0}
}

type MonitoredEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceId              uint64            `protobuf:"varint,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	CreatedAtTimestampMillis uint64            `protobuf:"varint,6,opt,name=created_at_timestamp_millis,json=createdAtTimestampMillis,proto3" json:"created_at_timestamp_millis,omitempty"`
	UpdatedAtTimestampMillis uint64            `protobuf:"varint,7,opt,name=updated_at_timestamp_millis,json=updatedAtTimestampMillis,proto3" json:"updated_at_timestamp_millis,omitempty"`
	Attributes               map[string]string `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// owner's verta_id
	Owner string `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	// Types that are assignable to OwnerTracking:
	//
	//	*MonitoredEntity_OwnerId
	//	*MonitoredEntity_GroupOwnerId
	OwnerTracking      isMonitoredEntity_OwnerTracking `protobuf_oneof:"owner_tracking"`
	ResourceVisibility uac.ResourceVisibility          `protobuf:"varint,10,opt,name=resource_visibility,json=resourceVisibility,proto3,enum=ai.verta.uac.ResourceVisibility" json:"resource_visibility,omitempty"`
	// The next field only makes sense when visibility == ORG_CUSTOM
	// They will be empty otherwise
	CustomPermission *uac.CollaboratorPermissions `protobuf:"bytes,11,opt,name=custom_permission,json=customPermission,proto3" json:"custom_permission,omitempty"`
	VersionNumber    uint64                       `protobuf:"varint,12,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	EndpointId       uint64                       `protobuf:"varint,13,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	DatasourceName   string                       `protobuf:"bytes,14,opt,name=datasource_name,json=datasourceName,proto3" json:"datasource_name,omitempty"`
	// a tag that says where the data for this monitored entity comes from. eg. "endpoint" or "batch"
	Origin string `protobuf:"bytes,15,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *MonitoredEntity) Reset() {
	*x = MonitoredEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoredEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoredEntity) ProtoMessage() {}

func (x *MonitoredEntity) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoredEntity.ProtoReflect.Descriptor instead.
func (*MonitoredEntity) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{1}
}

func (x *MonitoredEntity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MonitoredEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitoredEntity) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (x *MonitoredEntity) GetCreatedAtTimestampMillis() uint64 {
	if x != nil {
		return x.CreatedAtTimestampMillis
	}
	return 0
}

func (x *MonitoredEntity) GetUpdatedAtTimestampMillis() uint64 {
	if x != nil {
		return x.UpdatedAtTimestampMillis
	}
	return 0
}

func (x *MonitoredEntity) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *MonitoredEntity) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (m *MonitoredEntity) GetOwnerTracking() isMonitoredEntity_OwnerTracking {
	if m != nil {
		return m.OwnerTracking
	}
	return nil
}

func (x *MonitoredEntity) GetOwnerId() uint64 {
	if x, ok := x.GetOwnerTracking().(*MonitoredEntity_OwnerId); ok {
		return x.OwnerId
	}
	return 0
}

func (x *MonitoredEntity) GetGroupOwnerId() *common.GroupId {
	if x, ok := x.GetOwnerTracking().(*MonitoredEntity_GroupOwnerId); ok {
		return x.GroupOwnerId
	}
	return nil
}

func (x *MonitoredEntity) GetResourceVisibility() uac.ResourceVisibility {
	if x != nil {
		return x.ResourceVisibility
	}
	return uac.ResourceVisibility(0)
}

func (x *MonitoredEntity) GetCustomPermission() *uac.CollaboratorPermissions {
	if x != nil {
		return x.CustomPermission
	}
	return nil
}

func (x *MonitoredEntity) GetVersionNumber() uint64 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

func (x *MonitoredEntity) GetEndpointId() uint64 {
	if x != nil {
		return x.EndpointId
	}
	return 0
}

func (x *MonitoredEntity) GetDatasourceName() string {
	if x != nil {
		return x.DatasourceName
	}
	return ""
}

func (x *MonitoredEntity) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

type isMonitoredEntity_OwnerTracking interface {
	isMonitoredEntity_OwnerTracking()
}

type MonitoredEntity_OwnerId struct {
	OwnerId uint64 `protobuf:"varint,16,opt,name=owner_id,json=ownerId,proto3,oneof"`
}

type MonitoredEntity_GroupOwnerId struct {
	GroupOwnerId *common.GroupId `protobuf:"bytes,17,opt,name=group_owner_id,json=groupOwnerId,proto3,oneof"`
}

func (*MonitoredEntity_OwnerId) isMonitoredEntity_OwnerTracking() {}

func (*MonitoredEntity_GroupOwnerId) isMonitoredEntity_OwnerTracking() {}

type CreateMonitoredEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to WorkspaceIdentifier:
	//
	//	*CreateMonitoredEntityRequest_WorkspaceId
	//	*CreateMonitoredEntityRequest_WorkspaceName
	WorkspaceIdentifier isCreateMonitoredEntityRequest_WorkspaceIdentifier `protobuf_oneof:"workspace_identifier"`
	Attributes          map[string]string                                  `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceVisibility  uac.ResourceVisibility                             `protobuf:"varint,7,opt,name=resource_visibility,json=resourceVisibility,proto3,enum=ai.verta.uac.ResourceVisibility" json:"resource_visibility,omitempty"`
	// The next field only makes sense when visibility == ORG_CUSTOM
	// They will be empty otherwise
	CustomPermission *uac.CollaboratorPermissions `protobuf:"bytes,8,opt,name=custom_permission,json=customPermission,proto3" json:"custom_permission,omitempty"`
	// Optional.  If the data originates from a Verta endpoint, set this to the endpoint id.
	EndpointId uint64 `protobuf:"varint,9,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	// a tag that says where the data for this monitored entity comes from. eg. "endpoint" or "batch"
	Origin string `protobuf:"bytes,10,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *CreateMonitoredEntityRequest) Reset() {
	*x = CreateMonitoredEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitoredEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitoredEntityRequest) ProtoMessage() {}

func (x *CreateMonitoredEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitoredEntityRequest.ProtoReflect.Descriptor instead.
func (*CreateMonitoredEntityRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{2}
}

func (x *CreateMonitoredEntityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *CreateMonitoredEntityRequest) GetWorkspaceIdentifier() isCreateMonitoredEntityRequest_WorkspaceIdentifier {
	if m != nil {
		return m.WorkspaceIdentifier
	}
	return nil
}

func (x *CreateMonitoredEntityRequest) GetWorkspaceId() uint64 {
	if x, ok := x.GetWorkspaceIdentifier().(*CreateMonitoredEntityRequest_WorkspaceId); ok {
		return x.WorkspaceId
	}
	return 0
}

func (x *CreateMonitoredEntityRequest) GetWorkspaceName() string {
	if x, ok := x.GetWorkspaceIdentifier().(*CreateMonitoredEntityRequest_WorkspaceName); ok {
		return x.WorkspaceName
	}
	return ""
}

func (x *CreateMonitoredEntityRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateMonitoredEntityRequest) GetResourceVisibility() uac.ResourceVisibility {
	if x != nil {
		return x.ResourceVisibility
	}
	return uac.ResourceVisibility(0)
}

func (x *CreateMonitoredEntityRequest) GetCustomPermission() *uac.CollaboratorPermissions {
	if x != nil {
		return x.CustomPermission
	}
	return nil
}

func (x *CreateMonitoredEntityRequest) GetEndpointId() uint64 {
	if x != nil {
		return x.EndpointId
	}
	return 0
}

func (x *CreateMonitoredEntityRequest) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

type isCreateMonitoredEntityRequest_WorkspaceIdentifier interface {
	isCreateMonitoredEntityRequest_WorkspaceIdentifier()
}

type CreateMonitoredEntityRequest_WorkspaceId struct {
	WorkspaceId uint64 `protobuf:"varint,4,opt,name=workspace_id,json=workspaceId,proto3,oneof"`
}

type CreateMonitoredEntityRequest_WorkspaceName struct {
	WorkspaceName string `protobuf:"bytes,5,opt,name=workspace_name,json=workspaceName,proto3,oneof"`
}

func (*CreateMonitoredEntityRequest_WorkspaceId) isCreateMonitoredEntityRequest_WorkspaceIdentifier() {
}

func (*CreateMonitoredEntityRequest_WorkspaceName) isCreateMonitoredEntityRequest_WorkspaceIdentifier() {
}

type UpdateMonitoredEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Attributes         map[string]string      `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceVisibility uac.ResourceVisibility `protobuf:"varint,8,opt,name=resource_visibility,json=resourceVisibility,proto3,enum=ai.verta.uac.ResourceVisibility" json:"resource_visibility,omitempty"`
	// The next field only makes sense when visibility == ORG_CUSTOM
	// They will be empty otherwise
	CustomPermission *uac.CollaboratorPermissions `protobuf:"bytes,9,opt,name=custom_permission,json=customPermission,proto3" json:"custom_permission,omitempty"`
}

func (x *UpdateMonitoredEntityRequest) Reset() {
	*x = UpdateMonitoredEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitoredEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitoredEntityRequest) ProtoMessage() {}

func (x *UpdateMonitoredEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitoredEntityRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitoredEntityRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMonitoredEntityRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMonitoredEntityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMonitoredEntityRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateMonitoredEntityRequest) GetResourceVisibility() uac.ResourceVisibility {
	if x != nil {
		return x.ResourceVisibility
	}
	return uac.ResourceVisibility(0)
}

func (x *UpdateMonitoredEntityRequest) GetCustomPermission() *uac.CollaboratorPermissions {
	if x != nil {
		return x.CustomPermission
	}
	return nil
}

type FindMonitoredEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids   []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	// Add names to find with a fuzzy (non-exact) search
	FuzzyNames      []string `protobuf:"bytes,7,rep,name=fuzzy_names,json=fuzzyNames,proto3" json:"fuzzy_names,omitempty"`
	EndpointIds     []uint64 `protobuf:"varint,8,rep,packed,name=endpoint_ids,json=endpointIds,proto3" json:"endpoint_ids,omitempty"`
	ModelVersionIds []string `protobuf:"bytes,9,rep,name=model_version_ids,json=modelVersionIds,proto3" json:"model_version_ids,omitempty"`
	// Types that are assignable to WorkspaceIdentifier:
	//
	//	*FindMonitoredEntityRequest_WorkspaceId
	//	*FindMonitoredEntityRequest_WorkspaceName
	WorkspaceIdentifier isFindMonitoredEntityRequest_WorkspaceIdentifier `protobuf_oneof:"workspace_identifier"`
	// Pagination
	PageNumber int32 `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32 `protobuf:"varint,5,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (x *FindMonitoredEntityRequest) Reset() {
	*x = FindMonitoredEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMonitoredEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMonitoredEntityRequest) ProtoMessage() {}

func (x *FindMonitoredEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMonitoredEntityRequest.ProtoReflect.Descriptor instead.
func (*FindMonitoredEntityRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{4}
}

func (x *FindMonitoredEntityRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FindMonitoredEntityRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FindMonitoredEntityRequest) GetFuzzyNames() []string {
	if x != nil {
		return x.FuzzyNames
	}
	return nil
}

func (x *FindMonitoredEntityRequest) GetEndpointIds() []uint64 {
	if x != nil {
		return x.EndpointIds
	}
	return nil
}

func (x *FindMonitoredEntityRequest) GetModelVersionIds() []string {
	if x != nil {
		return x.ModelVersionIds
	}
	return nil
}

func (m *FindMonitoredEntityRequest) GetWorkspaceIdentifier() isFindMonitoredEntityRequest_WorkspaceIdentifier {
	if m != nil {
		return m.WorkspaceIdentifier
	}
	return nil
}

func (x *FindMonitoredEntityRequest) GetWorkspaceId() uint64 {
	if x, ok := x.GetWorkspaceIdentifier().(*FindMonitoredEntityRequest_WorkspaceId); ok {
		return x.WorkspaceId
	}
	return 0
}

func (x *FindMonitoredEntityRequest) GetWorkspaceName() string {
	if x, ok := x.GetWorkspaceIdentifier().(*FindMonitoredEntityRequest_WorkspaceName); ok {
		return x.WorkspaceName
	}
	return ""
}

func (x *FindMonitoredEntityRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindMonitoredEntityRequest) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

type isFindMonitoredEntityRequest_WorkspaceIdentifier interface {
	isFindMonitoredEntityRequest_WorkspaceIdentifier()
}

type FindMonitoredEntityRequest_WorkspaceId struct {
	WorkspaceId uint64 `protobuf:"varint,3,opt,name=workspace_id,json=workspaceId,proto3,oneof"`
}

type FindMonitoredEntityRequest_WorkspaceName struct {
	WorkspaceName string `protobuf:"bytes,6,opt,name=workspace_name,json=workspaceName,proto3,oneof"`
}

func (*FindMonitoredEntityRequest_WorkspaceId) isFindMonitoredEntityRequest_WorkspaceIdentifier() {}

func (*FindMonitoredEntityRequest_WorkspaceName) isFindMonitoredEntityRequest_WorkspaceIdentifier() {}

type DeleteMonitoredEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMonitoredEntityRequest) Reset() {
	*x = DeleteMonitoredEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitoredEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitoredEntityRequest) ProtoMessage() {}

func (x *DeleteMonitoredEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitoredEntityRequest.ProtoReflect.Descriptor instead.
func (*DeleteMonitoredEntityRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteMonitoredEntityRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateMonitoredEntityRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitoredEntity *MonitoredEntity `protobuf:"bytes,1,opt,name=monitored_entity,json=monitoredEntity,proto3" json:"monitored_entity,omitempty"`
}

func (x *CreateMonitoredEntityRequest_Response) Reset() {
	*x = CreateMonitoredEntityRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitoredEntityRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitoredEntityRequest_Response) ProtoMessage() {}

func (x *CreateMonitoredEntityRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitoredEntityRequest_Response.ProtoReflect.Descriptor instead.
func (*CreateMonitoredEntityRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CreateMonitoredEntityRequest_Response) GetMonitoredEntity() *MonitoredEntity {
	if x != nil {
		return x.MonitoredEntity
	}
	return nil
}

type UpdateMonitoredEntityRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitoredEntity *MonitoredEntity `protobuf:"bytes,1,opt,name=monitored_entity,json=monitoredEntity,proto3" json:"monitored_entity,omitempty"`
}

func (x *UpdateMonitoredEntityRequest_Response) Reset() {
	*x = UpdateMonitoredEntityRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitoredEntityRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitoredEntityRequest_Response) ProtoMessage() {}

func (x *UpdateMonitoredEntityRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitoredEntityRequest_Response.ProtoReflect.Descriptor instead.
func (*UpdateMonitoredEntityRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{3, 1}
}

func (x *UpdateMonitoredEntityRequest_Response) GetMonitoredEntity() *MonitoredEntity {
	if x != nil {
		return x.MonitoredEntity
	}
	return nil
}

type FindMonitoredEntityRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitoredEntities []*MonitoredEntity `protobuf:"bytes,1,rep,name=monitored_entities,json=monitoredEntities,proto3" json:"monitored_entities,omitempty"`
	TotalRecords      int32              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindMonitoredEntityRequest_Response) Reset() {
	*x = FindMonitoredEntityRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMonitoredEntityRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMonitoredEntityRequest_Response) ProtoMessage() {}

func (x *FindMonitoredEntityRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMonitoredEntityRequest_Response.ProtoReflect.Descriptor instead.
func (*FindMonitoredEntityRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{4, 0}
}

func (x *FindMonitoredEntityRequest_Response) GetMonitoredEntities() []*MonitoredEntity {
	if x != nil {
		return x.MonitoredEntities
	}
	return nil
}

func (x *FindMonitoredEntityRequest_Response) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type DeleteMonitoredEntityRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMonitoredEntityRequest_Response) Reset() {
	*x = DeleteMonitoredEntityRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_MonitoredEntity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitoredEntityRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitoredEntityRequest_Response) ProtoMessage() {}

func (x *DeleteMonitoredEntityRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_MonitoredEntity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitoredEntityRequest_Response.ProtoReflect.Descriptor instead.
func (*DeleteMonitoredEntityRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_MonitoredEntity_proto_rawDescGZIP(), []int{5, 0}
}

var File_monitoring_MonitoredEntity_proto protoreflect.FileDescriptor

var file_monitoring_MonitoredEntity_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x75, 0x61, 0x63, 0x2f, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xae, 0x06, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x83, 0x05, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xee, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x07, 0x22, 0xe1, 0x03, 0x0a, 0x1a, 0x46, 0x69, 0x6e,
	0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x84, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x0a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcc, 0x06, 0x0a, 0x16, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x31, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x22, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0xcc, 0x01, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x31, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x32, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0xc4, 0x01, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22,
	0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0xcc, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x2a, 0x39, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x45, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_monitoring_MonitoredEntity_proto_rawDescOnce sync.Once
	file_monitoring_MonitoredEntity_proto_rawDescData = file_monitoring_MonitoredEntity_proto_rawDesc
)

func file_monitoring_MonitoredEntity_proto_rawDescGZIP() []byte {
	file_monitoring_MonitoredEntity_proto_rawDescOnce.Do(func() {
		file_monitoring_MonitoredEntity_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitoring_MonitoredEntity_proto_rawDescData)
	})
	return file_monitoring_MonitoredEntity_proto_rawDescData
}

var file_monitoring_MonitoredEntity_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_monitoring_MonitoredEntity_proto_goTypes = []interface{}{
	(*Empty)(nil),                        // 0: ai.verta.monitoring.Empty
	(*MonitoredEntity)(nil),              // 1: ai.verta.monitoring.MonitoredEntity
	(*CreateMonitoredEntityRequest)(nil), // 2: ai.verta.monitoring.CreateMonitoredEntityRequest
	(*UpdateMonitoredEntityRequest)(nil), // 3: ai.verta.monitoring.UpdateMonitoredEntityRequest
	(*FindMonitoredEntityRequest)(nil),   // 4: ai.verta.monitoring.FindMonitoredEntityRequest
	(*DeleteMonitoredEntityRequest)(nil), // 5: ai.verta.monitoring.DeleteMonitoredEntityRequest
	nil,                                  // 6: ai.verta.monitoring.MonitoredEntity.AttributesEntry
	nil,                                  // 7: ai.verta.monitoring.CreateMonitoredEntityRequest.AttributesEntry
	(*CreateMonitoredEntityRequest_Response)(nil), // 8: ai.verta.monitoring.CreateMonitoredEntityRequest.Response
	nil, // 9: ai.verta.monitoring.UpdateMonitoredEntityRequest.AttributesEntry
	(*UpdateMonitoredEntityRequest_Response)(nil), // 10: ai.verta.monitoring.UpdateMonitoredEntityRequest.Response
	(*FindMonitoredEntityRequest_Response)(nil),   // 11: ai.verta.monitoring.FindMonitoredEntityRequest.Response
	(*DeleteMonitoredEntityRequest_Response)(nil), // 12: ai.verta.monitoring.DeleteMonitoredEntityRequest.Response
	(*common.GroupId)(nil),                        // 13: ai.verta.common.GroupId
	(uac.ResourceVisibility)(0),                   // 14: ai.verta.uac.ResourceVisibility
	(*uac.CollaboratorPermissions)(nil),           // 15: ai.verta.uac.CollaboratorPermissions
}
var file_monitoring_MonitoredEntity_proto_depIdxs = []int32{
	6,  // 0: ai.verta.monitoring.MonitoredEntity.attributes:type_name -> ai.verta.monitoring.MonitoredEntity.AttributesEntry
	13, // 1: ai.verta.monitoring.MonitoredEntity.group_owner_id:type_name -> ai.verta.common.GroupId
	14, // 2: ai.verta.monitoring.MonitoredEntity.resource_visibility:type_name -> ai.verta.uac.ResourceVisibility
	15, // 3: ai.verta.monitoring.MonitoredEntity.custom_permission:type_name -> ai.verta.uac.CollaboratorPermissions
	7,  // 4: ai.verta.monitoring.CreateMonitoredEntityRequest.attributes:type_name -> ai.verta.monitoring.CreateMonitoredEntityRequest.AttributesEntry
	14, // 5: ai.verta.monitoring.CreateMonitoredEntityRequest.resource_visibility:type_name -> ai.verta.uac.ResourceVisibility
	15, // 6: ai.verta.monitoring.CreateMonitoredEntityRequest.custom_permission:type_name -> ai.verta.uac.CollaboratorPermissions
	9,  // 7: ai.verta.monitoring.UpdateMonitoredEntityRequest.attributes:type_name -> ai.verta.monitoring.UpdateMonitoredEntityRequest.AttributesEntry
	14, // 8: ai.verta.monitoring.UpdateMonitoredEntityRequest.resource_visibility:type_name -> ai.verta.uac.ResourceVisibility
	15, // 9: ai.verta.monitoring.UpdateMonitoredEntityRequest.custom_permission:type_name -> ai.verta.uac.CollaboratorPermissions
	1,  // 10: ai.verta.monitoring.CreateMonitoredEntityRequest.Response.monitored_entity:type_name -> ai.verta.monitoring.MonitoredEntity
	1,  // 11: ai.verta.monitoring.UpdateMonitoredEntityRequest.Response.monitored_entity:type_name -> ai.verta.monitoring.MonitoredEntity
	1,  // 12: ai.verta.monitoring.FindMonitoredEntityRequest.Response.monitored_entities:type_name -> ai.verta.monitoring.MonitoredEntity
	2,  // 13: ai.verta.monitoring.MonitoredEntityService.createMonitoredEntity:input_type -> ai.verta.monitoring.CreateMonitoredEntityRequest
	3,  // 14: ai.verta.monitoring.MonitoredEntityService.updateMonitoredEntity:input_type -> ai.verta.monitoring.UpdateMonitoredEntityRequest
	4,  // 15: ai.verta.monitoring.MonitoredEntityService.findMonitoredEntity:input_type -> ai.verta.monitoring.FindMonitoredEntityRequest
	5,  // 16: ai.verta.monitoring.MonitoredEntityService.deleteMonitoredEntity:input_type -> ai.verta.monitoring.DeleteMonitoredEntityRequest
	8,  // 17: ai.verta.monitoring.MonitoredEntityService.createMonitoredEntity:output_type -> ai.verta.monitoring.CreateMonitoredEntityRequest.Response
	10, // 18: ai.verta.monitoring.MonitoredEntityService.updateMonitoredEntity:output_type -> ai.verta.monitoring.UpdateMonitoredEntityRequest.Response
	11, // 19: ai.verta.monitoring.MonitoredEntityService.findMonitoredEntity:output_type -> ai.verta.monitoring.FindMonitoredEntityRequest.Response
	12, // 20: ai.verta.monitoring.MonitoredEntityService.deleteMonitoredEntity:output_type -> ai.verta.monitoring.DeleteMonitoredEntityRequest.Response
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_monitoring_MonitoredEntity_proto_init() }
func file_monitoring_MonitoredEntity_proto_init() {
	if File_monitoring_MonitoredEntity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_monitoring_MonitoredEntity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoredEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMonitoredEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonitoredEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMonitoredEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMonitoredEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMonitoredEntityRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonitoredEntityRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMonitoredEntityRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_MonitoredEntity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMonitoredEntityRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_monitoring_MonitoredEntity_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MonitoredEntity_OwnerId)(nil),
		(*MonitoredEntity_GroupOwnerId)(nil),
	}
	file_monitoring_MonitoredEntity_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CreateMonitoredEntityRequest_WorkspaceId)(nil),
		(*CreateMonitoredEntityRequest_WorkspaceName)(nil),
	}
	file_monitoring_MonitoredEntity_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*FindMonitoredEntityRequest_WorkspaceId)(nil),
		(*FindMonitoredEntityRequest_WorkspaceName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitoring_MonitoredEntity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monitoring_MonitoredEntity_proto_goTypes,
		DependencyIndexes: file_monitoring_MonitoredEntity_proto_depIdxs,
		MessageInfos:      file_monitoring_MonitoredEntity_proto_msgTypes,
	}.Build()
	File_monitoring_MonitoredEntity_proto = out.File
	file_monitoring_MonitoredEntity_proto_rawDesc = nil
	file_monitoring_MonitoredEntity_proto_goTypes = nil
	file_monitoring_MonitoredEntity_proto_depIdxs = nil
}
