// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: monitoring/Summary.proto

package monitoring

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SummaryValue_Type int32

const (
	SummaryValue_STRING  SummaryValue_Type = 0
	SummaryValue_NUMBER  SummaryValue_Type = 1
	SummaryValue_BOOLEAN SummaryValue_Type = 2
)

// Enum value maps for SummaryValue_Type.
var (
	SummaryValue_Type_name = map[int32]string{
		0: "STRING",
		1: "NUMBER",
		2: "BOOLEAN",
	}
	SummaryValue_Type_value = map[string]int32{
		"STRING":  0,
		"NUMBER":  1,
		"BOOLEAN": 2,
	}
)

func (x SummaryValue_Type) Enum() *SummaryValue_Type {
	p := new(SummaryValue_Type)
	*p = x
	return p
}

func (x SummaryValue_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SummaryValue_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Summary_proto_enumTypes[0].Descriptor()
}

func (SummaryValue_Type) Type() protoreflect.EnumType {
	return &file_monitoring_Summary_proto_enumTypes[0]
}

func (x SummaryValue_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SummaryValue_Type.Descriptor instead.
func (SummaryValue_Type) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{5, 0}
}

type AggregationQuerySummary_AggregationOperation int32

const (
	AggregationQuerySummary_SUM AggregationQuerySummary_AggregationOperation = 0
)

// Enum value maps for AggregationQuerySummary_AggregationOperation.
var (
	AggregationQuerySummary_AggregationOperation_name = map[int32]string{
		0: "SUM",
	}
	AggregationQuerySummary_AggregationOperation_value = map[string]int32{
		"SUM": 0,
	}
)

func (x AggregationQuerySummary_AggregationOperation) Enum() *AggregationQuerySummary_AggregationOperation {
	p := new(AggregationQuerySummary_AggregationOperation)
	*p = x
	return p
}

func (x AggregationQuerySummary_AggregationOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationQuerySummary_AggregationOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_Summary_proto_enumTypes[1].Descriptor()
}

func (AggregationQuerySummary_AggregationOperation) Type() protoreflect.EnumType {
	return &file_monitoring_Summary_proto_enumTypes[1]
}

func (x AggregationQuerySummary_AggregationOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationQuerySummary_AggregationOperation.Descriptor instead.
func (AggregationQuerySummary_AggregationOperation) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{13, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{0}
}

// Summary is a collection of multiple samples through time with a shared name and type. It's used to make sure the multiple samples are consistent with each other.
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MonitoredEntityId uint64            `protobuf:"varint,2,opt,name=monitored_entity_id,json=monitoredEntityId,proto3" json:"monitored_entity_id,omitempty"`
	Name              string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TypeName          string            `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Attributes        map[string]string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{1}
}

func (x *Summary) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Summary) GetMonitoredEntityId() uint64 {
	if x != nil {
		return x.MonitoredEntityId
	}
	return 0
}

func (x *Summary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Summary) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Summary) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Request to create a summary sample
type CreateSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitoredEntityId uint64            `protobuf:"varint,1,opt,name=monitored_entity_id,json=monitoredEntityId,proto3" json:"monitored_entity_id,omitempty"`
	Name              string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TypeName          string            `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Attributes        map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateSummaryRequest) Reset() {
	*x = CreateSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSummaryRequest) ProtoMessage() {}

func (x *CreateSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSummaryRequest.ProtoReflect.Descriptor instead.
func (*CreateSummaryRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSummaryRequest) GetMonitoredEntityId() uint64 {
	if x != nil {
		return x.MonitoredEntityId
	}
	return 0
}

func (x *CreateSummaryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSummaryRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CreateSummaryRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Request to fetch multiple summaries
type FindSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindMonitoredEntities *FindMonitoredEntityRequest `protobuf:"bytes,5,opt,name=find_monitored_entities,json=findMonitoredEntities,proto3" json:"find_monitored_entities,omitempty"`
	Ids                   []uint64                    `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Names                 []string                    `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	TypeNames             []string                    `protobuf:"bytes,3,rep,name=type_names,json=typeNames,proto3" json:"type_names,omitempty"`
	MonitoredEntityIds    []uint64                    `protobuf:"varint,4,rep,packed,name=monitored_entity_ids,json=monitoredEntityIds,proto3" json:"monitored_entity_ids,omitempty"`
	// Pagination
	PageNumber int32 `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32 `protobuf:"varint,7,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (x *FindSummaryRequest) Reset() {
	*x = FindSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSummaryRequest) ProtoMessage() {}

func (x *FindSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSummaryRequest.ProtoReflect.Descriptor instead.
func (*FindSummaryRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{3}
}

func (x *FindSummaryRequest) GetFindMonitoredEntities() *FindMonitoredEntityRequest {
	if x != nil {
		return x.FindMonitoredEntities
	}
	return nil
}

func (x *FindSummaryRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FindSummaryRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FindSummaryRequest) GetTypeNames() []string {
	if x != nil {
		return x.TypeNames
	}
	return nil
}

func (x *FindSummaryRequest) GetMonitoredEntityIds() []uint64 {
	if x != nil {
		return x.MonitoredEntityIds
	}
	return nil
}

func (x *FindSummaryRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindSummaryRequest) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

// Request to delete summaries. It deletes all the associated samples
type DeleteSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSummaryRequest) Reset() {
	*x = DeleteSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSummaryRequest) ProtoMessage() {}

func (x *DeleteSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSummaryRequest.ProtoReflect.Descriptor instead.
func (*DeleteSummaryRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSummaryRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Summary value is a single data point for a summary corresponding to a specific time and a given set of labels.
type SummaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SummaryId uint64            `protobuf:"varint,2,opt,name=summary_id,json=summaryId,proto3" json:"summary_id,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type      SummaryValue_Type `protobuf:"varint,4,opt,name=type,proto3,enum=ai.verta.monitoring.SummaryValue_Type" json:"type,omitempty"`
	// Types that are assignable to Value:
	//	*SummaryValue_StringValue
	//	*SummaryValue_DoubleValue
	//	*SummaryValue_BooleanValue
	Value           isSummaryValue_Value `protobuf_oneof:"value"`
	CreatedAtMillis uint64               `protobuf:"varint,8,opt,name=created_at_millis,json=createdAtMillis,proto3" json:"created_at_millis,omitempty"`
	TimestampMillis uint64               `protobuf:"varint,9,opt,name=timestamp_millis,json=timestampMillis,proto3" json:"timestamp_millis,omitempty"`
}

func (x *SummaryValue) Reset() {
	*x = SummaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryValue) ProtoMessage() {}

func (x *SummaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryValue.ProtoReflect.Descriptor instead.
func (*SummaryValue) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{5}
}

func (x *SummaryValue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SummaryValue) GetSummaryId() uint64 {
	if x != nil {
		return x.SummaryId
	}
	return 0
}

func (x *SummaryValue) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SummaryValue) GetType() SummaryValue_Type {
	if x != nil {
		return x.Type
	}
	return SummaryValue_STRING
}

func (m *SummaryValue) GetValue() isSummaryValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SummaryValue) GetStringValue() string {
	if x, ok := x.GetValue().(*SummaryValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *SummaryValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*SummaryValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *SummaryValue) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*SummaryValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *SummaryValue) GetCreatedAtMillis() uint64 {
	if x != nil {
		return x.CreatedAtMillis
	}
	return 0
}

func (x *SummaryValue) GetTimestampMillis() uint64 {
	if x != nil {
		return x.TimestampMillis
	}
	return 0
}

type isSummaryValue_Value interface {
	isSummaryValue_Value()
}

type SummaryValue_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type SummaryValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type SummaryValue_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,7,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

func (*SummaryValue_StringValue) isSummaryValue_Value() {}

func (*SummaryValue_DoubleValue) isSummaryValue_Value() {}

func (*SummaryValue_BooleanValue) isSummaryValue_Value() {}

// Request to create a summary value
type CreateSummaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary info if detailed (e.g. want to avoid the extra hop to fetch the id and do the creation dance)
	MonitoredEntityId uint64 `protobuf:"varint,1,opt,name=monitored_entity_id,json=monitoredEntityId,proto3" json:"monitored_entity_id,omitempty"`
	SummaryName       string `protobuf:"bytes,2,opt,name=summary_name,json=summaryName,proto3" json:"summary_name,omitempty"`
	SummaryTypeName   string `protobuf:"bytes,3,opt,name=summary_type_name,json=summaryTypeName,proto3" json:"summary_type_name,omitempty"`
	// or just the summary id
	SummaryId uint64 `protobuf:"varint,4,opt,name=summary_id,json=summaryId,proto3" json:"summary_id,omitempty"`
	// Sample info
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Any label starting with "verta_" should be blocked for internal use
	Type   SummaryValue_Type `protobuf:"varint,6,opt,name=type,proto3,enum=ai.verta.monitoring.SummaryValue_Type" json:"type,omitempty"`
	// Types that are assignable to Value:
	//	*CreateSummaryValue_StringValue
	//	*CreateSummaryValue_DoubleValue
	//	*CreateSummaryValue_BooleanValue
	Value           isCreateSummaryValue_Value `protobuf_oneof:"value"`
	CreatedAtMillis uint64                     `protobuf:"varint,10,opt,name=created_at_millis,json=createdAtMillis,proto3" json:"created_at_millis,omitempty"`
	TimestampMillis uint64                     `protobuf:"varint,11,opt,name=timestamp_millis,json=timestampMillis,proto3" json:"timestamp_millis,omitempty"`
}

func (x *CreateSummaryValue) Reset() {
	*x = CreateSummaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSummaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSummaryValue) ProtoMessage() {}

func (x *CreateSummaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSummaryValue.ProtoReflect.Descriptor instead.
func (*CreateSummaryValue) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSummaryValue) GetMonitoredEntityId() uint64 {
	if x != nil {
		return x.MonitoredEntityId
	}
	return 0
}

func (x *CreateSummaryValue) GetSummaryName() string {
	if x != nil {
		return x.SummaryName
	}
	return ""
}

func (x *CreateSummaryValue) GetSummaryTypeName() string {
	if x != nil {
		return x.SummaryTypeName
	}
	return ""
}

func (x *CreateSummaryValue) GetSummaryId() uint64 {
	if x != nil {
		return x.SummaryId
	}
	return 0
}

func (x *CreateSummaryValue) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateSummaryValue) GetType() SummaryValue_Type {
	if x != nil {
		return x.Type
	}
	return SummaryValue_STRING
}

func (m *CreateSummaryValue) GetValue() isCreateSummaryValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CreateSummaryValue) GetStringValue() string {
	if x, ok := x.GetValue().(*CreateSummaryValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *CreateSummaryValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*CreateSummaryValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *CreateSummaryValue) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*CreateSummaryValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *CreateSummaryValue) GetCreatedAtMillis() uint64 {
	if x != nil {
		return x.CreatedAtMillis
	}
	return 0
}

func (x *CreateSummaryValue) GetTimestampMillis() uint64 {
	if x != nil {
		return x.TimestampMillis
	}
	return 0
}

type isCreateSummaryValue_Value interface {
	isCreateSummaryValue_Value()
}

type CreateSummaryValue_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type CreateSummaryValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,8,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type CreateSummaryValue_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,9,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

func (*CreateSummaryValue_StringValue) isCreateSummaryValue_Value() {}

func (*CreateSummaryValue_DoubleValue) isCreateSummaryValue_Value() {}

func (*CreateSummaryValue_BooleanValue) isCreateSummaryValue_Value() {}

// Summary sample is one instance of a summary corresponding to a given time range and a given set of labels.
type SummarySample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SummaryId               uint64            `protobuf:"varint,2,opt,name=summary_id,json=summaryId,proto3" json:"summary_id,omitempty"`
	Labels                  map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content                 string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	CreatedAtMillis         uint64            `protobuf:"varint,6,opt,name=created_at_millis,json=createdAtMillis,proto3" json:"created_at_millis,omitempty"`
	TimeWindowStartAtMillis uint64            `protobuf:"varint,7,opt,name=time_window_start_at_millis,json=timeWindowStartAtMillis,proto3" json:"time_window_start_at_millis,omitempty"`
	TimeWindowEndAtMillis   uint64            `protobuf:"varint,8,opt,name=time_window_end_at_millis,json=timeWindowEndAtMillis,proto3" json:"time_window_end_at_millis,omitempty"`
}

func (x *SummarySample) Reset() {
	*x = SummarySample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarySample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarySample) ProtoMessage() {}

func (x *SummarySample) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarySample.ProtoReflect.Descriptor instead.
func (*SummarySample) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{7}
}

func (x *SummarySample) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SummarySample) GetSummaryId() uint64 {
	if x != nil {
		return x.SummaryId
	}
	return 0
}

func (x *SummarySample) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SummarySample) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SummarySample) GetCreatedAtMillis() uint64 {
	if x != nil {
		return x.CreatedAtMillis
	}
	return 0
}

func (x *SummarySample) GetTimeWindowStartAtMillis() uint64 {
	if x != nil {
		return x.TimeWindowStartAtMillis
	}
	return 0
}

func (x *SummarySample) GetTimeWindowEndAtMillis() uint64 {
	if x != nil {
		return x.TimeWindowEndAtMillis
	}
	return 0
}

// Request to create a summary sample
type CreateSummarySample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary info if detailed (e.g. want to avoid the extra hop to fetch the id and do the creation dance)
	MonitoredEntityId uint64 `protobuf:"varint,1,opt,name=monitored_entity_id,json=monitoredEntityId,proto3" json:"monitored_entity_id,omitempty"`
	SummaryName       string `protobuf:"bytes,2,opt,name=summary_name,json=summaryName,proto3" json:"summary_name,omitempty"`
	SummaryTypeName   string `protobuf:"bytes,3,opt,name=summary_type_name,json=summaryTypeName,proto3" json:"summary_type_name,omitempty"`
	// or just the summary id
	SummaryId uint64 `protobuf:"varint,4,opt,name=summary_id,json=summaryId,proto3" json:"summary_id,omitempty"`
	// Sample info
	Labels                  map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Any label starting with "verta_" should be blocked for internal use
	Content                 string            `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	CreatedAtMillis         uint64            `protobuf:"varint,7,opt,name=created_at_millis,json=createdAtMillis,proto3" json:"created_at_millis,omitempty"`
	TimeWindowStartAtMillis uint64            `protobuf:"varint,8,opt,name=time_window_start_at_millis,json=timeWindowStartAtMillis,proto3" json:"time_window_start_at_millis,omitempty"`
	TimeWindowEndAtMillis   uint64            `protobuf:"varint,9,opt,name=time_window_end_at_millis,json=timeWindowEndAtMillis,proto3" json:"time_window_end_at_millis,omitempty"`
}

func (x *CreateSummarySample) Reset() {
	*x = CreateSummarySample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSummarySample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSummarySample) ProtoMessage() {}

func (x *CreateSummarySample) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSummarySample.ProtoReflect.Descriptor instead.
func (*CreateSummarySample) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSummarySample) GetMonitoredEntityId() uint64 {
	if x != nil {
		return x.MonitoredEntityId
	}
	return 0
}

func (x *CreateSummarySample) GetSummaryName() string {
	if x != nil {
		return x.SummaryName
	}
	return ""
}

func (x *CreateSummarySample) GetSummaryTypeName() string {
	if x != nil {
		return x.SummaryTypeName
	}
	return ""
}

func (x *CreateSummarySample) GetSummaryId() uint64 {
	if x != nil {
		return x.SummaryId
	}
	return 0
}

func (x *CreateSummarySample) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateSummarySample) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateSummarySample) GetCreatedAtMillis() uint64 {
	if x != nil {
		return x.CreatedAtMillis
	}
	return 0
}

func (x *CreateSummarySample) GetTimeWindowStartAtMillis() uint64 {
	if x != nil {
		return x.TimeWindowStartAtMillis
	}
	return 0
}

func (x *CreateSummarySample) GetTimeWindowEndAtMillis() uint64 {
	if x != nil {
		return x.TimeWindowEndAtMillis
	}
	return 0
}

// Request to create a batch of summary samples
type CreateSummarySampleBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples []*SummarySample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *CreateSummarySampleBatch) Reset() {
	*x = CreateSummarySampleBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSummarySampleBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSummarySampleBatch) ProtoMessage() {}

func (x *CreateSummarySampleBatch) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSummarySampleBatch.ProtoReflect.Descriptor instead.
func (*CreateSummarySampleBatch) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{9}
}

func (x *CreateSummarySampleBatch) GetSamples() []*SummarySample {
	if x != nil {
		return x.Samples
	}
	return nil
}

// Request to fetch multiple summary samples, potentially with aggregation.
type FindSummarySampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter      *FilterQuerySummarySample `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`           // Optional
	Aggregation *AggregationQuerySummary  `protobuf:"bytes,2,opt,name=aggregation,proto3" json:"aggregation,omitempty"` // Optional
	// Pagination
	PageNumber int32 `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32 `protobuf:"varint,4,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (x *FindSummarySampleRequest) Reset() {
	*x = FindSummarySampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSummarySampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSummarySampleRequest) ProtoMessage() {}

func (x *FindSummarySampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSummarySampleRequest.ProtoReflect.Descriptor instead.
func (*FindSummarySampleRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{10}
}

func (x *FindSummarySampleRequest) GetFilter() *FilterQuerySummarySample {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FindSummarySampleRequest) GetAggregation() *AggregationQuerySummary {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *FindSummarySampleRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindSummarySampleRequest) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

// Filters the caller wants to apply to selectively summary samples.
type FilterQuerySummarySample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindSummaries           *FindSummaryRequest                       `protobuf:"bytes,1,opt,name=find_summaries,json=findSummaries,proto3" json:"find_summaries,omitempty"`
	SampleIds               []uint64                                  `protobuf:"varint,2,rep,packed,name=sample_ids,json=sampleIds,proto3" json:"sample_ids,omitempty"`
	Labels                  map[string]*LabelFilterQuerySummarySample `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeWindowStartAtMillis uint64                                    `protobuf:"varint,4,opt,name=time_window_start_at_millis,json=timeWindowStartAtMillis,proto3" json:"time_window_start_at_millis,omitempty"`
	TimeWindowEndAtMillis   uint64                                    `protobuf:"varint,5,opt,name=time_window_end_at_millis,json=timeWindowEndAtMillis,proto3" json:"time_window_end_at_millis,omitempty"`
	CreatedAtAfterMillis    uint64                                    `protobuf:"varint,6,opt,name=created_at_after_millis,json=createdAtAfterMillis,proto3" json:"created_at_after_millis,omitempty"`
}

func (x *FilterQuerySummarySample) Reset() {
	*x = FilterQuerySummarySample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterQuerySummarySample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterQuerySummarySample) ProtoMessage() {}

func (x *FilterQuerySummarySample) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterQuerySummarySample.ProtoReflect.Descriptor instead.
func (*FilterQuerySummarySample) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{11}
}

func (x *FilterQuerySummarySample) GetFindSummaries() *FindSummaryRequest {
	if x != nil {
		return x.FindSummaries
	}
	return nil
}

func (x *FilterQuerySummarySample) GetSampleIds() []uint64 {
	if x != nil {
		return x.SampleIds
	}
	return nil
}

func (x *FilterQuerySummarySample) GetLabels() map[string]*LabelFilterQuerySummarySample {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FilterQuerySummarySample) GetTimeWindowStartAtMillis() uint64 {
	if x != nil {
		return x.TimeWindowStartAtMillis
	}
	return 0
}

func (x *FilterQuerySummarySample) GetTimeWindowEndAtMillis() uint64 {
	if x != nil {
		return x.TimeWindowEndAtMillis
	}
	return 0
}

func (x *FilterQuerySummarySample) GetCreatedAtAfterMillis() uint64 {
	if x != nil {
		return x.CreatedAtAfterMillis
	}
	return 0
}

// Filter details for a given label.
type LabelFilterQuerySummarySample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelValue []string `protobuf:"bytes,1,rep,name=label_value,json=labelValue,proto3" json:"label_value,omitempty"`
}

func (x *LabelFilterQuerySummarySample) Reset() {
	*x = LabelFilterQuerySummarySample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelFilterQuerySummarySample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelFilterQuerySummarySample) ProtoMessage() {}

func (x *LabelFilterQuerySummarySample) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelFilterQuerySummarySample.ProtoReflect.Descriptor instead.
func (*LabelFilterQuerySummarySample) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{12}
}

func (x *LabelFilterQuerySummarySample) GetLabelValue() []string {
	if x != nil {
		return x.LabelValue
	}
	return nil
}

// If any of the fields are not provided, we assume that the original value from the sample is kept.
// For example, if time_granularity_millis=0, then time for the "aggregated sample" must match the
// time of all the original samples associated with it.
// By default the aggregation will include any logged values for the time window.  This
// behavior can be disable to exclude the observations.
type AggregationQuerySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional time granularity for aggregation
	// This applies to time_window_start_at_millis and time_window_end_at_millis
	// The time window precision is reduced to this granularity
	// For example, if time_granularity_millis = "1 day", we will group samples that fall in the same
	// day and aggregate them to create a single "aggregated sample"
	TimeGranularityMillis uint64                                       `protobuf:"varint,1,opt,name=time_granularity_millis,json=timeGranularityMillis,proto3" json:"time_granularity_millis,omitempty"`
	Operation             AggregationQuerySummary_AggregationOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=ai.verta.monitoring.AggregationQuerySummary_AggregationOperation" json:"operation,omitempty"`
	ExcludeValues         bool                                         `protobuf:"varint,3,opt,name=exclude_values,json=excludeValues,proto3" json:"exclude_values,omitempty"` // default false.  Set to true to explicitly exclude logged values from aggregation.
}

func (x *AggregationQuerySummary) Reset() {
	*x = AggregationQuerySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationQuerySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationQuerySummary) ProtoMessage() {}

func (x *AggregationQuerySummary) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationQuerySummary.ProtoReflect.Descriptor instead.
func (*AggregationQuerySummary) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{13}
}

func (x *AggregationQuerySummary) GetTimeGranularityMillis() uint64 {
	if x != nil {
		return x.TimeGranularityMillis
	}
	return 0
}

func (x *AggregationQuerySummary) GetOperation() AggregationQuerySummary_AggregationOperation {
	if x != nil {
		return x.Operation
	}
	return AggregationQuerySummary_SUM
}

func (x *AggregationQuerySummary) GetExcludeValues() bool {
	if x != nil {
		return x.ExcludeValues
	}
	return false
}

// Request to delete summary samples
type DeleteSummarySampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSummarySampleRequest) Reset() {
	*x = DeleteSummarySampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSummarySampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSummarySampleRequest) ProtoMessage() {}

func (x *DeleteSummarySampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSummarySampleRequest.ProtoReflect.Descriptor instead.
func (*DeleteSummarySampleRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteSummarySampleRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type FindSummaryRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summaries    []*Summary `protobuf:"bytes,1,rep,name=summaries,proto3" json:"summaries,omitempty"`
	TotalRecords int32      `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindSummaryRequest_Response) Reset() {
	*x = FindSummaryRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSummaryRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSummaryRequest_Response) ProtoMessage() {}

func (x *FindSummaryRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSummaryRequest_Response.ProtoReflect.Descriptor instead.
func (*FindSummaryRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FindSummaryRequest_Response) GetSummaries() []*Summary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

func (x *FindSummaryRequest_Response) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type FindSummarySampleRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples      []*SummarySample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
	TotalRecords int32            `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindSummarySampleRequest_Response) Reset() {
	*x = FindSummarySampleRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_Summary_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSummarySampleRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSummarySampleRequest_Response) ProtoMessage() {}

func (x *FindSummarySampleRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_Summary_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSummarySampleRequest_Response.ProtoReflect.Descriptor instead.
func (*FindSummarySampleRequest_Response) Descriptor() ([]byte, []int) {
	return file_monitoring_Summary_proto_rawDescGZIP(), []int{10, 0}
}

func (x *FindSummarySampleRequest_Response) GetSamples() []*SummarySample {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *FindSummarySampleRequest_Response) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

var File_monitoring_Summary_proto protoreflect.FileDescriptor

var file_monitoring_Summary_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x87, 0x02, 0x0a,
	0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x59, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x03, 0x0a, 0x12, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x67, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x1a, 0x6b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x28, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xf9, 0x03, 0x0a, 0x0c, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x04, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xff, 0x02, 0x0a, 0x0d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12,
	0x3c, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x38, 0x0a,
	0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfa, 0x03, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x3c, 0x0a, 0x1b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x58, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x07, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x18, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x6d, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xfa, 0x03, 0x0a,
	0x18, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x66, 0x69, 0x6e,
	0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x69,
	0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x6d, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x1d, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x17,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12,
	0x5f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x22, 0x2e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x32, 0xce, 0x09, 0x0a, 0x0e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x66,
	0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x92,
	0x01, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa7, 0x01, 0x0a, 0x0a,
	0x66, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x2a, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x45, 0x50, 0x01, 0x5a, 0x41, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41,
	0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_monitoring_Summary_proto_rawDescOnce sync.Once
	file_monitoring_Summary_proto_rawDescData = file_monitoring_Summary_proto_rawDesc
)

func file_monitoring_Summary_proto_rawDescGZIP() []byte {
	file_monitoring_Summary_proto_rawDescOnce.Do(func() {
		file_monitoring_Summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitoring_Summary_proto_rawDescData)
	})
	return file_monitoring_Summary_proto_rawDescData
}

var file_monitoring_Summary_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_monitoring_Summary_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_monitoring_Summary_proto_goTypes = []interface{}{
	(SummaryValue_Type)(0),                            // 0: ai.verta.monitoring.SummaryValue.Type
	(AggregationQuerySummary_AggregationOperation)(0), // 1: ai.verta.monitoring.AggregationQuerySummary.AggregationOperation
	(*Empty)(nil),                         // 2: ai.verta.monitoring.Empty
	(*Summary)(nil),                       // 3: ai.verta.monitoring.Summary
	(*CreateSummaryRequest)(nil),          // 4: ai.verta.monitoring.CreateSummaryRequest
	(*FindSummaryRequest)(nil),            // 5: ai.verta.monitoring.FindSummaryRequest
	(*DeleteSummaryRequest)(nil),          // 6: ai.verta.monitoring.DeleteSummaryRequest
	(*SummaryValue)(nil),                  // 7: ai.verta.monitoring.SummaryValue
	(*CreateSummaryValue)(nil),            // 8: ai.verta.monitoring.CreateSummaryValue
	(*SummarySample)(nil),                 // 9: ai.verta.monitoring.SummarySample
	(*CreateSummarySample)(nil),           // 10: ai.verta.monitoring.CreateSummarySample
	(*CreateSummarySampleBatch)(nil),      // 11: ai.verta.monitoring.CreateSummarySampleBatch
	(*FindSummarySampleRequest)(nil),      // 12: ai.verta.monitoring.FindSummarySampleRequest
	(*FilterQuerySummarySample)(nil),      // 13: ai.verta.monitoring.FilterQuerySummarySample
	(*LabelFilterQuerySummarySample)(nil), // 14: ai.verta.monitoring.LabelFilterQuerySummarySample
	(*AggregationQuerySummary)(nil),       // 15: ai.verta.monitoring.AggregationQuerySummary
	(*DeleteSummarySampleRequest)(nil),    // 16: ai.verta.monitoring.DeleteSummarySampleRequest
	nil,                                   // 17: ai.verta.monitoring.Summary.AttributesEntry
	nil,                                   // 18: ai.verta.monitoring.CreateSummaryRequest.AttributesEntry
	(*FindSummaryRequest_Response)(nil),   // 19: ai.verta.monitoring.FindSummaryRequest.Response
	nil,                                   // 20: ai.verta.monitoring.SummaryValue.LabelsEntry
	nil,                                   // 21: ai.verta.monitoring.CreateSummaryValue.LabelsEntry
	nil,                                   // 22: ai.verta.monitoring.SummarySample.LabelsEntry
	nil,                                   // 23: ai.verta.monitoring.CreateSummarySample.LabelsEntry
	(*FindSummarySampleRequest_Response)(nil), // 24: ai.verta.monitoring.FindSummarySampleRequest.Response
	nil,                                // 25: ai.verta.monitoring.FilterQuerySummarySample.LabelsEntry
	(*FindMonitoredEntityRequest)(nil), // 26: ai.verta.monitoring.FindMonitoredEntityRequest
}
var file_monitoring_Summary_proto_depIdxs = []int32{
	17, // 0: ai.verta.monitoring.Summary.attributes:type_name -> ai.verta.monitoring.Summary.AttributesEntry
	18, // 1: ai.verta.monitoring.CreateSummaryRequest.attributes:type_name -> ai.verta.monitoring.CreateSummaryRequest.AttributesEntry
	26, // 2: ai.verta.monitoring.FindSummaryRequest.find_monitored_entities:type_name -> ai.verta.monitoring.FindMonitoredEntityRequest
	20, // 3: ai.verta.monitoring.SummaryValue.labels:type_name -> ai.verta.monitoring.SummaryValue.LabelsEntry
	0,  // 4: ai.verta.monitoring.SummaryValue.type:type_name -> ai.verta.monitoring.SummaryValue.Type
	21, // 5: ai.verta.monitoring.CreateSummaryValue.labels:type_name -> ai.verta.monitoring.CreateSummaryValue.LabelsEntry
	0,  // 6: ai.verta.monitoring.CreateSummaryValue.type:type_name -> ai.verta.monitoring.SummaryValue.Type
	22, // 7: ai.verta.monitoring.SummarySample.labels:type_name -> ai.verta.monitoring.SummarySample.LabelsEntry
	23, // 8: ai.verta.monitoring.CreateSummarySample.labels:type_name -> ai.verta.monitoring.CreateSummarySample.LabelsEntry
	9,  // 9: ai.verta.monitoring.CreateSummarySampleBatch.samples:type_name -> ai.verta.monitoring.SummarySample
	13, // 10: ai.verta.monitoring.FindSummarySampleRequest.filter:type_name -> ai.verta.monitoring.FilterQuerySummarySample
	15, // 11: ai.verta.monitoring.FindSummarySampleRequest.aggregation:type_name -> ai.verta.monitoring.AggregationQuerySummary
	5,  // 12: ai.verta.monitoring.FilterQuerySummarySample.find_summaries:type_name -> ai.verta.monitoring.FindSummaryRequest
	25, // 13: ai.verta.monitoring.FilterQuerySummarySample.labels:type_name -> ai.verta.monitoring.FilterQuerySummarySample.LabelsEntry
	1,  // 14: ai.verta.monitoring.AggregationQuerySummary.operation:type_name -> ai.verta.monitoring.AggregationQuerySummary.AggregationOperation
	3,  // 15: ai.verta.monitoring.FindSummaryRequest.Response.summaries:type_name -> ai.verta.monitoring.Summary
	9,  // 16: ai.verta.monitoring.FindSummarySampleRequest.Response.samples:type_name -> ai.verta.monitoring.SummarySample
	14, // 17: ai.verta.monitoring.FilterQuerySummarySample.LabelsEntry.value:type_name -> ai.verta.monitoring.LabelFilterQuerySummarySample
	4,  // 18: ai.verta.monitoring.SummaryService.createSummary:input_type -> ai.verta.monitoring.CreateSummaryRequest
	5,  // 19: ai.verta.monitoring.SummaryService.findSummary:input_type -> ai.verta.monitoring.FindSummaryRequest
	6,  // 20: ai.verta.monitoring.SummaryService.deleteSummary:input_type -> ai.verta.monitoring.DeleteSummaryRequest
	8,  // 21: ai.verta.monitoring.SummaryService.createValue:input_type -> ai.verta.monitoring.CreateSummaryValue
	10, // 22: ai.verta.monitoring.SummaryService.createSample:input_type -> ai.verta.monitoring.CreateSummarySample
	11, // 23: ai.verta.monitoring.SummaryService.createSampleBatch:input_type -> ai.verta.monitoring.CreateSummarySampleBatch
	12, // 24: ai.verta.monitoring.SummaryService.findSample:input_type -> ai.verta.monitoring.FindSummarySampleRequest
	16, // 25: ai.verta.monitoring.SummaryService.deleteSample:input_type -> ai.verta.monitoring.DeleteSummarySampleRequest
	3,  // 26: ai.verta.monitoring.SummaryService.createSummary:output_type -> ai.verta.monitoring.Summary
	19, // 27: ai.verta.monitoring.SummaryService.findSummary:output_type -> ai.verta.monitoring.FindSummaryRequest.Response
	2,  // 28: ai.verta.monitoring.SummaryService.deleteSummary:output_type -> ai.verta.monitoring.Empty
	7,  // 29: ai.verta.monitoring.SummaryService.createValue:output_type -> ai.verta.monitoring.SummaryValue
	9,  // 30: ai.verta.monitoring.SummaryService.createSample:output_type -> ai.verta.monitoring.SummarySample
	2,  // 31: ai.verta.monitoring.SummaryService.createSampleBatch:output_type -> ai.verta.monitoring.Empty
	24, // 32: ai.verta.monitoring.SummaryService.findSample:output_type -> ai.verta.monitoring.FindSummarySampleRequest.Response
	2,  // 33: ai.verta.monitoring.SummaryService.deleteSample:output_type -> ai.verta.monitoring.Empty
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_monitoring_Summary_proto_init() }
func file_monitoring_Summary_proto_init() {
	if File_monitoring_Summary_proto != nil {
		return
	}
	file_monitoring_DataMonitoringService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_monitoring_Summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSummaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummarySample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSummarySample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSummarySampleBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSummarySampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterQuerySummarySample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelFilterQuerySummarySample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationQuerySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSummarySampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSummaryRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_Summary_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSummarySampleRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_monitoring_Summary_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SummaryValue_StringValue)(nil),
		(*SummaryValue_DoubleValue)(nil),
		(*SummaryValue_BooleanValue)(nil),
	}
	file_monitoring_Summary_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CreateSummaryValue_StringValue)(nil),
		(*CreateSummaryValue_DoubleValue)(nil),
		(*CreateSummaryValue_BooleanValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitoring_Summary_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monitoring_Summary_proto_goTypes,
		DependencyIndexes: file_monitoring_Summary_proto_depIdxs,
		EnumInfos:         file_monitoring_Summary_proto_enumTypes,
		MessageInfos:      file_monitoring_Summary_proto_msgTypes,
	}.Build()
	File_monitoring_Summary_proto = out.File
	file_monitoring_Summary_proto_rawDesc = nil
	file_monitoring_Summary_proto_goTypes = nil
	file_monitoring_Summary_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SummaryServiceClient interface {
	CreateSummary(ctx context.Context, in *CreateSummaryRequest, opts ...grpc.CallOption) (*Summary, error)
	FindSummary(ctx context.Context, in *FindSummaryRequest, opts ...grpc.CallOption) (*FindSummaryRequest_Response, error)
	DeleteSummary(ctx context.Context, in *DeleteSummaryRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateValue(ctx context.Context, in *CreateSummaryValue, opts ...grpc.CallOption) (*SummaryValue, error)
	CreateSample(ctx context.Context, in *CreateSummarySample, opts ...grpc.CallOption) (*SummarySample, error)
	CreateSampleBatch(ctx context.Context, in *CreateSummarySampleBatch, opts ...grpc.CallOption) (*Empty, error)
	FindSample(ctx context.Context, in *FindSummarySampleRequest, opts ...grpc.CallOption) (*FindSummarySampleRequest_Response, error)
	DeleteSample(ctx context.Context, in *DeleteSummarySampleRequest, opts ...grpc.CallOption) (*Empty, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) CreateSummary(ctx context.Context, in *CreateSummaryRequest, opts ...grpc.CallOption) (*Summary, error) {
	out := new(Summary)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/createSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) FindSummary(ctx context.Context, in *FindSummaryRequest, opts ...grpc.CallOption) (*FindSummaryRequest_Response, error) {
	out := new(FindSummaryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/findSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) DeleteSummary(ctx context.Context, in *DeleteSummaryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/deleteSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) CreateValue(ctx context.Context, in *CreateSummaryValue, opts ...grpc.CallOption) (*SummaryValue, error) {
	out := new(SummaryValue)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/createValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) CreateSample(ctx context.Context, in *CreateSummarySample, opts ...grpc.CallOption) (*SummarySample, error) {
	out := new(SummarySample)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/createSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) CreateSampleBatch(ctx context.Context, in *CreateSummarySampleBatch, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/createSampleBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) FindSample(ctx context.Context, in *FindSummarySampleRequest, opts ...grpc.CallOption) (*FindSummarySampleRequest_Response, error) {
	out := new(FindSummarySampleRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/findSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) DeleteSample(ctx context.Context, in *DeleteSummarySampleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.monitoring.SummaryService/deleteSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
type SummaryServiceServer interface {
	CreateSummary(context.Context, *CreateSummaryRequest) (*Summary, error)
	FindSummary(context.Context, *FindSummaryRequest) (*FindSummaryRequest_Response, error)
	DeleteSummary(context.Context, *DeleteSummaryRequest) (*Empty, error)
	CreateValue(context.Context, *CreateSummaryValue) (*SummaryValue, error)
	CreateSample(context.Context, *CreateSummarySample) (*SummarySample, error)
	CreateSampleBatch(context.Context, *CreateSummarySampleBatch) (*Empty, error)
	FindSample(context.Context, *FindSummarySampleRequest) (*FindSummarySampleRequest_Response, error)
	DeleteSample(context.Context, *DeleteSummarySampleRequest) (*Empty, error)
}

// UnimplementedSummaryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (*UnimplementedSummaryServiceServer) CreateSummary(context.Context, *CreateSummaryRequest) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummary not implemented")
}
func (*UnimplementedSummaryServiceServer) FindSummary(context.Context, *FindSummaryRequest) (*FindSummaryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSummary not implemented")
}
func (*UnimplementedSummaryServiceServer) DeleteSummary(context.Context, *DeleteSummaryRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummary not implemented")
}
func (*UnimplementedSummaryServiceServer) CreateValue(context.Context, *CreateSummaryValue) (*SummaryValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValue not implemented")
}
func (*UnimplementedSummaryServiceServer) CreateSample(context.Context, *CreateSummarySample) (*SummarySample, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSample not implemented")
}
func (*UnimplementedSummaryServiceServer) CreateSampleBatch(context.Context, *CreateSummarySampleBatch) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSampleBatch not implemented")
}
func (*UnimplementedSummaryServiceServer) FindSample(context.Context, *FindSummarySampleRequest) (*FindSummarySampleRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSample not implemented")
}
func (*UnimplementedSummaryServiceServer) DeleteSample(context.Context, *DeleteSummarySampleRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSample not implemented")
}

func RegisterSummaryServiceServer(s *grpc.Server, srv SummaryServiceServer) {
	s.RegisterService(&_SummaryService_serviceDesc, srv)
}

func _SummaryService_CreateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/CreateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateSummary(ctx, req.(*CreateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_FindSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).FindSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/FindSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).FindSummary(ctx, req.(*FindSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_DeleteSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/DeleteSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, req.(*DeleteSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_CreateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummaryValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/CreateValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateValue(ctx, req.(*CreateSummaryValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_CreateSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummarySample)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/CreateSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateSample(ctx, req.(*CreateSummarySample))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_CreateSampleBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummarySampleBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateSampleBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/CreateSampleBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateSampleBatch(ctx, req.(*CreateSummarySampleBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_FindSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSummarySampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).FindSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/FindSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).FindSample(ctx, req.(*FindSummarySampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_DeleteSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSummarySampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).DeleteSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.monitoring.SummaryService/DeleteSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).DeleteSample(ctx, req.(*DeleteSummarySampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SummaryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.monitoring.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSummary",
			Handler:    _SummaryService_CreateSummary_Handler,
		},
		{
			MethodName: "findSummary",
			Handler:    _SummaryService_FindSummary_Handler,
		},
		{
			MethodName: "deleteSummary",
			Handler:    _SummaryService_DeleteSummary_Handler,
		},
		{
			MethodName: "createValue",
			Handler:    _SummaryService_CreateValue_Handler,
		},
		{
			MethodName: "createSample",
			Handler:    _SummaryService_CreateSample_Handler,
		},
		{
			MethodName: "createSampleBatch",
			Handler:    _SummaryService_CreateSampleBatch_Handler,
		},
		{
			MethodName: "findSample",
			Handler:    _SummaryService_FindSample_Handler,
		},
		{
			MethodName: "deleteSample",
			Handler:    _SummaryService_DeleteSample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/Summary.proto",
}
