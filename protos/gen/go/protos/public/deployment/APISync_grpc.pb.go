// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: deployment/APISync.proto

package deployment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APISyncClient is the client API for APISync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APISyncClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (APISync_SyncClient, error)
}

type aPISyncClient struct {
	cc grpc.ClientConnInterface
}

func NewAPISyncClient(cc grpc.ClientConnInterface) APISyncClient {
	return &aPISyncClient{cc}
}

func (c *aPISyncClient) Sync(ctx context.Context, opts ...grpc.CallOption) (APISync_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &APISync_ServiceDesc.Streams[0], "/APISync/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISyncSyncClient{stream}
	return x, nil
}

type APISync_SyncClient interface {
	Send(*APISyncRequest) error
	Recv() (*APISyncResponse, error)
	grpc.ClientStream
}

type aPISyncSyncClient struct {
	grpc.ClientStream
}

func (x *aPISyncSyncClient) Send(m *APISyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPISyncSyncClient) Recv() (*APISyncResponse, error) {
	m := new(APISyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APISyncServer is the server API for APISync service.
// All implementations must embed UnimplementedAPISyncServer
// for forward compatibility
type APISyncServer interface {
	Sync(APISync_SyncServer) error
	mustEmbedUnimplementedAPISyncServer()
}

// UnimplementedAPISyncServer must be embedded to have forward compatible implementations.
type UnimplementedAPISyncServer struct {
}

func (UnimplementedAPISyncServer) Sync(APISync_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedAPISyncServer) mustEmbedUnimplementedAPISyncServer() {}

// UnsafeAPISyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APISyncServer will
// result in compilation errors.
type UnsafeAPISyncServer interface {
	mustEmbedUnimplementedAPISyncServer()
}

func RegisterAPISyncServer(s grpc.ServiceRegistrar, srv APISyncServer) {
	s.RegisterService(&APISync_ServiceDesc, srv)
}

func _APISync_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APISyncServer).Sync(&aPISyncSyncServer{stream})
}

type APISync_SyncServer interface {
	Send(*APISyncResponse) error
	Recv() (*APISyncRequest, error)
	grpc.ServerStream
}

type aPISyncSyncServer struct {
	grpc.ServerStream
}

func (x *aPISyncSyncServer) Send(m *APISyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPISyncSyncServer) Recv() (*APISyncRequest, error) {
	m := new(APISyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APISync_ServiceDesc is the grpc.ServiceDesc for APISync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APISync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "APISync",
	HandlerType: (*APISyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _APISync_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "deployment/APISync.proto",
}
