// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: registry/RegistryService.proto

package registry

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	modeldb "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb"
	versioning "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb/versioning"
	uac "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ModelVersionLockLevelEnum_ModelVersionLockLevel int32

const (
	ModelVersionLockLevelEnum_UNKNOWN ModelVersionLockLevelEnum_ModelVersionLockLevel = 0
	ModelVersionLockLevelEnum_OPEN    ModelVersionLockLevelEnum_ModelVersionLockLevel = 1
	ModelVersionLockLevelEnum_CLOSED  ModelVersionLockLevelEnum_ModelVersionLockLevel = 2
	ModelVersionLockLevelEnum_REDACT  ModelVersionLockLevelEnum_ModelVersionLockLevel = 3
)

// Enum value maps for ModelVersionLockLevelEnum_ModelVersionLockLevel.
var (
	ModelVersionLockLevelEnum_ModelVersionLockLevel_name = map[int32]string{
		0: "UNKNOWN",
		1: "OPEN",
		2: "CLOSED",
		3: "REDACT",
	}
	ModelVersionLockLevelEnum_ModelVersionLockLevel_value = map[string]int32{
		"UNKNOWN": 0,
		"OPEN":    1,
		"CLOSED":  2,
		"REDACT":  3,
	}
)

func (x ModelVersionLockLevelEnum_ModelVersionLockLevel) Enum() *ModelVersionLockLevelEnum_ModelVersionLockLevel {
	p := new(ModelVersionLockLevelEnum_ModelVersionLockLevel)
	*p = x
	return p
}

func (x ModelVersionLockLevelEnum_ModelVersionLockLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelVersionLockLevelEnum_ModelVersionLockLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_RegistryService_proto_enumTypes[0].Descriptor()
}

func (ModelVersionLockLevelEnum_ModelVersionLockLevel) Type() protoreflect.EnumType {
	return &file_registry_RegistryService_proto_enumTypes[0]
}

func (x ModelVersionLockLevelEnum_ModelVersionLockLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelVersionLockLevelEnum_ModelVersionLockLevel.Descriptor instead.
func (ModelVersionLockLevelEnum_ModelVersionLockLevel) EnumDescriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{8, 0}
}

type RegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique name for the model within the workspace.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Timestamp recorded when this ``registered_model`` was created.
	TimeCreated int64 `protobuf:"varint,3,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	// Timestamp recorded when metadata for this ``registered_model`` was last updated.
	TimeUpdated int64 `protobuf:"varint,4,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	// Description of this ``registered_model``.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Labels added to the registered models
	Labels []string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// Visibility of Registered Models
	Visibility common.VisibilityEnum_Visibility `protobuf:"varint,7,opt,name=visibility,proto3,enum=ai.verta.common.VisibilityEnum_Visibility" json:"visibility,omitempty"`
	// id of the workspace this belongs to
	//not storing workspace_type uac should support https://github.com/VertaAI/protos-all/pull/19/files
	WorkspaceId        string `protobuf:"bytes,8,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	WorkspaceServiceId uint64 `protobuf:"varint,12,opt,name=workspace_service_id,json=workspaceServiceId,proto3" json:"workspace_service_id,omitempty"`
	//readme
	ReadmeText string `protobuf:"bytes,9,opt,name=readme_text,json=readmeText,proto3" json:"readme_text,omitempty"`
	//owner's verta_id
	Owner string `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	// Other attributes
	Attributes []*common.KeyValue `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// The next field only makes sense when visibility == ORG_CUSTOM
	// They will be empty otherwise
	CustomPermission   *uac.CollaboratorPermissions `protobuf:"bytes,13,opt,name=custom_permission,json=customPermission,proto3" json:"custom_permission,omitempty"`
	ResourceVisibility uac.ResourceVisibility       `protobuf:"varint,14,opt,name=resource_visibility,json=resourceVisibility,proto3,enum=ai.verta.uac.ResourceVisibility" json:"resource_visibility,omitempty"`
}

func (x *RegisteredModel) Reset() {
	*x = RegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModel) ProtoMessage() {}

func (x *RegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModel.ProtoReflect.Descriptor instead.
func (*RegisteredModel) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{0}
}

func (x *RegisteredModel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RegisteredModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisteredModel) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *RegisteredModel) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

func (x *RegisteredModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegisteredModel) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RegisteredModel) GetVisibility() common.VisibilityEnum_Visibility {
	if x != nil {
		return x.Visibility
	}
	return common.VisibilityEnum_PRIVATE
}

func (x *RegisteredModel) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *RegisteredModel) GetWorkspaceServiceId() uint64 {
	if x != nil {
		return x.WorkspaceServiceId
	}
	return 0
}

func (x *RegisteredModel) GetReadmeText() string {
	if x != nil {
		return x.ReadmeText
	}
	return ""
}

func (x *RegisteredModel) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RegisteredModel) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *RegisteredModel) GetCustomPermission() *uac.CollaboratorPermissions {
	if x != nil {
		return x.CustomPermission
	}
	return nil
}

func (x *RegisteredModel) GetResourceVisibility() uac.ResourceVisibility {
	if x != nil {
		return x.ResourceVisibility
	}
	return uac.ResourceVisibility_UNKNOWN
}

//CRUD for Registred Models
type FindRegisteredModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//User or organization name
	WorkspaceName string `protobuf:"bytes,1,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	//Filtering supported on
	// 1. name
	// 2. labels
	// 3. description
	Predicates []*common.KeyValueQuery `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"`
	//If not present will default to page 1 page_size 10
	Pagination *common.Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Ascending  bool               `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string             `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *FindRegisteredModelRequest) Reset() {
	*x = FindRegisteredModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRegisteredModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRegisteredModelRequest) ProtoMessage() {}

func (x *FindRegisteredModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRegisteredModelRequest.ProtoReflect.Descriptor instead.
func (*FindRegisteredModelRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{1}
}

func (x *FindRegisteredModelRequest) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *FindRegisteredModelRequest) GetPredicates() []*common.KeyValueQuery {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *FindRegisteredModelRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *FindRegisteredModelRequest) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *FindRegisteredModelRequest) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type GetRegisteredModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *RegisteredModelIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRegisteredModelRequest) Reset() {
	*x = GetRegisteredModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredModelRequest) ProtoMessage() {}

func (x *GetRegisteredModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredModelRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredModelRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{2}
}

func (x *GetRegisteredModelRequest) GetId() *RegisteredModelIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetRegisteredModelCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetRegisteredModelCountRequest) Reset() {
	*x = GetRegisteredModelCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredModelCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredModelCountRequest) ProtoMessage() {}

func (x *GetRegisteredModelCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredModelCountRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredModelCountRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{3}
}

func (x *GetRegisteredModelCountRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type RegisteredModelNamedIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Model Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// WorkspaceName
	WorkspaceName string `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *RegisteredModelNamedIdentification) Reset() {
	*x = RegisteredModelNamedIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModelNamedIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModelNamedIdentification) ProtoMessage() {}

func (x *RegisteredModelNamedIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModelNamedIdentification.ProtoReflect.Descriptor instead.
func (*RegisteredModelNamedIdentification) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{4}
}

func (x *RegisteredModelNamedIdentification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisteredModelNamedIdentification) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

// changed from oneof because of that bug: https://github.com/grpc-ecosystem/grpc-gateway/issues/753
type RegisteredModelIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model refered to by workspace name , model nmae combination
	NamedId *RegisteredModelNamedIdentification `protobuf:"bytes,1,opt,name=named_id,json=namedId,proto3" json:"named_id,omitempty"`
	// Model refered to by id
	RegisteredModelId uint64 `protobuf:"varint,2,opt,name=registered_model_id,json=registeredModelId,proto3" json:"registered_model_id,omitempty"`
}

func (x *RegisteredModelIdentification) Reset() {
	*x = RegisteredModelIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModelIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModelIdentification) ProtoMessage() {}

func (x *RegisteredModelIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModelIdentification.ProtoReflect.Descriptor instead.
func (*RegisteredModelIdentification) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{5}
}

func (x *RegisteredModelIdentification) GetNamedId() *RegisteredModelNamedIdentification {
	if x != nil {
		return x.NamedId
	}
	return nil
}

func (x *RegisteredModelIdentification) GetRegisteredModelId() uint64 {
	if x != nil {
		return x.RegisteredModelId
	}
	return 0
}

type SetRegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *RegisteredModelIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegisteredModel *RegisteredModel               `protobuf:"bytes,2,opt,name=registered_model,json=registeredModel,proto3" json:"registered_model,omitempty"`
	UpdateMask      *field_mask.FieldMask          `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *SetRegisteredModel) Reset() {
	*x = SetRegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRegisteredModel) ProtoMessage() {}

func (x *SetRegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRegisteredModel.ProtoReflect.Descriptor instead.
func (*SetRegisteredModel) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{6}
}

func (x *SetRegisteredModel) GetId() *RegisteredModelIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetRegisteredModel) GetRegisteredModel() *RegisteredModel {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

func (x *SetRegisteredModel) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteRegisteredModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *RegisteredModelIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRegisteredModelRequest) Reset() {
	*x = DeleteRegisteredModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegisteredModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegisteredModelRequest) ProtoMessage() {}

func (x *DeleteRegisteredModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegisteredModelRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegisteredModelRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteRegisteredModelRequest) GetId() *RegisteredModelIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

type ModelVersionLockLevelEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModelVersionLockLevelEnum) Reset() {
	*x = ModelVersionLockLevelEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionLockLevelEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionLockLevelEnum) ProtoMessage() {}

func (x *ModelVersionLockLevelEnum) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionLockLevelEnum.ProtoReflect.Descriptor instead.
func (*ModelVersionLockLevelEnum) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{8}
}

type ModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// id of the model this belongs to
	RegisteredModelId uint64 `protobuf:"varint,2,opt,name=registered_model_id,json=registeredModelId,proto3" json:"registered_model_id,omitempty"`
	// Model's tag. Unique for a model nmae
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Timestamp recorded when metadata for this ``model_version`` was last updated.
	TimeUpdated int64 `protobuf:"varint,4,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	// Timestamp recorded when this ``model_version`` was created.
	TimeCreated int64 `protobuf:"varint,5,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	// Description of this ``model_version``.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// ModelDB run ID used when creating ``model_version``, if ``model_source`` was generated by an
	// experiment run stored in ModelDB tracking server.
	//
	// Types that are assignable to Source:
	//	*ModelVersion_ExperimentRunId
	Source isModelVersion_Source `protobuf_oneof:"source"`
	// Labels added to the registered models
	Labels []string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
	// Model
	Model *common.Artifact `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	//Requirement
	Environment *versioning.EnvironmentBlob `protobuf:"bytes,10,opt,name=environment,proto3" json:"environment,omitempty"`
	// Other artifacts
	Artifacts []*common.Artifact `protobuf:"bytes,11,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	//flag to archive a model version currently does nothing other than storing the information in DB
	Archived common.TernaryEnum_Ternary `protobuf:"varint,12,opt,name=archived,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"archived,omitempty"`
	//readme
	ReadmeText string `protobuf:"bytes,13,opt,name=readme_text,json=readmeText,proto3" json:"readme_text,omitempty"`
	//APIs
	Apis []string `protobuf:"bytes,15,rep,name=apis,proto3" json:"apis,omitempty"`
	//owner's verta_id
	Owner string `protobuf:"bytes,16,opt,name=owner,proto3" json:"owner,omitempty"`
	// Other attributes
	Attributes []*common.KeyValue `protobuf:"bytes,17,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Stage of the model version. This field must be searchable as per our "find" operation
	Stage StageEnum_Stage `protobuf:"varint,18,opt,name=stage,proto3,enum=ai.verta.registry.StageEnum_Stage" json:"stage,omitempty"`
	// Current lock level for this model version
	LockLevel           ModelVersionLockLevelEnum_ModelVersionLockLevel `protobuf:"varint,19,opt,name=lock_level,json=lockLevel,proto3,enum=ai.verta.registry.ModelVersionLockLevelEnum_ModelVersionLockLevel" json:"lock_level,omitempty"`
	Datasets            []*common.Artifact                              `protobuf:"bytes,20,rep,name=datasets,proto3" json:"datasets,omitempty"`
	CodeVersionFromBlob map[string]*common.CodeVersion                  `protobuf:"bytes,21,rep,name=code_version_from_blob,json=codeVersionFromBlob,proto3" json:"code_version_from_blob,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelVersion) Reset() {
	*x = ModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersion) ProtoMessage() {}

func (x *ModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersion.ProtoReflect.Descriptor instead.
func (*ModelVersion) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{9}
}

func (x *ModelVersion) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModelVersion) GetRegisteredModelId() uint64 {
	if x != nil {
		return x.RegisteredModelId
	}
	return 0
}

func (x *ModelVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ModelVersion) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

func (x *ModelVersion) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *ModelVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *ModelVersion) GetSource() isModelVersion_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ModelVersion) GetExperimentRunId() string {
	if x, ok := x.GetSource().(*ModelVersion_ExperimentRunId); ok {
		return x.ExperimentRunId
	}
	return ""
}

func (x *ModelVersion) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ModelVersion) GetModel() *common.Artifact {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *ModelVersion) GetEnvironment() *versioning.EnvironmentBlob {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *ModelVersion) GetArtifacts() []*common.Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ModelVersion) GetArchived() common.TernaryEnum_Ternary {
	if x != nil {
		return x.Archived
	}
	return common.TernaryEnum_UNKNOWN
}

func (x *ModelVersion) GetReadmeText() string {
	if x != nil {
		return x.ReadmeText
	}
	return ""
}

func (x *ModelVersion) GetApis() []string {
	if x != nil {
		return x.Apis
	}
	return nil
}

func (x *ModelVersion) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ModelVersion) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ModelVersion) GetStage() StageEnum_Stage {
	if x != nil {
		return x.Stage
	}
	return StageEnum_UNKNOWN
}

func (x *ModelVersion) GetLockLevel() ModelVersionLockLevelEnum_ModelVersionLockLevel {
	if x != nil {
		return x.LockLevel
	}
	return ModelVersionLockLevelEnum_UNKNOWN
}

func (x *ModelVersion) GetDatasets() []*common.Artifact {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *ModelVersion) GetCodeVersionFromBlob() map[string]*common.CodeVersion {
	if x != nil {
		return x.CodeVersionFromBlob
	}
	return nil
}

type isModelVersion_Source interface {
	isModelVersion_Source()
}

type ModelVersion_ExperimentRunId struct {
	ExperimentRunId string `protobuf:"bytes,7,opt,name=experiment_run_id,json=experimentRunId,proto3,oneof"` // string model_url = 15; NOT SUPPORTED YET
}

func (*ModelVersion_ExperimentRunId) isModelVersion_Source() {}

type SetLockModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//User or organization name
	Id        *ModelVersionIdentification                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LockLevel ModelVersionLockLevelEnum_ModelVersionLockLevel `protobuf:"varint,2,opt,name=lock_level,json=lockLevel,proto3,enum=ai.verta.registry.ModelVersionLockLevelEnum_ModelVersionLockLevel" json:"lock_level,omitempty"`
}

func (x *SetLockModelVersionRequest) Reset() {
	*x = SetLockModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLockModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLockModelVersionRequest) ProtoMessage() {}

func (x *SetLockModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLockModelVersionRequest.ProtoReflect.Descriptor instead.
func (*SetLockModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{10}
}

func (x *SetLockModelVersionRequest) GetId() *ModelVersionIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetLockModelVersionRequest) GetLockLevel() ModelVersionLockLevelEnum_ModelVersionLockLevel {
	if x != nil {
		return x.LockLevel
	}
	return ModelVersionLockLevelEnum_UNKNOWN
}

type ModelVersionIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ModelVersion referred to by id
	ModelVersionId uint64 `protobuf:"varint,1,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	//Registered Model referred to by id
	ModelId *RegisteredModelIdentification `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"` //Compulsory
}

func (x *ModelVersionIdentification) Reset() {
	*x = ModelVersionIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionIdentification) ProtoMessage() {}

func (x *ModelVersionIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionIdentification.ProtoReflect.Descriptor instead.
func (*ModelVersionIdentification) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{11}
}

func (x *ModelVersionIdentification) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

func (x *ModelVersionIdentification) GetModelId() *RegisteredModelIdentification {
	if x != nil {
		return x.ModelId
	}
	return nil
}

//  CRUD for Model Version
type GetModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//User or organization name
	Id *ModelVersionIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetModelVersionRequest) Reset() {
	*x = GetModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionRequest) ProtoMessage() {}

func (x *GetModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionRequest.ProtoReflect.Descriptor instead.
func (*GetModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{12}
}

func (x *GetModelVersionRequest) GetId() *ModelVersionIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

type FindModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//identity of parent registered model
	Id *RegisteredModelIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//Filtering supported on
	// 1. version
	// 2. labels
	// 3. description
	// 4. model_source
	// 5. experiment_run_id
	// 6. status
	// 7. archived status
	Predicates []*common.KeyValueQuery `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"`
	//If not present will default to page 1 page_size 10
	Pagination *common.Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Ascending  bool               `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string             `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *FindModelVersionRequest) Reset() {
	*x = FindModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindModelVersionRequest) ProtoMessage() {}

func (x *FindModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindModelVersionRequest.ProtoReflect.Descriptor instead.
func (*FindModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{13}
}

func (x *FindModelVersionRequest) GetId() *RegisteredModelIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FindModelVersionRequest) GetPredicates() []*common.KeyValueQuery {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *FindModelVersionRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *FindModelVersionRequest) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *FindModelVersionRequest) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type SetModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *ModelVersionIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ModelVersion *ModelVersion               `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	UpdateMask   *field_mask.FieldMask       `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *SetModelVersion) Reset() {
	*x = SetModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModelVersion) ProtoMessage() {}

func (x *SetModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModelVersion.ProtoReflect.Descriptor instead.
func (*SetModelVersion) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{14}
}

func (x *SetModelVersion) GetId() *ModelVersionIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetModelVersion) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

func (x *SetModelVersion) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ModelVersionIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteModelVersionRequest) Reset() {
	*x = DeleteModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersionRequest) ProtoMessage() {}

func (x *DeleteModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersionRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteModelVersionRequest) GetId() *ModelVersionIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

type LogDatasetsInModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersionId uint64             `protobuf:"varint,1,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	Datasets       []*common.Artifact `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *LogDatasetsInModelVersion) Reset() {
	*x = LogDatasetsInModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogDatasetsInModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogDatasetsInModelVersion) ProtoMessage() {}

func (x *LogDatasetsInModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogDatasetsInModelVersion.ProtoReflect.Descriptor instead.
func (*LogDatasetsInModelVersion) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{16}
}

func (x *LogDatasetsInModelVersion) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

func (x *LogDatasetsInModelVersion) GetDatasets() []*common.Artifact {
	if x != nil {
		return x.Datasets
	}
	return nil
}

type LogCodeVersionFromBlobInModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersionId      uint64                         `protobuf:"varint,1,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	CodeVersionFromBlob map[string]*common.CodeVersion `protobuf:"bytes,2,rep,name=code_version_from_blob,json=codeVersionFromBlob,proto3" json:"code_version_from_blob,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogCodeVersionFromBlobInModelVersion) Reset() {
	*x = LogCodeVersionFromBlobInModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCodeVersionFromBlobInModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCodeVersionFromBlobInModelVersion) ProtoMessage() {}

func (x *LogCodeVersionFromBlobInModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCodeVersionFromBlobInModelVersion.ProtoReflect.Descriptor instead.
func (*LogCodeVersionFromBlobInModelVersion) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{17}
}

func (x *LogCodeVersionFromBlobInModelVersion) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

func (x *LogCodeVersionFromBlobInModelVersion) GetCodeVersionFromBlob() map[string]*common.CodeVersion {
	if x != nil {
		return x.CodeVersionFromBlob
	}
	return nil
}

type LogAttributesInModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersionId uint64             `protobuf:"varint,1,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	Attributes     []*common.KeyValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *LogAttributesInModelVersion) Reset() {
	*x = LogAttributesInModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogAttributesInModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogAttributesInModelVersion) ProtoMessage() {}

func (x *LogAttributesInModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogAttributesInModelVersion.ProtoReflect.Descriptor instead.
func (*LogAttributesInModelVersion) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{18}
}

func (x *LogAttributesInModelVersion) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

func (x *LogAttributesInModelVersion) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type FindRegisteredModelRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModels []*RegisteredModel `protobuf:"bytes,1,rep,name=registered_models,json=registeredModels,proto3" json:"registered_models,omitempty"`
	TotalRecords     int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindRegisteredModelRequest_Response) Reset() {
	*x = FindRegisteredModelRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRegisteredModelRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRegisteredModelRequest_Response) ProtoMessage() {}

func (x *FindRegisteredModelRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRegisteredModelRequest_Response.ProtoReflect.Descriptor instead.
func (*FindRegisteredModelRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FindRegisteredModelRequest_Response) GetRegisteredModels() []*RegisteredModel {
	if x != nil {
		return x.RegisteredModels
	}
	return nil
}

func (x *FindRegisteredModelRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetRegisteredModelRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModel *RegisteredModel `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel,proto3" json:"registered_model,omitempty"`
}

func (x *GetRegisteredModelRequest_Response) Reset() {
	*x = GetRegisteredModelRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredModelRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredModelRequest_Response) ProtoMessage() {}

func (x *GetRegisteredModelRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredModelRequest_Response.ProtoReflect.Descriptor instead.
func (*GetRegisteredModelRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetRegisteredModelRequest_Response) GetRegisteredModel() *RegisteredModel {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

type GetRegisteredModelCountRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModelCount int64 `protobuf:"varint,1,opt,name=registered_model_count,json=registeredModelCount,proto3" json:"registered_model_count,omitempty"`
}

func (x *GetRegisteredModelCountRequest_Response) Reset() {
	*x = GetRegisteredModelCountRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredModelCountRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredModelCountRequest_Response) ProtoMessage() {}

func (x *GetRegisteredModelCountRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredModelCountRequest_Response.ProtoReflect.Descriptor instead.
func (*GetRegisteredModelCountRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetRegisteredModelCountRequest_Response) GetRegisteredModelCount() int64 {
	if x != nil {
		return x.RegisteredModelCount
	}
	return 0
}

type SetRegisteredModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModel *RegisteredModel `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel,proto3" json:"registered_model,omitempty"`
}

func (x *SetRegisteredModel_Response) Reset() {
	*x = SetRegisteredModel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRegisteredModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRegisteredModel_Response) ProtoMessage() {}

func (x *SetRegisteredModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRegisteredModel_Response.ProtoReflect.Descriptor instead.
func (*SetRegisteredModel_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SetRegisteredModel_Response) GetRegisteredModel() *RegisteredModel {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

type DeleteRegisteredModelRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRegisteredModelRequest_Response) Reset() {
	*x = DeleteRegisteredModelRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegisteredModelRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegisteredModelRequest_Response) ProtoMessage() {}

func (x *DeleteRegisteredModelRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegisteredModelRequest_Response.ProtoReflect.Descriptor instead.
func (*DeleteRegisteredModelRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{7, 0}
}

type SetLockModelVersionRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetLockModelVersionRequest_Response) Reset() {
	*x = SetLockModelVersionRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLockModelVersionRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLockModelVersionRequest_Response) ProtoMessage() {}

func (x *SetLockModelVersionRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLockModelVersionRequest_Response.ProtoReflect.Descriptor instead.
func (*SetLockModelVersionRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{10, 0}
}

type GetModelVersionRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersion *ModelVersion `protobuf:"bytes,1,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *GetModelVersionRequest_Response) Reset() {
	*x = GetModelVersionRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionRequest_Response) ProtoMessage() {}

func (x *GetModelVersionRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionRequest_Response.ProtoReflect.Descriptor instead.
func (*GetModelVersionRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetModelVersionRequest_Response) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type FindModelVersionRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersions []*ModelVersion `protobuf:"bytes,1,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
	TotalRecords  int64           `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindModelVersionRequest_Response) Reset() {
	*x = FindModelVersionRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindModelVersionRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindModelVersionRequest_Response) ProtoMessage() {}

func (x *FindModelVersionRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindModelVersionRequest_Response.ProtoReflect.Descriptor instead.
func (*FindModelVersionRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{13, 0}
}

func (x *FindModelVersionRequest_Response) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

func (x *FindModelVersionRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type SetModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersion *ModelVersion `protobuf:"bytes,1,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *SetModelVersion_Response) Reset() {
	*x = SetModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModelVersion_Response) ProtoMessage() {}

func (x *SetModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModelVersion_Response.ProtoReflect.Descriptor instead.
func (*SetModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SetModelVersion_Response) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type DeleteModelVersionRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteModelVersionRequest_Response) Reset() {
	*x = DeleteModelVersionRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersionRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersionRequest_Response) ProtoMessage() {}

func (x *DeleteModelVersionRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersionRequest_Response.ProtoReflect.Descriptor instead.
func (*DeleteModelVersionRequest_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{15, 0}
}

type LogDatasetsInModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogDatasetsInModelVersion_Response) Reset() {
	*x = LogDatasetsInModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogDatasetsInModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogDatasetsInModelVersion_Response) ProtoMessage() {}

func (x *LogDatasetsInModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogDatasetsInModelVersion_Response.ProtoReflect.Descriptor instead.
func (*LogDatasetsInModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{16, 0}
}

type LogCodeVersionFromBlobInModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogCodeVersionFromBlobInModelVersion_Response) Reset() {
	*x = LogCodeVersionFromBlobInModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCodeVersionFromBlobInModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCodeVersionFromBlobInModelVersion_Response) ProtoMessage() {}

func (x *LogCodeVersionFromBlobInModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCodeVersionFromBlobInModelVersion_Response.ProtoReflect.Descriptor instead.
func (*LogCodeVersionFromBlobInModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{17, 1}
}

type LogAttributesInModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogAttributesInModelVersion_Response) Reset() {
	*x = LogAttributesInModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_RegistryService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogAttributesInModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogAttributesInModelVersion_Response) ProtoMessage() {}

func (x *LogAttributesInModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_RegistryService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogAttributesInModelVersion_Response.ProtoReflect.Descriptor instead.
func (*LogAttributesInModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_registry_RegistryService_proto_rawDescGZIP(), []int{18, 0}
}

var File_registry_RegistryService_proto protoreflect.FileDescriptor

var file_registry_RegistryService_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x75, 0x61, 0x63, 0x2f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x4a, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xfc, 0x02, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x80, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x59, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x22, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x1a, 0x59, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x6c, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x19, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x46, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x44, 0x41, 0x43, 0x54, 0x10, 0x03, 0x22,
	0xcb, 0x08, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x6d,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x6d,
	0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x6c, 0x6f, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x1a, 0x64, 0x0a,
	0x18, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x6c, 0x6f, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xca, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1a, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x50, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x03, 0x0a,
	0x17, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x1a, 0x77, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a,
	0x50, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x66, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x0a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x4c, 0x6f,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x24, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x49,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c,
	0x6f, 0x62, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x63, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x1a,
	0x64, 0x0a, 0x18, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xfa, 0x2e, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf2, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x22, 0x3f, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x3a, 0x01,
	0x2a, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x02, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x96,
	0x01, 0x12, 0x59, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x5a, 0x39, 0x12, 0x37,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0xd0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x46, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x3a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0xa0, 0x05, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa8, 0x04, 0x32, 0x59,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x4b, 0x32, 0x37, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x68, 0x32, 0x63, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x3a,
	0x01, 0x2a, 0x5a, 0x46, 0x32, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x01, 0x2a, 0x5a, 0x6d, 0x1a, 0x59, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x4b, 0x1a, 0x37, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xa2, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x96, 0x01, 0x2a, 0x59, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x5a, 0x39, 0x2a, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb7, 0x03, 0x0a, 0x10,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc1, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xba, 0x02, 0x22, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x50, 0x22,
	0x4b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x5a,
	0x4d, 0x22, 0x48, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x25,
	0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69,
	0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xc2, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xc8, 0x01, 0x12, 0x90, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xdc, 0x02, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xf4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xed, 0x01, 0x22, 0x7a, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5a, 0x60, 0x22, 0x4f, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xbf, 0x07, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd7, 0x06, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd0, 0x06, 0x32, 0x90, 0x01, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5a, 0x76, 0x32,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5a, 0xa0, 0x01, 0x32, 0x9a, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x01, 0x2a, 0x5a, 0x74, 0x32, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x01, 0x2a, 0x5a, 0xa2,
	0x01, 0x1a, 0x90, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5a, 0x76, 0x1a, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xbf, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x1a, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0xb4, 0x03,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xb1, 0x02, 0x2a, 0x90, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x67, 0x2a, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x5a,
	0x33, 0x2a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46,
	0x6f, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a,
	0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f,
	0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38,
	0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x19, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0xbd, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d,
	0x22, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xc7, 0x01,
	0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x6f,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xf3, 0x01, 0x0a, 0x24, 0x6c, 0x6f, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c,
	0x6f, 0x62, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4a, 0x22, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x3a, 0x01, 0x2a, 0x12, 0xcf, 0x01,
	0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3c,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c,
	0x6f, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x42,
	0x43, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registry_RegistryService_proto_rawDescOnce sync.Once
	file_registry_RegistryService_proto_rawDescData = file_registry_RegistryService_proto_rawDesc
)

func file_registry_RegistryService_proto_rawDescGZIP() []byte {
	file_registry_RegistryService_proto_rawDescOnce.Do(func() {
		file_registry_RegistryService_proto_rawDescData = protoimpl.X.CompressGZIP(file_registry_RegistryService_proto_rawDescData)
	})
	return file_registry_RegistryService_proto_rawDescData
}

var file_registry_RegistryService_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_registry_RegistryService_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_registry_RegistryService_proto_goTypes = []interface{}{
	(ModelVersionLockLevelEnum_ModelVersionLockLevel)(0), // 0: ai.verta.registry.ModelVersionLockLevelEnum.ModelVersionLockLevel
	(*RegisteredModel)(nil),                              // 1: ai.verta.registry.RegisteredModel
	(*FindRegisteredModelRequest)(nil),                   // 2: ai.verta.registry.FindRegisteredModelRequest
	(*GetRegisteredModelRequest)(nil),                    // 3: ai.verta.registry.GetRegisteredModelRequest
	(*GetRegisteredModelCountRequest)(nil),               // 4: ai.verta.registry.GetRegisteredModelCountRequest
	(*RegisteredModelNamedIdentification)(nil),           // 5: ai.verta.registry.RegisteredModelNamedIdentification
	(*RegisteredModelIdentification)(nil),                // 6: ai.verta.registry.RegisteredModelIdentification
	(*SetRegisteredModel)(nil),                           // 7: ai.verta.registry.SetRegisteredModel
	(*DeleteRegisteredModelRequest)(nil),                 // 8: ai.verta.registry.DeleteRegisteredModelRequest
	(*ModelVersionLockLevelEnum)(nil),                    // 9: ai.verta.registry.ModelVersionLockLevelEnum
	(*ModelVersion)(nil),                                 // 10: ai.verta.registry.ModelVersion
	(*SetLockModelVersionRequest)(nil),                   // 11: ai.verta.registry.SetLockModelVersionRequest
	(*ModelVersionIdentification)(nil),                   // 12: ai.verta.registry.ModelVersionIdentification
	(*GetModelVersionRequest)(nil),                       // 13: ai.verta.registry.GetModelVersionRequest
	(*FindModelVersionRequest)(nil),                      // 14: ai.verta.registry.FindModelVersionRequest
	(*SetModelVersion)(nil),                              // 15: ai.verta.registry.SetModelVersion
	(*DeleteModelVersionRequest)(nil),                    // 16: ai.verta.registry.DeleteModelVersionRequest
	(*LogDatasetsInModelVersion)(nil),                    // 17: ai.verta.registry.LogDatasetsInModelVersion
	(*LogCodeVersionFromBlobInModelVersion)(nil),         // 18: ai.verta.registry.LogCodeVersionFromBlobInModelVersion
	(*LogAttributesInModelVersion)(nil),                  // 19: ai.verta.registry.LogAttributesInModelVersion
	(*FindRegisteredModelRequest_Response)(nil),          // 20: ai.verta.registry.FindRegisteredModelRequest.Response
	(*GetRegisteredModelRequest_Response)(nil),           // 21: ai.verta.registry.GetRegisteredModelRequest.Response
	(*GetRegisteredModelCountRequest_Response)(nil),      // 22: ai.verta.registry.GetRegisteredModelCountRequest.Response
	(*SetRegisteredModel_Response)(nil),                  // 23: ai.verta.registry.SetRegisteredModel.Response
	(*DeleteRegisteredModelRequest_Response)(nil),        // 24: ai.verta.registry.DeleteRegisteredModelRequest.Response
	nil, // 25: ai.verta.registry.ModelVersion.CodeVersionFromBlobEntry
	(*SetLockModelVersionRequest_Response)(nil), // 26: ai.verta.registry.SetLockModelVersionRequest.Response
	(*GetModelVersionRequest_Response)(nil),     // 27: ai.verta.registry.GetModelVersionRequest.Response
	(*FindModelVersionRequest_Response)(nil),    // 28: ai.verta.registry.FindModelVersionRequest.Response
	(*SetModelVersion_Response)(nil),            // 29: ai.verta.registry.SetModelVersion.Response
	(*DeleteModelVersionRequest_Response)(nil),  // 30: ai.verta.registry.DeleteModelVersionRequest.Response
	(*LogDatasetsInModelVersion_Response)(nil),  // 31: ai.verta.registry.LogDatasetsInModelVersion.Response
	nil, // 32: ai.verta.registry.LogCodeVersionFromBlobInModelVersion.CodeVersionFromBlobEntry
	(*LogCodeVersionFromBlobInModelVersion_Response)(nil), // 33: ai.verta.registry.LogCodeVersionFromBlobInModelVersion.Response
	(*LogAttributesInModelVersion_Response)(nil),          // 34: ai.verta.registry.LogAttributesInModelVersion.Response
	(common.VisibilityEnum_Visibility)(0),                 // 35: ai.verta.common.VisibilityEnum.Visibility
	(*common.KeyValue)(nil),                               // 36: ai.verta.common.KeyValue
	(*uac.CollaboratorPermissions)(nil),                   // 37: ai.verta.uac.CollaboratorPermissions
	(uac.ResourceVisibility)(0),                           // 38: ai.verta.uac.ResourceVisibility
	(*common.KeyValueQuery)(nil),                          // 39: ai.verta.common.KeyValueQuery
	(*common.Pagination)(nil),                             // 40: ai.verta.common.Pagination
	(*field_mask.FieldMask)(nil),                          // 41: google.protobuf.FieldMask
	(*common.Artifact)(nil),                               // 42: ai.verta.common.Artifact
	(*versioning.EnvironmentBlob)(nil),                    // 43: ai.verta.modeldb.versioning.EnvironmentBlob
	(common.TernaryEnum_Ternary)(0),                       // 44: ai.verta.common.TernaryEnum.Ternary
	(StageEnum_Stage)(0),                                  // 45: ai.verta.registry.StageEnum.Stage
	(*common.CodeVersion)(nil),                            // 46: ai.verta.common.CodeVersion
	(*modeldb.GetUrlForArtifact)(nil),                     // 47: ai.verta.modeldb.GetUrlForArtifact
	(*modeldb.CommitArtifactPart)(nil),                    // 48: ai.verta.modeldb.CommitArtifactPart
	(*modeldb.GetCommittedArtifactParts)(nil),             // 49: ai.verta.modeldb.GetCommittedArtifactParts
	(*modeldb.CommitMultipartArtifact)(nil),               // 50: ai.verta.modeldb.CommitMultipartArtifact
	(*modeldb.GetUrlForArtifact_Response)(nil),            // 51: ai.verta.modeldb.GetUrlForArtifact.Response
	(*modeldb.CommitArtifactPart_Response)(nil),           // 52: ai.verta.modeldb.CommitArtifactPart.Response
	(*modeldb.GetCommittedArtifactParts_Response)(nil),    // 53: ai.verta.modeldb.GetCommittedArtifactParts.Response
	(*modeldb.CommitMultipartArtifact_Response)(nil),      // 54: ai.verta.modeldb.CommitMultipartArtifact.Response
}
var file_registry_RegistryService_proto_depIdxs = []int32{
	35, // 0: ai.verta.registry.RegisteredModel.visibility:type_name -> ai.verta.common.VisibilityEnum.Visibility
	36, // 1: ai.verta.registry.RegisteredModel.attributes:type_name -> ai.verta.common.KeyValue
	37, // 2: ai.verta.registry.RegisteredModel.custom_permission:type_name -> ai.verta.uac.CollaboratorPermissions
	38, // 3: ai.verta.registry.RegisteredModel.resource_visibility:type_name -> ai.verta.uac.ResourceVisibility
	39, // 4: ai.verta.registry.FindRegisteredModelRequest.predicates:type_name -> ai.verta.common.KeyValueQuery
	40, // 5: ai.verta.registry.FindRegisteredModelRequest.pagination:type_name -> ai.verta.common.Pagination
	6,  // 6: ai.verta.registry.GetRegisteredModelRequest.id:type_name -> ai.verta.registry.RegisteredModelIdentification
	5,  // 7: ai.verta.registry.RegisteredModelIdentification.named_id:type_name -> ai.verta.registry.RegisteredModelNamedIdentification
	6,  // 8: ai.verta.registry.SetRegisteredModel.id:type_name -> ai.verta.registry.RegisteredModelIdentification
	1,  // 9: ai.verta.registry.SetRegisteredModel.registered_model:type_name -> ai.verta.registry.RegisteredModel
	41, // 10: ai.verta.registry.SetRegisteredModel.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 11: ai.verta.registry.DeleteRegisteredModelRequest.id:type_name -> ai.verta.registry.RegisteredModelIdentification
	42, // 12: ai.verta.registry.ModelVersion.model:type_name -> ai.verta.common.Artifact
	43, // 13: ai.verta.registry.ModelVersion.environment:type_name -> ai.verta.modeldb.versioning.EnvironmentBlob
	42, // 14: ai.verta.registry.ModelVersion.artifacts:type_name -> ai.verta.common.Artifact
	44, // 15: ai.verta.registry.ModelVersion.archived:type_name -> ai.verta.common.TernaryEnum.Ternary
	36, // 16: ai.verta.registry.ModelVersion.attributes:type_name -> ai.verta.common.KeyValue
	45, // 17: ai.verta.registry.ModelVersion.stage:type_name -> ai.verta.registry.StageEnum.Stage
	0,  // 18: ai.verta.registry.ModelVersion.lock_level:type_name -> ai.verta.registry.ModelVersionLockLevelEnum.ModelVersionLockLevel
	42, // 19: ai.verta.registry.ModelVersion.datasets:type_name -> ai.verta.common.Artifact
	25, // 20: ai.verta.registry.ModelVersion.code_version_from_blob:type_name -> ai.verta.registry.ModelVersion.CodeVersionFromBlobEntry
	12, // 21: ai.verta.registry.SetLockModelVersionRequest.id:type_name -> ai.verta.registry.ModelVersionIdentification
	0,  // 22: ai.verta.registry.SetLockModelVersionRequest.lock_level:type_name -> ai.verta.registry.ModelVersionLockLevelEnum.ModelVersionLockLevel
	6,  // 23: ai.verta.registry.ModelVersionIdentification.model_id:type_name -> ai.verta.registry.RegisteredModelIdentification
	12, // 24: ai.verta.registry.GetModelVersionRequest.id:type_name -> ai.verta.registry.ModelVersionIdentification
	6,  // 25: ai.verta.registry.FindModelVersionRequest.id:type_name -> ai.verta.registry.RegisteredModelIdentification
	39, // 26: ai.verta.registry.FindModelVersionRequest.predicates:type_name -> ai.verta.common.KeyValueQuery
	40, // 27: ai.verta.registry.FindModelVersionRequest.pagination:type_name -> ai.verta.common.Pagination
	12, // 28: ai.verta.registry.SetModelVersion.id:type_name -> ai.verta.registry.ModelVersionIdentification
	10, // 29: ai.verta.registry.SetModelVersion.model_version:type_name -> ai.verta.registry.ModelVersion
	41, // 30: ai.verta.registry.SetModelVersion.update_mask:type_name -> google.protobuf.FieldMask
	12, // 31: ai.verta.registry.DeleteModelVersionRequest.id:type_name -> ai.verta.registry.ModelVersionIdentification
	42, // 32: ai.verta.registry.LogDatasetsInModelVersion.datasets:type_name -> ai.verta.common.Artifact
	32, // 33: ai.verta.registry.LogCodeVersionFromBlobInModelVersion.code_version_from_blob:type_name -> ai.verta.registry.LogCodeVersionFromBlobInModelVersion.CodeVersionFromBlobEntry
	36, // 34: ai.verta.registry.LogAttributesInModelVersion.attributes:type_name -> ai.verta.common.KeyValue
	1,  // 35: ai.verta.registry.FindRegisteredModelRequest.Response.registered_models:type_name -> ai.verta.registry.RegisteredModel
	1,  // 36: ai.verta.registry.GetRegisteredModelRequest.Response.registered_model:type_name -> ai.verta.registry.RegisteredModel
	1,  // 37: ai.verta.registry.SetRegisteredModel.Response.registered_model:type_name -> ai.verta.registry.RegisteredModel
	46, // 38: ai.verta.registry.ModelVersion.CodeVersionFromBlobEntry.value:type_name -> ai.verta.common.CodeVersion
	10, // 39: ai.verta.registry.GetModelVersionRequest.Response.model_version:type_name -> ai.verta.registry.ModelVersion
	10, // 40: ai.verta.registry.FindModelVersionRequest.Response.model_versions:type_name -> ai.verta.registry.ModelVersion
	10, // 41: ai.verta.registry.SetModelVersion.Response.model_version:type_name -> ai.verta.registry.ModelVersion
	46, // 42: ai.verta.registry.LogCodeVersionFromBlobInModelVersion.CodeVersionFromBlobEntry.value:type_name -> ai.verta.common.CodeVersion
	2,  // 43: ai.verta.registry.RegistryService.FindRegisteredModel:input_type -> ai.verta.registry.FindRegisteredModelRequest
	3,  // 44: ai.verta.registry.RegistryService.GetRegisteredModel:input_type -> ai.verta.registry.GetRegisteredModelRequest
	4,  // 45: ai.verta.registry.RegistryService.GetRegisteredModelCount:input_type -> ai.verta.registry.GetRegisteredModelCountRequest
	7,  // 46: ai.verta.registry.RegistryService.CreateRegisteredModel:input_type -> ai.verta.registry.SetRegisteredModel
	7,  // 47: ai.verta.registry.RegistryService.UpdateRegisteredModel:input_type -> ai.verta.registry.SetRegisteredModel
	8,  // 48: ai.verta.registry.RegistryService.DeleteRegisteredModel:input_type -> ai.verta.registry.DeleteRegisteredModelRequest
	14, // 49: ai.verta.registry.RegistryService.FindModelVersion:input_type -> ai.verta.registry.FindModelVersionRequest
	13, // 50: ai.verta.registry.RegistryService.GetModelVersion:input_type -> ai.verta.registry.GetModelVersionRequest
	15, // 51: ai.verta.registry.RegistryService.CreateModelVersion:input_type -> ai.verta.registry.SetModelVersion
	15, // 52: ai.verta.registry.RegistryService.UpdateModelVersion:input_type -> ai.verta.registry.SetModelVersion
	11, // 53: ai.verta.registry.RegistryService.SetLockModelVersion:input_type -> ai.verta.registry.SetLockModelVersionRequest
	16, // 54: ai.verta.registry.RegistryService.DeleteModelVersion:input_type -> ai.verta.registry.DeleteModelVersionRequest
	47, // 55: ai.verta.registry.RegistryService.getUrlForArtifact:input_type -> ai.verta.modeldb.GetUrlForArtifact
	48, // 56: ai.verta.registry.RegistryService.commitArtifactPart:input_type -> ai.verta.modeldb.CommitArtifactPart
	49, // 57: ai.verta.registry.RegistryService.getCommittedArtifactParts:input_type -> ai.verta.modeldb.GetCommittedArtifactParts
	50, // 58: ai.verta.registry.RegistryService.commitMultipartArtifact:input_type -> ai.verta.modeldb.CommitMultipartArtifact
	17, // 59: ai.verta.registry.RegistryService.logDatasetsInModelVersion:input_type -> ai.verta.registry.LogDatasetsInModelVersion
	18, // 60: ai.verta.registry.RegistryService.logCodeVersionFromBlobInModelVersion:input_type -> ai.verta.registry.LogCodeVersionFromBlobInModelVersion
	19, // 61: ai.verta.registry.RegistryService.logAttributesInModelVersion:input_type -> ai.verta.registry.LogAttributesInModelVersion
	20, // 62: ai.verta.registry.RegistryService.FindRegisteredModel:output_type -> ai.verta.registry.FindRegisteredModelRequest.Response
	21, // 63: ai.verta.registry.RegistryService.GetRegisteredModel:output_type -> ai.verta.registry.GetRegisteredModelRequest.Response
	22, // 64: ai.verta.registry.RegistryService.GetRegisteredModelCount:output_type -> ai.verta.registry.GetRegisteredModelCountRequest.Response
	23, // 65: ai.verta.registry.RegistryService.CreateRegisteredModel:output_type -> ai.verta.registry.SetRegisteredModel.Response
	23, // 66: ai.verta.registry.RegistryService.UpdateRegisteredModel:output_type -> ai.verta.registry.SetRegisteredModel.Response
	24, // 67: ai.verta.registry.RegistryService.DeleteRegisteredModel:output_type -> ai.verta.registry.DeleteRegisteredModelRequest.Response
	28, // 68: ai.verta.registry.RegistryService.FindModelVersion:output_type -> ai.verta.registry.FindModelVersionRequest.Response
	27, // 69: ai.verta.registry.RegistryService.GetModelVersion:output_type -> ai.verta.registry.GetModelVersionRequest.Response
	29, // 70: ai.verta.registry.RegistryService.CreateModelVersion:output_type -> ai.verta.registry.SetModelVersion.Response
	29, // 71: ai.verta.registry.RegistryService.UpdateModelVersion:output_type -> ai.verta.registry.SetModelVersion.Response
	26, // 72: ai.verta.registry.RegistryService.SetLockModelVersion:output_type -> ai.verta.registry.SetLockModelVersionRequest.Response
	30, // 73: ai.verta.registry.RegistryService.DeleteModelVersion:output_type -> ai.verta.registry.DeleteModelVersionRequest.Response
	51, // 74: ai.verta.registry.RegistryService.getUrlForArtifact:output_type -> ai.verta.modeldb.GetUrlForArtifact.Response
	52, // 75: ai.verta.registry.RegistryService.commitArtifactPart:output_type -> ai.verta.modeldb.CommitArtifactPart.Response
	53, // 76: ai.verta.registry.RegistryService.getCommittedArtifactParts:output_type -> ai.verta.modeldb.GetCommittedArtifactParts.Response
	54, // 77: ai.verta.registry.RegistryService.commitMultipartArtifact:output_type -> ai.verta.modeldb.CommitMultipartArtifact.Response
	31, // 78: ai.verta.registry.RegistryService.logDatasetsInModelVersion:output_type -> ai.verta.registry.LogDatasetsInModelVersion.Response
	33, // 79: ai.verta.registry.RegistryService.logCodeVersionFromBlobInModelVersion:output_type -> ai.verta.registry.LogCodeVersionFromBlobInModelVersion.Response
	34, // 80: ai.verta.registry.RegistryService.logAttributesInModelVersion:output_type -> ai.verta.registry.LogAttributesInModelVersion.Response
	62, // [62:81] is the sub-list for method output_type
	43, // [43:62] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_registry_RegistryService_proto_init() }
func file_registry_RegistryService_proto_init() {
	if File_registry_RegistryService_proto != nil {
		return
	}
	file_registry_StageService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_registry_RegistryService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRegisteredModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredModelCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModelNamedIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModelIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegisteredModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionLockLevelEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLockModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogDatasetsInModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCodeVersionFromBlobInModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogAttributesInModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRegisteredModelRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredModelRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredModelCountRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRegisteredModel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegisteredModelRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLockModelVersionRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindModelVersionRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersionRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogDatasetsInModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCodeVersionFromBlobInModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_RegistryService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogAttributesInModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_registry_RegistryService_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ModelVersion_ExperimentRunId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registry_RegistryService_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registry_RegistryService_proto_goTypes,
		DependencyIndexes: file_registry_RegistryService_proto_depIdxs,
		EnumInfos:         file_registry_RegistryService_proto_enumTypes,
		MessageInfos:      file_registry_RegistryService_proto_msgTypes,
	}.Build()
	File_registry_RegistryService_proto = out.File
	file_registry_RegistryService_proto_rawDesc = nil
	file_registry_RegistryService_proto_goTypes = nil
	file_registry_RegistryService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryServiceClient interface {
	// CRUD for RegisteredModel
	FindRegisteredModel(ctx context.Context, in *FindRegisteredModelRequest, opts ...grpc.CallOption) (*FindRegisteredModelRequest_Response, error)
	GetRegisteredModel(ctx context.Context, in *GetRegisteredModelRequest, opts ...grpc.CallOption) (*GetRegisteredModelRequest_Response, error)
	GetRegisteredModelCount(ctx context.Context, in *GetRegisteredModelCountRequest, opts ...grpc.CallOption) (*GetRegisteredModelCountRequest_Response, error)
	CreateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error)
	UpdateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error)
	DeleteRegisteredModel(ctx context.Context, in *DeleteRegisteredModelRequest, opts ...grpc.CallOption) (*DeleteRegisteredModelRequest_Response, error)
	//CRUD for Model Version
	FindModelVersion(ctx context.Context, in *FindModelVersionRequest, opts ...grpc.CallOption) (*FindModelVersionRequest_Response, error)
	GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*GetModelVersionRequest_Response, error)
	CreateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error)
	UpdateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error)
	SetLockModelVersion(ctx context.Context, in *SetLockModelVersionRequest, opts ...grpc.CallOption) (*SetLockModelVersionRequest_Response, error)
	DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*DeleteModelVersionRequest_Response, error)
	GetUrlForArtifact(ctx context.Context, in *modeldb.GetUrlForArtifact, opts ...grpc.CallOption) (*modeldb.GetUrlForArtifact_Response, error)
	CommitArtifactPart(ctx context.Context, in *modeldb.CommitArtifactPart, opts ...grpc.CallOption) (*modeldb.CommitArtifactPart_Response, error)
	GetCommittedArtifactParts(ctx context.Context, in *modeldb.GetCommittedArtifactParts, opts ...grpc.CallOption) (*modeldb.GetCommittedArtifactParts_Response, error)
	CommitMultipartArtifact(ctx context.Context, in *modeldb.CommitMultipartArtifact, opts ...grpc.CallOption) (*modeldb.CommitMultipartArtifact_Response, error)
	LogDatasetsInModelVersion(ctx context.Context, in *LogDatasetsInModelVersion, opts ...grpc.CallOption) (*LogDatasetsInModelVersion_Response, error)
	LogCodeVersionFromBlobInModelVersion(ctx context.Context, in *LogCodeVersionFromBlobInModelVersion, opts ...grpc.CallOption) (*LogCodeVersionFromBlobInModelVersion_Response, error)
	LogAttributesInModelVersion(ctx context.Context, in *LogAttributesInModelVersion, opts ...grpc.CallOption) (*LogAttributesInModelVersion_Response, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) FindRegisteredModel(ctx context.Context, in *FindRegisteredModelRequest, opts ...grpc.CallOption) (*FindRegisteredModelRequest_Response, error) {
	out := new(FindRegisteredModelRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/FindRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetRegisteredModel(ctx context.Context, in *GetRegisteredModelRequest, opts ...grpc.CallOption) (*GetRegisteredModelRequest_Response, error) {
	out := new(GetRegisteredModelRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/GetRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetRegisteredModelCount(ctx context.Context, in *GetRegisteredModelCountRequest, opts ...grpc.CallOption) (*GetRegisteredModelCountRequest_Response, error) {
	out := new(GetRegisteredModelCountRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/GetRegisteredModelCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error) {
	out := new(SetRegisteredModel_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/CreateRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error) {
	out := new(SetRegisteredModel_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/UpdateRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteRegisteredModel(ctx context.Context, in *DeleteRegisteredModelRequest, opts ...grpc.CallOption) (*DeleteRegisteredModelRequest_Response, error) {
	out := new(DeleteRegisteredModelRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/DeleteRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) FindModelVersion(ctx context.Context, in *FindModelVersionRequest, opts ...grpc.CallOption) (*FindModelVersionRequest_Response, error) {
	out := new(FindModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/FindModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*GetModelVersionRequest_Response, error) {
	out := new(GetModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/GetModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error) {
	out := new(SetModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/CreateModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error) {
	out := new(SetModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/UpdateModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) SetLockModelVersion(ctx context.Context, in *SetLockModelVersionRequest, opts ...grpc.CallOption) (*SetLockModelVersionRequest_Response, error) {
	out := new(SetLockModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/SetLockModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*DeleteModelVersionRequest_Response, error) {
	out := new(DeleteModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/DeleteModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetUrlForArtifact(ctx context.Context, in *modeldb.GetUrlForArtifact, opts ...grpc.CallOption) (*modeldb.GetUrlForArtifact_Response, error) {
	out := new(modeldb.GetUrlForArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/getUrlForArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CommitArtifactPart(ctx context.Context, in *modeldb.CommitArtifactPart, opts ...grpc.CallOption) (*modeldb.CommitArtifactPart_Response, error) {
	out := new(modeldb.CommitArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/commitArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetCommittedArtifactParts(ctx context.Context, in *modeldb.GetCommittedArtifactParts, opts ...grpc.CallOption) (*modeldb.GetCommittedArtifactParts_Response, error) {
	out := new(modeldb.GetCommittedArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/getCommittedArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CommitMultipartArtifact(ctx context.Context, in *modeldb.CommitMultipartArtifact, opts ...grpc.CallOption) (*modeldb.CommitMultipartArtifact_Response, error) {
	out := new(modeldb.CommitMultipartArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/commitMultipartArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) LogDatasetsInModelVersion(ctx context.Context, in *LogDatasetsInModelVersion, opts ...grpc.CallOption) (*LogDatasetsInModelVersion_Response, error) {
	out := new(LogDatasetsInModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/logDatasetsInModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) LogCodeVersionFromBlobInModelVersion(ctx context.Context, in *LogCodeVersionFromBlobInModelVersion, opts ...grpc.CallOption) (*LogCodeVersionFromBlobInModelVersion_Response, error) {
	out := new(LogCodeVersionFromBlobInModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/logCodeVersionFromBlobInModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) LogAttributesInModelVersion(ctx context.Context, in *LogAttributesInModelVersion, opts ...grpc.CallOption) (*LogAttributesInModelVersion_Response, error) {
	out := new(LogAttributesInModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/logAttributesInModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
type RegistryServiceServer interface {
	// CRUD for RegisteredModel
	FindRegisteredModel(context.Context, *FindRegisteredModelRequest) (*FindRegisteredModelRequest_Response, error)
	GetRegisteredModel(context.Context, *GetRegisteredModelRequest) (*GetRegisteredModelRequest_Response, error)
	GetRegisteredModelCount(context.Context, *GetRegisteredModelCountRequest) (*GetRegisteredModelCountRequest_Response, error)
	CreateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error)
	UpdateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error)
	DeleteRegisteredModel(context.Context, *DeleteRegisteredModelRequest) (*DeleteRegisteredModelRequest_Response, error)
	//CRUD for Model Version
	FindModelVersion(context.Context, *FindModelVersionRequest) (*FindModelVersionRequest_Response, error)
	GetModelVersion(context.Context, *GetModelVersionRequest) (*GetModelVersionRequest_Response, error)
	CreateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error)
	UpdateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error)
	SetLockModelVersion(context.Context, *SetLockModelVersionRequest) (*SetLockModelVersionRequest_Response, error)
	DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*DeleteModelVersionRequest_Response, error)
	GetUrlForArtifact(context.Context, *modeldb.GetUrlForArtifact) (*modeldb.GetUrlForArtifact_Response, error)
	CommitArtifactPart(context.Context, *modeldb.CommitArtifactPart) (*modeldb.CommitArtifactPart_Response, error)
	GetCommittedArtifactParts(context.Context, *modeldb.GetCommittedArtifactParts) (*modeldb.GetCommittedArtifactParts_Response, error)
	CommitMultipartArtifact(context.Context, *modeldb.CommitMultipartArtifact) (*modeldb.CommitMultipartArtifact_Response, error)
	LogDatasetsInModelVersion(context.Context, *LogDatasetsInModelVersion) (*LogDatasetsInModelVersion_Response, error)
	LogCodeVersionFromBlobInModelVersion(context.Context, *LogCodeVersionFromBlobInModelVersion) (*LogCodeVersionFromBlobInModelVersion_Response, error)
	LogAttributesInModelVersion(context.Context, *LogAttributesInModelVersion) (*LogAttributesInModelVersion_Response, error)
}

// UnimplementedRegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceServer struct {
}

func (*UnimplementedRegistryServiceServer) FindRegisteredModel(context.Context, *FindRegisteredModelRequest) (*FindRegisteredModelRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRegisteredModel not implemented")
}
func (*UnimplementedRegistryServiceServer) GetRegisteredModel(context.Context, *GetRegisteredModelRequest) (*GetRegisteredModelRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredModel not implemented")
}
func (*UnimplementedRegistryServiceServer) GetRegisteredModelCount(context.Context, *GetRegisteredModelCountRequest) (*GetRegisteredModelCountRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredModelCount not implemented")
}
func (*UnimplementedRegistryServiceServer) CreateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegisteredModel not implemented")
}
func (*UnimplementedRegistryServiceServer) UpdateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegisteredModel not implemented")
}
func (*UnimplementedRegistryServiceServer) DeleteRegisteredModel(context.Context, *DeleteRegisteredModelRequest) (*DeleteRegisteredModelRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegisteredModel not implemented")
}
func (*UnimplementedRegistryServiceServer) FindModelVersion(context.Context, *FindModelVersionRequest) (*FindModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) GetModelVersion(context.Context, *GetModelVersionRequest) (*GetModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) CreateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) UpdateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) SetLockModelVersion(context.Context, *SetLockModelVersionRequest) (*SetLockModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLockModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*DeleteModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) GetUrlForArtifact(context.Context, *modeldb.GetUrlForArtifact) (*modeldb.GetUrlForArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForArtifact not implemented")
}
func (*UnimplementedRegistryServiceServer) CommitArtifactPart(context.Context, *modeldb.CommitArtifactPart) (*modeldb.CommitArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitArtifactPart not implemented")
}
func (*UnimplementedRegistryServiceServer) GetCommittedArtifactParts(context.Context, *modeldb.GetCommittedArtifactParts) (*modeldb.GetCommittedArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedArtifactParts not implemented")
}
func (*UnimplementedRegistryServiceServer) CommitMultipartArtifact(context.Context, *modeldb.CommitMultipartArtifact) (*modeldb.CommitMultipartArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartArtifact not implemented")
}
func (*UnimplementedRegistryServiceServer) LogDatasetsInModelVersion(context.Context, *LogDatasetsInModelVersion) (*LogDatasetsInModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogDatasetsInModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) LogCodeVersionFromBlobInModelVersion(context.Context, *LogCodeVersionFromBlobInModelVersion) (*LogCodeVersionFromBlobInModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogCodeVersionFromBlobInModelVersion not implemented")
}
func (*UnimplementedRegistryServiceServer) LogAttributesInModelVersion(context.Context, *LogAttributesInModelVersion) (*LogAttributesInModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAttributesInModelVersion not implemented")
}

func RegisterRegistryServiceServer(s *grpc.Server, srv RegistryServiceServer) {
	s.RegisterService(&_RegistryService_serviceDesc, srv)
}

func _RegistryService_FindRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRegisteredModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).FindRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/FindRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).FindRegisteredModel(ctx, req.(*FindRegisteredModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetRegisteredModel(ctx, req.(*GetRegisteredModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetRegisteredModelCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredModelCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetRegisteredModelCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetRegisteredModelCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetRegisteredModelCount(ctx, req.(*GetRegisteredModelCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRegisteredModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/CreateRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateRegisteredModel(ctx, req.(*SetRegisteredModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRegisteredModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/UpdateRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateRegisteredModel(ctx, req.(*SetRegisteredModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/DeleteRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteRegisteredModel(ctx, req.(*DeleteRegisteredModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_FindModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).FindModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/FindModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).FindModelVersion(ctx, req.(*FindModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetModelVersion(ctx, req.(*GetModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/CreateModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateModelVersion(ctx, req.(*SetModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/UpdateModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateModelVersion(ctx, req.(*SetModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_SetLockModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLockModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).SetLockModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/SetLockModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).SetLockModelVersion(ctx, req.(*SetLockModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/DeleteModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteModelVersion(ctx, req.(*DeleteModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetUrlForArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(modeldb.GetUrlForArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetUrlForArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetUrlForArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetUrlForArtifact(ctx, req.(*modeldb.GetUrlForArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CommitArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(modeldb.CommitArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CommitArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/CommitArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CommitArtifactPart(ctx, req.(*modeldb.CommitArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetCommittedArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(modeldb.GetCommittedArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetCommittedArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetCommittedArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetCommittedArtifactParts(ctx, req.(*modeldb.GetCommittedArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CommitMultipartArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(modeldb.CommitMultipartArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CommitMultipartArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/CommitMultipartArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CommitMultipartArtifact(ctx, req.(*modeldb.CommitMultipartArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_LogDatasetsInModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogDatasetsInModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).LogDatasetsInModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/LogDatasetsInModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).LogDatasetsInModelVersion(ctx, req.(*LogDatasetsInModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_LogCodeVersionFromBlobInModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCodeVersionFromBlobInModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).LogCodeVersionFromBlobInModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/LogCodeVersionFromBlobInModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).LogCodeVersionFromBlobInModelVersion(ctx, req.(*LogCodeVersionFromBlobInModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_LogAttributesInModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogAttributesInModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).LogAttributesInModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/LogAttributesInModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).LogAttributesInModelVersion(ctx, req.(*LogAttributesInModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.registry.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindRegisteredModel",
			Handler:    _RegistryService_FindRegisteredModel_Handler,
		},
		{
			MethodName: "GetRegisteredModel",
			Handler:    _RegistryService_GetRegisteredModel_Handler,
		},
		{
			MethodName: "GetRegisteredModelCount",
			Handler:    _RegistryService_GetRegisteredModelCount_Handler,
		},
		{
			MethodName: "CreateRegisteredModel",
			Handler:    _RegistryService_CreateRegisteredModel_Handler,
		},
		{
			MethodName: "UpdateRegisteredModel",
			Handler:    _RegistryService_UpdateRegisteredModel_Handler,
		},
		{
			MethodName: "DeleteRegisteredModel",
			Handler:    _RegistryService_DeleteRegisteredModel_Handler,
		},
		{
			MethodName: "FindModelVersion",
			Handler:    _RegistryService_FindModelVersion_Handler,
		},
		{
			MethodName: "GetModelVersion",
			Handler:    _RegistryService_GetModelVersion_Handler,
		},
		{
			MethodName: "CreateModelVersion",
			Handler:    _RegistryService_CreateModelVersion_Handler,
		},
		{
			MethodName: "UpdateModelVersion",
			Handler:    _RegistryService_UpdateModelVersion_Handler,
		},
		{
			MethodName: "SetLockModelVersion",
			Handler:    _RegistryService_SetLockModelVersion_Handler,
		},
		{
			MethodName: "DeleteModelVersion",
			Handler:    _RegistryService_DeleteModelVersion_Handler,
		},
		{
			MethodName: "getUrlForArtifact",
			Handler:    _RegistryService_GetUrlForArtifact_Handler,
		},
		{
			MethodName: "commitArtifactPart",
			Handler:    _RegistryService_CommitArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedArtifactParts",
			Handler:    _RegistryService_GetCommittedArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartArtifact",
			Handler:    _RegistryService_CommitMultipartArtifact_Handler,
		},
		{
			MethodName: "logDatasetsInModelVersion",
			Handler:    _RegistryService_LogDatasetsInModelVersion_Handler,
		},
		{
			MethodName: "logCodeVersionFromBlobInModelVersion",
			Handler:    _RegistryService_LogCodeVersionFromBlobInModelVersion_Handler,
		},
		{
			MethodName: "logAttributesInModelVersion",
			Handler:    _RegistryService_LogAttributesInModelVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/RegistryService.proto",
}
