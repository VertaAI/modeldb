// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package registry

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChecklistServiceClient is the client API for ChecklistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChecklistServiceClient interface {
	SearchChecklistItemValues(ctx context.Context, in *SearchChecklistItemValues, opts ...grpc.CallOption) (*SearchChecklistItemValues_Response, error)
	SearchChecklistTemplates(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error)
	SearchChecklistTemplatesV1(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error)
	SetChecklistItemValues(ctx context.Context, in *SetChecklistItemValues, opts ...grpc.CallOption) (*SetChecklistItemValues_Response, error)
	SetChecklistTemplate(ctx context.Context, in *SetChecklistTemplate, opts ...grpc.CallOption) (*SetChecklistTemplate_Response, error)
	DeleteChecklistTemplate(ctx context.Context, in *DeleteChecklistTemplate, opts ...grpc.CallOption) (*common.Empty, error)
}

type checklistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChecklistServiceClient(cc grpc.ClientConnInterface) ChecklistServiceClient {
	return &checklistServiceClient{cc}
}

func (c *checklistServiceClient) SearchChecklistItemValues(ctx context.Context, in *SearchChecklistItemValues, opts ...grpc.CallOption) (*SearchChecklistItemValues_Response, error) {
	out := new(SearchChecklistItemValues_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/searchChecklistItemValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SearchChecklistTemplates(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error) {
	out := new(SearchChecklistTemplates_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/searchChecklistTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SearchChecklistTemplatesV1(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error) {
	out := new(SearchChecklistTemplates_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/searchChecklistTemplatesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SetChecklistItemValues(ctx context.Context, in *SetChecklistItemValues, opts ...grpc.CallOption) (*SetChecklistItemValues_Response, error) {
	out := new(SetChecklistItemValues_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/setChecklistItemValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SetChecklistTemplate(ctx context.Context, in *SetChecklistTemplate, opts ...grpc.CallOption) (*SetChecklistTemplate_Response, error) {
	out := new(SetChecklistTemplate_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/setChecklistTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) DeleteChecklistTemplate(ctx context.Context, in *DeleteChecklistTemplate, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/deleteChecklistTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChecklistServiceServer is the server API for ChecklistService service.
type ChecklistServiceServer interface {
	SearchChecklistItemValues(context.Context, *SearchChecklistItemValues) (*SearchChecklistItemValues_Response, error)
	SearchChecklistTemplates(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error)
	SearchChecklistTemplatesV1(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error)
	SetChecklistItemValues(context.Context, *SetChecklistItemValues) (*SetChecklistItemValues_Response, error)
	SetChecklistTemplate(context.Context, *SetChecklistTemplate) (*SetChecklistTemplate_Response, error)
	DeleteChecklistTemplate(context.Context, *DeleteChecklistTemplate) (*common.Empty, error)
}

// UnimplementedChecklistServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChecklistServiceServer struct {
}

func (*UnimplementedChecklistServiceServer) SearchChecklistItemValues(context.Context, *SearchChecklistItemValues) (*SearchChecklistItemValues_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChecklistItemValues not implemented")
}
func (*UnimplementedChecklistServiceServer) SearchChecklistTemplates(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChecklistTemplates not implemented")
}
func (*UnimplementedChecklistServiceServer) SearchChecklistTemplatesV1(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChecklistTemplatesV1 not implemented")
}
func (*UnimplementedChecklistServiceServer) SetChecklistItemValues(context.Context, *SetChecklistItemValues) (*SetChecklistItemValues_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChecklistItemValues not implemented")
}
func (*UnimplementedChecklistServiceServer) SetChecklistTemplate(context.Context, *SetChecklistTemplate) (*SetChecklistTemplate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChecklistTemplate not implemented")
}
func (*UnimplementedChecklistServiceServer) DeleteChecklistTemplate(context.Context, *DeleteChecklistTemplate) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChecklistTemplate not implemented")
}

func RegisterChecklistServiceServer(s *grpc.Server, srv ChecklistServiceServer) {
	s.RegisterService(&_ChecklistService_serviceDesc, srv)
}

func _ChecklistService_SearchChecklistItemValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChecklistItemValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SearchChecklistItemValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SearchChecklistItemValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SearchChecklistItemValues(ctx, req.(*SearchChecklistItemValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SearchChecklistTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChecklistTemplates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SearchChecklistTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SearchChecklistTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SearchChecklistTemplates(ctx, req.(*SearchChecklistTemplates))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SearchChecklistTemplatesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChecklistTemplates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SearchChecklistTemplatesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SearchChecklistTemplatesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SearchChecklistTemplatesV1(ctx, req.(*SearchChecklistTemplates))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SetChecklistItemValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChecklistItemValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SetChecklistItemValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SetChecklistItemValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SetChecklistItemValues(ctx, req.(*SetChecklistItemValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SetChecklistTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChecklistTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SetChecklistTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SetChecklistTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SetChecklistTemplate(ctx, req.(*SetChecklistTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_DeleteChecklistTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChecklistTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).DeleteChecklistTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/DeleteChecklistTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).DeleteChecklistTemplate(ctx, req.(*DeleteChecklistTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChecklistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.registry.ChecklistService",
	HandlerType: (*ChecklistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchChecklistItemValues",
			Handler:    _ChecklistService_SearchChecklistItemValues_Handler,
		},
		{
			MethodName: "searchChecklistTemplates",
			Handler:    _ChecklistService_SearchChecklistTemplates_Handler,
		},
		{
			MethodName: "searchChecklistTemplatesV1",
			Handler:    _ChecklistService_SearchChecklistTemplatesV1_Handler,
		},
		{
			MethodName: "setChecklistItemValues",
			Handler:    _ChecklistService_SetChecklistItemValues_Handler,
		},
		{
			MethodName: "setChecklistTemplate",
			Handler:    _ChecklistService_SetChecklistTemplate_Handler,
		},
		{
			MethodName: "deleteChecklistTemplate",
			Handler:    _ChecklistService_DeleteChecklistTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/ChecklistService.proto",
}
