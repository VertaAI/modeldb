// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.11.2
// source: registry/ChecklistService.proto

package registry

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RiskLevelEnum_RiskLevel int32

const (
	RiskLevelEnum_UNKNOWN RiskLevelEnum_RiskLevel = 0
	RiskLevelEnum_LOW     RiskLevelEnum_RiskLevel = 1
	RiskLevelEnum_MEDIUM  RiskLevelEnum_RiskLevel = 2
	RiskLevelEnum_HIGH    RiskLevelEnum_RiskLevel = 3
)

// Enum value maps for RiskLevelEnum_RiskLevel.
var (
	RiskLevelEnum_RiskLevel_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	RiskLevelEnum_RiskLevel_value = map[string]int32{
		"UNKNOWN": 0,
		"LOW":     1,
		"MEDIUM":  2,
		"HIGH":    3,
	}
)

func (x RiskLevelEnum_RiskLevel) Enum() *RiskLevelEnum_RiskLevel {
	p := new(RiskLevelEnum_RiskLevel)
	*p = x
	return p
}

func (x RiskLevelEnum_RiskLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskLevelEnum_RiskLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_ChecklistService_proto_enumTypes[0].Descriptor()
}

func (RiskLevelEnum_RiskLevel) Type() protoreflect.EnumType {
	return &file_registry_ChecklistService_proto_enumTypes[0]
}

func (x RiskLevelEnum_RiskLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskLevelEnum_RiskLevel.Descriptor instead.
func (RiskLevelEnum_RiskLevel) EnumDescriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{0, 0}
}

type ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType int32

const (
	ChecklistTemplateItemTypeEnum_UNKNOWN  ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType = 0 // error
	ChecklistTemplateItemTypeEnum_SYSTEM   ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType = 1
	ChecklistTemplateItemTypeEnum_CHECKBOX ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType = 2
	ChecklistTemplateItemTypeEnum_WORKFLOW ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType = 3
)

// Enum value maps for ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType.
var (
	ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SYSTEM",
		2: "CHECKBOX",
		3: "WORKFLOW",
	}
	ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType_value = map[string]int32{
		"UNKNOWN":  0,
		"SYSTEM":   1,
		"CHECKBOX": 2,
		"WORKFLOW": 3,
	}
)

func (x ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType) Enum() *ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType {
	p := new(ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType)
	*p = x
	return p
}

func (x ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_ChecklistService_proto_enumTypes[1].Descriptor()
}

func (ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType) Type() protoreflect.EnumType {
	return &file_registry_ChecklistService_proto_enumTypes[1]
}

func (x ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType.Descriptor instead.
func (ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType) EnumDescriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{1, 0}
}

type EditableEnum_Editable int32

const (
	EditableEnum_UNKNOWN          EditableEnum_Editable = 0 // error
	EditableEnum_NOT_EDITABLE     EditableEnum_Editable = 1
	EditableEnum_PARTIAL_EDITABLE EditableEnum_Editable = 2
	EditableEnum_EDITABLE         EditableEnum_Editable = 3
)

// Enum value maps for EditableEnum_Editable.
var (
	EditableEnum_Editable_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOT_EDITABLE",
		2: "PARTIAL_EDITABLE",
		3: "EDITABLE",
	}
	EditableEnum_Editable_value = map[string]int32{
		"UNKNOWN":          0,
		"NOT_EDITABLE":     1,
		"PARTIAL_EDITABLE": 2,
		"EDITABLE":         3,
	}
)

func (x EditableEnum_Editable) Enum() *EditableEnum_Editable {
	p := new(EditableEnum_Editable)
	*p = x
	return p
}

func (x EditableEnum_Editable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditableEnum_Editable) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_ChecklistService_proto_enumTypes[2].Descriptor()
}

func (EditableEnum_Editable) Type() protoreflect.EnumType {
	return &file_registry_ChecklistService_proto_enumTypes[2]
}

func (x EditableEnum_Editable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditableEnum_Editable.Descriptor instead.
func (EditableEnum_Editable) EnumDescriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{2, 0}
}

type RiskLevelEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RiskLevelEnum) Reset() {
	*x = RiskLevelEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskLevelEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskLevelEnum) ProtoMessage() {}

func (x *RiskLevelEnum) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskLevelEnum.ProtoReflect.Descriptor instead.
func (*RiskLevelEnum) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{0}
}

type ChecklistTemplateItemTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChecklistTemplateItemTypeEnum) Reset() {
	*x = ChecklistTemplateItemTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChecklistTemplateItemTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecklistTemplateItemTypeEnum) ProtoMessage() {}

func (x *ChecklistTemplateItemTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecklistTemplateItemTypeEnum.ProtoReflect.Descriptor instead.
func (*ChecklistTemplateItemTypeEnum) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{1}
}

type EditableEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EditableEnum) Reset() {
	*x = EditableEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditableEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditableEnum) ProtoMessage() {}

func (x *EditableEnum) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditableEnum.ProtoReflect.Descriptor instead.
func (*EditableEnum) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{2}
}

type ChecklistTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// flag for blocking deploy without all requiments satisfied
	BlocksDeployment bool `protobuf:"varint,3,opt,name=blocks_deployment,json=blocksDeployment,proto3" json:"blocks_deployment,omitempty"`
	// apply checklist a certain stage change of model version
	DesiredStage StageEnum_Stage `protobuf:"varint,4,opt,name=desired_stage,json=desiredStage,proto3,enum=ai.verta.registry.StageEnum_Stage" json:"desired_stage,omitempty"`
	// apply checklist a certain risk level of model version
	ApplyToRiskLevel RiskLevelEnum_RiskLevel `protobuf:"varint,5,opt,name=apply_to_risk_level,json=applyToRiskLevel,proto3,enum=ai.verta.registry.RiskLevelEnum_RiskLevel" json:"apply_to_risk_level,omitempty"`
	// ID of organization that template belongs
	OrganizationId string `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Timestamp recorded when this entity was created
	TimeCreated int64 `protobuf:"varint,7,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	// Timestamp recorded when metadata for this entity was last updated
	TimeUpdated int64 `protobuf:"varint,8,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	// id of user(UAC) that created this entity
	CreatedById uint64 `protobuf:"varint,9,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// id of user(UAC) that updated this entity
	UpdatedById uint64 `protobuf:"varint,10,opt,name=updated_by_id,json=updatedById,proto3" json:"updated_by_id,omitempty"`
	// Sort value to be used in the UI
	Sort int64 `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	// Checklist template item
	ChecklistTemplateItems []*ChecklistTemplateItem `protobuf:"bytes,12,rep,name=checklist_template_items,json=checklistTemplateItems,proto3" json:"checklist_template_items,omitempty"`
	// Checklist template value. This is used to apply checklists to only RMVs that have the values. optional.
	CustomAttributeValues []*CustomAttributeValue `protobuf:"bytes,13,rep,name=custom_attribute_values,json=customAttributeValues,proto3" json:"custom_attribute_values,omitempty"`
}

func (x *ChecklistTemplate) Reset() {
	*x = ChecklistTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChecklistTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecklistTemplate) ProtoMessage() {}

func (x *ChecklistTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecklistTemplate.ProtoReflect.Descriptor instead.
func (*ChecklistTemplate) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{3}
}

func (x *ChecklistTemplate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChecklistTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChecklistTemplate) GetBlocksDeployment() bool {
	if x != nil {
		return x.BlocksDeployment
	}
	return false
}

func (x *ChecklistTemplate) GetDesiredStage() StageEnum_Stage {
	if x != nil {
		return x.DesiredStage
	}
	return StageEnum_UNKNOWN
}

func (x *ChecklistTemplate) GetApplyToRiskLevel() RiskLevelEnum_RiskLevel {
	if x != nil {
		return x.ApplyToRiskLevel
	}
	return RiskLevelEnum_UNKNOWN
}

func (x *ChecklistTemplate) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ChecklistTemplate) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *ChecklistTemplate) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

func (x *ChecklistTemplate) GetCreatedById() uint64 {
	if x != nil {
		return x.CreatedById
	}
	return 0
}

func (x *ChecklistTemplate) GetUpdatedById() uint64 {
	if x != nil {
		return x.UpdatedById
	}
	return 0
}

func (x *ChecklistTemplate) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ChecklistTemplate) GetChecklistTemplateItems() []*ChecklistTemplateItem {
	if x != nil {
		return x.ChecklistTemplateItems
	}
	return nil
}

func (x *ChecklistTemplate) GetCustomAttributeValues() []*CustomAttributeValue {
	if x != nil {
		return x.CustomAttributeValues
	}
	return nil
}

type ChecklistTemplateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// item type
	ItemType ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType `protobuf:"varint,4,opt,name=item_type,json=itemType,proto3,enum=ai.verta.registry.ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType" json:"item_type,omitempty"`
	// editable
	Editable EditableEnum_Editable `protobuf:"varint,5,opt,name=editable,proto3,enum=ai.verta.registry.EditableEnum_Editable" json:"editable,omitempty"`
	// flag for item as required
	Required bool `protobuf:"varint,6,opt,name=required,proto3" json:"required,omitempty"`
	// flag for asking for evidence
	RequireEvidence bool `protobuf:"varint,7,opt,name=require_evidence,json=requireEvidence,proto3" json:"require_evidence,omitempty"`
	// User group id
	UserGroupId string `protobuf:"bytes,8,opt,name=user_group_id,json=userGroupId,proto3" json:"user_group_id,omitempty"`
	// checklist template id
	ChecklistTemplateId uint64 `protobuf:"varint,9,opt,name=checklist_template_id,json=checklistTemplateId,proto3" json:"checklist_template_id,omitempty"`
	// Timestamp recorded when this entity was created
	TimeCreated int64 `protobuf:"varint,10,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	// Timestamp recorded when metadata for this entity was last updated
	TimeUpdated int64 `protobuf:"varint,11,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	// id of user(UAC) that created this entity
	CreatedById uint64 `protobuf:"varint,12,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// id of user(UAC) that updated this entity
	UpdatedById uint64 `protobuf:"varint,13,opt,name=updated_by_id,json=updatedById,proto3" json:"updated_by_id,omitempty"`
	// Sort value to be used in the UI
	Sort int64 `protobuf:"varint,14,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ChecklistTemplateItem) Reset() {
	*x = ChecklistTemplateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChecklistTemplateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecklistTemplateItem) ProtoMessage() {}

func (x *ChecklistTemplateItem) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecklistTemplateItem.ProtoReflect.Descriptor instead.
func (*ChecklistTemplateItem) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{4}
}

func (x *ChecklistTemplateItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChecklistTemplateItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChecklistTemplateItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChecklistTemplateItem) GetItemType() ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType {
	if x != nil {
		return x.ItemType
	}
	return ChecklistTemplateItemTypeEnum_UNKNOWN
}

func (x *ChecklistTemplateItem) GetEditable() EditableEnum_Editable {
	if x != nil {
		return x.Editable
	}
	return EditableEnum_UNKNOWN
}

func (x *ChecklistTemplateItem) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ChecklistTemplateItem) GetRequireEvidence() bool {
	if x != nil {
		return x.RequireEvidence
	}
	return false
}

func (x *ChecklistTemplateItem) GetUserGroupId() string {
	if x != nil {
		return x.UserGroupId
	}
	return ""
}

func (x *ChecklistTemplateItem) GetChecklistTemplateId() uint64 {
	if x != nil {
		return x.ChecklistTemplateId
	}
	return 0
}

func (x *ChecklistTemplateItem) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *ChecklistTemplateItem) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

func (x *ChecklistTemplateItem) GetCreatedById() uint64 {
	if x != nil {
		return x.CreatedById
	}
	return 0
}

func (x *ChecklistTemplateItem) GetUpdatedById() uint64 {
	if x != nil {
		return x.UpdatedById
	}
	return 0
}

func (x *ChecklistTemplateItem) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type ChecklistItemValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// value corresponds to if the item was marked as completed
	Completed bool `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	// value corresponds to user given evidence
	Evidence string `protobuf:"bytes,3,opt,name=evidence,proto3" json:"evidence,omitempty"`
	// id of the model version this belongs to
	ModelVersionId uint64 `protobuf:"varint,4,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	// id of the template(UAC) this is related to
	ChecklistTemplateId uint64 `protobuf:"varint,5,opt,name=checklist_template_id,json=checklistTemplateId,proto3" json:"checklist_template_id,omitempty"`
	// id of the template item (UAC) this is related to
	ChecklistTemplateItemId uint64 `protobuf:"varint,6,opt,name=checklist_template_item_id,json=checklistTemplateItemId,proto3" json:"checklist_template_item_id,omitempty"`
	// Timestamp recorded when this entity was created
	TimeCreated int64 `protobuf:"varint,7,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	// Timestamp recorded when metadata for this entity was last updated
	TimeUpdated int64 `protobuf:"varint,8,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	// id of user(UAC) that created this entity
	CreatedById uint64 `protobuf:"varint,9,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// id of user(UAC) that updated this entity
	UpdatedById uint64 `protobuf:"varint,10,opt,name=updated_by_id,json=updatedById,proto3" json:"updated_by_id,omitempty"`
}

func (x *ChecklistItemValue) Reset() {
	*x = ChecklistItemValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChecklistItemValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecklistItemValue) ProtoMessage() {}

func (x *ChecklistItemValue) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecklistItemValue.ProtoReflect.Descriptor instead.
func (*ChecklistItemValue) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{5}
}

func (x *ChecklistItemValue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChecklistItemValue) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *ChecklistItemValue) GetEvidence() string {
	if x != nil {
		return x.Evidence
	}
	return ""
}

func (x *ChecklistItemValue) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

func (x *ChecklistItemValue) GetChecklistTemplateId() uint64 {
	if x != nil {
		return x.ChecklistTemplateId
	}
	return 0
}

func (x *ChecklistItemValue) GetChecklistTemplateItemId() uint64 {
	if x != nil {
		return x.ChecklistTemplateItemId
	}
	return 0
}

func (x *ChecklistItemValue) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *ChecklistItemValue) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

func (x *ChecklistItemValue) GetCreatedById() uint64 {
	if x != nil {
		return x.CreatedById
	}
	return 0
}

func (x *ChecklistItemValue) GetUpdatedById() uint64 {
	if x != nil {
		return x.UpdatedById
	}
	return 0
}

type SetChecklistItemValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersionId      uint64                `protobuf:"varint,1,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	ChecklistItemValues []*ChecklistItemValue `protobuf:"bytes,2,rep,name=checklist_item_values,json=checklistItemValues,proto3" json:"checklist_item_values,omitempty"`
}

func (x *SetChecklistItemValues) Reset() {
	*x = SetChecklistItemValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChecklistItemValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChecklistItemValues) ProtoMessage() {}

func (x *SetChecklistItemValues) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChecklistItemValues.ProtoReflect.Descriptor instead.
func (*SetChecklistItemValues) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{6}
}

func (x *SetChecklistItemValues) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

func (x *SetChecklistItemValues) GetChecklistItemValues() []*ChecklistItemValue {
	if x != nil {
		return x.ChecklistItemValues
	}
	return nil
}

type SearchChecklistItemValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identity of parent registered model version
	ModelVersionId uint64 `protobuf:"varint,1,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
}

func (x *SearchChecklistItemValues) Reset() {
	*x = SearchChecklistItemValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChecklistItemValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChecklistItemValues) ProtoMessage() {}

func (x *SearchChecklistItemValues) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChecklistItemValues.ProtoReflect.Descriptor instead.
func (*SearchChecklistItemValues) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{7}
}

func (x *SearchChecklistItemValues) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

type SearchChecklistTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id
	ChecklistTemplateId uint64 `protobuf:"varint,1,opt,name=checklist_template_id,json=checklistTemplateId,proto3" json:"checklist_template_id,omitempty"`
	// workspace id
	WorkspaceId uint64 `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// workspace name
	WorkspaceName string `protobuf:"bytes,3,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	// organization id
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// model version id.  optional
	ModelVersionId uint64 `protobuf:"varint,5,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
}

func (x *SearchChecklistTemplates) Reset() {
	*x = SearchChecklistTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChecklistTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChecklistTemplates) ProtoMessage() {}

func (x *SearchChecklistTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChecklistTemplates.ProtoReflect.Descriptor instead.
func (*SearchChecklistTemplates) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{8}
}

func (x *SearchChecklistTemplates) GetChecklistTemplateId() uint64 {
	if x != nil {
		return x.ChecklistTemplateId
	}
	return 0
}

func (x *SearchChecklistTemplates) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (x *SearchChecklistTemplates) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *SearchChecklistTemplates) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *SearchChecklistTemplates) GetModelVersionId() uint64 {
	if x != nil {
		return x.ModelVersionId
	}
	return 0
}

type SetChecklistTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChecklistTemplate *ChecklistTemplate `protobuf:"bytes,1,opt,name=checklist_template,json=checklistTemplate,proto3" json:"checklist_template,omitempty"`
}

func (x *SetChecklistTemplate) Reset() {
	*x = SetChecklistTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChecklistTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChecklistTemplate) ProtoMessage() {}

func (x *SetChecklistTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChecklistTemplate.ProtoReflect.Descriptor instead.
func (*SetChecklistTemplate) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{9}
}

func (x *SetChecklistTemplate) GetChecklistTemplate() *ChecklistTemplate {
	if x != nil {
		return x.ChecklistTemplate
	}
	return nil
}

type DeleteChecklistTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id
	ChecklistTemplateId uint64 `protobuf:"varint,1,opt,name=checklist_template_id,json=checklistTemplateId,proto3" json:"checklist_template_id,omitempty"`
}

func (x *DeleteChecklistTemplate) Reset() {
	*x = DeleteChecklistTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChecklistTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChecklistTemplate) ProtoMessage() {}

func (x *DeleteChecklistTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChecklistTemplate.ProtoReflect.Descriptor instead.
func (*DeleteChecklistTemplate) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteChecklistTemplate) GetChecklistTemplateId() uint64 {
	if x != nil {
		return x.ChecklistTemplateId
	}
	return 0
}

type SetChecklistItemValues_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChecklistItemValues []*ChecklistItemValue `protobuf:"bytes,1,rep,name=checklist_item_values,json=checklistItemValues,proto3" json:"checklist_item_values,omitempty"`
}

func (x *SetChecklistItemValues_Response) Reset() {
	*x = SetChecklistItemValues_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChecklistItemValues_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChecklistItemValues_Response) ProtoMessage() {}

func (x *SetChecklistItemValues_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChecklistItemValues_Response.ProtoReflect.Descriptor instead.
func (*SetChecklistItemValues_Response) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SetChecklistItemValues_Response) GetChecklistItemValues() []*ChecklistItemValue {
	if x != nil {
		return x.ChecklistItemValues
	}
	return nil
}

type SearchChecklistItemValues_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChecklistItemValues []*ChecklistItemValue `protobuf:"bytes,1,rep,name=checklist_item_values,json=checklistItemValues,proto3" json:"checklist_item_values,omitempty"`
}

func (x *SearchChecklistItemValues_Response) Reset() {
	*x = SearchChecklistItemValues_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChecklistItemValues_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChecklistItemValues_Response) ProtoMessage() {}

func (x *SearchChecklistItemValues_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChecklistItemValues_Response.ProtoReflect.Descriptor instead.
func (*SearchChecklistItemValues_Response) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SearchChecklistItemValues_Response) GetChecklistItemValues() []*ChecklistItemValue {
	if x != nil {
		return x.ChecklistItemValues
	}
	return nil
}

type SearchChecklistTemplates_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChecklistTemplates []*ChecklistTemplate `protobuf:"bytes,1,rep,name=checklist_templates,json=checklistTemplates,proto3" json:"checklist_templates,omitempty"`
}

func (x *SearchChecklistTemplates_Response) Reset() {
	*x = SearchChecklistTemplates_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChecklistTemplates_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChecklistTemplates_Response) ProtoMessage() {}

func (x *SearchChecklistTemplates_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChecklistTemplates_Response.ProtoReflect.Descriptor instead.
func (*SearchChecklistTemplates_Response) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SearchChecklistTemplates_Response) GetChecklistTemplates() []*ChecklistTemplate {
	if x != nil {
		return x.ChecklistTemplates
	}
	return nil
}

type SetChecklistTemplate_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChecklistTemplate *ChecklistTemplate `protobuf:"bytes,1,opt,name=checklist_template,json=checklistTemplate,proto3" json:"checklist_template,omitempty"`
}

func (x *SetChecklistTemplate_Response) Reset() {
	*x = SetChecklistTemplate_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_ChecklistService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChecklistTemplate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChecklistTemplate_Response) ProtoMessage() {}

func (x *SetChecklistTemplate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_registry_ChecklistService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChecklistTemplate_Response.ProtoReflect.Descriptor instead.
func (*SetChecklistTemplate_Response) Descriptor() ([]byte, []int) {
	return file_registry_ChecklistService_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SetChecklistTemplate_Response) GetChecklistTemplate() *ChecklistTemplate {
	if x != nil {
		return x.ChecklistTemplate
	}
	return nil
}

var File_registry_ChecklistService_proto protoreflect.FileDescriptor

var file_registry_ChecklistService_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x48, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x22, 0x37, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x22, 0x71, 0x0a, 0x1d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x50, 0x0a,
	0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x42, 0x4f, 0x58, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22,
	0x5d, 0x0a, 0x0c, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22,
	0x4d, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x98,
	0x05, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x59,
	0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xcd, 0x04, 0x0a, 0x15, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x87, 0x03, 0x0a, 0x12, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x1a, 0x65, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x18, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x5f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x4d, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x32, 0xf5, 0x08, 0x0a, 0x10, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x02,
	0x0a, 0x19, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x50, 0x22, 0x4b, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x18, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xb3,
	0x01, 0x0a, 0x1a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x56, 0x31, 0x12, 0x2b, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x01, 0x2a, 0x12, 0xa6, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01,
	0x0a, 0x14, 0x73, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a,
	0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9f,
	0x01, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x42, 0x43, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registry_ChecklistService_proto_rawDescOnce sync.Once
	file_registry_ChecklistService_proto_rawDescData = file_registry_ChecklistService_proto_rawDesc
)

func file_registry_ChecklistService_proto_rawDescGZIP() []byte {
	file_registry_ChecklistService_proto_rawDescOnce.Do(func() {
		file_registry_ChecklistService_proto_rawDescData = protoimpl.X.CompressGZIP(file_registry_ChecklistService_proto_rawDescData)
	})
	return file_registry_ChecklistService_proto_rawDescData
}

var file_registry_ChecklistService_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_registry_ChecklistService_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_registry_ChecklistService_proto_goTypes = []interface{}{
	(RiskLevelEnum_RiskLevel)(0),                                 // 0: ai.verta.registry.RiskLevelEnum.RiskLevel
	(ChecklistTemplateItemTypeEnum_ChecklistTemplateItemType)(0), // 1: ai.verta.registry.ChecklistTemplateItemTypeEnum.ChecklistTemplateItemType
	(EditableEnum_Editable)(0),                                   // 2: ai.verta.registry.EditableEnum.Editable
	(*RiskLevelEnum)(nil),                                        // 3: ai.verta.registry.RiskLevelEnum
	(*ChecklistTemplateItemTypeEnum)(nil),                        // 4: ai.verta.registry.ChecklistTemplateItemTypeEnum
	(*EditableEnum)(nil),                                         // 5: ai.verta.registry.EditableEnum
	(*ChecklistTemplate)(nil),                                    // 6: ai.verta.registry.ChecklistTemplate
	(*ChecklistTemplateItem)(nil),                                // 7: ai.verta.registry.ChecklistTemplateItem
	(*ChecklistItemValue)(nil),                                   // 8: ai.verta.registry.ChecklistItemValue
	(*SetChecklistItemValues)(nil),                               // 9: ai.verta.registry.SetChecklistItemValues
	(*SearchChecklistItemValues)(nil),                            // 10: ai.verta.registry.SearchChecklistItemValues
	(*SearchChecklistTemplates)(nil),                             // 11: ai.verta.registry.SearchChecklistTemplates
	(*SetChecklistTemplate)(nil),                                 // 12: ai.verta.registry.SetChecklistTemplate
	(*DeleteChecklistTemplate)(nil),                              // 13: ai.verta.registry.DeleteChecklistTemplate
	(*SetChecklistItemValues_Response)(nil),                      // 14: ai.verta.registry.SetChecklistItemValues.Response
	(*SearchChecklistItemValues_Response)(nil),                   // 15: ai.verta.registry.SearchChecklistItemValues.Response
	(*SearchChecklistTemplates_Response)(nil),                    // 16: ai.verta.registry.SearchChecklistTemplates.Response
	(*SetChecklistTemplate_Response)(nil),                        // 17: ai.verta.registry.SetChecklistTemplate.Response
	(StageEnum_Stage)(0),                                         // 18: ai.verta.registry.StageEnum.Stage
	(*CustomAttributeValue)(nil),                                 // 19: ai.verta.registry.CustomAttributeValue
	(*common.Empty)(nil),                                         // 20: ai.verta.common.Empty
}
var file_registry_ChecklistService_proto_depIdxs = []int32{
	18, // 0: ai.verta.registry.ChecklistTemplate.desired_stage:type_name -> ai.verta.registry.StageEnum.Stage
	0,  // 1: ai.verta.registry.ChecklistTemplate.apply_to_risk_level:type_name -> ai.verta.registry.RiskLevelEnum.RiskLevel
	7,  // 2: ai.verta.registry.ChecklistTemplate.checklist_template_items:type_name -> ai.verta.registry.ChecklistTemplateItem
	19, // 3: ai.verta.registry.ChecklistTemplate.custom_attribute_values:type_name -> ai.verta.registry.CustomAttributeValue
	1,  // 4: ai.verta.registry.ChecklistTemplateItem.item_type:type_name -> ai.verta.registry.ChecklistTemplateItemTypeEnum.ChecklistTemplateItemType
	2,  // 5: ai.verta.registry.ChecklistTemplateItem.editable:type_name -> ai.verta.registry.EditableEnum.Editable
	8,  // 6: ai.verta.registry.SetChecklistItemValues.checklist_item_values:type_name -> ai.verta.registry.ChecklistItemValue
	6,  // 7: ai.verta.registry.SetChecklistTemplate.checklist_template:type_name -> ai.verta.registry.ChecklistTemplate
	8,  // 8: ai.verta.registry.SetChecklistItemValues.Response.checklist_item_values:type_name -> ai.verta.registry.ChecklistItemValue
	8,  // 9: ai.verta.registry.SearchChecklistItemValues.Response.checklist_item_values:type_name -> ai.verta.registry.ChecklistItemValue
	6,  // 10: ai.verta.registry.SearchChecklistTemplates.Response.checklist_templates:type_name -> ai.verta.registry.ChecklistTemplate
	6,  // 11: ai.verta.registry.SetChecklistTemplate.Response.checklist_template:type_name -> ai.verta.registry.ChecklistTemplate
	10, // 12: ai.verta.registry.ChecklistService.searchChecklistItemValues:input_type -> ai.verta.registry.SearchChecklistItemValues
	11, // 13: ai.verta.registry.ChecklistService.searchChecklistTemplates:input_type -> ai.verta.registry.SearchChecklistTemplates
	11, // 14: ai.verta.registry.ChecklistService.searchChecklistTemplatesV1:input_type -> ai.verta.registry.SearchChecklistTemplates
	9,  // 15: ai.verta.registry.ChecklistService.setChecklistItemValues:input_type -> ai.verta.registry.SetChecklistItemValues
	12, // 16: ai.verta.registry.ChecklistService.setChecklistTemplate:input_type -> ai.verta.registry.SetChecklistTemplate
	13, // 17: ai.verta.registry.ChecklistService.deleteChecklistTemplate:input_type -> ai.verta.registry.DeleteChecklistTemplate
	15, // 18: ai.verta.registry.ChecklistService.searchChecklistItemValues:output_type -> ai.verta.registry.SearchChecklistItemValues.Response
	16, // 19: ai.verta.registry.ChecklistService.searchChecklistTemplates:output_type -> ai.verta.registry.SearchChecklistTemplates.Response
	16, // 20: ai.verta.registry.ChecklistService.searchChecklistTemplatesV1:output_type -> ai.verta.registry.SearchChecklistTemplates.Response
	14, // 21: ai.verta.registry.ChecklistService.setChecklistItemValues:output_type -> ai.verta.registry.SetChecklistItemValues.Response
	17, // 22: ai.verta.registry.ChecklistService.setChecklistTemplate:output_type -> ai.verta.registry.SetChecklistTemplate.Response
	20, // 23: ai.verta.registry.ChecklistService.deleteChecklistTemplate:output_type -> ai.verta.common.Empty
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_registry_ChecklistService_proto_init() }
func file_registry_ChecklistService_proto_init() {
	if File_registry_ChecklistService_proto != nil {
		return
	}
	file_registry_StageService_proto_init()
	file_registry_CustomAttributeService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_registry_ChecklistService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskLevelEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChecklistTemplateItemTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditableEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChecklistTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChecklistTemplateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChecklistItemValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChecklistItemValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChecklistItemValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChecklistTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChecklistTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChecklistTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChecklistItemValues_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChecklistItemValues_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChecklistTemplates_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_ChecklistService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChecklistTemplate_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registry_ChecklistService_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registry_ChecklistService_proto_goTypes,
		DependencyIndexes: file_registry_ChecklistService_proto_depIdxs,
		EnumInfos:         file_registry_ChecklistService_proto_enumTypes,
		MessageInfos:      file_registry_ChecklistService_proto_msgTypes,
	}.Build()
	File_registry_ChecklistService_proto = out.File
	file_registry_ChecklistService_proto_rawDesc = nil
	file_registry_ChecklistService_proto_goTypes = nil
	file_registry_ChecklistService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChecklistServiceClient is the client API for ChecklistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChecklistServiceClient interface {
	SearchChecklistItemValues(ctx context.Context, in *SearchChecklistItemValues, opts ...grpc.CallOption) (*SearchChecklistItemValues_Response, error)
	SearchChecklistTemplates(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error)
	SearchChecklistTemplatesV1(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error)
	SetChecklistItemValues(ctx context.Context, in *SetChecklistItemValues, opts ...grpc.CallOption) (*SetChecklistItemValues_Response, error)
	SetChecklistTemplate(ctx context.Context, in *SetChecklistTemplate, opts ...grpc.CallOption) (*SetChecklistTemplate_Response, error)
	DeleteChecklistTemplate(ctx context.Context, in *DeleteChecklistTemplate, opts ...grpc.CallOption) (*common.Empty, error)
}

type checklistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChecklistServiceClient(cc grpc.ClientConnInterface) ChecklistServiceClient {
	return &checklistServiceClient{cc}
}

func (c *checklistServiceClient) SearchChecklistItemValues(ctx context.Context, in *SearchChecklistItemValues, opts ...grpc.CallOption) (*SearchChecklistItemValues_Response, error) {
	out := new(SearchChecklistItemValues_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/searchChecklistItemValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SearchChecklistTemplates(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error) {
	out := new(SearchChecklistTemplates_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/searchChecklistTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SearchChecklistTemplatesV1(ctx context.Context, in *SearchChecklistTemplates, opts ...grpc.CallOption) (*SearchChecklistTemplates_Response, error) {
	out := new(SearchChecklistTemplates_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/searchChecklistTemplatesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SetChecklistItemValues(ctx context.Context, in *SetChecklistItemValues, opts ...grpc.CallOption) (*SetChecklistItemValues_Response, error) {
	out := new(SetChecklistItemValues_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/setChecklistItemValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) SetChecklistTemplate(ctx context.Context, in *SetChecklistTemplate, opts ...grpc.CallOption) (*SetChecklistTemplate_Response, error) {
	out := new(SetChecklistTemplate_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/setChecklistTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) DeleteChecklistTemplate(ctx context.Context, in *DeleteChecklistTemplate, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.ChecklistService/deleteChecklistTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChecklistServiceServer is the server API for ChecklistService service.
type ChecklistServiceServer interface {
	SearchChecklistItemValues(context.Context, *SearchChecklistItemValues) (*SearchChecklistItemValues_Response, error)
	SearchChecklistTemplates(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error)
	SearchChecklistTemplatesV1(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error)
	SetChecklistItemValues(context.Context, *SetChecklistItemValues) (*SetChecklistItemValues_Response, error)
	SetChecklistTemplate(context.Context, *SetChecklistTemplate) (*SetChecklistTemplate_Response, error)
	DeleteChecklistTemplate(context.Context, *DeleteChecklistTemplate) (*common.Empty, error)
}

// UnimplementedChecklistServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChecklistServiceServer struct {
}

func (*UnimplementedChecklistServiceServer) SearchChecklistItemValues(context.Context, *SearchChecklistItemValues) (*SearchChecklistItemValues_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChecklistItemValues not implemented")
}
func (*UnimplementedChecklistServiceServer) SearchChecklistTemplates(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChecklistTemplates not implemented")
}
func (*UnimplementedChecklistServiceServer) SearchChecklistTemplatesV1(context.Context, *SearchChecklistTemplates) (*SearchChecklistTemplates_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChecklistTemplatesV1 not implemented")
}
func (*UnimplementedChecklistServiceServer) SetChecklistItemValues(context.Context, *SetChecklistItemValues) (*SetChecklistItemValues_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChecklistItemValues not implemented")
}
func (*UnimplementedChecklistServiceServer) SetChecklistTemplate(context.Context, *SetChecklistTemplate) (*SetChecklistTemplate_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChecklistTemplate not implemented")
}
func (*UnimplementedChecklistServiceServer) DeleteChecklistTemplate(context.Context, *DeleteChecklistTemplate) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChecklistTemplate not implemented")
}

func RegisterChecklistServiceServer(s *grpc.Server, srv ChecklistServiceServer) {
	s.RegisterService(&_ChecklistService_serviceDesc, srv)
}

func _ChecklistService_SearchChecklistItemValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChecklistItemValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SearchChecklistItemValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SearchChecklistItemValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SearchChecklistItemValues(ctx, req.(*SearchChecklistItemValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SearchChecklistTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChecklistTemplates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SearchChecklistTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SearchChecklistTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SearchChecklistTemplates(ctx, req.(*SearchChecklistTemplates))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SearchChecklistTemplatesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChecklistTemplates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SearchChecklistTemplatesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SearchChecklistTemplatesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SearchChecklistTemplatesV1(ctx, req.(*SearchChecklistTemplates))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SetChecklistItemValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChecklistItemValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SetChecklistItemValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SetChecklistItemValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SetChecklistItemValues(ctx, req.(*SetChecklistItemValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_SetChecklistTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChecklistTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).SetChecklistTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/SetChecklistTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).SetChecklistTemplate(ctx, req.(*SetChecklistTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_DeleteChecklistTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChecklistTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).DeleteChecklistTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.ChecklistService/DeleteChecklistTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).DeleteChecklistTemplate(ctx, req.(*DeleteChecklistTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChecklistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.registry.ChecklistService",
	HandlerType: (*ChecklistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchChecklistItemValues",
			Handler:    _ChecklistService_SearchChecklistItemValues_Handler,
		},
		{
			MethodName: "searchChecklistTemplates",
			Handler:    _ChecklistService_SearchChecklistTemplates_Handler,
		},
		{
			MethodName: "searchChecklistTemplatesV1",
			Handler:    _ChecklistService_SearchChecklistTemplatesV1_Handler,
		},
		{
			MethodName: "setChecklistItemValues",
			Handler:    _ChecklistService_SetChecklistItemValues_Handler,
		},
		{
			MethodName: "setChecklistTemplate",
			Handler:    _ChecklistService_SetChecklistTemplate_Handler,
		},
		{
			MethodName: "deleteChecklistTemplate",
			Handler:    _ChecklistService_DeleteChecklistTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/ChecklistService.proto",
}
