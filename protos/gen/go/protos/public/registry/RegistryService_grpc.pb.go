// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: registry/RegistryService.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceClient interface {
	// CRUD for RegisteredModel
	FindRegisteredModel(ctx context.Context, in *FindRegisteredModelRequest, opts ...grpc.CallOption) (*FindRegisteredModelRequest_Response, error)
	GetRegisteredModel(ctx context.Context, in *GetRegisteredModelRequest, opts ...grpc.CallOption) (*GetRegisteredModelRequest_Response, error)
	GetRegisteredModelCount(ctx context.Context, in *GetRegisteredModelCountRequest, opts ...grpc.CallOption) (*GetRegisteredModelCountRequest_Response, error)
	CreateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error)
	UpdateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error)
	DeleteRegisteredModel(ctx context.Context, in *DeleteRegisteredModelRequest, opts ...grpc.CallOption) (*DeleteRegisteredModelRequest_Response, error)
	//CRUD for Model Version
	FindModelVersion(ctx context.Context, in *FindModelVersionRequest, opts ...grpc.CallOption) (*FindModelVersionRequest_Response, error)
	GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*GetModelVersionRequest_Response, error)
	CreateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error)
	UpdateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error)
	SetLockModelVersion(ctx context.Context, in *SetLockModelVersionRequest, opts ...grpc.CallOption) (*SetLockModelVersionRequest_Response, error)
	DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*DeleteModelVersionRequest_Response, error)
	GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error)
	CommitArtifactPart(ctx context.Context, in *CommitArtifactPart, opts ...grpc.CallOption) (*CommitArtifactPart_Response, error)
	GetCommittedArtifactParts(ctx context.Context, in *GetCommittedArtifactParts, opts ...grpc.CallOption) (*GetCommittedArtifactParts_Response, error)
	CommitMultipartArtifact(ctx context.Context, in *CommitMultipartArtifact, opts ...grpc.CallOption) (*CommitMultipartArtifact_Response, error)
	LogDatasetsInModelVersion(ctx context.Context, in *LogDatasetsInModelVersion, opts ...grpc.CallOption) (*LogDatasetsInModelVersion_Response, error)
	LogCodeBlobInModelVersion(ctx context.Context, in *LogCodeBlobInModelVersion, opts ...grpc.CallOption) (*LogCodeBlobInModelVersion_Response, error)
	LogAttributesInModelVersion(ctx context.Context, in *LogAttributesInModelVersion, opts ...grpc.CallOption) (*LogAttributesInModelVersion_Response, error)
	LogDockerMetadataInModelVersion(ctx context.Context, in *LogDockerMetadataInModelVersion, opts ...grpc.CallOption) (*LogDockerMetadataInModelVersion_Response, error)
	GetExternalDeployment(ctx context.Context, in *ExternalDeploymentRequest, opts ...grpc.CallOption) (*ExternalDeploymentRequest_Response, error)
	CreateExternalDeployment(ctx context.Context, in *ExternalDeployment, opts ...grpc.CallOption) (*ExternalDeploymentRequest_Response, error)
	UpdateExternalDeployment(ctx context.Context, in *ExternalDeployment, opts ...grpc.CallOption) (*ExternalDeploymentRequest_Response, error)
	DeleteExternalDeployment(ctx context.Context, in *ExternalDeploymentRequest, opts ...grpc.CallOption) (*Empty, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) FindRegisteredModel(ctx context.Context, in *FindRegisteredModelRequest, opts ...grpc.CallOption) (*FindRegisteredModelRequest_Response, error) {
	out := new(FindRegisteredModelRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/FindRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetRegisteredModel(ctx context.Context, in *GetRegisteredModelRequest, opts ...grpc.CallOption) (*GetRegisteredModelRequest_Response, error) {
	out := new(GetRegisteredModelRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/GetRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetRegisteredModelCount(ctx context.Context, in *GetRegisteredModelCountRequest, opts ...grpc.CallOption) (*GetRegisteredModelCountRequest_Response, error) {
	out := new(GetRegisteredModelCountRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/GetRegisteredModelCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error) {
	out := new(SetRegisteredModel_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/CreateRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateRegisteredModel(ctx context.Context, in *SetRegisteredModel, opts ...grpc.CallOption) (*SetRegisteredModel_Response, error) {
	out := new(SetRegisteredModel_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/UpdateRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteRegisteredModel(ctx context.Context, in *DeleteRegisteredModelRequest, opts ...grpc.CallOption) (*DeleteRegisteredModelRequest_Response, error) {
	out := new(DeleteRegisteredModelRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/DeleteRegisteredModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) FindModelVersion(ctx context.Context, in *FindModelVersionRequest, opts ...grpc.CallOption) (*FindModelVersionRequest_Response, error) {
	out := new(FindModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/FindModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*GetModelVersionRequest_Response, error) {
	out := new(GetModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/GetModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error) {
	out := new(SetModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/CreateModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateModelVersion(ctx context.Context, in *SetModelVersion, opts ...grpc.CallOption) (*SetModelVersion_Response, error) {
	out := new(SetModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/UpdateModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) SetLockModelVersion(ctx context.Context, in *SetLockModelVersionRequest, opts ...grpc.CallOption) (*SetLockModelVersionRequest_Response, error) {
	out := new(SetLockModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/SetLockModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*DeleteModelVersionRequest_Response, error) {
	out := new(DeleteModelVersionRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/DeleteModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error) {
	out := new(GetUrlForArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/getUrlForArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CommitArtifactPart(ctx context.Context, in *CommitArtifactPart, opts ...grpc.CallOption) (*CommitArtifactPart_Response, error) {
	out := new(CommitArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/commitArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetCommittedArtifactParts(ctx context.Context, in *GetCommittedArtifactParts, opts ...grpc.CallOption) (*GetCommittedArtifactParts_Response, error) {
	out := new(GetCommittedArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/getCommittedArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CommitMultipartArtifact(ctx context.Context, in *CommitMultipartArtifact, opts ...grpc.CallOption) (*CommitMultipartArtifact_Response, error) {
	out := new(CommitMultipartArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/commitMultipartArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) LogDatasetsInModelVersion(ctx context.Context, in *LogDatasetsInModelVersion, opts ...grpc.CallOption) (*LogDatasetsInModelVersion_Response, error) {
	out := new(LogDatasetsInModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/logDatasetsInModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) LogCodeBlobInModelVersion(ctx context.Context, in *LogCodeBlobInModelVersion, opts ...grpc.CallOption) (*LogCodeBlobInModelVersion_Response, error) {
	out := new(LogCodeBlobInModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/logCodeBlobInModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) LogAttributesInModelVersion(ctx context.Context, in *LogAttributesInModelVersion, opts ...grpc.CallOption) (*LogAttributesInModelVersion_Response, error) {
	out := new(LogAttributesInModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/logAttributesInModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) LogDockerMetadataInModelVersion(ctx context.Context, in *LogDockerMetadataInModelVersion, opts ...grpc.CallOption) (*LogDockerMetadataInModelVersion_Response, error) {
	out := new(LogDockerMetadataInModelVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/logDockerMetadataInModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetExternalDeployment(ctx context.Context, in *ExternalDeploymentRequest, opts ...grpc.CallOption) (*ExternalDeploymentRequest_Response, error) {
	out := new(ExternalDeploymentRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/GetExternalDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateExternalDeployment(ctx context.Context, in *ExternalDeployment, opts ...grpc.CallOption) (*ExternalDeploymentRequest_Response, error) {
	out := new(ExternalDeploymentRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/CreateExternalDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateExternalDeployment(ctx context.Context, in *ExternalDeployment, opts ...grpc.CallOption) (*ExternalDeploymentRequest_Response, error) {
	out := new(ExternalDeploymentRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/UpdateExternalDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteExternalDeployment(ctx context.Context, in *ExternalDeploymentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.registry.RegistryService/DeleteExternalDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
// All implementations must embed UnimplementedRegistryServiceServer
// for forward compatibility
type RegistryServiceServer interface {
	// CRUD for RegisteredModel
	FindRegisteredModel(context.Context, *FindRegisteredModelRequest) (*FindRegisteredModelRequest_Response, error)
	GetRegisteredModel(context.Context, *GetRegisteredModelRequest) (*GetRegisteredModelRequest_Response, error)
	GetRegisteredModelCount(context.Context, *GetRegisteredModelCountRequest) (*GetRegisteredModelCountRequest_Response, error)
	CreateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error)
	UpdateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error)
	DeleteRegisteredModel(context.Context, *DeleteRegisteredModelRequest) (*DeleteRegisteredModelRequest_Response, error)
	//CRUD for Model Version
	FindModelVersion(context.Context, *FindModelVersionRequest) (*FindModelVersionRequest_Response, error)
	GetModelVersion(context.Context, *GetModelVersionRequest) (*GetModelVersionRequest_Response, error)
	CreateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error)
	UpdateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error)
	SetLockModelVersion(context.Context, *SetLockModelVersionRequest) (*SetLockModelVersionRequest_Response, error)
	DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*DeleteModelVersionRequest_Response, error)
	GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error)
	CommitArtifactPart(context.Context, *CommitArtifactPart) (*CommitArtifactPart_Response, error)
	GetCommittedArtifactParts(context.Context, *GetCommittedArtifactParts) (*GetCommittedArtifactParts_Response, error)
	CommitMultipartArtifact(context.Context, *CommitMultipartArtifact) (*CommitMultipartArtifact_Response, error)
	LogDatasetsInModelVersion(context.Context, *LogDatasetsInModelVersion) (*LogDatasetsInModelVersion_Response, error)
	LogCodeBlobInModelVersion(context.Context, *LogCodeBlobInModelVersion) (*LogCodeBlobInModelVersion_Response, error)
	LogAttributesInModelVersion(context.Context, *LogAttributesInModelVersion) (*LogAttributesInModelVersion_Response, error)
	LogDockerMetadataInModelVersion(context.Context, *LogDockerMetadataInModelVersion) (*LogDockerMetadataInModelVersion_Response, error)
	GetExternalDeployment(context.Context, *ExternalDeploymentRequest) (*ExternalDeploymentRequest_Response, error)
	CreateExternalDeployment(context.Context, *ExternalDeployment) (*ExternalDeploymentRequest_Response, error)
	UpdateExternalDeployment(context.Context, *ExternalDeployment) (*ExternalDeploymentRequest_Response, error)
	DeleteExternalDeployment(context.Context, *ExternalDeploymentRequest) (*Empty, error)
	mustEmbedUnimplementedRegistryServiceServer()
}

// UnimplementedRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceServer struct {
}

func (UnimplementedRegistryServiceServer) FindRegisteredModel(context.Context, *FindRegisteredModelRequest) (*FindRegisteredModelRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRegisteredModel not implemented")
}
func (UnimplementedRegistryServiceServer) GetRegisteredModel(context.Context, *GetRegisteredModelRequest) (*GetRegisteredModelRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredModel not implemented")
}
func (UnimplementedRegistryServiceServer) GetRegisteredModelCount(context.Context, *GetRegisteredModelCountRequest) (*GetRegisteredModelCountRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredModelCount not implemented")
}
func (UnimplementedRegistryServiceServer) CreateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegisteredModel not implemented")
}
func (UnimplementedRegistryServiceServer) UpdateRegisteredModel(context.Context, *SetRegisteredModel) (*SetRegisteredModel_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegisteredModel not implemented")
}
func (UnimplementedRegistryServiceServer) DeleteRegisteredModel(context.Context, *DeleteRegisteredModelRequest) (*DeleteRegisteredModelRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegisteredModel not implemented")
}
func (UnimplementedRegistryServiceServer) FindModelVersion(context.Context, *FindModelVersionRequest) (*FindModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) GetModelVersion(context.Context, *GetModelVersionRequest) (*GetModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) CreateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) UpdateModelVersion(context.Context, *SetModelVersion) (*SetModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) SetLockModelVersion(context.Context, *SetLockModelVersionRequest) (*SetLockModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLockModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*DeleteModelVersionRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForArtifact not implemented")
}
func (UnimplementedRegistryServiceServer) CommitArtifactPart(context.Context, *CommitArtifactPart) (*CommitArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitArtifactPart not implemented")
}
func (UnimplementedRegistryServiceServer) GetCommittedArtifactParts(context.Context, *GetCommittedArtifactParts) (*GetCommittedArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedArtifactParts not implemented")
}
func (UnimplementedRegistryServiceServer) CommitMultipartArtifact(context.Context, *CommitMultipartArtifact) (*CommitMultipartArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartArtifact not implemented")
}
func (UnimplementedRegistryServiceServer) LogDatasetsInModelVersion(context.Context, *LogDatasetsInModelVersion) (*LogDatasetsInModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogDatasetsInModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) LogCodeBlobInModelVersion(context.Context, *LogCodeBlobInModelVersion) (*LogCodeBlobInModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogCodeBlobInModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) LogAttributesInModelVersion(context.Context, *LogAttributesInModelVersion) (*LogAttributesInModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAttributesInModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) LogDockerMetadataInModelVersion(context.Context, *LogDockerMetadataInModelVersion) (*LogDockerMetadataInModelVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogDockerMetadataInModelVersion not implemented")
}
func (UnimplementedRegistryServiceServer) GetExternalDeployment(context.Context, *ExternalDeploymentRequest) (*ExternalDeploymentRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalDeployment not implemented")
}
func (UnimplementedRegistryServiceServer) CreateExternalDeployment(context.Context, *ExternalDeployment) (*ExternalDeploymentRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalDeployment not implemented")
}
func (UnimplementedRegistryServiceServer) UpdateExternalDeployment(context.Context, *ExternalDeployment) (*ExternalDeploymentRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalDeployment not implemented")
}
func (UnimplementedRegistryServiceServer) DeleteExternalDeployment(context.Context, *ExternalDeploymentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalDeployment not implemented")
}
func (UnimplementedRegistryServiceServer) mustEmbedUnimplementedRegistryServiceServer() {}

// UnsafeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceServer will
// result in compilation errors.
type UnsafeRegistryServiceServer interface {
	mustEmbedUnimplementedRegistryServiceServer()
}

func RegisterRegistryServiceServer(s grpc.ServiceRegistrar, srv RegistryServiceServer) {
	s.RegisterService(&RegistryService_ServiceDesc, srv)
}

func _RegistryService_FindRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRegisteredModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).FindRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/FindRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).FindRegisteredModel(ctx, req.(*FindRegisteredModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetRegisteredModel(ctx, req.(*GetRegisteredModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetRegisteredModelCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredModelCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetRegisteredModelCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetRegisteredModelCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetRegisteredModelCount(ctx, req.(*GetRegisteredModelCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRegisteredModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/CreateRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateRegisteredModel(ctx, req.(*SetRegisteredModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRegisteredModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/UpdateRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateRegisteredModel(ctx, req.(*SetRegisteredModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteRegisteredModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteRegisteredModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/DeleteRegisteredModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteRegisteredModel(ctx, req.(*DeleteRegisteredModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_FindModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).FindModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/FindModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).FindModelVersion(ctx, req.(*FindModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetModelVersion(ctx, req.(*GetModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/CreateModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateModelVersion(ctx, req.(*SetModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/UpdateModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateModelVersion(ctx, req.(*SetModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_SetLockModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLockModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).SetLockModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/SetLockModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).SetLockModelVersion(ctx, req.(*SetLockModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/DeleteModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteModelVersion(ctx, req.(*DeleteModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetUrlForArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetUrlForArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/getUrlForArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetUrlForArtifact(ctx, req.(*GetUrlForArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CommitArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CommitArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/commitArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CommitArtifactPart(ctx, req.(*CommitArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetCommittedArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetCommittedArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/getCommittedArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetCommittedArtifactParts(ctx, req.(*GetCommittedArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CommitMultipartArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMultipartArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CommitMultipartArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/commitMultipartArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CommitMultipartArtifact(ctx, req.(*CommitMultipartArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_LogDatasetsInModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogDatasetsInModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).LogDatasetsInModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/logDatasetsInModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).LogDatasetsInModelVersion(ctx, req.(*LogDatasetsInModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_LogCodeBlobInModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCodeBlobInModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).LogCodeBlobInModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/logCodeBlobInModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).LogCodeBlobInModelVersion(ctx, req.(*LogCodeBlobInModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_LogAttributesInModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogAttributesInModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).LogAttributesInModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/logAttributesInModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).LogAttributesInModelVersion(ctx, req.(*LogAttributesInModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_LogDockerMetadataInModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogDockerMetadataInModelVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).LogDockerMetadataInModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/logDockerMetadataInModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).LogDockerMetadataInModelVersion(ctx, req.(*LogDockerMetadataInModelVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetExternalDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetExternalDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/GetExternalDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetExternalDeployment(ctx, req.(*ExternalDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateExternalDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateExternalDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/CreateExternalDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateExternalDeployment(ctx, req.(*ExternalDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateExternalDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateExternalDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/UpdateExternalDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateExternalDeployment(ctx, req.(*ExternalDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteExternalDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteExternalDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.registry.RegistryService/DeleteExternalDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteExternalDeployment(ctx, req.(*ExternalDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryService_ServiceDesc is the grpc.ServiceDesc for RegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.registry.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindRegisteredModel",
			Handler:    _RegistryService_FindRegisteredModel_Handler,
		},
		{
			MethodName: "GetRegisteredModel",
			Handler:    _RegistryService_GetRegisteredModel_Handler,
		},
		{
			MethodName: "GetRegisteredModelCount",
			Handler:    _RegistryService_GetRegisteredModelCount_Handler,
		},
		{
			MethodName: "CreateRegisteredModel",
			Handler:    _RegistryService_CreateRegisteredModel_Handler,
		},
		{
			MethodName: "UpdateRegisteredModel",
			Handler:    _RegistryService_UpdateRegisteredModel_Handler,
		},
		{
			MethodName: "DeleteRegisteredModel",
			Handler:    _RegistryService_DeleteRegisteredModel_Handler,
		},
		{
			MethodName: "FindModelVersion",
			Handler:    _RegistryService_FindModelVersion_Handler,
		},
		{
			MethodName: "GetModelVersion",
			Handler:    _RegistryService_GetModelVersion_Handler,
		},
		{
			MethodName: "CreateModelVersion",
			Handler:    _RegistryService_CreateModelVersion_Handler,
		},
		{
			MethodName: "UpdateModelVersion",
			Handler:    _RegistryService_UpdateModelVersion_Handler,
		},
		{
			MethodName: "SetLockModelVersion",
			Handler:    _RegistryService_SetLockModelVersion_Handler,
		},
		{
			MethodName: "DeleteModelVersion",
			Handler:    _RegistryService_DeleteModelVersion_Handler,
		},
		{
			MethodName: "getUrlForArtifact",
			Handler:    _RegistryService_GetUrlForArtifact_Handler,
		},
		{
			MethodName: "commitArtifactPart",
			Handler:    _RegistryService_CommitArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedArtifactParts",
			Handler:    _RegistryService_GetCommittedArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartArtifact",
			Handler:    _RegistryService_CommitMultipartArtifact_Handler,
		},
		{
			MethodName: "logDatasetsInModelVersion",
			Handler:    _RegistryService_LogDatasetsInModelVersion_Handler,
		},
		{
			MethodName: "logCodeBlobInModelVersion",
			Handler:    _RegistryService_LogCodeBlobInModelVersion_Handler,
		},
		{
			MethodName: "logAttributesInModelVersion",
			Handler:    _RegistryService_LogAttributesInModelVersion_Handler,
		},
		{
			MethodName: "logDockerMetadataInModelVersion",
			Handler:    _RegistryService_LogDockerMetadataInModelVersion_Handler,
		},
		{
			MethodName: "GetExternalDeployment",
			Handler:    _RegistryService_GetExternalDeployment_Handler,
		},
		{
			MethodName: "CreateExternalDeployment",
			Handler:    _RegistryService_CreateExternalDeployment_Handler,
		},
		{
			MethodName: "UpdateExternalDeployment",
			Handler:    _RegistryService_UpdateExternalDeployment_Handler,
		},
		{
			MethodName: "DeleteExternalDeployment",
			Handler:    _RegistryService_DeleteExternalDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/RegistryService.proto",
}
