// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uac/Telemetry.proto

package uac

import (
	context "context"
	fmt "fmt"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CollectTelemetry struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metrics              []*common.KeyValue `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CollectTelemetry) Reset()         { *m = CollectTelemetry{} }
func (m *CollectTelemetry) String() string { return proto.CompactTextString(m) }
func (*CollectTelemetry) ProtoMessage()    {}
func (*CollectTelemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a9bf92048024d, []int{0}
}

func (m *CollectTelemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectTelemetry.Unmarshal(m, b)
}
func (m *CollectTelemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectTelemetry.Marshal(b, m, deterministic)
}
func (m *CollectTelemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectTelemetry.Merge(m, src)
}
func (m *CollectTelemetry) XXX_Size() int {
	return xxx_messageInfo_CollectTelemetry.Size(m)
}
func (m *CollectTelemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectTelemetry.DiscardUnknown(m)
}

var xxx_messageInfo_CollectTelemetry proto.InternalMessageInfo

func (m *CollectTelemetry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CollectTelemetry) GetMetrics() []*common.KeyValue {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CollectTelemetry_Response struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectTelemetry_Response) Reset()         { *m = CollectTelemetry_Response{} }
func (m *CollectTelemetry_Response) String() string { return proto.CompactTextString(m) }
func (*CollectTelemetry_Response) ProtoMessage()    {}
func (*CollectTelemetry_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a9bf92048024d, []int{0, 0}
}

func (m *CollectTelemetry_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectTelemetry_Response.Unmarshal(m, b)
}
func (m *CollectTelemetry_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectTelemetry_Response.Marshal(b, m, deterministic)
}
func (m *CollectTelemetry_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectTelemetry_Response.Merge(m, src)
}
func (m *CollectTelemetry_Response) XXX_Size() int {
	return xxx_messageInfo_CollectTelemetry_Response.Size(m)
}
func (m *CollectTelemetry_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectTelemetry_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CollectTelemetry_Response proto.InternalMessageInfo

func (m *CollectTelemetry_Response) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*CollectTelemetry)(nil), "ai.verta.uac.CollectTelemetry")
	proto.RegisterType((*CollectTelemetry_Response)(nil), "ai.verta.uac.CollectTelemetry.Response")
}

func init() {
	proto.RegisterFile("uac/Telemetry.proto", fileDescriptor_ce3a9bf92048024d)
}

var fileDescriptor_ce3a9bf92048024d = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x49, 0x7e, 0xe8, 0x5f, 0x47, 0x91, 0x12, 0x41, 0x6a, 0x90, 0x52, 0xe2, 0xc2, 0xea,
	0x62, 0x2e, 0xb6, 0xbb, 0x2e, 0x04, 0xed, 0x4a, 0xdc, 0x48, 0x94, 0x2e, 0xdc, 0x4d, 0x26, 0x97,
	0x38, 0x30, 0x99, 0x1b, 0x32, 0x33, 0x85, 0xe2, 0xce, 0x85, 0x2f, 0xe0, 0xd2, 0xc7, 0xf2, 0x15,
	0x7c, 0x10, 0x69, 0xda, 0x14, 0xe9, 0xc2, 0xd5, 0x70, 0xe7, 0x5c, 0xce, 0xf9, 0xce, 0x65, 0x47,
	0x5e, 0x48, 0x78, 0x42, 0x8d, 0x25, 0xba, 0x7a, 0xc9, 0xab, 0x9a, 0x1c, 0x45, 0x07, 0x42, 0xf1,
	0x05, 0xd6, 0x4e, 0x70, 0x2f, 0x64, 0x7c, 0x5a, 0x10, 0x15, 0x1a, 0x41, 0x54, 0x0a, 0x84, 0x31,
	0xe4, 0x84, 0x53, 0x64, 0xec, 0x7a, 0x37, 0x8e, 0x25, 0x95, 0x25, 0x19, 0x98, 0x35, 0xcf, 0x23,
	0xd6, 0x0b, 0x25, 0x71, 0xad, 0x25, 0xaf, 0xac, 0x37, 0x23, 0xad, 0x51, 0xba, 0x6d, 0x42, 0x74,
	0xc8, 0x42, 0x95, 0xf7, 0x83, 0x61, 0x30, 0xda, 0x4b, 0x43, 0x95, 0x47, 0x13, 0xf6, 0x7f, 0x25,
	0x28, 0x69, 0xfb, 0xe1, 0xf0, 0xdf, 0x68, 0x7f, 0x7c, 0xc2, 0xb7, 0xe9, 0x6b, 0x6b, 0x7e, 0x8f,
	0xcb, 0xb9, 0xd0, 0x1e, 0xd3, 0x76, 0x33, 0x4e, 0x58, 0x37, 0x45, 0x5b, 0x91, 0xb1, 0x18, 0x1d,
	0xb3, 0x8e, 0x75, 0xc2, 0x79, 0xdb, 0x98, 0x76, 0xd3, 0xcd, 0x34, 0xfe, 0x0c, 0x58, 0x6f, 0x1b,
	0xbb, 0xe1, 0x8a, 0xde, 0x03, 0xd6, 0x93, 0xbb, 0x48, 0x03, 0xfe, 0xbb, 0x2f, 0xdf, 0x45, 0x8e,
	0xcf, 0xff, 0xd6, 0x79, 0x8b, 0x92, 0x5c, 0xbc, 0x7d, 0x7d, 0x7f, 0x84, 0x67, 0xc9, 0x00, 0x16,
	0x57, 0xe0, 0x5a, 0x1d, 0x76, 0x03, 0xa7, 0xc1, 0xe5, 0xed, 0xf5, 0x43, 0xf0, 0x3c, 0x2d, 0x94,
	0x7b, 0xf1, 0xd9, 0xaa, 0x26, 0xcc, 0x57, 0xf6, 0x37, 0x77, 0x50, 0x52, 0x8e, 0x3a, 0xcf, 0xa0,
	0x39, 0xa0, 0x85, 0x02, 0x0d, 0x14, 0xd4, 0x4e, 0x95, 0xcf, 0xb4, 0x92, 0xe0, 0x85, 0xcc, 0x3a,
	0xcd, 0xd7, 0xe4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x20, 0x15, 0x61, 0x5c, 0xc0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	CollectTelemetry(ctx context.Context, in *CollectTelemetry, opts ...grpc.CallOption) (*CollectTelemetry_Response, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) CollectTelemetry(ctx context.Context, in *CollectTelemetry, opts ...grpc.CallOption) (*CollectTelemetry_Response, error) {
	out := new(CollectTelemetry_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TelemetryService/collectTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
type TelemetryServiceServer interface {
	CollectTelemetry(context.Context, *CollectTelemetry) (*CollectTelemetry_Response, error)
}

// UnimplementedTelemetryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (*UnimplementedTelemetryServiceServer) CollectTelemetry(ctx context.Context, req *CollectTelemetry) (*CollectTelemetry_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectTelemetry not implemented")
}

func RegisterTelemetryServiceServer(s *grpc.Server, srv TelemetryServiceServer) {
	s.RegisterService(&_TelemetryService_serviceDesc, srv)
}

func _TelemetryService_CollectTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectTelemetry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).CollectTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TelemetryService/CollectTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).CollectTelemetry(ctx, req.(*CollectTelemetry))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelemetryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "collectTelemetry",
			Handler:    _TelemetryService_CollectTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/Telemetry.proto",
}
