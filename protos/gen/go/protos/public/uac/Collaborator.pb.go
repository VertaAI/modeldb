// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.11.2
// source: uac/Collaborator.proto

package uac

import (
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShareViaEnum int32

const (
	ShareViaEnum_USER_ID  ShareViaEnum = 0
	ShareViaEnum_EMAIL_ID ShareViaEnum = 1
	ShareViaEnum_USERNAME ShareViaEnum = 2
)

// Enum value maps for ShareViaEnum.
var (
	ShareViaEnum_name = map[int32]string{
		0: "USER_ID",
		1: "EMAIL_ID",
		2: "USERNAME",
	}
	ShareViaEnum_value = map[string]int32{
		"USER_ID":  0,
		"EMAIL_ID": 1,
		"USERNAME": 2,
	}
)

func (x ShareViaEnum) Enum() *ShareViaEnum {
	p := new(ShareViaEnum)
	*p = x
	return p
}

func (x ShareViaEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareViaEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_uac_Collaborator_proto_enumTypes[0].Descriptor()
}

func (ShareViaEnum) Type() protoreflect.EnumType {
	return &file_uac_Collaborator_proto_enumTypes[0]
}

func (x ShareViaEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareViaEnum.Descriptor instead.
func (ShareViaEnum) EnumDescriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{0}
}

type ResourceVisibility int32

const (
	ResourceVisibility_UNKNOWN           ResourceVisibility = 0
	ResourceVisibility_ORG_DEFAULT       ResourceVisibility = 1
	ResourceVisibility_ORG_CUSTOM        ResourceVisibility = 2
	ResourceVisibility_PRIVATE           ResourceVisibility = 3
	ResourceVisibility_WORKSPACE_DEFAULT ResourceVisibility = 4
)

// Enum value maps for ResourceVisibility.
var (
	ResourceVisibility_name = map[int32]string{
		0: "UNKNOWN",
		1: "ORG_DEFAULT",
		2: "ORG_CUSTOM",
		3: "PRIVATE",
		4: "WORKSPACE_DEFAULT",
	}
	ResourceVisibility_value = map[string]int32{
		"UNKNOWN":           0,
		"ORG_DEFAULT":       1,
		"ORG_CUSTOM":        2,
		"PRIVATE":           3,
		"WORKSPACE_DEFAULT": 4,
	}
)

func (x ResourceVisibility) Enum() *ResourceVisibility {
	p := new(ResourceVisibility)
	*p = x
	return p
}

func (x ResourceVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_uac_Collaborator_proto_enumTypes[1].Descriptor()
}

func (ResourceVisibility) Type() protoreflect.EnumType {
	return &file_uac_Collaborator_proto_enumTypes[1]
}

func (x ResourceVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceVisibility.Descriptor instead.
func (ResourceVisibility) EnumDescriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{1}
}

type CollaboratorPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollaboratorType common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,1,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	CanDeploy        common.TernaryEnum_Ternary                   `protobuf:"varint,2,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	CanPredict       common.TernaryEnum_Ternary                   `protobuf:"varint,3,opt,name=can_predict,json=canPredict,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_predict,omitempty"`
}

func (x *CollaboratorPermissions) Reset() {
	*x = CollaboratorPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaboratorPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaboratorPermissions) ProtoMessage() {}

func (x *CollaboratorPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaboratorPermissions.ProtoReflect.Descriptor instead.
func (*CollaboratorPermissions) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{0}
}

func (x *CollaboratorPermissions) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if x != nil {
		return x.CollaboratorType
	}
	return common.CollaboratorTypeEnum_CollaboratorType(0)
}

func (x *CollaboratorPermissions) GetCanDeploy() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanDeploy
	}
	return common.TernaryEnum_Ternary(0)
}

func (x *CollaboratorPermissions) GetCanPredict() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanPredict
	}
	return common.TernaryEnum_Ternary(0)
}

type AddCollaboratorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIds        []string                                     `protobuf:"bytes,1,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"` // List of project.id, experiment.id etc.
	ShareWith        string                                       `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"` // Collaborator user Id
	CollaboratorType common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,3,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	Message          string                                       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                             // Shared message for reference
	DateCreated      uint64                                       `protobuf:"varint,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"` // shared on
	DateUpdated      uint64                                       `protobuf:"varint,6,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"` // CollaboratorType updated on
	CanDeploy        common.TernaryEnum_Ternary                   `protobuf:"varint,7,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	CanPredict       common.TernaryEnum_Ternary                   `protobuf:"varint,10,opt,name=can_predict,json=canPredict,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_predict,omitempty"`
	AuthzEntityType  common.EntitiesEnum_EntitiesTypes            `protobuf:"varint,8,opt,name=authz_entity_type,json=authzEntityType,proto3,enum=ai.verta.common.EntitiesEnum_EntitiesTypes" json:"authz_entity_type,omitempty"` //user, team, org
	Permission       *CollaboratorPermissions                     `protobuf:"bytes,9,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *AddCollaboratorRequest) Reset() {
	*x = AddCollaboratorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCollaboratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollaboratorRequest) ProtoMessage() {}

func (x *AddCollaboratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollaboratorRequest.ProtoReflect.Descriptor instead.
func (*AddCollaboratorRequest) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{1}
}

func (x *AddCollaboratorRequest) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

func (x *AddCollaboratorRequest) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

func (x *AddCollaboratorRequest) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if x != nil {
		return x.CollaboratorType
	}
	return common.CollaboratorTypeEnum_CollaboratorType(0)
}

func (x *AddCollaboratorRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddCollaboratorRequest) GetDateCreated() uint64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *AddCollaboratorRequest) GetDateUpdated() uint64 {
	if x != nil {
		return x.DateUpdated
	}
	return 0
}

func (x *AddCollaboratorRequest) GetCanDeploy() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanDeploy
	}
	return common.TernaryEnum_Ternary(0)
}

func (x *AddCollaboratorRequest) GetCanPredict() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanPredict
	}
	return common.TernaryEnum_Ternary(0)
}

func (x *AddCollaboratorRequest) GetAuthzEntityType() common.EntitiesEnum_EntitiesTypes {
	if x != nil {
		return x.AuthzEntityType
	}
	return common.EntitiesEnum_EntitiesTypes(0)
}

func (x *AddCollaboratorRequest) GetPermission() *CollaboratorPermissions {
	if x != nil {
		return x.Permission
	}
	return nil
}

type RemoveCollaborator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        string                            `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`    // project.id, experiment.id etc.
	ShareWith       string                            `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"` // Collaborator user Id
	DateDeleted     uint64                            `protobuf:"varint,3,opt,name=date_deleted,json=dateDeleted,proto3" json:"date_deleted,omitempty"`
	AuthzEntityType common.EntitiesEnum_EntitiesTypes `protobuf:"varint,4,opt,name=authz_entity_type,json=authzEntityType,proto3,enum=ai.verta.common.EntitiesEnum_EntitiesTypes" json:"authz_entity_type,omitempty"`
}

func (x *RemoveCollaborator) Reset() {
	*x = RemoveCollaborator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollaborator) ProtoMessage() {}

func (x *RemoveCollaborator) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollaborator.ProtoReflect.Descriptor instead.
func (*RemoveCollaborator) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveCollaborator) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RemoveCollaborator) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

func (x *RemoveCollaborator) GetDateDeleted() uint64 {
	if x != nil {
		return x.DateDeleted
	}
	return 0
}

func (x *RemoveCollaborator) GetAuthzEntityType() common.EntitiesEnum_EntitiesTypes {
	if x != nil {
		return x.AuthzEntityType
	}
	return common.EntitiesEnum_EntitiesTypes(0)
}

type GetCollaboratorResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in uac/Collaborator.proto.
	UserId           string                                       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CollaboratorType common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,2,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	ShareViaType     ShareViaEnum                                 `protobuf:"varint,3,opt,name=share_via_type,json=shareViaType,proto3,enum=ai.verta.uac.ShareViaEnum" json:"share_via_type,omitempty"`
	VertaId          string                                       `protobuf:"bytes,4,opt,name=verta_id,json=vertaId,proto3" json:"verta_id,omitempty"` //user_verta_id, team_id, org_id
	CanDeploy        common.TernaryEnum_Ternary                   `protobuf:"varint,5,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	CanPredict       common.TernaryEnum_Ternary                   `protobuf:"varint,8,opt,name=can_predict,json=canPredict,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_predict,omitempty"`
	AuthzEntityType  common.EntitiesEnum_EntitiesTypes            `protobuf:"varint,6,opt,name=authz_entity_type,json=authzEntityType,proto3,enum=ai.verta.common.EntitiesEnum_EntitiesTypes" json:"authz_entity_type,omitempty"`
	Permission       *CollaboratorPermissions                     `protobuf:"bytes,7,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *GetCollaboratorResponseItem) Reset() {
	*x = GetCollaboratorResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollaboratorResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollaboratorResponseItem) ProtoMessage() {}

func (x *GetCollaboratorResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollaboratorResponseItem.ProtoReflect.Descriptor instead.
func (*GetCollaboratorResponseItem) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in uac/Collaborator.proto.
func (x *GetCollaboratorResponseItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCollaboratorResponseItem) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if x != nil {
		return x.CollaboratorType
	}
	return common.CollaboratorTypeEnum_CollaboratorType(0)
}

func (x *GetCollaboratorResponseItem) GetShareViaType() ShareViaEnum {
	if x != nil {
		return x.ShareViaType
	}
	return ShareViaEnum_USER_ID
}

func (x *GetCollaboratorResponseItem) GetVertaId() string {
	if x != nil {
		return x.VertaId
	}
	return ""
}

func (x *GetCollaboratorResponseItem) GetCanDeploy() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanDeploy
	}
	return common.TernaryEnum_Ternary(0)
}

func (x *GetCollaboratorResponseItem) GetCanPredict() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanPredict
	}
	return common.TernaryEnum_Ternary(0)
}

func (x *GetCollaboratorResponseItem) GetAuthzEntityType() common.EntitiesEnum_EntitiesTypes {
	if x != nil {
		return x.AuthzEntityType
	}
	return common.EntitiesEnum_EntitiesTypes(0)
}

func (x *GetCollaboratorResponseItem) GetPermission() *CollaboratorPermissions {
	if x != nil {
		return x.Permission
	}
	return nil
}

type GetCollaborator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId   string             `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Pagination *common.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetCollaborator) Reset() {
	*x = GetCollaborator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollaborator) ProtoMessage() {}

func (x *GetCollaborator) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollaborator.ProtoReflect.Descriptor instead.
func (*GetCollaborator) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{4}
}

func (x *GetCollaborator) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *GetCollaborator) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If empty, will assume we want to get all resources
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// Optional. If empty, will assume we want to get across all workspaces
	//
	// Types that are assignable to Workspace:
	//
	//	*GetResources_WorkspaceId
	//	*GetResources_WorkspaceName
	Workspace isGetResources_Workspace `protobuf_oneof:"workspace"`
	// Optional. If Provided, workspace, resource service, type should be provided
	ResourceName string             `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	Pagination   *common.Pagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OwnerIds     []uint64           `protobuf:"varint,6,rep,packed,name=owner_ids,json=ownerIds,proto3" json:"owner_ids,omitempty"`
}

func (x *GetResources) Reset() {
	*x = GetResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResources) ProtoMessage() {}

func (x *GetResources) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResources.ProtoReflect.Descriptor instead.
func (*GetResources) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{5}
}

func (x *GetResources) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (m *GetResources) GetWorkspace() isGetResources_Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

func (x *GetResources) GetWorkspaceId() uint64 {
	if x, ok := x.GetWorkspace().(*GetResources_WorkspaceId); ok {
		return x.WorkspaceId
	}
	return 0
}

func (x *GetResources) GetWorkspaceName() string {
	if x, ok := x.GetWorkspace().(*GetResources_WorkspaceName); ok {
		return x.WorkspaceName
	}
	return ""
}

func (x *GetResources) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *GetResources) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetResources) GetOwnerIds() []uint64 {
	if x != nil {
		return x.OwnerIds
	}
	return nil
}

type isGetResources_Workspace interface {
	isGetResources_Workspace()
}

type GetResources_WorkspaceId struct {
	WorkspaceId uint64 `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3,oneof"`
}

type GetResources_WorkspaceName struct {
	WorkspaceName string `protobuf:"bytes,3,opt,name=workspace_name,json=workspaceName,proto3,oneof"`
}

func (*GetResources_WorkspaceId) isGetResources_Workspace() {}

func (*GetResources_WorkspaceName) isGetResources_Workspace() {}

type GetResourcesResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service      ServiceEnum_Service `protobuf:"varint,10,opt,name=service,proto3,enum=ai.verta.uac.ServiceEnum_Service" json:"service,omitempty"`
	ResourceId   string              `protobuf:"bytes,11,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceName string              `protobuf:"bytes,13,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceType *ResourceType       `protobuf:"bytes,12,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	WorkspaceId  uint64              `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// Owner of the resource
	//
	// Types that are assignable to OwnerTracking:
	//
	//	*GetResourcesResponseItem_OwnerId
	//	*GetResourcesResponseItem_GroupOwnerId
	OwnerTracking isGetResourcesResponseItem_OwnerTracking `protobuf_oneof:"owner_tracking"`
	// Type of the visibility
	Visibility ResourceVisibility `protobuf:"varint,4,opt,name=visibility,proto3,enum=ai.verta.uac.ResourceVisibility" json:"visibility,omitempty"`
	// The next field only makes sense when visibility == ORG_CUSTOM
	// They will be empty otherwise
	CustomPermission *CollaboratorPermissions `protobuf:"bytes,9,opt,name=custom_permission,json=customPermission,proto3" json:"custom_permission,omitempty"`
}

func (x *GetResourcesResponseItem) Reset() {
	*x = GetResourcesResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcesResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcesResponseItem) ProtoMessage() {}

func (x *GetResourcesResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcesResponseItem.ProtoReflect.Descriptor instead.
func (*GetResourcesResponseItem) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{6}
}

func (x *GetResourcesResponseItem) GetService() ServiceEnum_Service {
	if x != nil {
		return x.Service
	}
	return ServiceEnum_UNKNOWN
}

func (x *GetResourcesResponseItem) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetResourcesResponseItem) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *GetResourcesResponseItem) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *GetResourcesResponseItem) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (m *GetResourcesResponseItem) GetOwnerTracking() isGetResourcesResponseItem_OwnerTracking {
	if m != nil {
		return m.OwnerTracking
	}
	return nil
}

func (x *GetResourcesResponseItem) GetOwnerId() uint64 {
	if x, ok := x.GetOwnerTracking().(*GetResourcesResponseItem_OwnerId); ok {
		return x.OwnerId
	}
	return 0
}

func (x *GetResourcesResponseItem) GetGroupOwnerId() *common.GroupId {
	if x, ok := x.GetOwnerTracking().(*GetResourcesResponseItem_GroupOwnerId); ok {
		return x.GroupOwnerId
	}
	return nil
}

func (x *GetResourcesResponseItem) GetVisibility() ResourceVisibility {
	if x != nil {
		return x.Visibility
	}
	return ResourceVisibility_UNKNOWN
}

func (x *GetResourcesResponseItem) GetCustomPermission() *CollaboratorPermissions {
	if x != nil {
		return x.CustomPermission
	}
	return nil
}

type isGetResourcesResponseItem_OwnerTracking interface {
	isGetResourcesResponseItem_OwnerTracking()
}

type GetResourcesResponseItem_OwnerId struct {
	OwnerId uint64 `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3,oneof"`
}

type GetResourcesResponseItem_GroupOwnerId struct {
	GroupOwnerId *common.GroupId `protobuf:"bytes,14,opt,name=group_owner_id,json=groupOwnerId,proto3,oneof"`
}

func (*GetResourcesResponseItem_OwnerId) isGetResourcesResponseItem_OwnerTracking() {}

func (*GetResourcesResponseItem_GroupOwnerId) isGetResourcesResponseItem_OwnerTracking() {}

type SetResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specification of the resources. IDs are globally unique, so changes in the fields above cause
	// update on pre-exising resources
	Service ServiceEnum_Service `protobuf:"varint,1,opt,name=service,proto3,enum=ai.verta.uac.ServiceEnum_Service" json:"service,omitempty"`
	// Internal ID for the resource in the service, whose meaning doesn't matter for other services
	// This is optional. If empty, means all resources
	ResourceId   string        `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceName string        `protobuf:"bytes,9,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceType *ResourceType `protobuf:"bytes,10,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Workspace where the resources belong
	//
	// Types that are assignable to Workspace:
	//
	//	*SetResource_WorkspaceId
	//	*SetResource_WorkspaceName
	Workspace isSetResource_Workspace `protobuf_oneof:"workspace"`
	// Owner of the resource
	//
	// Types that are assignable to OwnerTracking:
	//
	//	*SetResource_OwnerId
	//	*SetResource_GroupOwnerId
	OwnerTracking isSetResource_OwnerTracking `protobuf_oneof:"owner_tracking"`
	// Type of the visibility
	Visibility ResourceVisibility `protobuf:"varint,5,opt,name=visibility,proto3,enum=ai.verta.uac.ResourceVisibility" json:"visibility,omitempty"`
	// The next fields only makes sense when visibility == ORG_SCOPED_PUBLIC. We should error
	// otherwise
	CollaboratorType common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,6,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	CanDeploy        common.TernaryEnum_Ternary                   `protobuf:"varint,7,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	CanPredict       common.TernaryEnum_Ternary                   `protobuf:"varint,11,opt,name=can_predict,json=canPredict,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_predict,omitempty"`
}

func (x *SetResource) Reset() {
	*x = SetResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResource) ProtoMessage() {}

func (x *SetResource) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResource.ProtoReflect.Descriptor instead.
func (*SetResource) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{7}
}

func (x *SetResource) GetService() ServiceEnum_Service {
	if x != nil {
		return x.Service
	}
	return ServiceEnum_UNKNOWN
}

func (x *SetResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *SetResource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *SetResource) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (m *SetResource) GetWorkspace() isSetResource_Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

func (x *SetResource) GetWorkspaceId() uint64 {
	if x, ok := x.GetWorkspace().(*SetResource_WorkspaceId); ok {
		return x.WorkspaceId
	}
	return 0
}

func (x *SetResource) GetWorkspaceName() string {
	if x, ok := x.GetWorkspace().(*SetResource_WorkspaceName); ok {
		return x.WorkspaceName
	}
	return ""
}

func (m *SetResource) GetOwnerTracking() isSetResource_OwnerTracking {
	if m != nil {
		return m.OwnerTracking
	}
	return nil
}

func (x *SetResource) GetOwnerId() uint64 {
	if x, ok := x.GetOwnerTracking().(*SetResource_OwnerId); ok {
		return x.OwnerId
	}
	return 0
}

func (x *SetResource) GetGroupOwnerId() *common.GroupId {
	if x, ok := x.GetOwnerTracking().(*SetResource_GroupOwnerId); ok {
		return x.GroupOwnerId
	}
	return nil
}

func (x *SetResource) GetVisibility() ResourceVisibility {
	if x != nil {
		return x.Visibility
	}
	return ResourceVisibility_UNKNOWN
}

func (x *SetResource) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if x != nil {
		return x.CollaboratorType
	}
	return common.CollaboratorTypeEnum_CollaboratorType(0)
}

func (x *SetResource) GetCanDeploy() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanDeploy
	}
	return common.TernaryEnum_Ternary(0)
}

func (x *SetResource) GetCanPredict() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanPredict
	}
	return common.TernaryEnum_Ternary(0)
}

type isSetResource_Workspace interface {
	isSetResource_Workspace()
}

type SetResource_WorkspaceId struct {
	WorkspaceId uint64 `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3,oneof"`
}

type SetResource_WorkspaceName struct {
	WorkspaceName string `protobuf:"bytes,3,opt,name=workspace_name,json=workspaceName,proto3,oneof"`
}

func (*SetResource_WorkspaceId) isSetResource_Workspace() {}

func (*SetResource_WorkspaceName) isSetResource_Workspace() {}

type isSetResource_OwnerTracking interface {
	isSetResource_OwnerTracking()
}

type SetResource_OwnerId struct {
	OwnerId uint64 `protobuf:"varint,4,opt,name=owner_id,json=ownerId,proto3,oneof"`
}

type SetResource_GroupOwnerId struct {
	GroupOwnerId *common.GroupId `protobuf:"bytes,12,opt,name=group_owner_id,json=groupOwnerId,proto3,oneof"`
}

func (*SetResource_OwnerId) isSetResource_OwnerTracking() {}

func (*SetResource_GroupOwnerId) isSetResource_OwnerTracking() {}

type DeleteResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specification of the resources
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *DeleteResources) Reset() {
	*x = DeleteResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResources) ProtoMessage() {}

func (x *DeleteResources) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResources.ProtoReflect.Descriptor instead.
func (*DeleteResources) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteResources) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type ResourceAdmins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds      []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	TeamIds      []string `protobuf:"bytes,2,rep,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
	TotalRecords int64    `protobuf:"varint,3,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *ResourceAdmins) Reset() {
	*x = ResourceAdmins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAdmins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAdmins) ProtoMessage() {}

func (x *ResourceAdmins) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAdmins.ProtoReflect.Descriptor instead.
func (*ResourceAdmins) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceAdmins) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ResourceAdmins) GetTeamIds() []string {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *ResourceAdmins) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetResourceAdmins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service      ServiceEnum_Service `protobuf:"varint,1,opt,name=service,proto3,enum=ai.verta.uac.ServiceEnum_Service" json:"service,omitempty"`
	ResourceId   string              `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceType *ResourceType       `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Pagination   *common.Pagination  `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetResourceAdmins) Reset() {
	*x = GetResourceAdmins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceAdmins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceAdmins) ProtoMessage() {}

func (x *GetResourceAdmins) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceAdmins.ProtoReflect.Descriptor instead.
func (*GetResourceAdmins) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{10}
}

func (x *GetResourceAdmins) GetService() ServiceEnum_Service {
	if x != nil {
		return x.Service
	}
	return ServiceEnum_UNKNOWN
}

func (x *GetResourceAdmins) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetResourceAdmins) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *GetResourceAdmins) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ModifyResourceAdmins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service      ServiceEnum_Service `protobuf:"varint,1,opt,name=service,proto3,enum=ai.verta.uac.ServiceEnum_Service" json:"service,omitempty"`
	ResourceId   string              `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceType *ResourceType       `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	UserIds      []string            `protobuf:"bytes,4,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	TeamIds      []string            `protobuf:"bytes,5,rep,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
}

func (x *ModifyResourceAdmins) Reset() {
	*x = ModifyResourceAdmins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyResourceAdmins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyResourceAdmins) ProtoMessage() {}

func (x *ModifyResourceAdmins) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyResourceAdmins.ProtoReflect.Descriptor instead.
func (*ModifyResourceAdmins) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyResourceAdmins) GetService() ServiceEnum_Service {
	if x != nil {
		return x.Service
	}
	return ServiceEnum_UNKNOWN
}

func (x *ModifyResourceAdmins) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ModifyResourceAdmins) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *ModifyResourceAdmins) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ModifyResourceAdmins) GetTeamIds() []string {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

type AddCollaboratorRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfAllowedActions []*Action `protobuf:"bytes,5,rep,name=self_allowed_actions,json=selfAllowedActions,proto3" json:"self_allowed_actions,omitempty"`
	Status             bool      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to Collaborator:
	//
	//	*AddCollaboratorRequest_Response_CollaboratorUserInfo
	//	*AddCollaboratorRequest_Response_CollaboratorOrganization
	//	*AddCollaboratorRequest_Response_CollaboratorTeam
	Collaborator isAddCollaboratorRequest_Response_Collaborator `protobuf_oneof:"collaborator"`
}

func (x *AddCollaboratorRequest_Response) Reset() {
	*x = AddCollaboratorRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCollaboratorRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollaboratorRequest_Response) ProtoMessage() {}

func (x *AddCollaboratorRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollaboratorRequest_Response.ProtoReflect.Descriptor instead.
func (*AddCollaboratorRequest_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AddCollaboratorRequest_Response) GetSelfAllowedActions() []*Action {
	if x != nil {
		return x.SelfAllowedActions
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (m *AddCollaboratorRequest_Response) GetCollaborator() isAddCollaboratorRequest_Response_Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetCollaboratorUserInfo() *UserInfo {
	if x, ok := x.GetCollaborator().(*AddCollaboratorRequest_Response_CollaboratorUserInfo); ok {
		return x.CollaboratorUserInfo
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetCollaboratorOrganization() *Organization {
	if x, ok := x.GetCollaborator().(*AddCollaboratorRequest_Response_CollaboratorOrganization); ok {
		return x.CollaboratorOrganization
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetCollaboratorTeam() *Team {
	if x, ok := x.GetCollaborator().(*AddCollaboratorRequest_Response_CollaboratorTeam); ok {
		return x.CollaboratorTeam
	}
	return nil
}

type isAddCollaboratorRequest_Response_Collaborator interface {
	isAddCollaboratorRequest_Response_Collaborator()
}

type AddCollaboratorRequest_Response_CollaboratorUserInfo struct {
	CollaboratorUserInfo *UserInfo `protobuf:"bytes,2,opt,name=collaborator_user_info,json=collaboratorUserInfo,proto3,oneof"`
}

type AddCollaboratorRequest_Response_CollaboratorOrganization struct {
	CollaboratorOrganization *Organization `protobuf:"bytes,3,opt,name=collaborator_organization,json=collaboratorOrganization,proto3,oneof"`
}

type AddCollaboratorRequest_Response_CollaboratorTeam struct {
	CollaboratorTeam *Team `protobuf:"bytes,4,opt,name=collaborator_team,json=collaboratorTeam,proto3,oneof"`
}

func (*AddCollaboratorRequest_Response_CollaboratorUserInfo) isAddCollaboratorRequest_Response_Collaborator() {
}

func (*AddCollaboratorRequest_Response_CollaboratorOrganization) isAddCollaboratorRequest_Response_Collaborator() {
}

func (*AddCollaboratorRequest_Response_CollaboratorTeam) isAddCollaboratorRequest_Response_Collaborator() {
}

type RemoveCollaborator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             bool      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	SelfAllowedActions []*Action `protobuf:"bytes,5,rep,name=self_allowed_actions,json=selfAllowedActions,proto3" json:"self_allowed_actions,omitempty"`
}

func (x *RemoveCollaborator_Response) Reset() {
	*x = RemoveCollaborator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollaborator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollaborator_Response) ProtoMessage() {}

func (x *RemoveCollaborator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollaborator_Response.ProtoReflect.Descriptor instead.
func (*RemoveCollaborator_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RemoveCollaborator_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *RemoveCollaborator_Response) GetSelfAllowedActions() []*Action {
	if x != nil {
		return x.SelfAllowedActions
	}
	return nil
}

type GetCollaborator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedUsers  []*GetCollaboratorResponseItem `protobuf:"bytes,1,rep,name=shared_users,json=sharedUsers,proto3" json:"shared_users,omitempty"`
	TotalRecords int64                          `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetCollaborator_Response) Reset() {
	*x = GetCollaborator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollaborator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollaborator_Response) ProtoMessage() {}

func (x *GetCollaborator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollaborator_Response.ProtoReflect.Descriptor instead.
func (*GetCollaborator_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetCollaborator_Response) GetSharedUsers() []*GetCollaboratorResponseItem {
	if x != nil {
		return x.SharedUsers
	}
	return nil
}

func (x *GetCollaborator_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetResources_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item         []*GetResourcesResponseItem `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
	TotalRecords int64                       `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetResources_Response) Reset() {
	*x = GetResources_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResources_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResources_Response) ProtoMessage() {}

func (x *GetResources_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResources_Response.ProtoReflect.Descriptor instead.
func (*GetResources_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetResources_Response) GetItem() []*GetResourcesResponseItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetResources_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type SetResource_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetResource_Response) Reset() {
	*x = SetResource_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResource_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResource_Response) ProtoMessage() {}

func (x *SetResource_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResource_Response.ProtoReflect.Descriptor instead.
func (*SetResource_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{7, 0}
}

type DeleteResources_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResources_Response) Reset() {
	*x = DeleteResources_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResources_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResources_Response) ProtoMessage() {}

func (x *DeleteResources_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResources_Response.ProtoReflect.Descriptor instead.
func (*DeleteResources_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{8, 0}
}

var File_uac_Collaborator_proto protoreflect.FileDescriptor

var file_uac_Collaborator_proto_rawDesc = []byte{
	0x0a, 0x16, 0x75, 0x61, 0x63, 0x2f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75, 0x61, 0x63, 0x2f, 0x55, 0x41, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x61, 0x63, 0x2f,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x75, 0x61, 0x63, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x75, 0x61, 0x63, 0x2f, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x63, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x63,
	0x61, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54,
	0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x22, 0xb2, 0x07, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xe8, 0x02, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73,
	0x65, 0x6c, 0x66, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x19, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x6a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x14, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x73, 0x65, 0x6c, 0x66, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xa8, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x63, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x69,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x56, 0x69, 0x61, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x56,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x63, 0x61, 0x6e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65,
	0x72, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x57, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7d, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x8c, 0x03, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x1a,
	0x6b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52,
	0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0xdc, 0x05, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x48, 0x01, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54,
	0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x22, 0x54, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x0a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x2a, 0x37, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x56,
	0x69, 0x61, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x2a,
	0x66, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x52, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x47, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x32, 0xae, 0x23, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x76, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x23, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x23, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x75, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x1a, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12,
	0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x73, 0x12, 0x7b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x1a, 0x13, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x12, 0x81, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x1a, 0x13, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x1e, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xb1, 0x01, 0x0a,
	0x1e, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22,
	0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x9c, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x92, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x21, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x64,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xa2,
	0x01, 0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x98, 0x01, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xb3,
	0x01, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a,
	0x01, 0x2a, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x9e, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xcd, 0x01, 0x0a,
	0x2c, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a, 0x01, 0x2a, 0x22, 0x3d, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb8, 0x01, 0x0a,
	0x27, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x25, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38,
	0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x26, 0x61, 0x64, 0x64,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c,
	0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xac, 0x01, 0x0a,
	0x21, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xa2, 0x01, 0x0a, 0x1f,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x26,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0xc1, 0x01, 0x0a, 0x26, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0xac, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0xa2, 0x01, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x3e, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75, 0x61, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uac_Collaborator_proto_rawDescOnce sync.Once
	file_uac_Collaborator_proto_rawDescData = file_uac_Collaborator_proto_rawDesc
)

func file_uac_Collaborator_proto_rawDescGZIP() []byte {
	file_uac_Collaborator_proto_rawDescOnce.Do(func() {
		file_uac_Collaborator_proto_rawDescData = protoimpl.X.CompressGZIP(file_uac_Collaborator_proto_rawDescData)
	})
	return file_uac_Collaborator_proto_rawDescData
}

var file_uac_Collaborator_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_uac_Collaborator_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_uac_Collaborator_proto_goTypes = []interface{}{
	(ShareViaEnum)(0),                                 // 0: ai.verta.uac.ShareViaEnum
	(ResourceVisibility)(0),                           // 1: ai.verta.uac.ResourceVisibility
	(*CollaboratorPermissions)(nil),                   // 2: ai.verta.uac.CollaboratorPermissions
	(*AddCollaboratorRequest)(nil),                    // 3: ai.verta.uac.AddCollaboratorRequest
	(*RemoveCollaborator)(nil),                        // 4: ai.verta.uac.RemoveCollaborator
	(*GetCollaboratorResponseItem)(nil),               // 5: ai.verta.uac.GetCollaboratorResponseItem
	(*GetCollaborator)(nil),                           // 6: ai.verta.uac.GetCollaborator
	(*GetResources)(nil),                              // 7: ai.verta.uac.GetResources
	(*GetResourcesResponseItem)(nil),                  // 8: ai.verta.uac.GetResourcesResponseItem
	(*SetResource)(nil),                               // 9: ai.verta.uac.SetResource
	(*DeleteResources)(nil),                           // 10: ai.verta.uac.DeleteResources
	(*ResourceAdmins)(nil),                            // 11: ai.verta.uac.ResourceAdmins
	(*GetResourceAdmins)(nil),                         // 12: ai.verta.uac.GetResourceAdmins
	(*ModifyResourceAdmins)(nil),                      // 13: ai.verta.uac.ModifyResourceAdmins
	(*AddCollaboratorRequest_Response)(nil),           // 14: ai.verta.uac.AddCollaboratorRequest.Response
	(*RemoveCollaborator_Response)(nil),               // 15: ai.verta.uac.RemoveCollaborator.Response
	(*GetCollaborator_Response)(nil),                  // 16: ai.verta.uac.GetCollaborator.Response
	(*GetResources_Response)(nil),                     // 17: ai.verta.uac.GetResources.Response
	(*SetResource_Response)(nil),                      // 18: ai.verta.uac.SetResource.Response
	(*DeleteResources_Response)(nil),                  // 19: ai.verta.uac.DeleteResources.Response
	(common.CollaboratorTypeEnum_CollaboratorType)(0), // 20: ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	(common.TernaryEnum_Ternary)(0),                   // 21: ai.verta.common.TernaryEnum.Ternary
	(common.EntitiesEnum_EntitiesTypes)(0),            // 22: ai.verta.common.EntitiesEnum.EntitiesTypes
	(*common.Pagination)(nil),                         // 23: ai.verta.common.Pagination
	(*Resources)(nil),                                 // 24: ai.verta.uac.Resources
	(ServiceEnum_Service)(0),                          // 25: ai.verta.uac.ServiceEnum.Service
	(*ResourceType)(nil),                              // 26: ai.verta.uac.ResourceType
	(*common.GroupId)(nil),                            // 27: ai.verta.common.GroupId
	(*Action)(nil),                                    // 28: ai.verta.uac.Action
	(*UserInfo)(nil),                                  // 29: ai.verta.uac.UserInfo
	(*Organization)(nil),                              // 30: ai.verta.uac.Organization
	(*Team)(nil),                                      // 31: ai.verta.uac.Team
	(*Empty)(nil),                                     // 32: ai.verta.uac.Empty
}
var file_uac_Collaborator_proto_depIdxs = []int32{
	20, // 0: ai.verta.uac.CollaboratorPermissions.collaborator_type:type_name -> ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	21, // 1: ai.verta.uac.CollaboratorPermissions.can_deploy:type_name -> ai.verta.common.TernaryEnum.Ternary
	21, // 2: ai.verta.uac.CollaboratorPermissions.can_predict:type_name -> ai.verta.common.TernaryEnum.Ternary
	20, // 3: ai.verta.uac.AddCollaboratorRequest.collaborator_type:type_name -> ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	21, // 4: ai.verta.uac.AddCollaboratorRequest.can_deploy:type_name -> ai.verta.common.TernaryEnum.Ternary
	21, // 5: ai.verta.uac.AddCollaboratorRequest.can_predict:type_name -> ai.verta.common.TernaryEnum.Ternary
	22, // 6: ai.verta.uac.AddCollaboratorRequest.authz_entity_type:type_name -> ai.verta.common.EntitiesEnum.EntitiesTypes
	2,  // 7: ai.verta.uac.AddCollaboratorRequest.permission:type_name -> ai.verta.uac.CollaboratorPermissions
	22, // 8: ai.verta.uac.RemoveCollaborator.authz_entity_type:type_name -> ai.verta.common.EntitiesEnum.EntitiesTypes
	20, // 9: ai.verta.uac.GetCollaboratorResponseItem.collaborator_type:type_name -> ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	0,  // 10: ai.verta.uac.GetCollaboratorResponseItem.share_via_type:type_name -> ai.verta.uac.ShareViaEnum
	21, // 11: ai.verta.uac.GetCollaboratorResponseItem.can_deploy:type_name -> ai.verta.common.TernaryEnum.Ternary
	21, // 12: ai.verta.uac.GetCollaboratorResponseItem.can_predict:type_name -> ai.verta.common.TernaryEnum.Ternary
	22, // 13: ai.verta.uac.GetCollaboratorResponseItem.authz_entity_type:type_name -> ai.verta.common.EntitiesEnum.EntitiesTypes
	2,  // 14: ai.verta.uac.GetCollaboratorResponseItem.permission:type_name -> ai.verta.uac.CollaboratorPermissions
	23, // 15: ai.verta.uac.GetCollaborator.pagination:type_name -> ai.verta.common.Pagination
	24, // 16: ai.verta.uac.GetResources.resources:type_name -> ai.verta.uac.Resources
	23, // 17: ai.verta.uac.GetResources.pagination:type_name -> ai.verta.common.Pagination
	25, // 18: ai.verta.uac.GetResourcesResponseItem.service:type_name -> ai.verta.uac.ServiceEnum.Service
	26, // 19: ai.verta.uac.GetResourcesResponseItem.resource_type:type_name -> ai.verta.uac.ResourceType
	27, // 20: ai.verta.uac.GetResourcesResponseItem.group_owner_id:type_name -> ai.verta.common.GroupId
	1,  // 21: ai.verta.uac.GetResourcesResponseItem.visibility:type_name -> ai.verta.uac.ResourceVisibility
	2,  // 22: ai.verta.uac.GetResourcesResponseItem.custom_permission:type_name -> ai.verta.uac.CollaboratorPermissions
	25, // 23: ai.verta.uac.SetResource.service:type_name -> ai.verta.uac.ServiceEnum.Service
	26, // 24: ai.verta.uac.SetResource.resource_type:type_name -> ai.verta.uac.ResourceType
	27, // 25: ai.verta.uac.SetResource.group_owner_id:type_name -> ai.verta.common.GroupId
	1,  // 26: ai.verta.uac.SetResource.visibility:type_name -> ai.verta.uac.ResourceVisibility
	20, // 27: ai.verta.uac.SetResource.collaborator_type:type_name -> ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	21, // 28: ai.verta.uac.SetResource.can_deploy:type_name -> ai.verta.common.TernaryEnum.Ternary
	21, // 29: ai.verta.uac.SetResource.can_predict:type_name -> ai.verta.common.TernaryEnum.Ternary
	24, // 30: ai.verta.uac.DeleteResources.resources:type_name -> ai.verta.uac.Resources
	25, // 31: ai.verta.uac.GetResourceAdmins.service:type_name -> ai.verta.uac.ServiceEnum.Service
	26, // 32: ai.verta.uac.GetResourceAdmins.resource_type:type_name -> ai.verta.uac.ResourceType
	23, // 33: ai.verta.uac.GetResourceAdmins.pagination:type_name -> ai.verta.common.Pagination
	25, // 34: ai.verta.uac.ModifyResourceAdmins.service:type_name -> ai.verta.uac.ServiceEnum.Service
	26, // 35: ai.verta.uac.ModifyResourceAdmins.resource_type:type_name -> ai.verta.uac.ResourceType
	28, // 36: ai.verta.uac.AddCollaboratorRequest.Response.self_allowed_actions:type_name -> ai.verta.uac.Action
	29, // 37: ai.verta.uac.AddCollaboratorRequest.Response.collaborator_user_info:type_name -> ai.verta.uac.UserInfo
	30, // 38: ai.verta.uac.AddCollaboratorRequest.Response.collaborator_organization:type_name -> ai.verta.uac.Organization
	31, // 39: ai.verta.uac.AddCollaboratorRequest.Response.collaborator_team:type_name -> ai.verta.uac.Team
	28, // 40: ai.verta.uac.RemoveCollaborator.Response.self_allowed_actions:type_name -> ai.verta.uac.Action
	5,  // 41: ai.verta.uac.GetCollaborator.Response.shared_users:type_name -> ai.verta.uac.GetCollaboratorResponseItem
	8,  // 42: ai.verta.uac.GetResources.Response.item:type_name -> ai.verta.uac.GetResourcesResponseItem
	7,  // 43: ai.verta.uac.CollaboratorService.getResources:input_type -> ai.verta.uac.GetResources
	7,  // 44: ai.verta.uac.CollaboratorService.getResourcesSpecialPersonalWorkspace:input_type -> ai.verta.uac.GetResources
	9,  // 45: ai.verta.uac.CollaboratorService.setResource:input_type -> ai.verta.uac.SetResource
	10, // 46: ai.verta.uac.CollaboratorService.deleteResources:input_type -> ai.verta.uac.DeleteResources
	12, // 47: ai.verta.uac.CollaboratorService.getResourceAdmins:input_type -> ai.verta.uac.GetResourceAdmins
	13, // 48: ai.verta.uac.CollaboratorService.addResourceAdmins:input_type -> ai.verta.uac.ModifyResourceAdmins
	13, // 49: ai.verta.uac.CollaboratorService.removeResourceAdmins:input_type -> ai.verta.uac.ModifyResourceAdmins
	3,  // 50: ai.verta.uac.CollaboratorService.addOrUpdateProjectCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	4,  // 51: ai.verta.uac.CollaboratorService.removeProjectCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	6,  // 52: ai.verta.uac.CollaboratorService.getProjectCollaborators:input_type -> ai.verta.uac.GetCollaborator
	3,  // 53: ai.verta.uac.CollaboratorService.addOrUpdateDatasetCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	4,  // 54: ai.verta.uac.CollaboratorService.removeDatasetCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	6,  // 55: ai.verta.uac.CollaboratorService.getDatasetCollaborators:input_type -> ai.verta.uac.GetCollaborator
	3,  // 56: ai.verta.uac.CollaboratorService.addOrUpdateRepositoryCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	4,  // 57: ai.verta.uac.CollaboratorService.removeRepositoryCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	6,  // 58: ai.verta.uac.CollaboratorService.getRepositoryCollaborators:input_type -> ai.verta.uac.GetCollaborator
	3,  // 59: ai.verta.uac.CollaboratorService.addOrUpdateEndpointCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	4,  // 60: ai.verta.uac.CollaboratorService.removeEndpointCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	6,  // 61: ai.verta.uac.CollaboratorService.getEndpointCollaborators:input_type -> ai.verta.uac.GetCollaborator
	3,  // 62: ai.verta.uac.CollaboratorService.addOrUpdateEndpointCollaboratorCommonService:input_type -> ai.verta.uac.AddCollaboratorRequest
	4,  // 63: ai.verta.uac.CollaboratorService.removeEndpointCollaboratorCommonService:input_type -> ai.verta.uac.RemoveCollaborator
	6,  // 64: ai.verta.uac.CollaboratorService.getEndpointCollaboratorsCommonService:input_type -> ai.verta.uac.GetCollaborator
	3,  // 65: ai.verta.uac.CollaboratorService.addOrUpdateRegisteredModelCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	4,  // 66: ai.verta.uac.CollaboratorService.removeRegisteredModelCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	6,  // 67: ai.verta.uac.CollaboratorService.getRegisteredModelCollaborators:input_type -> ai.verta.uac.GetCollaborator
	3,  // 68: ai.verta.uac.CollaboratorService.addOrUpdateMonitoredEntityCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	4,  // 69: ai.verta.uac.CollaboratorService.removeMonitoredEntityCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	6,  // 70: ai.verta.uac.CollaboratorService.getMonitoredEntityCollaborators:input_type -> ai.verta.uac.GetCollaborator
	17, // 71: ai.verta.uac.CollaboratorService.getResources:output_type -> ai.verta.uac.GetResources.Response
	17, // 72: ai.verta.uac.CollaboratorService.getResourcesSpecialPersonalWorkspace:output_type -> ai.verta.uac.GetResources.Response
	18, // 73: ai.verta.uac.CollaboratorService.setResource:output_type -> ai.verta.uac.SetResource.Response
	19, // 74: ai.verta.uac.CollaboratorService.deleteResources:output_type -> ai.verta.uac.DeleteResources.Response
	11, // 75: ai.verta.uac.CollaboratorService.getResourceAdmins:output_type -> ai.verta.uac.ResourceAdmins
	32, // 76: ai.verta.uac.CollaboratorService.addResourceAdmins:output_type -> ai.verta.uac.Empty
	32, // 77: ai.verta.uac.CollaboratorService.removeResourceAdmins:output_type -> ai.verta.uac.Empty
	14, // 78: ai.verta.uac.CollaboratorService.addOrUpdateProjectCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	15, // 79: ai.verta.uac.CollaboratorService.removeProjectCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	16, // 80: ai.verta.uac.CollaboratorService.getProjectCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	14, // 81: ai.verta.uac.CollaboratorService.addOrUpdateDatasetCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	15, // 82: ai.verta.uac.CollaboratorService.removeDatasetCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	16, // 83: ai.verta.uac.CollaboratorService.getDatasetCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	14, // 84: ai.verta.uac.CollaboratorService.addOrUpdateRepositoryCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	15, // 85: ai.verta.uac.CollaboratorService.removeRepositoryCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	16, // 86: ai.verta.uac.CollaboratorService.getRepositoryCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	14, // 87: ai.verta.uac.CollaboratorService.addOrUpdateEndpointCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	15, // 88: ai.verta.uac.CollaboratorService.removeEndpointCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	16, // 89: ai.verta.uac.CollaboratorService.getEndpointCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	14, // 90: ai.verta.uac.CollaboratorService.addOrUpdateEndpointCollaboratorCommonService:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	15, // 91: ai.verta.uac.CollaboratorService.removeEndpointCollaboratorCommonService:output_type -> ai.verta.uac.RemoveCollaborator.Response
	16, // 92: ai.verta.uac.CollaboratorService.getEndpointCollaboratorsCommonService:output_type -> ai.verta.uac.GetCollaborator.Response
	14, // 93: ai.verta.uac.CollaboratorService.addOrUpdateRegisteredModelCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	15, // 94: ai.verta.uac.CollaboratorService.removeRegisteredModelCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	16, // 95: ai.verta.uac.CollaboratorService.getRegisteredModelCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	14, // 96: ai.verta.uac.CollaboratorService.addOrUpdateMonitoredEntityCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	15, // 97: ai.verta.uac.CollaboratorService.removeMonitoredEntityCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	16, // 98: ai.verta.uac.CollaboratorService.getMonitoredEntityCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	71, // [71:99] is the sub-list for method output_type
	43, // [43:71] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_uac_Collaborator_proto_init() }
func file_uac_Collaborator_proto_init() {
	if File_uac_Collaborator_proto != nil {
		return
	}
	file_uac_UACService_proto_init()
	file_uac_Organization_proto_init()
	file_uac_Team_proto_init()
	file_uac_RoleService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_uac_Collaborator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaboratorPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCollaboratorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollaborator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollaboratorResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollaborator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcesResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAdmins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceAdmins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyResourceAdmins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCollaboratorRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollaborator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollaborator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResources_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResource_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResources_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_uac_Collaborator_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetResources_WorkspaceId)(nil),
		(*GetResources_WorkspaceName)(nil),
	}
	file_uac_Collaborator_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GetResourcesResponseItem_OwnerId)(nil),
		(*GetResourcesResponseItem_GroupOwnerId)(nil),
	}
	file_uac_Collaborator_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SetResource_WorkspaceId)(nil),
		(*SetResource_WorkspaceName)(nil),
		(*SetResource_OwnerId)(nil),
		(*SetResource_GroupOwnerId)(nil),
	}
	file_uac_Collaborator_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*AddCollaboratorRequest_Response_CollaboratorUserInfo)(nil),
		(*AddCollaboratorRequest_Response_CollaboratorOrganization)(nil),
		(*AddCollaboratorRequest_Response_CollaboratorTeam)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uac_Collaborator_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uac_Collaborator_proto_goTypes,
		DependencyIndexes: file_uac_Collaborator_proto_depIdxs,
		EnumInfos:         file_uac_Collaborator_proto_enumTypes,
		MessageInfos:      file_uac_Collaborator_proto_msgTypes,
	}.Build()
	File_uac_Collaborator_proto = out.File
	file_uac_Collaborator_proto_rawDesc = nil
	file_uac_Collaborator_proto_goTypes = nil
	file_uac_Collaborator_proto_depIdxs = nil
}
