// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: uac/Collaborator.proto

package uac

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ShareViaEnum int32

const (
	ShareViaEnum_USER_ID  ShareViaEnum = 0
	ShareViaEnum_EMAIL_ID ShareViaEnum = 1
	ShareViaEnum_USERNAME ShareViaEnum = 2
)

// Enum value maps for ShareViaEnum.
var (
	ShareViaEnum_name = map[int32]string{
		0: "USER_ID",
		1: "EMAIL_ID",
		2: "USERNAME",
	}
	ShareViaEnum_value = map[string]int32{
		"USER_ID":  0,
		"EMAIL_ID": 1,
		"USERNAME": 2,
	}
)

func (x ShareViaEnum) Enum() *ShareViaEnum {
	p := new(ShareViaEnum)
	*p = x
	return p
}

func (x ShareViaEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareViaEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_uac_Collaborator_proto_enumTypes[0].Descriptor()
}

func (ShareViaEnum) Type() protoreflect.EnumType {
	return &file_uac_Collaborator_proto_enumTypes[0]
}

func (x ShareViaEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareViaEnum.Descriptor instead.
func (ShareViaEnum) EnumDescriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{0}
}

type AddCollaboratorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIds        []string                                     `protobuf:"bytes,1,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"` // List of project.id, experiment.id etc.
	ShareWith        string                                       `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"` // Collaborator user Id
	CollaboratorType common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,3,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	Message          string                                       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                             // Shared message for reference
	DateCreated      uint64                                       `protobuf:"varint,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"` // shared on
	DateUpdated      uint64                                       `protobuf:"varint,6,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"` // CollaboratorType updated on
	CanDeploy        common.TernaryEnum_Ternary                   `protobuf:"varint,7,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	AuthzEntityType  common.EntitiesEnum_EntitiesTypes            `protobuf:"varint,8,opt,name=authz_entity_type,json=authzEntityType,proto3,enum=ai.verta.common.EntitiesEnum_EntitiesTypes" json:"authz_entity_type,omitempty"` //user, team, org
}

func (x *AddCollaboratorRequest) Reset() {
	*x = AddCollaboratorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCollaboratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollaboratorRequest) ProtoMessage() {}

func (x *AddCollaboratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollaboratorRequest.ProtoReflect.Descriptor instead.
func (*AddCollaboratorRequest) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{0}
}

func (x *AddCollaboratorRequest) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

func (x *AddCollaboratorRequest) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

func (x *AddCollaboratorRequest) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if x != nil {
		return x.CollaboratorType
	}
	return common.CollaboratorTypeEnum_READ_ONLY
}

func (x *AddCollaboratorRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddCollaboratorRequest) GetDateCreated() uint64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *AddCollaboratorRequest) GetDateUpdated() uint64 {
	if x != nil {
		return x.DateUpdated
	}
	return 0
}

func (x *AddCollaboratorRequest) GetCanDeploy() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanDeploy
	}
	return common.TernaryEnum_UNKNOWN
}

func (x *AddCollaboratorRequest) GetAuthzEntityType() common.EntitiesEnum_EntitiesTypes {
	if x != nil {
		return x.AuthzEntityType
	}
	return common.EntitiesEnum_UNKNOWN
}

type RemoveCollaborator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        string                            `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`    // project.id, experiment.id etc.
	ShareWith       string                            `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"` // Collaborator user Id
	DateDeleted     uint64                            `protobuf:"varint,3,opt,name=date_deleted,json=dateDeleted,proto3" json:"date_deleted,omitempty"`
	AuthzEntityType common.EntitiesEnum_EntitiesTypes `protobuf:"varint,4,opt,name=authz_entity_type,json=authzEntityType,proto3,enum=ai.verta.common.EntitiesEnum_EntitiesTypes" json:"authz_entity_type,omitempty"`
}

func (x *RemoveCollaborator) Reset() {
	*x = RemoveCollaborator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollaborator) ProtoMessage() {}

func (x *RemoveCollaborator) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollaborator.ProtoReflect.Descriptor instead.
func (*RemoveCollaborator) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{1}
}

func (x *RemoveCollaborator) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RemoveCollaborator) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

func (x *RemoveCollaborator) GetDateDeleted() uint64 {
	if x != nil {
		return x.DateDeleted
	}
	return 0
}

func (x *RemoveCollaborator) GetAuthzEntityType() common.EntitiesEnum_EntitiesTypes {
	if x != nil {
		return x.AuthzEntityType
	}
	return common.EntitiesEnum_UNKNOWN
}

type GetCollaboratorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	UserId           string                                       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CollaboratorType common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,2,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	ShareViaType     ShareViaEnum                                 `protobuf:"varint,3,opt,name=share_via_type,json=shareViaType,proto3,enum=ai.verta.uac.ShareViaEnum" json:"share_via_type,omitempty"`
	VertaId          string                                       `protobuf:"bytes,4,opt,name=verta_id,json=vertaId,proto3" json:"verta_id,omitempty"` //user_verta_id, team_id, org_id
	CanDeploy        common.TernaryEnum_Ternary                   `protobuf:"varint,5,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	AuthzEntityType  common.EntitiesEnum_EntitiesTypes            `protobuf:"varint,6,opt,name=authz_entity_type,json=authzEntityType,proto3,enum=ai.verta.common.EntitiesEnum_EntitiesTypes" json:"authz_entity_type,omitempty"`
}

func (x *GetCollaboratorResponse) Reset() {
	*x = GetCollaboratorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollaboratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollaboratorResponse) ProtoMessage() {}

func (x *GetCollaboratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollaboratorResponse.ProtoReflect.Descriptor instead.
func (*GetCollaboratorResponse) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Do not use.
func (x *GetCollaboratorResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCollaboratorResponse) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if x != nil {
		return x.CollaboratorType
	}
	return common.CollaboratorTypeEnum_READ_ONLY
}

func (x *GetCollaboratorResponse) GetShareViaType() ShareViaEnum {
	if x != nil {
		return x.ShareViaType
	}
	return ShareViaEnum_USER_ID
}

func (x *GetCollaboratorResponse) GetVertaId() string {
	if x != nil {
		return x.VertaId
	}
	return ""
}

func (x *GetCollaboratorResponse) GetCanDeploy() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanDeploy
	}
	return common.TernaryEnum_UNKNOWN
}

func (x *GetCollaboratorResponse) GetAuthzEntityType() common.EntitiesEnum_EntitiesTypes {
	if x != nil {
		return x.AuthzEntityType
	}
	return common.EntitiesEnum_UNKNOWN
}

type GetCollaborator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *GetCollaborator) Reset() {
	*x = GetCollaborator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollaborator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollaborator) ProtoMessage() {}

func (x *GetCollaborator) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollaborator.ProtoReflect.Descriptor instead.
func (*GetCollaborator) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{3}
}

func (x *GetCollaborator) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type AddCollaboratorRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfAllowedActions []*Action `protobuf:"bytes,5,rep,name=self_allowed_actions,json=selfAllowedActions,proto3" json:"self_allowed_actions,omitempty"`
	Status             bool      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to Collaborator:
	//	*AddCollaboratorRequest_Response_CollaboratorUserInfo
	//	*AddCollaboratorRequest_Response_CollaboratorOrganization
	//	*AddCollaboratorRequest_Response_CollaboratorTeam
	Collaborator isAddCollaboratorRequest_Response_Collaborator `protobuf_oneof:"collaborator"`
}

func (x *AddCollaboratorRequest_Response) Reset() {
	*x = AddCollaboratorRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCollaboratorRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollaboratorRequest_Response) ProtoMessage() {}

func (x *AddCollaboratorRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollaboratorRequest_Response.ProtoReflect.Descriptor instead.
func (*AddCollaboratorRequest_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AddCollaboratorRequest_Response) GetSelfAllowedActions() []*Action {
	if x != nil {
		return x.SelfAllowedActions
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (m *AddCollaboratorRequest_Response) GetCollaborator() isAddCollaboratorRequest_Response_Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetCollaboratorUserInfo() *UserInfo {
	if x, ok := x.GetCollaborator().(*AddCollaboratorRequest_Response_CollaboratorUserInfo); ok {
		return x.CollaboratorUserInfo
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetCollaboratorOrganization() *Organization {
	if x, ok := x.GetCollaborator().(*AddCollaboratorRequest_Response_CollaboratorOrganization); ok {
		return x.CollaboratorOrganization
	}
	return nil
}

func (x *AddCollaboratorRequest_Response) GetCollaboratorTeam() *Team {
	if x, ok := x.GetCollaborator().(*AddCollaboratorRequest_Response_CollaboratorTeam); ok {
		return x.CollaboratorTeam
	}
	return nil
}

type isAddCollaboratorRequest_Response_Collaborator interface {
	isAddCollaboratorRequest_Response_Collaborator()
}

type AddCollaboratorRequest_Response_CollaboratorUserInfo struct {
	CollaboratorUserInfo *UserInfo `protobuf:"bytes,2,opt,name=collaborator_user_info,json=collaboratorUserInfo,proto3,oneof"`
}

type AddCollaboratorRequest_Response_CollaboratorOrganization struct {
	CollaboratorOrganization *Organization `protobuf:"bytes,3,opt,name=collaborator_organization,json=collaboratorOrganization,proto3,oneof"`
}

type AddCollaboratorRequest_Response_CollaboratorTeam struct {
	CollaboratorTeam *Team `protobuf:"bytes,4,opt,name=collaborator_team,json=collaboratorTeam,proto3,oneof"`
}

func (*AddCollaboratorRequest_Response_CollaboratorUserInfo) isAddCollaboratorRequest_Response_Collaborator() {
}

func (*AddCollaboratorRequest_Response_CollaboratorOrganization) isAddCollaboratorRequest_Response_Collaborator() {
}

func (*AddCollaboratorRequest_Response_CollaboratorTeam) isAddCollaboratorRequest_Response_Collaborator() {
}

type RemoveCollaborator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             bool      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	SelfAllowedActions []*Action `protobuf:"bytes,5,rep,name=self_allowed_actions,json=selfAllowedActions,proto3" json:"self_allowed_actions,omitempty"`
}

func (x *RemoveCollaborator_Response) Reset() {
	*x = RemoveCollaborator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollaborator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollaborator_Response) ProtoMessage() {}

func (x *RemoveCollaborator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollaborator_Response.ProtoReflect.Descriptor instead.
func (*RemoveCollaborator_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RemoveCollaborator_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *RemoveCollaborator_Response) GetSelfAllowedActions() []*Action {
	if x != nil {
		return x.SelfAllowedActions
	}
	return nil
}

type GetCollaborator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedUsers []*GetCollaboratorResponse `protobuf:"bytes,1,rep,name=shared_users,json=sharedUsers,proto3" json:"shared_users,omitempty"`
}

func (x *GetCollaborator_Response) Reset() {
	*x = GetCollaborator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Collaborator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollaborator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollaborator_Response) ProtoMessage() {}

func (x *GetCollaborator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Collaborator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollaborator_Response.ProtoReflect.Descriptor instead.
func (*GetCollaborator_Response) Descriptor() ([]byte, []int) {
	return file_uac_Collaborator_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetCollaborator_Response) GetSharedUsers() []*GetCollaboratorResponse {
	if x != nil {
		return x.SharedUsers
	}
	return nil
}

var File_uac_Collaborator_proto protoreflect.FileDescriptor

var file_uac_Collaborator_proto_rawDesc = []byte{
	0x0a, 0x16, 0x75, 0x61, 0x63, 0x2f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75, 0x61, 0x63, 0x2f, 0x55, 0x41, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x61, 0x63, 0x2f,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x75, 0x61, 0x63, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x75, 0x61, 0x63, 0x2f, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x06, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x12, 0x63,
	0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0xe8, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x14, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x66, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e,
	0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59,
	0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x11, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x0e, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb8, 0x02, 0x0a,
	0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x6a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x66, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x63, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x56, 0x69, 0x61, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x56, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x1a, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2a, 0x37, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x56, 0x69, 0x61, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02,
	0x32, 0xdf, 0x0b, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x1e, 0x61, 0x64, 0x64,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a,
	0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a,
	0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x17,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0xb1, 0x01, 0x0a, 0x1e, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x26,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x21, 0x61, 0x64, 0x64,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x32, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x98, 0x01, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x42, 0x3e, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75,
	0x61, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uac_Collaborator_proto_rawDescOnce sync.Once
	file_uac_Collaborator_proto_rawDescData = file_uac_Collaborator_proto_rawDesc
)

func file_uac_Collaborator_proto_rawDescGZIP() []byte {
	file_uac_Collaborator_proto_rawDescOnce.Do(func() {
		file_uac_Collaborator_proto_rawDescData = protoimpl.X.CompressGZIP(file_uac_Collaborator_proto_rawDescData)
	})
	return file_uac_Collaborator_proto_rawDescData
}

var file_uac_Collaborator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_uac_Collaborator_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_uac_Collaborator_proto_goTypes = []interface{}{
	(ShareViaEnum)(0),                                 // 0: ai.verta.uac.ShareViaEnum
	(*AddCollaboratorRequest)(nil),                    // 1: ai.verta.uac.AddCollaboratorRequest
	(*RemoveCollaborator)(nil),                        // 2: ai.verta.uac.RemoveCollaborator
	(*GetCollaboratorResponse)(nil),                   // 3: ai.verta.uac.GetCollaboratorResponse
	(*GetCollaborator)(nil),                           // 4: ai.verta.uac.GetCollaborator
	(*AddCollaboratorRequest_Response)(nil),           // 5: ai.verta.uac.AddCollaboratorRequest.Response
	(*RemoveCollaborator_Response)(nil),               // 6: ai.verta.uac.RemoveCollaborator.Response
	(*GetCollaborator_Response)(nil),                  // 7: ai.verta.uac.GetCollaborator.Response
	(common.CollaboratorTypeEnum_CollaboratorType)(0), // 8: ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	(common.TernaryEnum_Ternary)(0),                   // 9: ai.verta.common.TernaryEnum.Ternary
	(common.EntitiesEnum_EntitiesTypes)(0),            // 10: ai.verta.common.EntitiesEnum.EntitiesTypes
	(*Action)(nil),                                    // 11: ai.verta.uac.Action
	(*UserInfo)(nil),                                  // 12: ai.verta.uac.UserInfo
	(*Organization)(nil),                              // 13: ai.verta.uac.Organization
	(*Team)(nil),                                      // 14: ai.verta.uac.Team
}
var file_uac_Collaborator_proto_depIdxs = []int32{
	8,  // 0: ai.verta.uac.AddCollaboratorRequest.collaborator_type:type_name -> ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	9,  // 1: ai.verta.uac.AddCollaboratorRequest.can_deploy:type_name -> ai.verta.common.TernaryEnum.Ternary
	10, // 2: ai.verta.uac.AddCollaboratorRequest.authz_entity_type:type_name -> ai.verta.common.EntitiesEnum.EntitiesTypes
	10, // 3: ai.verta.uac.RemoveCollaborator.authz_entity_type:type_name -> ai.verta.common.EntitiesEnum.EntitiesTypes
	8,  // 4: ai.verta.uac.GetCollaboratorResponse.collaborator_type:type_name -> ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	0,  // 5: ai.verta.uac.GetCollaboratorResponse.share_via_type:type_name -> ai.verta.uac.ShareViaEnum
	9,  // 6: ai.verta.uac.GetCollaboratorResponse.can_deploy:type_name -> ai.verta.common.TernaryEnum.Ternary
	10, // 7: ai.verta.uac.GetCollaboratorResponse.authz_entity_type:type_name -> ai.verta.common.EntitiesEnum.EntitiesTypes
	11, // 8: ai.verta.uac.AddCollaboratorRequest.Response.self_allowed_actions:type_name -> ai.verta.uac.Action
	12, // 9: ai.verta.uac.AddCollaboratorRequest.Response.collaborator_user_info:type_name -> ai.verta.uac.UserInfo
	13, // 10: ai.verta.uac.AddCollaboratorRequest.Response.collaborator_organization:type_name -> ai.verta.uac.Organization
	14, // 11: ai.verta.uac.AddCollaboratorRequest.Response.collaborator_team:type_name -> ai.verta.uac.Team
	11, // 12: ai.verta.uac.RemoveCollaborator.Response.self_allowed_actions:type_name -> ai.verta.uac.Action
	3,  // 13: ai.verta.uac.GetCollaborator.Response.shared_users:type_name -> ai.verta.uac.GetCollaboratorResponse
	1,  // 14: ai.verta.uac.CollaboratorService.addOrUpdateProjectCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	2,  // 15: ai.verta.uac.CollaboratorService.removeProjectCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	4,  // 16: ai.verta.uac.CollaboratorService.getProjectCollaborators:input_type -> ai.verta.uac.GetCollaborator
	1,  // 17: ai.verta.uac.CollaboratorService.addOrUpdateDatasetCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	2,  // 18: ai.verta.uac.CollaboratorService.removeDatasetCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	4,  // 19: ai.verta.uac.CollaboratorService.getDatasetCollaborators:input_type -> ai.verta.uac.GetCollaborator
	1,  // 20: ai.verta.uac.CollaboratorService.addOrUpdateRepositoryCollaborator:input_type -> ai.verta.uac.AddCollaboratorRequest
	2,  // 21: ai.verta.uac.CollaboratorService.removeRepositoryCollaborator:input_type -> ai.verta.uac.RemoveCollaborator
	4,  // 22: ai.verta.uac.CollaboratorService.getRepositoryCollaborators:input_type -> ai.verta.uac.GetCollaborator
	5,  // 23: ai.verta.uac.CollaboratorService.addOrUpdateProjectCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	6,  // 24: ai.verta.uac.CollaboratorService.removeProjectCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	7,  // 25: ai.verta.uac.CollaboratorService.getProjectCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	5,  // 26: ai.verta.uac.CollaboratorService.addOrUpdateDatasetCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	6,  // 27: ai.verta.uac.CollaboratorService.removeDatasetCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	7,  // 28: ai.verta.uac.CollaboratorService.getDatasetCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	5,  // 29: ai.verta.uac.CollaboratorService.addOrUpdateRepositoryCollaborator:output_type -> ai.verta.uac.AddCollaboratorRequest.Response
	6,  // 30: ai.verta.uac.CollaboratorService.removeRepositoryCollaborator:output_type -> ai.verta.uac.RemoveCollaborator.Response
	7,  // 31: ai.verta.uac.CollaboratorService.getRepositoryCollaborators:output_type -> ai.verta.uac.GetCollaborator.Response
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_uac_Collaborator_proto_init() }
func file_uac_Collaborator_proto_init() {
	if File_uac_Collaborator_proto != nil {
		return
	}
	file_uac_UACService_proto_init()
	file_uac_Organization_proto_init()
	file_uac_Team_proto_init()
	file_uac_RoleService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_uac_Collaborator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCollaboratorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollaborator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollaboratorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollaborator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCollaboratorRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollaborator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Collaborator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollaborator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_uac_Collaborator_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AddCollaboratorRequest_Response_CollaboratorUserInfo)(nil),
		(*AddCollaboratorRequest_Response_CollaboratorOrganization)(nil),
		(*AddCollaboratorRequest_Response_CollaboratorTeam)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uac_Collaborator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uac_Collaborator_proto_goTypes,
		DependencyIndexes: file_uac_Collaborator_proto_depIdxs,
		EnumInfos:         file_uac_Collaborator_proto_enumTypes,
		MessageInfos:      file_uac_Collaborator_proto_msgTypes,
	}.Build()
	File_uac_Collaborator_proto = out.File
	file_uac_Collaborator_proto_rawDesc = nil
	file_uac_Collaborator_proto_goTypes = nil
	file_uac_Collaborator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CollaboratorServiceClient is the client API for CollaboratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollaboratorServiceClient interface {
	AddOrUpdateProjectCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveProjectCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetProjectCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateDatasetCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveDatasetCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetDatasetCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateRepositoryCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveRepositoryCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetRepositoryCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
}

type collaboratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaboratorServiceClient(cc grpc.ClientConnInterface) CollaboratorServiceClient {
	return &collaboratorServiceClient{cc}
}

func (c *collaboratorServiceClient) AddOrUpdateProjectCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateProjectCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveProjectCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeProjectCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetProjectCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getProjectCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateDatasetCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateDatasetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveDatasetCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeDatasetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetDatasetCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getDatasetCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateRepositoryCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateRepositoryCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveRepositoryCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeRepositoryCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetRepositoryCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getRepositoryCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaboratorServiceServer is the server API for CollaboratorService service.
type CollaboratorServiceServer interface {
	AddOrUpdateProjectCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveProjectCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetProjectCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateDatasetCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveDatasetCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetDatasetCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateRepositoryCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveRepositoryCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetRepositoryCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
}

// UnimplementedCollaboratorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCollaboratorServiceServer struct {
}

func (*UnimplementedCollaboratorServiceServer) AddOrUpdateProjectCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateProjectCollaborator not implemented")
}
func (*UnimplementedCollaboratorServiceServer) RemoveProjectCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectCollaborator not implemented")
}
func (*UnimplementedCollaboratorServiceServer) GetProjectCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectCollaborators not implemented")
}
func (*UnimplementedCollaboratorServiceServer) AddOrUpdateDatasetCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateDatasetCollaborator not implemented")
}
func (*UnimplementedCollaboratorServiceServer) RemoveDatasetCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDatasetCollaborator not implemented")
}
func (*UnimplementedCollaboratorServiceServer) GetDatasetCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetCollaborators not implemented")
}
func (*UnimplementedCollaboratorServiceServer) AddOrUpdateRepositoryCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateRepositoryCollaborator not implemented")
}
func (*UnimplementedCollaboratorServiceServer) RemoveRepositoryCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRepositoryCollaborator not implemented")
}
func (*UnimplementedCollaboratorServiceServer) GetRepositoryCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryCollaborators not implemented")
}

func RegisterCollaboratorServiceServer(s *grpc.Server, srv CollaboratorServiceServer) {
	s.RegisterService(&_CollaboratorService_serviceDesc, srv)
}

func _CollaboratorService_AddOrUpdateProjectCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateProjectCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/AddOrUpdateProjectCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateProjectCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveProjectCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveProjectCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/RemoveProjectCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveProjectCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetProjectCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetProjectCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/GetProjectCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetProjectCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateDatasetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateDatasetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/AddOrUpdateDatasetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateDatasetCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveDatasetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveDatasetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/RemoveDatasetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveDatasetCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetDatasetCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetDatasetCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/GetDatasetCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetDatasetCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateRepositoryCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateRepositoryCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/AddOrUpdateRepositoryCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateRepositoryCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveRepositoryCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveRepositoryCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/RemoveRepositoryCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveRepositoryCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetRepositoryCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetRepositoryCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/GetRepositoryCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetRepositoryCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollaboratorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.CollaboratorService",
	HandlerType: (*CollaboratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addOrUpdateProjectCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateProjectCollaborator_Handler,
		},
		{
			MethodName: "removeProjectCollaborator",
			Handler:    _CollaboratorService_RemoveProjectCollaborator_Handler,
		},
		{
			MethodName: "getProjectCollaborators",
			Handler:    _CollaboratorService_GetProjectCollaborators_Handler,
		},
		{
			MethodName: "addOrUpdateDatasetCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateDatasetCollaborator_Handler,
		},
		{
			MethodName: "removeDatasetCollaborator",
			Handler:    _CollaboratorService_RemoveDatasetCollaborator_Handler,
		},
		{
			MethodName: "getDatasetCollaborators",
			Handler:    _CollaboratorService_GetDatasetCollaborators_Handler,
		},
		{
			MethodName: "addOrUpdateRepositoryCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateRepositoryCollaborator_Handler,
		},
		{
			MethodName: "removeRepositoryCollaborator",
			Handler:    _CollaboratorService_RemoveRepositoryCollaborator_Handler,
		},
		{
			MethodName: "getRepositoryCollaborators",
			Handler:    _CollaboratorService_GetRepositoryCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/Collaborator.proto",
}
