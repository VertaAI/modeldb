// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: uac/GroupV2.proto

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	// Gets information from a given group
	GetGroupById(ctx context.Context, in *GetGroupById, opts ...grpc.CallOption) (*GetGroupById_Response, error)
	// Lists the groups that the provided user is a member of, or all groups if user isn't specified
	SearchGroups(ctx context.Context, in *SearchGroups, opts ...grpc.CallOption) (*SearchGroups_Response, error)
	// Create or update a group
	SetGroup(ctx context.Context, in *SetGroup, opts ...grpc.CallOption) (*SetGroup_Response, error)
	// Delete an existing group
	DeleteGroup(ctx context.Context, in *DeleteGroup, opts ...grpc.CallOption) (*DeleteGroup_Response, error)
	// Adds the given user to the group
	AddUsers(ctx context.Context, in *AddGroupUsers, opts ...grpc.CallOption) (*AddGroupUsers_Response, error)
	// Removes the given user from the group
	RemoveUsers(ctx context.Context, in *RemoveGroupUsers, opts ...grpc.CallOption) (*RemoveGroupUsers_Response, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) GetGroupById(ctx context.Context, in *GetGroupById, opts ...grpc.CallOption) (*GetGroupById_Response, error) {
	out := new(GetGroupById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.GroupService/getGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SearchGroups(ctx context.Context, in *SearchGroups, opts ...grpc.CallOption) (*SearchGroups_Response, error) {
	out := new(SearchGroups_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.GroupService/searchGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SetGroup(ctx context.Context, in *SetGroup, opts ...grpc.CallOption) (*SetGroup_Response, error) {
	out := new(SetGroup_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.GroupService/setGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroup, opts ...grpc.CallOption) (*DeleteGroup_Response, error) {
	out := new(DeleteGroup_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.GroupService/deleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AddUsers(ctx context.Context, in *AddGroupUsers, opts ...grpc.CallOption) (*AddGroupUsers_Response, error) {
	out := new(AddGroupUsers_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.GroupService/addUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) RemoveUsers(ctx context.Context, in *RemoveGroupUsers, opts ...grpc.CallOption) (*RemoveGroupUsers_Response, error) {
	out := new(RemoveGroupUsers_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.GroupService/removeUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	// Gets information from a given group
	GetGroupById(context.Context, *GetGroupById) (*GetGroupById_Response, error)
	// Lists the groups that the provided user is a member of, or all groups if user isn't specified
	SearchGroups(context.Context, *SearchGroups) (*SearchGroups_Response, error)
	// Create or update a group
	SetGroup(context.Context, *SetGroup) (*SetGroup_Response, error)
	// Delete an existing group
	DeleteGroup(context.Context, *DeleteGroup) (*DeleteGroup_Response, error)
	// Adds the given user to the group
	AddUsers(context.Context, *AddGroupUsers) (*AddGroupUsers_Response, error)
	// Removes the given user from the group
	RemoveUsers(context.Context, *RemoveGroupUsers) (*RemoveGroupUsers_Response, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) GetGroupById(context.Context, *GetGroupById) (*GetGroupById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupById not implemented")
}
func (UnimplementedGroupServiceServer) SearchGroups(context.Context, *SearchGroups) (*SearchGroups_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroups not implemented")
}
func (UnimplementedGroupServiceServer) SetGroup(context.Context, *SetGroup) (*SetGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroup not implemented")
}
func (UnimplementedGroupServiceServer) DeleteGroup(context.Context, *DeleteGroup) (*DeleteGroup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupServiceServer) AddUsers(context.Context, *AddGroupUsers) (*AddGroupUsers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedGroupServiceServer) RemoveUsers(context.Context, *RemoveGroupUsers) (*RemoveGroupUsers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsers not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_GetGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.GroupService/getGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupById(ctx, req.(*GetGroupById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SearchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SearchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.GroupService/searchGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SearchGroups(ctx, req.(*SearchGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.GroupService/setGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SetGroup(ctx, req.(*SetGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.GroupService/deleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).DeleteGroup(ctx, req.(*DeleteGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_AddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).AddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.GroupService/addUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).AddUsers(ctx, req.(*AddGroupUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_RemoveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).RemoveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.GroupService/removeUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).RemoveUsers(ctx, req.(*RemoveGroupUsers))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getGroupById",
			Handler:    _GroupService_GetGroupById_Handler,
		},
		{
			MethodName: "searchGroups",
			Handler:    _GroupService_SearchGroups_Handler,
		},
		{
			MethodName: "setGroup",
			Handler:    _GroupService_SetGroup_Handler,
		},
		{
			MethodName: "deleteGroup",
			Handler:    _GroupService_DeleteGroup_Handler,
		},
		{
			MethodName: "addUsers",
			Handler:    _GroupService_AddUsers_Handler,
		},
		{
			MethodName: "removeUsers",
			Handler:    _GroupService_RemoveUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/GroupV2.proto",
}
