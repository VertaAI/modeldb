// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SystemAdminServiceClient is the client API for SystemAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemAdminServiceClient interface {
	// List system admins
	// Only available for system admins themselves
	ListSystemAdmins(ctx context.Context, in *ListSystemAdmins, opts ...grpc.CallOption) (*ListSystemAdmins_Response, error)
	// Adds the given user to the list of system administrators
	// Only available for system admins themselves
	AddSystemAdmin(ctx context.Context, in *AddSystemAdmin, opts ...grpc.CallOption) (*AddSystemAdmin_Response, error)
	// Removes the given user from the list of system administrators
	// The current user can never be removed
	// The root user (defined by email via config) can never be removed
	RemoveSystemAdmin(ctx context.Context, in *RemoveSystemAdmin, opts ...grpc.CallOption) (*RemoveSystemAdmin_Response, error)
	CreateOrUpdatePypiConfiguration(ctx context.Context, in *PypiConfiguration, opts ...grpc.CallOption) (*PypiConfiguration, error)
	DeletePypiConfiguration(ctx context.Context, in *DeletePypiConfiguration, opts ...grpc.CallOption) (*DeletePypiConfiguration_Response, error)
	ListPypiConfiguration(ctx context.Context, in *ListPypiConfiguration, opts ...grpc.CallOption) (*ListPypiConfiguration_Response, error)
	EnablePypiConfiguration(ctx context.Context, in *EnablePypiConfiguration, opts ...grpc.CallOption) (*EnablePypiConfiguration_Response, error)
	CreateOrUpdateKafkaConfiguration(ctx context.Context, in *KafkaConfiguration, opts ...grpc.CallOption) (*KafkaConfiguration, error)
	DeleteKafkaConfiguration(ctx context.Context, in *DeleteKafkaConfiguration, opts ...grpc.CallOption) (*DeleteKafkaConfiguration_Response, error)
	ListKafkaConfiguration(ctx context.Context, in *ListKafkaConfiguration, opts ...grpc.CallOption) (*ListKafkaConfiguration_Response, error)
	EnableKafkaConfiguration(ctx context.Context, in *EnableKafkaConfiguration, opts ...grpc.CallOption) (*EnableKafkaConfiguration_Response, error)
}

type systemAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemAdminServiceClient(cc grpc.ClientConnInterface) SystemAdminServiceClient {
	return &systemAdminServiceClient{cc}
}

func (c *systemAdminServiceClient) ListSystemAdmins(ctx context.Context, in *ListSystemAdmins, opts ...grpc.CallOption) (*ListSystemAdmins_Response, error) {
	out := new(ListSystemAdmins_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/listSystemAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) AddSystemAdmin(ctx context.Context, in *AddSystemAdmin, opts ...grpc.CallOption) (*AddSystemAdmin_Response, error) {
	out := new(AddSystemAdmin_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/addSystemAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) RemoveSystemAdmin(ctx context.Context, in *RemoveSystemAdmin, opts ...grpc.CallOption) (*RemoveSystemAdmin_Response, error) {
	out := new(RemoveSystemAdmin_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/removeSystemAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) CreateOrUpdatePypiConfiguration(ctx context.Context, in *PypiConfiguration, opts ...grpc.CallOption) (*PypiConfiguration, error) {
	out := new(PypiConfiguration)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/createOrUpdatePypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) DeletePypiConfiguration(ctx context.Context, in *DeletePypiConfiguration, opts ...grpc.CallOption) (*DeletePypiConfiguration_Response, error) {
	out := new(DeletePypiConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/deletePypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListPypiConfiguration(ctx context.Context, in *ListPypiConfiguration, opts ...grpc.CallOption) (*ListPypiConfiguration_Response, error) {
	out := new(ListPypiConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/listPypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) EnablePypiConfiguration(ctx context.Context, in *EnablePypiConfiguration, opts ...grpc.CallOption) (*EnablePypiConfiguration_Response, error) {
	out := new(EnablePypiConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/enablePypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) CreateOrUpdateKafkaConfiguration(ctx context.Context, in *KafkaConfiguration, opts ...grpc.CallOption) (*KafkaConfiguration, error) {
	out := new(KafkaConfiguration)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/createOrUpdateKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) DeleteKafkaConfiguration(ctx context.Context, in *DeleteKafkaConfiguration, opts ...grpc.CallOption) (*DeleteKafkaConfiguration_Response, error) {
	out := new(DeleteKafkaConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/deleteKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListKafkaConfiguration(ctx context.Context, in *ListKafkaConfiguration, opts ...grpc.CallOption) (*ListKafkaConfiguration_Response, error) {
	out := new(ListKafkaConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/listKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) EnableKafkaConfiguration(ctx context.Context, in *EnableKafkaConfiguration, opts ...grpc.CallOption) (*EnableKafkaConfiguration_Response, error) {
	out := new(EnableKafkaConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/enableKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemAdminServiceServer is the server API for SystemAdminService service.
type SystemAdminServiceServer interface {
	// List system admins
	// Only available for system admins themselves
	ListSystemAdmins(context.Context, *ListSystemAdmins) (*ListSystemAdmins_Response, error)
	// Adds the given user to the list of system administrators
	// Only available for system admins themselves
	AddSystemAdmin(context.Context, *AddSystemAdmin) (*AddSystemAdmin_Response, error)
	// Removes the given user from the list of system administrators
	// The current user can never be removed
	// The root user (defined by email via config) can never be removed
	RemoveSystemAdmin(context.Context, *RemoveSystemAdmin) (*RemoveSystemAdmin_Response, error)
	CreateOrUpdatePypiConfiguration(context.Context, *PypiConfiguration) (*PypiConfiguration, error)
	DeletePypiConfiguration(context.Context, *DeletePypiConfiguration) (*DeletePypiConfiguration_Response, error)
	ListPypiConfiguration(context.Context, *ListPypiConfiguration) (*ListPypiConfiguration_Response, error)
	EnablePypiConfiguration(context.Context, *EnablePypiConfiguration) (*EnablePypiConfiguration_Response, error)
	CreateOrUpdateKafkaConfiguration(context.Context, *KafkaConfiguration) (*KafkaConfiguration, error)
	DeleteKafkaConfiguration(context.Context, *DeleteKafkaConfiguration) (*DeleteKafkaConfiguration_Response, error)
	ListKafkaConfiguration(context.Context, *ListKafkaConfiguration) (*ListKafkaConfiguration_Response, error)
	EnableKafkaConfiguration(context.Context, *EnableKafkaConfiguration) (*EnableKafkaConfiguration_Response, error)
}

// UnimplementedSystemAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSystemAdminServiceServer struct {
}

func (*UnimplementedSystemAdminServiceServer) ListSystemAdmins(context.Context, *ListSystemAdmins) (*ListSystemAdmins_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemAdmins not implemented")
}
func (*UnimplementedSystemAdminServiceServer) AddSystemAdmin(context.Context, *AddSystemAdmin) (*AddSystemAdmin_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSystemAdmin not implemented")
}
func (*UnimplementedSystemAdminServiceServer) RemoveSystemAdmin(context.Context, *RemoveSystemAdmin) (*RemoveSystemAdmin_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSystemAdmin not implemented")
}
func (*UnimplementedSystemAdminServiceServer) CreateOrUpdatePypiConfiguration(context.Context, *PypiConfiguration) (*PypiConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdatePypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) DeletePypiConfiguration(context.Context, *DeletePypiConfiguration) (*DeletePypiConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) ListPypiConfiguration(context.Context, *ListPypiConfiguration) (*ListPypiConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) EnablePypiConfiguration(context.Context, *EnablePypiConfiguration) (*EnablePypiConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) CreateOrUpdateKafkaConfiguration(context.Context, *KafkaConfiguration) (*KafkaConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateKafkaConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) DeleteKafkaConfiguration(context.Context, *DeleteKafkaConfiguration) (*DeleteKafkaConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKafkaConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) ListKafkaConfiguration(context.Context, *ListKafkaConfiguration) (*ListKafkaConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKafkaConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) EnableKafkaConfiguration(context.Context, *EnableKafkaConfiguration) (*EnableKafkaConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableKafkaConfiguration not implemented")
}

func RegisterSystemAdminServiceServer(s *grpc.Server, srv SystemAdminServiceServer) {
	s.RegisterService(&_SystemAdminService_serviceDesc, srv)
}

func _SystemAdminService_ListSystemAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListSystemAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/ListSystemAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListSystemAdmins(ctx, req.(*ListSystemAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_AddSystemAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSystemAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).AddSystemAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/AddSystemAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).AddSystemAdmin(ctx, req.(*AddSystemAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_RemoveSystemAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSystemAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).RemoveSystemAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/RemoveSystemAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).RemoveSystemAdmin(ctx, req.(*RemoveSystemAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_CreateOrUpdatePypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).CreateOrUpdatePypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/CreateOrUpdatePypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).CreateOrUpdatePypiConfiguration(ctx, req.(*PypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_DeletePypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).DeletePypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/DeletePypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).DeletePypiConfiguration(ctx, req.(*DeletePypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListPypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListPypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/ListPypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListPypiConfiguration(ctx, req.(*ListPypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_EnablePypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).EnablePypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/EnablePypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).EnablePypiConfiguration(ctx, req.(*EnablePypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_CreateOrUpdateKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).CreateOrUpdateKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/CreateOrUpdateKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).CreateOrUpdateKafkaConfiguration(ctx, req.(*KafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_DeleteKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).DeleteKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/DeleteKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).DeleteKafkaConfiguration(ctx, req.(*DeleteKafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/ListKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListKafkaConfiguration(ctx, req.(*ListKafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_EnableKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableKafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).EnableKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/EnableKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).EnableKafkaConfiguration(ctx, req.(*EnableKafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.SystemAdminService",
	HandlerType: (*SystemAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listSystemAdmins",
			Handler:    _SystemAdminService_ListSystemAdmins_Handler,
		},
		{
			MethodName: "addSystemAdmin",
			Handler:    _SystemAdminService_AddSystemAdmin_Handler,
		},
		{
			MethodName: "removeSystemAdmin",
			Handler:    _SystemAdminService_RemoveSystemAdmin_Handler,
		},
		{
			MethodName: "createOrUpdatePypiConfiguration",
			Handler:    _SystemAdminService_CreateOrUpdatePypiConfiguration_Handler,
		},
		{
			MethodName: "deletePypiConfiguration",
			Handler:    _SystemAdminService_DeletePypiConfiguration_Handler,
		},
		{
			MethodName: "listPypiConfiguration",
			Handler:    _SystemAdminService_ListPypiConfiguration_Handler,
		},
		{
			MethodName: "enablePypiConfiguration",
			Handler:    _SystemAdminService_EnablePypiConfiguration_Handler,
		},
		{
			MethodName: "createOrUpdateKafkaConfiguration",
			Handler:    _SystemAdminService_CreateOrUpdateKafkaConfiguration_Handler,
		},
		{
			MethodName: "deleteKafkaConfiguration",
			Handler:    _SystemAdminService_DeleteKafkaConfiguration_Handler,
		},
		{
			MethodName: "listKafkaConfiguration",
			Handler:    _SystemAdminService_ListKafkaConfiguration_Handler,
		},
		{
			MethodName: "enableKafkaConfiguration",
			Handler:    _SystemAdminService_EnableKafkaConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/SystemAdmin.proto",
}
