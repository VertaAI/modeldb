// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceServiceV2Client is the client API for ResourceServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceV2Client interface {
	GetResources(ctx context.Context, in *GetResourcesV2, opts ...grpc.CallOption) (*GetResourcesV2_Response, error)
}

type resourceServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceV2Client(cc grpc.ClientConnInterface) ResourceServiceV2Client {
	return &resourceServiceV2Client{cc}
}

func (c *resourceServiceV2Client) GetResources(ctx context.Context, in *GetResourcesV2, opts ...grpc.CallOption) (*GetResourcesV2_Response, error) {
	out := new(GetResourcesV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.ResourceServiceV2/getResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceV2Server is the server API for ResourceServiceV2 service.
type ResourceServiceV2Server interface {
	GetResources(context.Context, *GetResourcesV2) (*GetResourcesV2_Response, error)
}

// UnimplementedResourceServiceV2Server can be embedded to have forward compatible implementations.
type UnimplementedResourceServiceV2Server struct {
}

func (*UnimplementedResourceServiceV2Server) GetResources(context.Context, *GetResourcesV2) (*GetResourcesV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}

func RegisterResourceServiceV2Server(s *grpc.Server, srv ResourceServiceV2Server) {
	s.RegisterService(&_ResourceServiceV2_serviceDesc, srv)
}

func _ResourceServiceV2_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceV2Server).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.ResourceServiceV2/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceV2Server).GetResources(ctx, req.(*GetResourcesV2))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceServiceV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.ResourceServiceV2",
	HandlerType: (*ResourceServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getResources",
			Handler:    _ResourceServiceV2_GetResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/ResourceV2.proto",
}
