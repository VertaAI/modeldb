// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SCIMConfigurationServiceClient is the client API for SCIMConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SCIMConfigurationServiceClient interface {
	GetConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SCIMConfiguration, error)
}

type sCIMConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSCIMConfigurationServiceClient(cc grpc.ClientConnInterface) SCIMConfigurationServiceClient {
	return &sCIMConfigurationServiceClient{cc}
}

func (c *sCIMConfigurationServiceClient) GetConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SCIMConfiguration, error) {
	out := new(SCIMConfiguration)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SCIMConfigurationService/getConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SCIMConfigurationServiceServer is the server API for SCIMConfigurationService service.
type SCIMConfigurationServiceServer interface {
	GetConfiguration(context.Context, *Empty) (*SCIMConfiguration, error)
}

// UnimplementedSCIMConfigurationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSCIMConfigurationServiceServer struct {
}

func (*UnimplementedSCIMConfigurationServiceServer) GetConfiguration(context.Context, *Empty) (*SCIMConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}

func RegisterSCIMConfigurationServiceServer(s *grpc.Server, srv SCIMConfigurationServiceServer) {
	s.RegisterService(&_SCIMConfigurationService_serviceDesc, srv)
}

func _SCIMConfigurationService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCIMConfigurationServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SCIMConfigurationService/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCIMConfigurationServiceServer).GetConfiguration(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCIMConfigurationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.SCIMConfigurationService",
	HandlerType: (*SCIMConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getConfiguration",
			Handler:    _SCIMConfigurationService_GetConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/SCIMConfiguration.proto",
}
