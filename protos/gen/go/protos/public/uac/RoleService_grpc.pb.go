// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	GetRoleById(ctx context.Context, in *GetRoleById, opts ...grpc.CallOption) (*GetRoleById_Response, error)
	GetRoleByName(ctx context.Context, in *GetRoleByName, opts ...grpc.CallOption) (*GetRoleByName_Response, error)
	ListRoles(ctx context.Context, in *ListRoles, opts ...grpc.CallOption) (*ListRoles_Response, error)
	SetRole(ctx context.Context, in *SetRole, opts ...grpc.CallOption) (*SetRole_Response, error)
	DeleteRole(ctx context.Context, in *DeleteRole, opts ...grpc.CallOption) (*DeleteRole_Response, error)
	GetBindingRoleById(ctx context.Context, in *GetRoleBindingById, opts ...grpc.CallOption) (*GetRoleBindingById_Response, error)
	GetRoleBindingByName(ctx context.Context, in *GetRoleBindingByName, opts ...grpc.CallOption) (*GetRoleBindingByName_Response, error)
	ListRoleBindings(ctx context.Context, in *ListRoleBindings, opts ...grpc.CallOption) (*ListRoleBindings_Response, error)
	SetRoleBinding(ctx context.Context, in *SetRoleBinding, opts ...grpc.CallOption) (*SetRoleBinding_Response, error)
	DeleteRoleBinding(ctx context.Context, in *DeleteRoleBinding, opts ...grpc.CallOption) (*DeleteRoleBinding_Response, error)
	DeleteRoleBindings(ctx context.Context, in *DeleteRoleBindings, opts ...grpc.CallOption) (*DeleteRoleBindings_Response, error)
	RemoveResources(ctx context.Context, in *RemoveResources, opts ...grpc.CallOption) (*RemoveResources_Response, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) GetRoleById(ctx context.Context, in *GetRoleById, opts ...grpc.CallOption) (*GetRoleById_Response, error) {
	out := new(GetRoleById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/getRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRoleByName(ctx context.Context, in *GetRoleByName, opts ...grpc.CallOption) (*GetRoleByName_Response, error) {
	out := new(GetRoleByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/getRoleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListRoles(ctx context.Context, in *ListRoles, opts ...grpc.CallOption) (*ListRoles_Response, error) {
	out := new(ListRoles_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/listRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) SetRole(ctx context.Context, in *SetRole, opts ...grpc.CallOption) (*SetRole_Response, error) {
	out := new(SetRole_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/setRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *DeleteRole, opts ...grpc.CallOption) (*DeleteRole_Response, error) {
	out := new(DeleteRole_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/deleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetBindingRoleById(ctx context.Context, in *GetRoleBindingById, opts ...grpc.CallOption) (*GetRoleBindingById_Response, error) {
	out := new(GetRoleBindingById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/getBindingRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRoleBindingByName(ctx context.Context, in *GetRoleBindingByName, opts ...grpc.CallOption) (*GetRoleBindingByName_Response, error) {
	out := new(GetRoleBindingByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/getRoleBindingByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListRoleBindings(ctx context.Context, in *ListRoleBindings, opts ...grpc.CallOption) (*ListRoleBindings_Response, error) {
	out := new(ListRoleBindings_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/listRoleBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) SetRoleBinding(ctx context.Context, in *SetRoleBinding, opts ...grpc.CallOption) (*SetRoleBinding_Response, error) {
	out := new(SetRoleBinding_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/setRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRoleBinding(ctx context.Context, in *DeleteRoleBinding, opts ...grpc.CallOption) (*DeleteRoleBinding_Response, error) {
	out := new(DeleteRoleBinding_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/deleteRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRoleBindings(ctx context.Context, in *DeleteRoleBindings, opts ...grpc.CallOption) (*DeleteRoleBindings_Response, error) {
	out := new(DeleteRoleBindings_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/deleteRoleBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RemoveResources(ctx context.Context, in *RemoveResources, opts ...grpc.CallOption) (*RemoveResources_Response, error) {
	out := new(RemoveResources_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleService/removeResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
type RoleServiceServer interface {
	GetRoleById(context.Context, *GetRoleById) (*GetRoleById_Response, error)
	GetRoleByName(context.Context, *GetRoleByName) (*GetRoleByName_Response, error)
	ListRoles(context.Context, *ListRoles) (*ListRoles_Response, error)
	SetRole(context.Context, *SetRole) (*SetRole_Response, error)
	DeleteRole(context.Context, *DeleteRole) (*DeleteRole_Response, error)
	GetBindingRoleById(context.Context, *GetRoleBindingById) (*GetRoleBindingById_Response, error)
	GetRoleBindingByName(context.Context, *GetRoleBindingByName) (*GetRoleBindingByName_Response, error)
	ListRoleBindings(context.Context, *ListRoleBindings) (*ListRoleBindings_Response, error)
	SetRoleBinding(context.Context, *SetRoleBinding) (*SetRoleBinding_Response, error)
	DeleteRoleBinding(context.Context, *DeleteRoleBinding) (*DeleteRoleBinding_Response, error)
	DeleteRoleBindings(context.Context, *DeleteRoleBindings) (*DeleteRoleBindings_Response, error)
	RemoveResources(context.Context, *RemoveResources) (*RemoveResources_Response, error)
}

// UnimplementedRoleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (*UnimplementedRoleServiceServer) GetRoleById(context.Context, *GetRoleById) (*GetRoleById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (*UnimplementedRoleServiceServer) GetRoleByName(context.Context, *GetRoleByName) (*GetRoleByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByName not implemented")
}
func (*UnimplementedRoleServiceServer) ListRoles(context.Context, *ListRoles) (*ListRoles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedRoleServiceServer) SetRole(context.Context, *SetRole) (*SetRole_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (*UnimplementedRoleServiceServer) DeleteRole(context.Context, *DeleteRole) (*DeleteRole_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedRoleServiceServer) GetBindingRoleById(context.Context, *GetRoleBindingById) (*GetRoleBindingById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindingRoleById not implemented")
}
func (*UnimplementedRoleServiceServer) GetRoleBindingByName(context.Context, *GetRoleBindingByName) (*GetRoleBindingByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleBindingByName not implemented")
}
func (*UnimplementedRoleServiceServer) ListRoleBindings(context.Context, *ListRoleBindings) (*ListRoleBindings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleBindings not implemented")
}
func (*UnimplementedRoleServiceServer) SetRoleBinding(context.Context, *SetRoleBinding) (*SetRoleBinding_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleBinding not implemented")
}
func (*UnimplementedRoleServiceServer) DeleteRoleBinding(context.Context, *DeleteRoleBinding) (*DeleteRoleBinding_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleBinding not implemented")
}
func (*UnimplementedRoleServiceServer) DeleteRoleBindings(context.Context, *DeleteRoleBindings) (*DeleteRoleBindings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleBindings not implemented")
}
func (*UnimplementedRoleServiceServer) RemoveResources(context.Context, *RemoveResources) (*RemoveResources_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResources not implemented")
}

func RegisterRoleServiceServer(s *grpc.Server, srv RoleServiceServer) {
	s.RegisterService(&_RoleService_serviceDesc, srv)
}

func _RoleService_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/GetRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoleById(ctx, req.(*GetRoleById))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/GetRoleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoleByName(ctx, req.(*GetRoleByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListRoles(ctx, req.(*ListRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).SetRole(ctx, req.(*SetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*DeleteRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetBindingRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleBindingById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetBindingRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/GetBindingRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetBindingRoleById(ctx, req.(*GetRoleBindingById))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRoleBindingByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleBindingByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoleBindingByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/GetRoleBindingByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoleBindingByName(ctx, req.(*GetRoleBindingByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleBindings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/ListRoleBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListRoleBindings(ctx, req.(*ListRoleBindings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_SetRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).SetRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/SetRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).SetRoleBinding(ctx, req.(*SetRoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/DeleteRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRoleBinding(ctx, req.(*DeleteRoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleBindings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/DeleteRoleBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRoleBindings(ctx, req.(*DeleteRoleBindings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RemoveResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RemoveResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleService/RemoveResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RemoveResources(ctx, req.(*RemoveResources))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRoleById",
			Handler:    _RoleService_GetRoleById_Handler,
		},
		{
			MethodName: "getRoleByName",
			Handler:    _RoleService_GetRoleByName_Handler,
		},
		{
			MethodName: "listRoles",
			Handler:    _RoleService_ListRoles_Handler,
		},
		{
			MethodName: "setRole",
			Handler:    _RoleService_SetRole_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "getBindingRoleById",
			Handler:    _RoleService_GetBindingRoleById_Handler,
		},
		{
			MethodName: "getRoleBindingByName",
			Handler:    _RoleService_GetRoleBindingByName_Handler,
		},
		{
			MethodName: "listRoleBindings",
			Handler:    _RoleService_ListRoleBindings_Handler,
		},
		{
			MethodName: "setRoleBinding",
			Handler:    _RoleService_SetRoleBinding_Handler,
		},
		{
			MethodName: "deleteRoleBinding",
			Handler:    _RoleService_DeleteRoleBinding_Handler,
		},
		{
			MethodName: "deleteRoleBindings",
			Handler:    _RoleService_DeleteRoleBindings_Handler,
		},
		{
			MethodName: "removeResources",
			Handler:    _RoleService_RemoveResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/RoleService.proto",
}
