// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: uac/SystemAdmin.proto

package uac

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListSystemAdmins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSystemAdmins) Reset() {
	*x = ListSystemAdmins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemAdmins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemAdmins) ProtoMessage() {}

func (x *ListSystemAdmins) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemAdmins.ProtoReflect.Descriptor instead.
func (*ListSystemAdmins) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{0}
}

type AddSystemAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareWith string `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"`
}

func (x *AddSystemAdmin) Reset() {
	*x = AddSystemAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSystemAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSystemAdmin) ProtoMessage() {}

func (x *AddSystemAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSystemAdmin.ProtoReflect.Descriptor instead.
func (*AddSystemAdmin) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{1}
}

func (x *AddSystemAdmin) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

type RemoveSystemAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareWith string `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"`
}

func (x *RemoveSystemAdmin) Reset() {
	*x = RemoveSystemAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSystemAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSystemAdmin) ProtoMessage() {}

func (x *RemoveSystemAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSystemAdmin.ProtoReflect.Descriptor instead.
func (*RemoveSystemAdmin) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveSystemAdmin) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

type PypiConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Missing if create, present if update
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// All fields below must be provided on an update
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url      string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Enabled  bool   `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *PypiConfiguration) Reset() {
	*x = PypiConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PypiConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PypiConfiguration) ProtoMessage() {}

func (x *PypiConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PypiConfiguration.ProtoReflect.Descriptor instead.
func (*PypiConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{3}
}

func (x *PypiConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PypiConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PypiConfiguration) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PypiConfiguration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PypiConfiguration) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PypiConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ListPypiConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPypiConfiguration) Reset() {
	*x = ListPypiConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPypiConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPypiConfiguration) ProtoMessage() {}

func (x *ListPypiConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPypiConfiguration.ProtoReflect.Descriptor instead.
func (*ListPypiConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{4}
}

type DeletePypiConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePypiConfiguration) Reset() {
	*x = DeletePypiConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePypiConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePypiConfiguration) ProtoMessage() {}

func (x *DeletePypiConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePypiConfiguration.ProtoReflect.Descriptor instead.
func (*DeletePypiConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{5}
}

func (x *DeletePypiConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EnablePypiConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewEnabled bool   `protobuf:"varint,2,opt,name=new_enabled,json=newEnabled,proto3" json:"new_enabled,omitempty"`
}

func (x *EnablePypiConfiguration) Reset() {
	*x = EnablePypiConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePypiConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePypiConfiguration) ProtoMessage() {}

func (x *EnablePypiConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePypiConfiguration.ProtoReflect.Descriptor instead.
func (*EnablePypiConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{6}
}

func (x *EnablePypiConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnablePypiConfiguration) GetNewEnabled() bool {
	if x != nil {
		return x.NewEnabled
	}
	return false
}

type KafkaConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tls      *KafkaConfiguration_TLS      `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	Kerberos *KafkaConfiguration_Kerberos `protobuf:"bytes,4,opt,name=kerberos,proto3" json:"kerberos,omitempty"`
	// All fields below must be provided on an update
	BrokerAddresses string `protobuf:"bytes,2,opt,name=brokerAddresses,proto3" json:"brokerAddresses,omitempty"`
	Enabled         bool   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name            string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *KafkaConfiguration) Reset() {
	*x = KafkaConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfiguration) ProtoMessage() {}

func (x *KafkaConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfiguration.ProtoReflect.Descriptor instead.
func (*KafkaConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{7}
}

func (x *KafkaConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KafkaConfiguration) GetTls() *KafkaConfiguration_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *KafkaConfiguration) GetKerberos() *KafkaConfiguration_Kerberos {
	if x != nil {
		return x.Kerberos
	}
	return nil
}

func (x *KafkaConfiguration) GetBrokerAddresses() string {
	if x != nil {
		return x.BrokerAddresses
	}
	return ""
}

func (x *KafkaConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KafkaConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListKafkaConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListKafkaConfiguration) Reset() {
	*x = ListKafkaConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKafkaConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKafkaConfiguration) ProtoMessage() {}

func (x *ListKafkaConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKafkaConfiguration.ProtoReflect.Descriptor instead.
func (*ListKafkaConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{8}
}

type DeleteKafkaConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteKafkaConfiguration) Reset() {
	*x = DeleteKafkaConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKafkaConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKafkaConfiguration) ProtoMessage() {}

func (x *DeleteKafkaConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKafkaConfiguration.ProtoReflect.Descriptor instead.
func (*DeleteKafkaConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteKafkaConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EnableKafkaConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewEnabled bool   `protobuf:"varint,2,opt,name=new_enabled,json=newEnabled,proto3" json:"new_enabled,omitempty"`
}

func (x *EnableKafkaConfiguration) Reset() {
	*x = EnableKafkaConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableKafkaConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableKafkaConfiguration) ProtoMessage() {}

func (x *EnableKafkaConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableKafkaConfiguration.ProtoReflect.Descriptor instead.
func (*EnableKafkaConfiguration) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{10}
}

func (x *EnableKafkaConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnableKafkaConfiguration) GetNewEnabled() bool {
	if x != nil {
		return x.NewEnabled
	}
	return false
}

type ListSystemAdmins_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *ListSystemAdmins_Response) Reset() {
	*x = ListSystemAdmins_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemAdmins_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemAdmins_Response) ProtoMessage() {}

func (x *ListSystemAdmins_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemAdmins_Response.ProtoReflect.Descriptor instead.
func (*ListSystemAdmins_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ListSystemAdmins_Response) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type AddSystemAdmin_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddSystemAdmin_Response) Reset() {
	*x = AddSystemAdmin_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSystemAdmin_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSystemAdmin_Response) ProtoMessage() {}

func (x *AddSystemAdmin_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSystemAdmin_Response.ProtoReflect.Descriptor instead.
func (*AddSystemAdmin_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AddSystemAdmin_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type RemoveSystemAdmin_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoveSystemAdmin_Response) Reset() {
	*x = RemoveSystemAdmin_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSystemAdmin_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSystemAdmin_Response) ProtoMessage() {}

func (x *RemoveSystemAdmin_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSystemAdmin_Response.ProtoReflect.Descriptor instead.
func (*RemoveSystemAdmin_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RemoveSystemAdmin_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ListPypiConfiguration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*PypiConfiguration `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (x *ListPypiConfiguration_Response) Reset() {
	*x = ListPypiConfiguration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPypiConfiguration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPypiConfiguration_Response) ProtoMessage() {}

func (x *ListPypiConfiguration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPypiConfiguration_Response.ProtoReflect.Descriptor instead.
func (*ListPypiConfiguration_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListPypiConfiguration_Response) GetConfigurations() []*PypiConfiguration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type DeletePypiConfiguration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePypiConfiguration_Response) Reset() {
	*x = DeletePypiConfiguration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePypiConfiguration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePypiConfiguration_Response) ProtoMessage() {}

func (x *DeletePypiConfiguration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePypiConfiguration_Response.ProtoReflect.Descriptor instead.
func (*DeletePypiConfiguration_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{5, 0}
}

type EnablePypiConfiguration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnablePypiConfiguration_Response) Reset() {
	*x = EnablePypiConfiguration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePypiConfiguration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePypiConfiguration_Response) ProtoMessage() {}

func (x *EnablePypiConfiguration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePypiConfiguration_Response.ProtoReflect.Descriptor instead.
func (*EnablePypiConfiguration_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{6, 0}
}

type KafkaConfiguration_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All fields below must be provided on an update, except when enabled=false
	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Certificate string `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *KafkaConfiguration_TLS) Reset() {
	*x = KafkaConfiguration_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConfiguration_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfiguration_TLS) ProtoMessage() {}

func (x *KafkaConfiguration_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfiguration_TLS.ProtoReflect.Descriptor instead.
func (*KafkaConfiguration_TLS) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{7, 0}
}

func (x *KafkaConfiguration_TLS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KafkaConfiguration_TLS) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

type KafkaConfiguration_Kerberos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All fields below must be provided on an update, except when enabled=false
	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Conf        string `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
	Keytab      string `protobuf:"bytes,3,opt,name=keytab,proto3" json:"keytab,omitempty"`
	ClientName  string `protobuf:"bytes,5,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ServiceName string `protobuf:"bytes,6,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *KafkaConfiguration_Kerberos) Reset() {
	*x = KafkaConfiguration_Kerberos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConfiguration_Kerberos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfiguration_Kerberos) ProtoMessage() {}

func (x *KafkaConfiguration_Kerberos) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfiguration_Kerberos.ProtoReflect.Descriptor instead.
func (*KafkaConfiguration_Kerberos) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{7, 1}
}

func (x *KafkaConfiguration_Kerberos) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KafkaConfiguration_Kerberos) GetConf() string {
	if x != nil {
		return x.Conf
	}
	return ""
}

func (x *KafkaConfiguration_Kerberos) GetKeytab() string {
	if x != nil {
		return x.Keytab
	}
	return ""
}

func (x *KafkaConfiguration_Kerberos) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *KafkaConfiguration_Kerberos) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type ListKafkaConfiguration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*KafkaConfiguration `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (x *ListKafkaConfiguration_Response) Reset() {
	*x = ListKafkaConfiguration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKafkaConfiguration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKafkaConfiguration_Response) ProtoMessage() {}

func (x *ListKafkaConfiguration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKafkaConfiguration_Response.ProtoReflect.Descriptor instead.
func (*ListKafkaConfiguration_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListKafkaConfiguration_Response) GetConfigurations() []*KafkaConfiguration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type DeleteKafkaConfiguration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteKafkaConfiguration_Response) Reset() {
	*x = DeleteKafkaConfiguration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKafkaConfiguration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKafkaConfiguration_Response) ProtoMessage() {}

func (x *DeleteKafkaConfiguration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKafkaConfiguration_Response.ProtoReflect.Descriptor instead.
func (*DeleteKafkaConfiguration_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{9, 0}
}

type EnableKafkaConfiguration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableKafkaConfiguration_Response) Reset() {
	*x = EnableKafkaConfiguration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_SystemAdmin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableKafkaConfiguration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableKafkaConfiguration_Response) ProtoMessage() {}

func (x *EnableKafkaConfiguration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_SystemAdmin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableKafkaConfiguration_Response.ProtoReflect.Descriptor instead.
func (*EnableKafkaConfiguration_Response) Descriptor() ([]byte, []int) {
	return file_uac_SystemAdmin_proto_rawDescGZIP(), []int{10, 0}
}

var File_uac_SystemAdmin_proto protoreflect.FileDescriptor

var file_uac_SystemAdmin_proto_rawDesc = []byte{
	0x0a, 0x15, 0x75, 0x61, 0x63, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x1a, 0x25, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x53,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x1a,
	0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x11,
	0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22,
	0x6c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x53, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x50, 0x79, 0x70, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x79,
	0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x03, 0x0a,
	0x12, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x6b,
	0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72,
	0x6f, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x41, 0x0a, 0x03, 0x54, 0x4c,
	0x53, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x9a, 0x01,
	0x0a, 0x08, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x74,
	0x61, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x74, 0x61, 0x62,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x6e, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x57, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a,
	0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe1, 0x0d, 0x0a, 0x12,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1c,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x25, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64,
	0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0x8d, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xa0, 0x01, 0x0a, 0x1f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x30, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x79,
	0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x79, 0x70,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x79, 0x70,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12,
	0x26, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x79, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x79, 0x70, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xa4, 0x01, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x42,
	0x3e, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75, 0x61, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uac_SystemAdmin_proto_rawDescOnce sync.Once
	file_uac_SystemAdmin_proto_rawDescData = file_uac_SystemAdmin_proto_rawDesc
)

func file_uac_SystemAdmin_proto_rawDescGZIP() []byte {
	file_uac_SystemAdmin_proto_rawDescOnce.Do(func() {
		file_uac_SystemAdmin_proto_rawDescData = protoimpl.X.CompressGZIP(file_uac_SystemAdmin_proto_rawDescData)
	})
	return file_uac_SystemAdmin_proto_rawDescData
}

var file_uac_SystemAdmin_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_uac_SystemAdmin_proto_goTypes = []interface{}{
	(*ListSystemAdmins)(nil),                  // 0: ai.verta.uac.ListSystemAdmins
	(*AddSystemAdmin)(nil),                    // 1: ai.verta.uac.AddSystemAdmin
	(*RemoveSystemAdmin)(nil),                 // 2: ai.verta.uac.RemoveSystemAdmin
	(*PypiConfiguration)(nil),                 // 3: ai.verta.uac.PypiConfiguration
	(*ListPypiConfiguration)(nil),             // 4: ai.verta.uac.ListPypiConfiguration
	(*DeletePypiConfiguration)(nil),           // 5: ai.verta.uac.DeletePypiConfiguration
	(*EnablePypiConfiguration)(nil),           // 6: ai.verta.uac.EnablePypiConfiguration
	(*KafkaConfiguration)(nil),                // 7: ai.verta.uac.KafkaConfiguration
	(*ListKafkaConfiguration)(nil),            // 8: ai.verta.uac.ListKafkaConfiguration
	(*DeleteKafkaConfiguration)(nil),          // 9: ai.verta.uac.DeleteKafkaConfiguration
	(*EnableKafkaConfiguration)(nil),          // 10: ai.verta.uac.EnableKafkaConfiguration
	(*ListSystemAdmins_Response)(nil),         // 11: ai.verta.uac.ListSystemAdmins.Response
	(*AddSystemAdmin_Response)(nil),           // 12: ai.verta.uac.AddSystemAdmin.Response
	(*RemoveSystemAdmin_Response)(nil),        // 13: ai.verta.uac.RemoveSystemAdmin.Response
	(*ListPypiConfiguration_Response)(nil),    // 14: ai.verta.uac.ListPypiConfiguration.Response
	(*DeletePypiConfiguration_Response)(nil),  // 15: ai.verta.uac.DeletePypiConfiguration.Response
	(*EnablePypiConfiguration_Response)(nil),  // 16: ai.verta.uac.EnablePypiConfiguration.Response
	(*KafkaConfiguration_TLS)(nil),            // 17: ai.verta.uac.KafkaConfiguration.TLS
	(*KafkaConfiguration_Kerberos)(nil),       // 18: ai.verta.uac.KafkaConfiguration.Kerberos
	(*ListKafkaConfiguration_Response)(nil),   // 19: ai.verta.uac.ListKafkaConfiguration.Response
	(*DeleteKafkaConfiguration_Response)(nil), // 20: ai.verta.uac.DeleteKafkaConfiguration.Response
	(*EnableKafkaConfiguration_Response)(nil), // 21: ai.verta.uac.EnableKafkaConfiguration.Response
}
var file_uac_SystemAdmin_proto_depIdxs = []int32{
	17, // 0: ai.verta.uac.KafkaConfiguration.tls:type_name -> ai.verta.uac.KafkaConfiguration.TLS
	18, // 1: ai.verta.uac.KafkaConfiguration.kerberos:type_name -> ai.verta.uac.KafkaConfiguration.Kerberos
	3,  // 2: ai.verta.uac.ListPypiConfiguration.Response.configurations:type_name -> ai.verta.uac.PypiConfiguration
	7,  // 3: ai.verta.uac.ListKafkaConfiguration.Response.configurations:type_name -> ai.verta.uac.KafkaConfiguration
	0,  // 4: ai.verta.uac.SystemAdminService.listSystemAdmins:input_type -> ai.verta.uac.ListSystemAdmins
	1,  // 5: ai.verta.uac.SystemAdminService.addSystemAdmin:input_type -> ai.verta.uac.AddSystemAdmin
	2,  // 6: ai.verta.uac.SystemAdminService.removeSystemAdmin:input_type -> ai.verta.uac.RemoveSystemAdmin
	3,  // 7: ai.verta.uac.SystemAdminService.createOrUpdatePypiConfiguration:input_type -> ai.verta.uac.PypiConfiguration
	5,  // 8: ai.verta.uac.SystemAdminService.deletePypiConfiguration:input_type -> ai.verta.uac.DeletePypiConfiguration
	4,  // 9: ai.verta.uac.SystemAdminService.listPypiConfiguration:input_type -> ai.verta.uac.ListPypiConfiguration
	6,  // 10: ai.verta.uac.SystemAdminService.enablePypiConfiguration:input_type -> ai.verta.uac.EnablePypiConfiguration
	7,  // 11: ai.verta.uac.SystemAdminService.createOrUpdateKafkaConfiguration:input_type -> ai.verta.uac.KafkaConfiguration
	9,  // 12: ai.verta.uac.SystemAdminService.deleteKafkaConfiguration:input_type -> ai.verta.uac.DeleteKafkaConfiguration
	8,  // 13: ai.verta.uac.SystemAdminService.listKafkaConfiguration:input_type -> ai.verta.uac.ListKafkaConfiguration
	10, // 14: ai.verta.uac.SystemAdminService.enableKafkaConfiguration:input_type -> ai.verta.uac.EnableKafkaConfiguration
	11, // 15: ai.verta.uac.SystemAdminService.listSystemAdmins:output_type -> ai.verta.uac.ListSystemAdmins.Response
	12, // 16: ai.verta.uac.SystemAdminService.addSystemAdmin:output_type -> ai.verta.uac.AddSystemAdmin.Response
	13, // 17: ai.verta.uac.SystemAdminService.removeSystemAdmin:output_type -> ai.verta.uac.RemoveSystemAdmin.Response
	3,  // 18: ai.verta.uac.SystemAdminService.createOrUpdatePypiConfiguration:output_type -> ai.verta.uac.PypiConfiguration
	15, // 19: ai.verta.uac.SystemAdminService.deletePypiConfiguration:output_type -> ai.verta.uac.DeletePypiConfiguration.Response
	14, // 20: ai.verta.uac.SystemAdminService.listPypiConfiguration:output_type -> ai.verta.uac.ListPypiConfiguration.Response
	16, // 21: ai.verta.uac.SystemAdminService.enablePypiConfiguration:output_type -> ai.verta.uac.EnablePypiConfiguration.Response
	7,  // 22: ai.verta.uac.SystemAdminService.createOrUpdateKafkaConfiguration:output_type -> ai.verta.uac.KafkaConfiguration
	20, // 23: ai.verta.uac.SystemAdminService.deleteKafkaConfiguration:output_type -> ai.verta.uac.DeleteKafkaConfiguration.Response
	19, // 24: ai.verta.uac.SystemAdminService.listKafkaConfiguration:output_type -> ai.verta.uac.ListKafkaConfiguration.Response
	21, // 25: ai.verta.uac.SystemAdminService.enableKafkaConfiguration:output_type -> ai.verta.uac.EnableKafkaConfiguration.Response
	15, // [15:26] is the sub-list for method output_type
	4,  // [4:15] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_uac_SystemAdmin_proto_init() }
func file_uac_SystemAdmin_proto_init() {
	if File_uac_SystemAdmin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_uac_SystemAdmin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemAdmins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSystemAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSystemAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PypiConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPypiConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePypiConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePypiConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKafkaConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKafkaConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableKafkaConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemAdmins_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSystemAdmin_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSystemAdmin_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPypiConfiguration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePypiConfiguration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePypiConfiguration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConfiguration_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConfiguration_Kerberos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKafkaConfiguration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKafkaConfiguration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_SystemAdmin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableKafkaConfiguration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uac_SystemAdmin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uac_SystemAdmin_proto_goTypes,
		DependencyIndexes: file_uac_SystemAdmin_proto_depIdxs,
		MessageInfos:      file_uac_SystemAdmin_proto_msgTypes,
	}.Build()
	File_uac_SystemAdmin_proto = out.File
	file_uac_SystemAdmin_proto_rawDesc = nil
	file_uac_SystemAdmin_proto_goTypes = nil
	file_uac_SystemAdmin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SystemAdminServiceClient is the client API for SystemAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemAdminServiceClient interface {
	// List system admins
	// Only available for system admins themselves
	ListSystemAdmins(ctx context.Context, in *ListSystemAdmins, opts ...grpc.CallOption) (*ListSystemAdmins_Response, error)
	// Adds the given user to the list of system administrators
	// Only available for system admins themselves
	AddSystemAdmin(ctx context.Context, in *AddSystemAdmin, opts ...grpc.CallOption) (*AddSystemAdmin_Response, error)
	// Removes the given user from the list of system administrators
	// The current user can never be removed
	// The root user (defined by email via config) can never be removed
	RemoveSystemAdmin(ctx context.Context, in *RemoveSystemAdmin, opts ...grpc.CallOption) (*RemoveSystemAdmin_Response, error)
	CreateOrUpdatePypiConfiguration(ctx context.Context, in *PypiConfiguration, opts ...grpc.CallOption) (*PypiConfiguration, error)
	DeletePypiConfiguration(ctx context.Context, in *DeletePypiConfiguration, opts ...grpc.CallOption) (*DeletePypiConfiguration_Response, error)
	ListPypiConfiguration(ctx context.Context, in *ListPypiConfiguration, opts ...grpc.CallOption) (*ListPypiConfiguration_Response, error)
	EnablePypiConfiguration(ctx context.Context, in *EnablePypiConfiguration, opts ...grpc.CallOption) (*EnablePypiConfiguration_Response, error)
	CreateOrUpdateKafkaConfiguration(ctx context.Context, in *KafkaConfiguration, opts ...grpc.CallOption) (*KafkaConfiguration, error)
	DeleteKafkaConfiguration(ctx context.Context, in *DeleteKafkaConfiguration, opts ...grpc.CallOption) (*DeleteKafkaConfiguration_Response, error)
	ListKafkaConfiguration(ctx context.Context, in *ListKafkaConfiguration, opts ...grpc.CallOption) (*ListKafkaConfiguration_Response, error)
	EnableKafkaConfiguration(ctx context.Context, in *EnableKafkaConfiguration, opts ...grpc.CallOption) (*EnableKafkaConfiguration_Response, error)
}

type systemAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemAdminServiceClient(cc grpc.ClientConnInterface) SystemAdminServiceClient {
	return &systemAdminServiceClient{cc}
}

func (c *systemAdminServiceClient) ListSystemAdmins(ctx context.Context, in *ListSystemAdmins, opts ...grpc.CallOption) (*ListSystemAdmins_Response, error) {
	out := new(ListSystemAdmins_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/listSystemAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) AddSystemAdmin(ctx context.Context, in *AddSystemAdmin, opts ...grpc.CallOption) (*AddSystemAdmin_Response, error) {
	out := new(AddSystemAdmin_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/addSystemAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) RemoveSystemAdmin(ctx context.Context, in *RemoveSystemAdmin, opts ...grpc.CallOption) (*RemoveSystemAdmin_Response, error) {
	out := new(RemoveSystemAdmin_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/removeSystemAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) CreateOrUpdatePypiConfiguration(ctx context.Context, in *PypiConfiguration, opts ...grpc.CallOption) (*PypiConfiguration, error) {
	out := new(PypiConfiguration)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/createOrUpdatePypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) DeletePypiConfiguration(ctx context.Context, in *DeletePypiConfiguration, opts ...grpc.CallOption) (*DeletePypiConfiguration_Response, error) {
	out := new(DeletePypiConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/deletePypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListPypiConfiguration(ctx context.Context, in *ListPypiConfiguration, opts ...grpc.CallOption) (*ListPypiConfiguration_Response, error) {
	out := new(ListPypiConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/listPypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) EnablePypiConfiguration(ctx context.Context, in *EnablePypiConfiguration, opts ...grpc.CallOption) (*EnablePypiConfiguration_Response, error) {
	out := new(EnablePypiConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/enablePypiConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) CreateOrUpdateKafkaConfiguration(ctx context.Context, in *KafkaConfiguration, opts ...grpc.CallOption) (*KafkaConfiguration, error) {
	out := new(KafkaConfiguration)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/createOrUpdateKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) DeleteKafkaConfiguration(ctx context.Context, in *DeleteKafkaConfiguration, opts ...grpc.CallOption) (*DeleteKafkaConfiguration_Response, error) {
	out := new(DeleteKafkaConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/deleteKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) ListKafkaConfiguration(ctx context.Context, in *ListKafkaConfiguration, opts ...grpc.CallOption) (*ListKafkaConfiguration_Response, error) {
	out := new(ListKafkaConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/listKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAdminServiceClient) EnableKafkaConfiguration(ctx context.Context, in *EnableKafkaConfiguration, opts ...grpc.CallOption) (*EnableKafkaConfiguration_Response, error) {
	out := new(EnableKafkaConfiguration_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.SystemAdminService/enableKafkaConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemAdminServiceServer is the server API for SystemAdminService service.
type SystemAdminServiceServer interface {
	// List system admins
	// Only available for system admins themselves
	ListSystemAdmins(context.Context, *ListSystemAdmins) (*ListSystemAdmins_Response, error)
	// Adds the given user to the list of system administrators
	// Only available for system admins themselves
	AddSystemAdmin(context.Context, *AddSystemAdmin) (*AddSystemAdmin_Response, error)
	// Removes the given user from the list of system administrators
	// The current user can never be removed
	// The root user (defined by email via config) can never be removed
	RemoveSystemAdmin(context.Context, *RemoveSystemAdmin) (*RemoveSystemAdmin_Response, error)
	CreateOrUpdatePypiConfiguration(context.Context, *PypiConfiguration) (*PypiConfiguration, error)
	DeletePypiConfiguration(context.Context, *DeletePypiConfiguration) (*DeletePypiConfiguration_Response, error)
	ListPypiConfiguration(context.Context, *ListPypiConfiguration) (*ListPypiConfiguration_Response, error)
	EnablePypiConfiguration(context.Context, *EnablePypiConfiguration) (*EnablePypiConfiguration_Response, error)
	CreateOrUpdateKafkaConfiguration(context.Context, *KafkaConfiguration) (*KafkaConfiguration, error)
	DeleteKafkaConfiguration(context.Context, *DeleteKafkaConfiguration) (*DeleteKafkaConfiguration_Response, error)
	ListKafkaConfiguration(context.Context, *ListKafkaConfiguration) (*ListKafkaConfiguration_Response, error)
	EnableKafkaConfiguration(context.Context, *EnableKafkaConfiguration) (*EnableKafkaConfiguration_Response, error)
}

// UnimplementedSystemAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSystemAdminServiceServer struct {
}

func (*UnimplementedSystemAdminServiceServer) ListSystemAdmins(context.Context, *ListSystemAdmins) (*ListSystemAdmins_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemAdmins not implemented")
}
func (*UnimplementedSystemAdminServiceServer) AddSystemAdmin(context.Context, *AddSystemAdmin) (*AddSystemAdmin_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSystemAdmin not implemented")
}
func (*UnimplementedSystemAdminServiceServer) RemoveSystemAdmin(context.Context, *RemoveSystemAdmin) (*RemoveSystemAdmin_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSystemAdmin not implemented")
}
func (*UnimplementedSystemAdminServiceServer) CreateOrUpdatePypiConfiguration(context.Context, *PypiConfiguration) (*PypiConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdatePypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) DeletePypiConfiguration(context.Context, *DeletePypiConfiguration) (*DeletePypiConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) ListPypiConfiguration(context.Context, *ListPypiConfiguration) (*ListPypiConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) EnablePypiConfiguration(context.Context, *EnablePypiConfiguration) (*EnablePypiConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePypiConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) CreateOrUpdateKafkaConfiguration(context.Context, *KafkaConfiguration) (*KafkaConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateKafkaConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) DeleteKafkaConfiguration(context.Context, *DeleteKafkaConfiguration) (*DeleteKafkaConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKafkaConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) ListKafkaConfiguration(context.Context, *ListKafkaConfiguration) (*ListKafkaConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKafkaConfiguration not implemented")
}
func (*UnimplementedSystemAdminServiceServer) EnableKafkaConfiguration(context.Context, *EnableKafkaConfiguration) (*EnableKafkaConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableKafkaConfiguration not implemented")
}

func RegisterSystemAdminServiceServer(s *grpc.Server, srv SystemAdminServiceServer) {
	s.RegisterService(&_SystemAdminService_serviceDesc, srv)
}

func _SystemAdminService_ListSystemAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListSystemAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/ListSystemAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListSystemAdmins(ctx, req.(*ListSystemAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_AddSystemAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSystemAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).AddSystemAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/AddSystemAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).AddSystemAdmin(ctx, req.(*AddSystemAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_RemoveSystemAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSystemAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).RemoveSystemAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/RemoveSystemAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).RemoveSystemAdmin(ctx, req.(*RemoveSystemAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_CreateOrUpdatePypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).CreateOrUpdatePypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/CreateOrUpdatePypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).CreateOrUpdatePypiConfiguration(ctx, req.(*PypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_DeletePypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).DeletePypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/DeletePypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).DeletePypiConfiguration(ctx, req.(*DeletePypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListPypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListPypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/ListPypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListPypiConfiguration(ctx, req.(*ListPypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_EnablePypiConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePypiConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).EnablePypiConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/EnablePypiConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).EnablePypiConfiguration(ctx, req.(*EnablePypiConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_CreateOrUpdateKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).CreateOrUpdateKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/CreateOrUpdateKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).CreateOrUpdateKafkaConfiguration(ctx, req.(*KafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_DeleteKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).DeleteKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/DeleteKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).DeleteKafkaConfiguration(ctx, req.(*DeleteKafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_ListKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).ListKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/ListKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).ListKafkaConfiguration(ctx, req.(*ListKafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemAdminService_EnableKafkaConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableKafkaConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAdminServiceServer).EnableKafkaConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.SystemAdminService/EnableKafkaConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAdminServiceServer).EnableKafkaConfiguration(ctx, req.(*EnableKafkaConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.SystemAdminService",
	HandlerType: (*SystemAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listSystemAdmins",
			Handler:    _SystemAdminService_ListSystemAdmins_Handler,
		},
		{
			MethodName: "addSystemAdmin",
			Handler:    _SystemAdminService_AddSystemAdmin_Handler,
		},
		{
			MethodName: "removeSystemAdmin",
			Handler:    _SystemAdminService_RemoveSystemAdmin_Handler,
		},
		{
			MethodName: "createOrUpdatePypiConfiguration",
			Handler:    _SystemAdminService_CreateOrUpdatePypiConfiguration_Handler,
		},
		{
			MethodName: "deletePypiConfiguration",
			Handler:    _SystemAdminService_DeletePypiConfiguration_Handler,
		},
		{
			MethodName: "listPypiConfiguration",
			Handler:    _SystemAdminService_ListPypiConfiguration_Handler,
		},
		{
			MethodName: "enablePypiConfiguration",
			Handler:    _SystemAdminService_EnablePypiConfiguration_Handler,
		},
		{
			MethodName: "createOrUpdateKafkaConfiguration",
			Handler:    _SystemAdminService_CreateOrUpdateKafkaConfiguration_Handler,
		},
		{
			MethodName: "deleteKafkaConfiguration",
			Handler:    _SystemAdminService_DeleteKafkaConfiguration_Handler,
		},
		{
			MethodName: "listKafkaConfiguration",
			Handler:    _SystemAdminService_ListKafkaConfiguration_Handler,
		},
		{
			MethodName: "enableKafkaConfiguration",
			Handler:    _SystemAdminService_EnableKafkaConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/SystemAdmin.proto",
}
