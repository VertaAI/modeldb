// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: uac/Team.proto

package uac

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId            string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ShortName        string `protobuf:"bytes,8,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Description      string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	OwnerId          string `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreatedTimestamp int64  `protobuf:"varint,6,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	UpdatedTimestamp int64  `protobuf:"varint,7,opt,name=updated_timestamp,json=updatedTimestamp,proto3" json:"updated_timestamp,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{0}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Team) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Team) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Team) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *Team) GetUpdatedTimestamp() int64 {
	if x != nil {
		return x.UpdatedTimestamp
	}
	return 0
}

type GetTeamById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *GetTeamById) Reset() {
	*x = GetTeamById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamById) ProtoMessage() {}

func (x *GetTeamById) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamById.ProtoReflect.Descriptor instead.
func (*GetTeamById) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{1}
}

func (x *GetTeamById) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

// Team names are unique in an organization, but not across teams
type GetTeamByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TeamName string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
}

func (x *GetTeamByName) Reset() {
	*x = GetTeamByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByName) ProtoMessage() {}

func (x *GetTeamByName) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByName.ProtoReflect.Descriptor instead.
func (*GetTeamByName) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{2}
}

func (x *GetTeamByName) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetTeamByName) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

// Team short names are unique in an organization, but not across teams
type GetTeamByShortName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
}

func (x *GetTeamByShortName) Reset() {
	*x = GetTeamByShortName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamByShortName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByShortName) ProtoMessage() {}

func (x *GetTeamByShortName) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByShortName.ProtoReflect.Descriptor instead.
func (*GetTeamByShortName) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{3}
}

func (x *GetTeamByShortName) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetTeamByShortName) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

type ListMyTeams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMyTeams) Reset() {
	*x = ListMyTeams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMyTeams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyTeams) ProtoMessage() {}

func (x *ListMyTeams) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyTeams.ProtoReflect.Descriptor instead.
func (*ListMyTeams) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{4}
}

type SetTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *SetTeam) Reset() {
	*x = SetTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeam) ProtoMessage() {}

func (x *SetTeam) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeam.ProtoReflect.Descriptor instead.
func (*SetTeam) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{5}
}

func (x *SetTeam) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type DeleteTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *DeleteTeam) Reset() {
	*x = DeleteTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeam) ProtoMessage() {}

func (x *DeleteTeam) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeam.ProtoReflect.Descriptor instead.
func (*DeleteTeam) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTeam) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type ListTeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *ListTeamUser) Reset() {
	*x = ListTeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamUser) ProtoMessage() {}

func (x *ListTeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamUser.ProtoReflect.Descriptor instead.
func (*ListTeamUser) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{7}
}

func (x *ListTeamUser) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type AddTeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	ShareWith string `protobuf:"bytes,3,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"`
}

func (x *AddTeamUser) Reset() {
	*x = AddTeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeamUser) ProtoMessage() {}

func (x *AddTeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeamUser.ProtoReflect.Descriptor instead.
func (*AddTeamUser) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{8}
}

func (x *AddTeamUser) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *AddTeamUser) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

type RemoveTeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	ShareWith string `protobuf:"bytes,2,opt,name=share_with,json=shareWith,proto3" json:"share_with,omitempty"`
}

func (x *RemoveTeamUser) Reset() {
	*x = RemoveTeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeamUser) ProtoMessage() {}

func (x *RemoveTeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeamUser.ProtoReflect.Descriptor instead.
func (*RemoveTeamUser) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveTeamUser) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *RemoveTeamUser) GetShareWith() string {
	if x != nil {
		return x.ShareWith
	}
	return ""
}

type GetTeamById_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *GetTeamById_Response) Reset() {
	*x = GetTeamById_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamById_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamById_Response) ProtoMessage() {}

func (x *GetTeamById_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamById_Response.ProtoReflect.Descriptor instead.
func (*GetTeamById_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetTeamById_Response) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type GetTeamByName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *GetTeamByName_Response) Reset() {
	*x = GetTeamByName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamByName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByName_Response) ProtoMessage() {}

func (x *GetTeamByName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByName_Response.ProtoReflect.Descriptor instead.
func (*GetTeamByName_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetTeamByName_Response) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type GetTeamByShortName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *GetTeamByShortName_Response) Reset() {
	*x = GetTeamByShortName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamByShortName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByShortName_Response) ProtoMessage() {}

func (x *GetTeamByShortName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByShortName_Response.ProtoReflect.Descriptor instead.
func (*GetTeamByShortName_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetTeamByShortName_Response) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type ListMyTeams_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *ListMyTeams_Response) Reset() {
	*x = ListMyTeams_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMyTeams_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyTeams_Response) ProtoMessage() {}

func (x *ListMyTeams_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyTeams_Response.ProtoReflect.Descriptor instead.
func (*ListMyTeams_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListMyTeams_Response) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type SetTeam_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *SetTeam_Response) Reset() {
	*x = SetTeam_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeam_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeam_Response) ProtoMessage() {}

func (x *SetTeam_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeam_Response.ProtoReflect.Descriptor instead.
func (*SetTeam_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SetTeam_Response) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type DeleteTeam_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteTeam_Response) Reset() {
	*x = DeleteTeam_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeam_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeam_Response) ProtoMessage() {}

func (x *DeleteTeam_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeam_Response.ProtoReflect.Descriptor instead.
func (*DeleteTeam_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DeleteTeam_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ListTeamUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *ListTeamUser_Response) Reset() {
	*x = ListTeamUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamUser_Response) ProtoMessage() {}

func (x *ListTeamUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamUser_Response.ProtoReflect.Descriptor instead.
func (*ListTeamUser_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListTeamUser_Response) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type AddTeamUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddTeamUser_Response) Reset() {
	*x = AddTeamUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeamUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeamUser_Response) ProtoMessage() {}

func (x *AddTeamUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeamUser_Response.ProtoReflect.Descriptor instead.
func (*AddTeamUser_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{8, 0}
}

func (x *AddTeamUser_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type RemoveTeamUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoveTeamUser_Response) Reset() {
	*x = RemoveTeamUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_Team_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeamUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeamUser_Response) ProtoMessage() {}

func (x *RemoveTeamUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_Team_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeamUser_Response.ProtoReflect.Descriptor instead.
func (*RemoveTeamUser_Response) Descriptor() ([]byte, []int) {
	return file_uac_Team_proto_rawDescGZIP(), []int{9, 0}
}

func (x *RemoveTeamUser_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_uac_Team_proto protoreflect.FileDescriptor

var file_uac_Team_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x61, 0x63, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a,
	0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x32,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x22, 0x77, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x7e, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x43, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x34, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x22, 0x65, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x1a, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x49, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x22,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x25, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x69, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xf0, 0x07, 0x0a, 0x0b,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x22,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x5d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x12,
	0x69, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x2f, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x42, 0x3e,
	0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56,
	0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75, 0x61, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uac_Team_proto_rawDescOnce sync.Once
	file_uac_Team_proto_rawDescData = file_uac_Team_proto_rawDesc
)

func file_uac_Team_proto_rawDescGZIP() []byte {
	file_uac_Team_proto_rawDescOnce.Do(func() {
		file_uac_Team_proto_rawDescData = protoimpl.X.CompressGZIP(file_uac_Team_proto_rawDescData)
	})
	return file_uac_Team_proto_rawDescData
}

var file_uac_Team_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_uac_Team_proto_goTypes = []interface{}{
	(*Team)(nil),                        // 0: ai.verta.uac.Team
	(*GetTeamById)(nil),                 // 1: ai.verta.uac.GetTeamById
	(*GetTeamByName)(nil),               // 2: ai.verta.uac.GetTeamByName
	(*GetTeamByShortName)(nil),          // 3: ai.verta.uac.GetTeamByShortName
	(*ListMyTeams)(nil),                 // 4: ai.verta.uac.ListMyTeams
	(*SetTeam)(nil),                     // 5: ai.verta.uac.SetTeam
	(*DeleteTeam)(nil),                  // 6: ai.verta.uac.DeleteTeam
	(*ListTeamUser)(nil),                // 7: ai.verta.uac.ListTeamUser
	(*AddTeamUser)(nil),                 // 8: ai.verta.uac.AddTeamUser
	(*RemoveTeamUser)(nil),              // 9: ai.verta.uac.RemoveTeamUser
	(*GetTeamById_Response)(nil),        // 10: ai.verta.uac.GetTeamById.Response
	(*GetTeamByName_Response)(nil),      // 11: ai.verta.uac.GetTeamByName.Response
	(*GetTeamByShortName_Response)(nil), // 12: ai.verta.uac.GetTeamByShortName.Response
	(*ListMyTeams_Response)(nil),        // 13: ai.verta.uac.ListMyTeams.Response
	(*SetTeam_Response)(nil),            // 14: ai.verta.uac.SetTeam.Response
	(*DeleteTeam_Response)(nil),         // 15: ai.verta.uac.DeleteTeam.Response
	(*ListTeamUser_Response)(nil),       // 16: ai.verta.uac.ListTeamUser.Response
	(*AddTeamUser_Response)(nil),        // 17: ai.verta.uac.AddTeamUser.Response
	(*RemoveTeamUser_Response)(nil),     // 18: ai.verta.uac.RemoveTeamUser.Response
}
var file_uac_Team_proto_depIdxs = []int32{
	0,  // 0: ai.verta.uac.SetTeam.team:type_name -> ai.verta.uac.Team
	0,  // 1: ai.verta.uac.GetTeamById.Response.team:type_name -> ai.verta.uac.Team
	0,  // 2: ai.verta.uac.GetTeamByName.Response.team:type_name -> ai.verta.uac.Team
	0,  // 3: ai.verta.uac.GetTeamByShortName.Response.team:type_name -> ai.verta.uac.Team
	0,  // 4: ai.verta.uac.ListMyTeams.Response.teams:type_name -> ai.verta.uac.Team
	0,  // 5: ai.verta.uac.SetTeam.Response.team:type_name -> ai.verta.uac.Team
	1,  // 6: ai.verta.uac.TeamService.getTeamById:input_type -> ai.verta.uac.GetTeamById
	2,  // 7: ai.verta.uac.TeamService.getTeamByName:input_type -> ai.verta.uac.GetTeamByName
	3,  // 8: ai.verta.uac.TeamService.getTeamByShortName:input_type -> ai.verta.uac.GetTeamByShortName
	4,  // 9: ai.verta.uac.TeamService.listMyTeams:input_type -> ai.verta.uac.ListMyTeams
	5,  // 10: ai.verta.uac.TeamService.setTeam:input_type -> ai.verta.uac.SetTeam
	6,  // 11: ai.verta.uac.TeamService.deleteTeam:input_type -> ai.verta.uac.DeleteTeam
	7,  // 12: ai.verta.uac.TeamService.listUsers:input_type -> ai.verta.uac.ListTeamUser
	8,  // 13: ai.verta.uac.TeamService.addUser:input_type -> ai.verta.uac.AddTeamUser
	9,  // 14: ai.verta.uac.TeamService.removeUser:input_type -> ai.verta.uac.RemoveTeamUser
	10, // 15: ai.verta.uac.TeamService.getTeamById:output_type -> ai.verta.uac.GetTeamById.Response
	11, // 16: ai.verta.uac.TeamService.getTeamByName:output_type -> ai.verta.uac.GetTeamByName.Response
	12, // 17: ai.verta.uac.TeamService.getTeamByShortName:output_type -> ai.verta.uac.GetTeamByShortName.Response
	13, // 18: ai.verta.uac.TeamService.listMyTeams:output_type -> ai.verta.uac.ListMyTeams.Response
	14, // 19: ai.verta.uac.TeamService.setTeam:output_type -> ai.verta.uac.SetTeam.Response
	15, // 20: ai.verta.uac.TeamService.deleteTeam:output_type -> ai.verta.uac.DeleteTeam.Response
	16, // 21: ai.verta.uac.TeamService.listUsers:output_type -> ai.verta.uac.ListTeamUser.Response
	17, // 22: ai.verta.uac.TeamService.addUser:output_type -> ai.verta.uac.AddTeamUser.Response
	18, // 23: ai.verta.uac.TeamService.removeUser:output_type -> ai.verta.uac.RemoveTeamUser.Response
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_uac_Team_proto_init() }
func file_uac_Team_proto_init() {
	if File_uac_Team_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_uac_Team_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamByShortName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMyTeams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamById_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamByName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamByShortName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMyTeams_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTeam_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeam_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTeamUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_Team_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTeamUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uac_Team_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uac_Team_proto_goTypes,
		DependencyIndexes: file_uac_Team_proto_depIdxs,
		MessageInfos:      file_uac_Team_proto_msgTypes,
	}.Build()
	File_uac_Team_proto = out.File
	file_uac_Team_proto_rawDesc = nil
	file_uac_Team_proto_goTypes = nil
	file_uac_Team_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamServiceClient interface {
	// Gets information from a given team
	GetTeamById(ctx context.Context, in *GetTeamById, opts ...grpc.CallOption) (*GetTeamById_Response, error)
	// Gets information from a given team
	GetTeamByName(ctx context.Context, in *GetTeamByName, opts ...grpc.CallOption) (*GetTeamByName_Response, error)
	// Gets information from a given team
	GetTeamByShortName(ctx context.Context, in *GetTeamByShortName, opts ...grpc.CallOption) (*GetTeamByShortName_Response, error)
	// Lists the teams that the current user can see
	ListMyTeams(ctx context.Context, in *ListMyTeams, opts ...grpc.CallOption) (*ListMyTeams_Response, error)
	// Create or update a team
	// Automatically adds the caller to the team
	SetTeam(ctx context.Context, in *SetTeam, opts ...grpc.CallOption) (*SetTeam_Response, error)
	// Delete an existing team
	// Only enabled if the person deleting is the owner of the organization or owner of the team
	DeleteTeam(ctx context.Context, in *DeleteTeam, opts ...grpc.CallOption) (*DeleteTeam_Response, error)
	// List users inside a team
	// Only available for users inside the team itself
	ListUsers(ctx context.Context, in *ListTeamUser, opts ...grpc.CallOption) (*ListTeamUser_Response, error)
	// Adds the given user to the team
	// Only enabled if the requester is the creator of the team or the organization
	AddUser(ctx context.Context, in *AddTeamUser, opts ...grpc.CallOption) (*AddTeamUser_Response, error)
	// Removes the given user to the team
	// Only enabled if the requester is the creator of the team
	// The owner can never be removed
	RemoveUser(ctx context.Context, in *RemoveTeamUser, opts ...grpc.CallOption) (*RemoveTeamUser_Response, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) GetTeamById(ctx context.Context, in *GetTeamById, opts ...grpc.CallOption) (*GetTeamById_Response, error) {
	out := new(GetTeamById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/getTeamById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByName(ctx context.Context, in *GetTeamByName, opts ...grpc.CallOption) (*GetTeamByName_Response, error) {
	out := new(GetTeamByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/getTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByShortName(ctx context.Context, in *GetTeamByShortName, opts ...grpc.CallOption) (*GetTeamByShortName_Response, error) {
	out := new(GetTeamByShortName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/getTeamByShortName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListMyTeams(ctx context.Context, in *ListMyTeams, opts ...grpc.CallOption) (*ListMyTeams_Response, error) {
	out := new(ListMyTeams_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/listMyTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) SetTeam(ctx context.Context, in *SetTeam, opts ...grpc.CallOption) (*SetTeam_Response, error) {
	out := new(SetTeam_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/setTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteTeam(ctx context.Context, in *DeleteTeam, opts ...grpc.CallOption) (*DeleteTeam_Response, error) {
	out := new(DeleteTeam_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/deleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListUsers(ctx context.Context, in *ListTeamUser, opts ...grpc.CallOption) (*ListTeamUser_Response, error) {
	out := new(ListTeamUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/listUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddUser(ctx context.Context, in *AddTeamUser, opts ...grpc.CallOption) (*AddTeamUser_Response, error) {
	out := new(AddTeamUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/addUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveUser(ctx context.Context, in *RemoveTeamUser, opts ...grpc.CallOption) (*RemoveTeamUser_Response, error) {
	out := new(RemoveTeamUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/removeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
type TeamServiceServer interface {
	// Gets information from a given team
	GetTeamById(context.Context, *GetTeamById) (*GetTeamById_Response, error)
	// Gets information from a given team
	GetTeamByName(context.Context, *GetTeamByName) (*GetTeamByName_Response, error)
	// Gets information from a given team
	GetTeamByShortName(context.Context, *GetTeamByShortName) (*GetTeamByShortName_Response, error)
	// Lists the teams that the current user can see
	ListMyTeams(context.Context, *ListMyTeams) (*ListMyTeams_Response, error)
	// Create or update a team
	// Automatically adds the caller to the team
	SetTeam(context.Context, *SetTeam) (*SetTeam_Response, error)
	// Delete an existing team
	// Only enabled if the person deleting is the owner of the organization or owner of the team
	DeleteTeam(context.Context, *DeleteTeam) (*DeleteTeam_Response, error)
	// List users inside a team
	// Only available for users inside the team itself
	ListUsers(context.Context, *ListTeamUser) (*ListTeamUser_Response, error)
	// Adds the given user to the team
	// Only enabled if the requester is the creator of the team or the organization
	AddUser(context.Context, *AddTeamUser) (*AddTeamUser_Response, error)
	// Removes the given user to the team
	// Only enabled if the requester is the creator of the team
	// The owner can never be removed
	RemoveUser(context.Context, *RemoveTeamUser) (*RemoveTeamUser_Response, error)
}

// UnimplementedTeamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTeamServiceServer struct {
}

func (*UnimplementedTeamServiceServer) GetTeamById(context.Context, *GetTeamById) (*GetTeamById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamById not implemented")
}
func (*UnimplementedTeamServiceServer) GetTeamByName(context.Context, *GetTeamByName) (*GetTeamByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByName not implemented")
}
func (*UnimplementedTeamServiceServer) GetTeamByShortName(context.Context, *GetTeamByShortName) (*GetTeamByShortName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByShortName not implemented")
}
func (*UnimplementedTeamServiceServer) ListMyTeams(context.Context, *ListMyTeams) (*ListMyTeams_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyTeams not implemented")
}
func (*UnimplementedTeamServiceServer) SetTeam(context.Context, *SetTeam) (*SetTeam_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeam not implemented")
}
func (*UnimplementedTeamServiceServer) DeleteTeam(context.Context, *DeleteTeam) (*DeleteTeam_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedTeamServiceServer) ListUsers(context.Context, *ListTeamUser) (*ListTeamUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedTeamServiceServer) AddUser(context.Context, *AddTeamUser) (*AddTeamUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedTeamServiceServer) RemoveUser(context.Context, *RemoveTeamUser) (*RemoveTeamUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}

func RegisterTeamServiceServer(s *grpc.Server, srv TeamServiceServer) {
	s.RegisterService(&_TeamService_serviceDesc, srv)
}

func _TeamService_GetTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/GetTeamById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamById(ctx, req.(*GetTeamById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/GetTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamByName(ctx, req.(*GetTeamByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByShortName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByShortName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamByShortName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/GetTeamByShortName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamByShortName(ctx, req.(*GetTeamByShortName))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListMyTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyTeams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListMyTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/ListMyTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListMyTeams(ctx, req.(*ListMyTeams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_SetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).SetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/SetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).SetTeam(ctx, req.(*SetTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteTeam(ctx, req.(*DeleteTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListUsers(ctx, req.(*ListTeamUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddUser(ctx, req.(*AddTeamUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveUser(ctx, req.(*RemoveTeamUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTeamById",
			Handler:    _TeamService_GetTeamById_Handler,
		},
		{
			MethodName: "getTeamByName",
			Handler:    _TeamService_GetTeamByName_Handler,
		},
		{
			MethodName: "getTeamByShortName",
			Handler:    _TeamService_GetTeamByShortName_Handler,
		},
		{
			MethodName: "listMyTeams",
			Handler:    _TeamService_ListMyTeams_Handler,
		},
		{
			MethodName: "setTeam",
			Handler:    _TeamService_SetTeam_Handler,
		},
		{
			MethodName: "deleteTeam",
			Handler:    _TeamService_DeleteTeam_Handler,
		},
		{
			MethodName: "listUsers",
			Handler:    _TeamService_ListUsers_Handler,
		},
		{
			MethodName: "addUser",
			Handler:    _TeamService_AddUser_Handler,
		},
		{
			MethodName: "removeUser",
			Handler:    _TeamService_RemoveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/Team.proto",
}
