// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamServiceClient interface {
	// Gets information from a given team
	GetTeamById(ctx context.Context, in *GetTeamById, opts ...grpc.CallOption) (*GetTeamById_Response, error)
	// Gets information from a given team
	GetTeamByName(ctx context.Context, in *GetTeamByName, opts ...grpc.CallOption) (*GetTeamByName_Response, error)
	// Gets information from a given team
	GetTeamByShortName(ctx context.Context, in *GetTeamByShortName, opts ...grpc.CallOption) (*GetTeamByShortName_Response, error)
	// Lists the teams that the current user is a member of
	ListMyTeams(ctx context.Context, in *ListMyTeams, opts ...grpc.CallOption) (*ListMyTeams_Response, error)
	// Create or update a team
	// Automatically adds the caller to the team
	SetTeam(ctx context.Context, in *SetTeam, opts ...grpc.CallOption) (*SetTeam_Response, error)
	// Delete an existing team
	// Only enabled if the person deleting is the owner of the organization or owner of the team
	DeleteTeam(ctx context.Context, in *DeleteTeam, opts ...grpc.CallOption) (*DeleteTeam_Response, error)
	// List users inside a team
	// Only available for users inside the team itself
	ListUsers(ctx context.Context, in *ListTeamUser, opts ...grpc.CallOption) (*ListTeamUser_Response, error)
	// Adds the given user to the team
	// Only enabled if the requester is the creator of the team or the organization
	AddUser(ctx context.Context, in *AddTeamUser, opts ...grpc.CallOption) (*AddTeamUser_Response, error)
	// Removes the given user to the team
	// Only enabled if the requester is the creator of the team
	// The owner can never be removed
	RemoveUser(ctx context.Context, in *RemoveTeamUser, opts ...grpc.CallOption) (*RemoveTeamUser_Response, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) GetTeamById(ctx context.Context, in *GetTeamById, opts ...grpc.CallOption) (*GetTeamById_Response, error) {
	out := new(GetTeamById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/getTeamById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByName(ctx context.Context, in *GetTeamByName, opts ...grpc.CallOption) (*GetTeamByName_Response, error) {
	out := new(GetTeamByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/getTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByShortName(ctx context.Context, in *GetTeamByShortName, opts ...grpc.CallOption) (*GetTeamByShortName_Response, error) {
	out := new(GetTeamByShortName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/getTeamByShortName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListMyTeams(ctx context.Context, in *ListMyTeams, opts ...grpc.CallOption) (*ListMyTeams_Response, error) {
	out := new(ListMyTeams_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/listMyTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) SetTeam(ctx context.Context, in *SetTeam, opts ...grpc.CallOption) (*SetTeam_Response, error) {
	out := new(SetTeam_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/setTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteTeam(ctx context.Context, in *DeleteTeam, opts ...grpc.CallOption) (*DeleteTeam_Response, error) {
	out := new(DeleteTeam_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/deleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListUsers(ctx context.Context, in *ListTeamUser, opts ...grpc.CallOption) (*ListTeamUser_Response, error) {
	out := new(ListTeamUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/listUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddUser(ctx context.Context, in *AddTeamUser, opts ...grpc.CallOption) (*AddTeamUser_Response, error) {
	out := new(AddTeamUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/addUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveUser(ctx context.Context, in *RemoveTeamUser, opts ...grpc.CallOption) (*RemoveTeamUser_Response, error) {
	out := new(RemoveTeamUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.TeamService/removeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
type TeamServiceServer interface {
	// Gets information from a given team
	GetTeamById(context.Context, *GetTeamById) (*GetTeamById_Response, error)
	// Gets information from a given team
	GetTeamByName(context.Context, *GetTeamByName) (*GetTeamByName_Response, error)
	// Gets information from a given team
	GetTeamByShortName(context.Context, *GetTeamByShortName) (*GetTeamByShortName_Response, error)
	// Lists the teams that the current user is a member of
	ListMyTeams(context.Context, *ListMyTeams) (*ListMyTeams_Response, error)
	// Create or update a team
	// Automatically adds the caller to the team
	SetTeam(context.Context, *SetTeam) (*SetTeam_Response, error)
	// Delete an existing team
	// Only enabled if the person deleting is the owner of the organization or owner of the team
	DeleteTeam(context.Context, *DeleteTeam) (*DeleteTeam_Response, error)
	// List users inside a team
	// Only available for users inside the team itself
	ListUsers(context.Context, *ListTeamUser) (*ListTeamUser_Response, error)
	// Adds the given user to the team
	// Only enabled if the requester is the creator of the team or the organization
	AddUser(context.Context, *AddTeamUser) (*AddTeamUser_Response, error)
	// Removes the given user to the team
	// Only enabled if the requester is the creator of the team
	// The owner can never be removed
	RemoveUser(context.Context, *RemoveTeamUser) (*RemoveTeamUser_Response, error)
}

// UnimplementedTeamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTeamServiceServer struct {
}

func (*UnimplementedTeamServiceServer) GetTeamById(context.Context, *GetTeamById) (*GetTeamById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamById not implemented")
}
func (*UnimplementedTeamServiceServer) GetTeamByName(context.Context, *GetTeamByName) (*GetTeamByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByName not implemented")
}
func (*UnimplementedTeamServiceServer) GetTeamByShortName(context.Context, *GetTeamByShortName) (*GetTeamByShortName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByShortName not implemented")
}
func (*UnimplementedTeamServiceServer) ListMyTeams(context.Context, *ListMyTeams) (*ListMyTeams_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyTeams not implemented")
}
func (*UnimplementedTeamServiceServer) SetTeam(context.Context, *SetTeam) (*SetTeam_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeam not implemented")
}
func (*UnimplementedTeamServiceServer) DeleteTeam(context.Context, *DeleteTeam) (*DeleteTeam_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedTeamServiceServer) ListUsers(context.Context, *ListTeamUser) (*ListTeamUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedTeamServiceServer) AddUser(context.Context, *AddTeamUser) (*AddTeamUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedTeamServiceServer) RemoveUser(context.Context, *RemoveTeamUser) (*RemoveTeamUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}

func RegisterTeamServiceServer(s *grpc.Server, srv TeamServiceServer) {
	s.RegisterService(&_TeamService_serviceDesc, srv)
}

func _TeamService_GetTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/GetTeamById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamById(ctx, req.(*GetTeamById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/GetTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamByName(ctx, req.(*GetTeamByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByShortName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByShortName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamByShortName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/GetTeamByShortName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamByShortName(ctx, req.(*GetTeamByShortName))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListMyTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyTeams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListMyTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/ListMyTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListMyTeams(ctx, req.(*ListMyTeams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_SetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).SetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/SetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).SetTeam(ctx, req.(*SetTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteTeam(ctx, req.(*DeleteTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListUsers(ctx, req.(*ListTeamUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddUser(ctx, req.(*AddTeamUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.TeamService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveUser(ctx, req.(*RemoveTeamUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTeamById",
			Handler:    _TeamService_GetTeamById_Handler,
		},
		{
			MethodName: "getTeamByName",
			Handler:    _TeamService_GetTeamByName_Handler,
		},
		{
			MethodName: "getTeamByShortName",
			Handler:    _TeamService_GetTeamByShortName_Handler,
		},
		{
			MethodName: "listMyTeams",
			Handler:    _TeamService_ListMyTeams_Handler,
		},
		{
			MethodName: "setTeam",
			Handler:    _TeamService_SetTeam_Handler,
		},
		{
			MethodName: "deleteTeam",
			Handler:    _TeamService_DeleteTeam_Handler,
		},
		{
			MethodName: "listUsers",
			Handler:    _TeamService_ListUsers_Handler,
		},
		{
			MethodName: "addUser",
			Handler:    _TeamService_AddUser_Handler,
		},
		{
			MethodName: "removeUser",
			Handler:    _TeamService_RemoveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/Team.proto",
}
