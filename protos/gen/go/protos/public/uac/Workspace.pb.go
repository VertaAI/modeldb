// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uac/Workspace.proto

package uac

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetWorkspaceById struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkspaceById) Reset()         { *m = GetWorkspaceById{} }
func (m *GetWorkspaceById) String() string { return proto.CompactTextString(m) }
func (*GetWorkspaceById) ProtoMessage()    {}
func (*GetWorkspaceById) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa02a41bd20f6ea6, []int{0}
}

func (m *GetWorkspaceById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkspaceById.Unmarshal(m, b)
}
func (m *GetWorkspaceById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkspaceById.Marshal(b, m, deterministic)
}
func (m *GetWorkspaceById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkspaceById.Merge(m, src)
}
func (m *GetWorkspaceById) XXX_Size() int {
	return xxx_messageInfo_GetWorkspaceById.Size(m)
}
func (m *GetWorkspaceById) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkspaceById.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkspaceById proto.InternalMessageInfo

func (m *GetWorkspaceById) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetWorkspaceByName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkspaceByName) Reset()         { *m = GetWorkspaceByName{} }
func (m *GetWorkspaceByName) String() string { return proto.CompactTextString(m) }
func (*GetWorkspaceByName) ProtoMessage()    {}
func (*GetWorkspaceByName) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa02a41bd20f6ea6, []int{1}
}

func (m *GetWorkspaceByName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkspaceByName.Unmarshal(m, b)
}
func (m *GetWorkspaceByName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkspaceByName.Marshal(b, m, deterministic)
}
func (m *GetWorkspaceByName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkspaceByName.Merge(m, src)
}
func (m *GetWorkspaceByName) XXX_Size() int {
	return xxx_messageInfo_GetWorkspaceByName.Size(m)
}
func (m *GetWorkspaceByName) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkspaceByName.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkspaceByName proto.InternalMessageInfo

func (m *GetWorkspaceByName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Workspace struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to InternalId:
	//	*Workspace_UserId
	//	*Workspace_OrgId
	InternalId           isWorkspace_InternalId `protobuf_oneof:"internal_id"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Workspace) Reset()         { *m = Workspace{} }
func (m *Workspace) String() string { return proto.CompactTextString(m) }
func (*Workspace) ProtoMessage()    {}
func (*Workspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa02a41bd20f6ea6, []int{2}
}

func (m *Workspace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workspace.Unmarshal(m, b)
}
func (m *Workspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workspace.Marshal(b, m, deterministic)
}
func (m *Workspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workspace.Merge(m, src)
}
func (m *Workspace) XXX_Size() int {
	return xxx_messageInfo_Workspace.Size(m)
}
func (m *Workspace) XXX_DiscardUnknown() {
	xxx_messageInfo_Workspace.DiscardUnknown(m)
}

var xxx_messageInfo_Workspace proto.InternalMessageInfo

func (m *Workspace) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type isWorkspace_InternalId interface {
	isWorkspace_InternalId()
}

type Workspace_UserId struct {
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof"`
}

type Workspace_OrgId struct {
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3,oneof"`
}

func (*Workspace_UserId) isWorkspace_InternalId() {}

func (*Workspace_OrgId) isWorkspace_InternalId() {}

func (m *Workspace) GetInternalId() isWorkspace_InternalId {
	if m != nil {
		return m.InternalId
	}
	return nil
}

func (m *Workspace) GetUserId() string {
	if x, ok := m.GetInternalId().(*Workspace_UserId); ok {
		return x.UserId
	}
	return ""
}

func (m *Workspace) GetOrgId() string {
	if x, ok := m.GetInternalId().(*Workspace_OrgId); ok {
		return x.OrgId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Workspace) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Workspace_UserId)(nil),
		(*Workspace_OrgId)(nil),
	}
}

func init() {
	proto.RegisterType((*GetWorkspaceById)(nil), "ai.verta.uac.GetWorkspaceById")
	proto.RegisterType((*GetWorkspaceByName)(nil), "ai.verta.uac.GetWorkspaceByName")
	proto.RegisterType((*Workspace)(nil), "ai.verta.uac.Workspace")
}

func init() {
	proto.RegisterFile("uac/Workspace.proto", fileDescriptor_fa02a41bd20f6ea6)
}

var fileDescriptor_fa02a41bd20f6ea6 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x5d, 0x9d, 0x93, 0xc5, 0x3f, 0x8c, 0x78, 0xd8, 0x1c, 0x32, 0x4a, 0x0f, 0xb2, 0x53,
	0x83, 0x7a, 0xf3, 0x20, 0xb8, 0x8b, 0xf6, 0x22, 0x32, 0x41, 0xc1, 0x83, 0x23, 0x4d, 0x5e, 0x62,
	0xb0, 0xcd, 0x5b, 0xd2, 0x74, 0xb2, 0xeb, 0xbe, 0x82, 0x1f, 0xcd, 0xaf, 0xe0, 0x07, 0x91, 0x56,
	0x57, 0xdc, 0x86, 0xbb, 0x25, 0xcf, 0xf3, 0xe4, 0xf9, 0xf1, 0xbe, 0x21, 0x47, 0x05, 0x17, 0xec,
	0x09, 0xed, 0x5b, 0x9e, 0x71, 0x01, 0x61, 0x66, 0xd1, 0x21, 0xdd, 0xe7, 0x3a, 0x9c, 0x82, 0x75,
	0x3c, 0x2c, 0xb8, 0xe8, 0x9f, 0x28, 0x44, 0x95, 0x00, 0xe3, 0x99, 0x66, 0xdc, 0x18, 0x74, 0xdc,
	0x69, 0x34, 0xf9, 0x4f, 0x36, 0x08, 0x48, 0xe7, 0x06, 0x5c, 0xdd, 0x30, 0x9a, 0x45, 0x92, 0x1e,
	0x12, 0x4f, 0xcb, 0x5e, 0xc3, 0x6f, 0x0c, 0x9b, 0x63, 0x4f, 0xcb, 0x60, 0x48, 0xe8, 0x72, 0xe6,
	0x8e, 0xa7, 0x40, 0x29, 0x69, 0x1a, 0x9e, 0x42, 0x95, 0x6b, 0x8f, 0xab, 0x73, 0xf0, 0x42, 0xda,
	0x75, 0x6c, 0xb5, 0x86, 0x1e, 0x93, 0xdd, 0x22, 0x07, 0x3b, 0xd1, 0xb2, 0xe7, 0x95, 0x6f, 0x6e,
	0xb7, 0xc6, 0xad, 0x52, 0x88, 0x24, 0xed, 0x92, 0x16, 0x5a, 0x55, 0x3a, 0xdb, 0xbf, 0xce, 0x0e,
	0x5a, 0x15, 0xc9, 0xd1, 0x01, 0xd9, 0xd3, 0xc6, 0x81, 0x35, 0x3c, 0x99, 0x68, 0x79, 0x3e, 0xf7,
	0x48, 0xa7, 0x06, 0x3c, 0x80, 0x9d, 0x6a, 0x01, 0x34, 0x27, 0x1d, 0xb5, 0x3a, 0xc2, 0x20, 0xfc,
	0xbb, 0x83, 0x70, 0x75, 0xc4, 0x7e, 0x77, 0xd9, 0xaf, 0xcd, 0xe0, 0x74, 0xfe, 0xf9, 0xf5, 0xe1,
	0xf9, 0x74, 0xc0, 0xa6, 0x67, 0xec, 0x7d, 0x21, 0xb3, 0x35, 0xc0, 0x8c, 0x50, 0xb5, 0xbe, 0x13,
	0x7f, 0x13, 0xb6, 0x4c, 0xfc, 0x0f, 0x1e, 0x56, 0xe0, 0x80, 0xfa, 0x9b, 0xc0, 0x65, 0xc5, 0xe8,
	0xea, 0xbe, 0xf1, 0x7c, 0xa9, 0xb4, 0x7b, 0x2d, 0xe2, 0x50, 0x60, 0xca, 0x1e, 0xcb, 0xb6, 0xeb,
	0x88, 0xa5, 0x28, 0x21, 0x91, 0x31, 0xab, 0x3e, 0x36, 0x67, 0x0a, 0x0c, 0x53, 0xb8, 0xb8, 0x65,
	0x45, 0x9c, 0x68, 0xc1, 0x0a, 0x2e, 0xe2, 0x56, 0x25, 0x5d, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x3f, 0x51, 0xa0, 0xa3, 0x3c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkspaceServiceClient is the client API for WorkspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkspaceServiceClient interface {
	GetWorkspaceById(ctx context.Context, in *GetWorkspaceById, opts ...grpc.CallOption) (*Workspace, error)
	GetWorkspaceByName(ctx context.Context, in *GetWorkspaceByName, opts ...grpc.CallOption) (*Workspace, error)
}

type workspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceServiceClient(cc grpc.ClientConnInterface) WorkspaceServiceClient {
	return &workspaceServiceClient{cc}
}

func (c *workspaceServiceClient) GetWorkspaceById(ctx context.Context, in *GetWorkspaceById, opts ...grpc.CallOption) (*Workspace, error) {
	out := new(Workspace)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.WorkspaceService/getWorkspaceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) GetWorkspaceByName(ctx context.Context, in *GetWorkspaceByName, opts ...grpc.CallOption) (*Workspace, error) {
	out := new(Workspace)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.WorkspaceService/getWorkspaceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServiceServer is the server API for WorkspaceService service.
type WorkspaceServiceServer interface {
	GetWorkspaceById(context.Context, *GetWorkspaceById) (*Workspace, error)
	GetWorkspaceByName(context.Context, *GetWorkspaceByName) (*Workspace, error)
}

// UnimplementedWorkspaceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServiceServer struct {
}

func (*UnimplementedWorkspaceServiceServer) GetWorkspaceById(ctx context.Context, req *GetWorkspaceById) (*Workspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceById not implemented")
}
func (*UnimplementedWorkspaceServiceServer) GetWorkspaceByName(ctx context.Context, req *GetWorkspaceByName) (*Workspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceByName not implemented")
}

func RegisterWorkspaceServiceServer(s *grpc.Server, srv WorkspaceServiceServer) {
	s.RegisterService(&_WorkspaceService_serviceDesc, srv)
}

func _WorkspaceService_GetWorkspaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).GetWorkspaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.WorkspaceService/GetWorkspaceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).GetWorkspaceById(ctx, req.(*GetWorkspaceById))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_GetWorkspaceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).GetWorkspaceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.WorkspaceService/GetWorkspaceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).GetWorkspaceByName(ctx, req.(*GetWorkspaceByName))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkspaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.WorkspaceService",
	HandlerType: (*WorkspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getWorkspaceById",
			Handler:    _WorkspaceService_GetWorkspaceById_Handler,
		},
		{
			MethodName: "getWorkspaceByName",
			Handler:    _WorkspaceService_GetWorkspaceByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/Workspace.proto",
}
