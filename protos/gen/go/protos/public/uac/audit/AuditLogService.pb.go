// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: uac/audit/AuditLogService.proto

package audit

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//What
type AuditResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the resource
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// the tyep of the resource
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// the service the resource belongs to
	ResourceService string `protobuf:"bytes,3,opt,name=resource_service,json=resourceService,proto3" json:"resource_service,omitempty"`
}

func (x *AuditResource) Reset() {
	*x = AuditResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditResource) ProtoMessage() {}

func (x *AuditResource) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditResource.ProtoReflect.Descriptor instead.
func (*AuditResource) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{0}
}

func (x *AuditResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *AuditResource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AuditResource) GetResourceService() string {
	if x != nil {
		return x.ResourceService
	}
	return ""
}

//Who
type AuditUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//verta id of the user performing the action
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AuditUser) Reset() {
	*x = AuditUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditUser) ProtoMessage() {}

func (x *AuditUser) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditUser.ProtoReflect.Descriptor instead.
func (*AuditUser) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{1}
}

func (x *AuditUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Who
	User *AuditUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	//What
	Resource *AuditResource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// How : the action the user performed
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	//When: timestamp
	TsNano int64 `protobuf:"varint,4,opt,name=ts_nano,json=tsNano,proto3" json:"ts_nano,omitempty"`
	//other metadata, this is free formed.
	MetadataBlob string `protobuf:"bytes,5,opt,name=metadata_blob,json=metadataBlob,proto3" json:"metadata_blob,omitempty"`
	//local id, used for consistency
	LocalId string `protobuf:"bytes,6,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{2}
}

func (x *AuditLog) GetUser() *AuditUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AuditLog) GetResource() *AuditResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AuditLog) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AuditLog) GetTsNano() int64 {
	if x != nil {
		return x.TsNano
	}
	return 0
}

func (x *AuditLog) GetMetadataBlob() string {
	if x != nil {
		return x.MetadataBlob
	}
	return ""
}

func (x *AuditLog) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

type BatchResponseRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalId     string `protobuf:"bytes,1,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	Acknowledge bool   `protobuf:"varint,2,opt,name=acknowledge,proto3" json:"acknowledge,omitempty"`
	ErrorCode   int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Error       string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BatchResponseRow) Reset() {
	*x = BatchResponseRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResponseRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponseRow) ProtoMessage() {}

func (x *BatchResponseRow) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponseRow.ProtoReflect.Descriptor instead.
func (*BatchResponseRow) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{3}
}

func (x *BatchResponseRow) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

func (x *BatchResponseRow) GetAcknowledge() bool {
	if x != nil {
		return x.Acknowledge
	}
	return false
}

func (x *BatchResponseRow) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *BatchResponseRow) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AddAuditLogBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log []*AuditLog `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
}

func (x *AddAuditLogBatch) Reset() {
	*x = AddAuditLogBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAuditLogBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAuditLogBatch) ProtoMessage() {}

func (x *AddAuditLogBatch) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAuditLogBatch.ProtoReflect.Descriptor instead.
func (*AddAuditLogBatch) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{4}
}

func (x *AddAuditLogBatch) GetLog() []*AuditLog {
	if x != nil {
		return x.Log
	}
	return nil
}

type RangeTimeStampPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTs int64 `protobuf:"varint,1,opt,name=from_ts,json=fromTs,proto3" json:"from_ts,omitempty"`
	ToTs   int64 `protobuf:"varint,2,opt,name=to_ts,json=toTs,proto3" json:"to_ts,omitempty"`
}

func (x *RangeTimeStampPredicate) Reset() {
	*x = RangeTimeStampPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeTimeStampPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeTimeStampPredicate) ProtoMessage() {}

func (x *RangeTimeStampPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeTimeStampPredicate.ProtoReflect.Descriptor instead.
func (*RangeTimeStampPredicate) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{5}
}

func (x *RangeTimeStampPredicate) GetFromTs() int64 {
	if x != nil {
		return x.FromTs
	}
	return 0
}

func (x *RangeTimeStampPredicate) GetToTs() int64 {
	if x != nil {
		return x.ToTs
	}
	return 0
}

type UserPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the query could be with the user id or with the service the service account belongs to
	// Example
	// log for user with id "123"
	User *AuditUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserPredicate) Reset() {
	*x = UserPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPredicate) ProtoMessage() {}

func (x *UserPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPredicate.ProtoReflect.Descriptor instead.
func (*UserPredicate) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{6}
}

func (x *UserPredicate) GetUser() *AuditUser {
	if x != nil {
		return x.User
	}
	return nil
}

type ResourcePredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  resource_id, resource_type, resource_service form an hierarchy
	// Querying on any thing on left will require values to be provided for things on right
	//Example :
	// log for resource 123 of type "project" belonging to resource service "deployment"
	// log for all resources of type "project" belonging to resource service "deployment"
	// log for all resources where resource_service = "deployment"
	Resource *AuditResource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *ResourcePredicate) Reset() {
	*x = ResourcePredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePredicate) ProtoMessage() {}

func (x *ResourcePredicate) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePredicate.ProtoReflect.Descriptor instead.
func (*ResourcePredicate) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{7}
}

func (x *ResourcePredicate) GetResource() *AuditResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type AuditLogPredicates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//all the predicates will be And-ed
	TimestampPredicate *RangeTimeStampPredicate `protobuf:"bytes,1,opt,name=timestamp_predicate,json=timestampPredicate,proto3" json:"timestamp_predicate,omitempty"`
	UserPredicate      *UserPredicate           `protobuf:"bytes,2,opt,name=user_predicate,json=userPredicate,proto3" json:"user_predicate,omitempty"`
	ResourcePredicate  *ResourcePredicate       `protobuf:"bytes,3,opt,name=resource_predicate,json=resourcePredicate,proto3" json:"resource_predicate,omitempty"`
}

func (x *AuditLogPredicates) Reset() {
	*x = AuditLogPredicates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogPredicates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogPredicates) ProtoMessage() {}

func (x *AuditLogPredicates) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogPredicates.ProtoReflect.Descriptor instead.
func (*AuditLogPredicates) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{8}
}

func (x *AuditLogPredicates) GetTimestampPredicate() *RangeTimeStampPredicate {
	if x != nil {
		return x.TimestampPredicate
	}
	return nil
}

func (x *AuditLogPredicates) GetUserPredicate() *UserPredicate {
	if x != nil {
		return x.UserPredicate
	}
	return nil
}

func (x *AuditLogPredicates) GetResourcePredicate() *ResourcePredicate {
	if x != nil {
		return x.ResourcePredicate
	}
	return nil
}

type FindAuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *AuditLogPredicates `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Pagination *common.Pagination  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *FindAuditLog) Reset() {
	*x = FindAuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAuditLog) ProtoMessage() {}

func (x *FindAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAuditLog.ProtoReflect.Descriptor instead.
func (*FindAuditLog) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{9}
}

func (x *FindAuditLog) GetQuery() *AuditLogPredicates {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FindAuditLog) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AddAuditLogBatch_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseRows []*BatchResponseRow `protobuf:"bytes,1,rep,name=response_rows,json=responseRows,proto3" json:"response_rows,omitempty"`
}

func (x *AddAuditLogBatch_Response) Reset() {
	*x = AddAuditLogBatch_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAuditLogBatch_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAuditLogBatch_Response) ProtoMessage() {}

func (x *AddAuditLogBatch_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAuditLogBatch_Response.ProtoReflect.Descriptor instead.
func (*AddAuditLogBatch_Response) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AddAuditLogBatch_Response) GetResponseRows() []*BatchResponseRow {
	if x != nil {
		return x.ResponseRows
	}
	return nil
}

type FindAuditLog_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs         []*AuditLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	TotalRecords int64       `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindAuditLog_Response) Reset() {
	*x = FindAuditLog_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uac_audit_AuditLogService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAuditLog_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAuditLog_Response) ProtoMessage() {}

func (x *FindAuditLog_Response) ProtoReflect() protoreflect.Message {
	mi := &file_uac_audit_AuditLogService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAuditLog_Response.ProtoReflect.Descriptor instead.
func (*FindAuditLog_Response) Descriptor() ([]byte, []int) {
	return file_uac_audit_AuditLogService_proto_rawDescGZIP(), []int{9, 0}
}

func (x *FindAuditLog_Response) GetLogs() []*AuditLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *FindAuditLog_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

var File_uac_audit_AuditLogService_proto protoreflect.FileDescriptor

var file_uac_audit_AuditLogService_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x75, 0x61, 0x63, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x24, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf7, 0x01,
	0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x73, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa3,
	0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x1a, 0x5a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x6f, 0x77, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x54, 0x73, 0x22, 0x47, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xa1, 0x02, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x66, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xb9, 0x02, 0x0a,
	0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x96, 0x01, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2d, 0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2d, 0x6c, 0x6f, 0x67, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x3a, 0x01, 0x2a, 0x42, 0x44, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75, 0x61, 0x63, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uac_audit_AuditLogService_proto_rawDescOnce sync.Once
	file_uac_audit_AuditLogService_proto_rawDescData = file_uac_audit_AuditLogService_proto_rawDesc
)

func file_uac_audit_AuditLogService_proto_rawDescGZIP() []byte {
	file_uac_audit_AuditLogService_proto_rawDescOnce.Do(func() {
		file_uac_audit_AuditLogService_proto_rawDescData = protoimpl.X.CompressGZIP(file_uac_audit_AuditLogService_proto_rawDescData)
	})
	return file_uac_audit_AuditLogService_proto_rawDescData
}

var file_uac_audit_AuditLogService_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_uac_audit_AuditLogService_proto_goTypes = []interface{}{
	(*AuditResource)(nil),             // 0: ai.verta.uac.versioning.AuditResource
	(*AuditUser)(nil),                 // 1: ai.verta.uac.versioning.AuditUser
	(*AuditLog)(nil),                  // 2: ai.verta.uac.versioning.AuditLog
	(*BatchResponseRow)(nil),          // 3: ai.verta.uac.versioning.BatchResponseRow
	(*AddAuditLogBatch)(nil),          // 4: ai.verta.uac.versioning.AddAuditLogBatch
	(*RangeTimeStampPredicate)(nil),   // 5: ai.verta.uac.versioning.RangeTimeStampPredicate
	(*UserPredicate)(nil),             // 6: ai.verta.uac.versioning.UserPredicate
	(*ResourcePredicate)(nil),         // 7: ai.verta.uac.versioning.ResourcePredicate
	(*AuditLogPredicates)(nil),        // 8: ai.verta.uac.versioning.AuditLogPredicates
	(*FindAuditLog)(nil),              // 9: ai.verta.uac.versioning.FindAuditLog
	(*AddAuditLogBatch_Response)(nil), // 10: ai.verta.uac.versioning.AddAuditLogBatch.Response
	(*FindAuditLog_Response)(nil),     // 11: ai.verta.uac.versioning.FindAuditLog.Response
	(*common.Pagination)(nil),         // 12: ai.verta.common.Pagination
}
var file_uac_audit_AuditLogService_proto_depIdxs = []int32{
	1,  // 0: ai.verta.uac.versioning.AuditLog.user:type_name -> ai.verta.uac.versioning.AuditUser
	0,  // 1: ai.verta.uac.versioning.AuditLog.resource:type_name -> ai.verta.uac.versioning.AuditResource
	2,  // 2: ai.verta.uac.versioning.AddAuditLogBatch.log:type_name -> ai.verta.uac.versioning.AuditLog
	1,  // 3: ai.verta.uac.versioning.UserPredicate.user:type_name -> ai.verta.uac.versioning.AuditUser
	0,  // 4: ai.verta.uac.versioning.ResourcePredicate.resource:type_name -> ai.verta.uac.versioning.AuditResource
	5,  // 5: ai.verta.uac.versioning.AuditLogPredicates.timestamp_predicate:type_name -> ai.verta.uac.versioning.RangeTimeStampPredicate
	6,  // 6: ai.verta.uac.versioning.AuditLogPredicates.user_predicate:type_name -> ai.verta.uac.versioning.UserPredicate
	7,  // 7: ai.verta.uac.versioning.AuditLogPredicates.resource_predicate:type_name -> ai.verta.uac.versioning.ResourcePredicate
	8,  // 8: ai.verta.uac.versioning.FindAuditLog.query:type_name -> ai.verta.uac.versioning.AuditLogPredicates
	12, // 9: ai.verta.uac.versioning.FindAuditLog.pagination:type_name -> ai.verta.common.Pagination
	3,  // 10: ai.verta.uac.versioning.AddAuditLogBatch.Response.response_rows:type_name -> ai.verta.uac.versioning.BatchResponseRow
	2,  // 11: ai.verta.uac.versioning.FindAuditLog.Response.logs:type_name -> ai.verta.uac.versioning.AuditLog
	4,  // 12: ai.verta.uac.versioning.AuditLogService.postAuditLogs:input_type -> ai.verta.uac.versioning.AddAuditLogBatch
	9,  // 13: ai.verta.uac.versioning.AuditLogService.findAuditLog:input_type -> ai.verta.uac.versioning.FindAuditLog
	10, // 14: ai.verta.uac.versioning.AuditLogService.postAuditLogs:output_type -> ai.verta.uac.versioning.AddAuditLogBatch.Response
	11, // 15: ai.verta.uac.versioning.AuditLogService.findAuditLog:output_type -> ai.verta.uac.versioning.FindAuditLog.Response
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_uac_audit_AuditLogService_proto_init() }
func file_uac_audit_AuditLogService_proto_init() {
	if File_uac_audit_AuditLogService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_uac_audit_AuditLogService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchResponseRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAuditLogBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeTimeStampPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogPredicates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAuditLogBatch_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uac_audit_AuditLogService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAuditLog_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uac_audit_AuditLogService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uac_audit_AuditLogService_proto_goTypes,
		DependencyIndexes: file_uac_audit_AuditLogService_proto_depIdxs,
		MessageInfos:      file_uac_audit_AuditLogService_proto_msgTypes,
	}.Build()
	File_uac_audit_AuditLogService_proto = out.File
	file_uac_audit_AuditLogService_proto_rawDesc = nil
	file_uac_audit_AuditLogService_proto_goTypes = nil
	file_uac_audit_AuditLogService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuditLogServiceClient is the client API for AuditLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditLogServiceClient interface {
	PostAuditLogs(ctx context.Context, in *AddAuditLogBatch, opts ...grpc.CallOption) (*AddAuditLogBatch_Response, error)
	FindAuditLog(ctx context.Context, in *FindAuditLog, opts ...grpc.CallOption) (*FindAuditLog_Response, error)
}

type auditLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditLogServiceClient(cc grpc.ClientConnInterface) AuditLogServiceClient {
	return &auditLogServiceClient{cc}
}

func (c *auditLogServiceClient) PostAuditLogs(ctx context.Context, in *AddAuditLogBatch, opts ...grpc.CallOption) (*AddAuditLogBatch_Response, error) {
	out := new(AddAuditLogBatch_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.versioning.AuditLogService/postAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogServiceClient) FindAuditLog(ctx context.Context, in *FindAuditLog, opts ...grpc.CallOption) (*FindAuditLog_Response, error) {
	out := new(FindAuditLog_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.versioning.AuditLogService/findAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditLogServiceServer is the server API for AuditLogService service.
type AuditLogServiceServer interface {
	PostAuditLogs(context.Context, *AddAuditLogBatch) (*AddAuditLogBatch_Response, error)
	FindAuditLog(context.Context, *FindAuditLog) (*FindAuditLog_Response, error)
}

// UnimplementedAuditLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuditLogServiceServer struct {
}

func (*UnimplementedAuditLogServiceServer) PostAuditLogs(context.Context, *AddAuditLogBatch) (*AddAuditLogBatch_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAuditLogs not implemented")
}
func (*UnimplementedAuditLogServiceServer) FindAuditLog(context.Context, *FindAuditLog) (*FindAuditLog_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAuditLog not implemented")
}

func RegisterAuditLogServiceServer(s *grpc.Server, srv AuditLogServiceServer) {
	s.RegisterService(&_AuditLogService_serviceDesc, srv)
}

func _AuditLogService_PostAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuditLogBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServiceServer).PostAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.versioning.AuditLogService/PostAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServiceServer).PostAuditLogs(ctx, req.(*AddAuditLogBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLogService_FindAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAuditLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServiceServer).FindAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.versioning.AuditLogService/FindAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServiceServer).FindAuditLog(ctx, req.(*FindAuditLog))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.versioning.AuditLogService",
	HandlerType: (*AuditLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "postAuditLogs",
			Handler:    _AuditLogService_PostAuditLogs_Handler,
		},
		{
			MethodName: "findAuditLog",
			Handler:    _AuditLogService_FindAuditLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/audit/AuditLogService.proto",
}
