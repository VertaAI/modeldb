// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: uac/WorkspaceV2.proto

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceServiceV2Client is the client API for WorkspaceServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceServiceV2Client interface {
	SetWorkspace(ctx context.Context, in *SetWorkspaceV2, opts ...grpc.CallOption) (*SetWorkspaceV2_Response, error)
	GetWorkspace(ctx context.Context, in *GetWorkspaceV2, opts ...grpc.CallOption) (*GetWorkspaceV2_Response, error)
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceV2, opts ...grpc.CallOption) (*DeleteWorkspaceV2_Response, error)
	SearchWorkspaces(ctx context.Context, in *SearchWorkspacesV2, opts ...grpc.CallOption) (*SearchWorkspacesV2_Response, error)
}

type workspaceServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceServiceV2Client(cc grpc.ClientConnInterface) WorkspaceServiceV2Client {
	return &workspaceServiceV2Client{cc}
}

func (c *workspaceServiceV2Client) SetWorkspace(ctx context.Context, in *SetWorkspaceV2, opts ...grpc.CallOption) (*SetWorkspaceV2_Response, error) {
	out := new(SetWorkspaceV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.WorkspaceServiceV2/setWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceV2Client) GetWorkspace(ctx context.Context, in *GetWorkspaceV2, opts ...grpc.CallOption) (*GetWorkspaceV2_Response, error) {
	out := new(GetWorkspaceV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.WorkspaceServiceV2/getWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceV2Client) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceV2, opts ...grpc.CallOption) (*DeleteWorkspaceV2_Response, error) {
	out := new(DeleteWorkspaceV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.WorkspaceServiceV2/deleteWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceV2Client) SearchWorkspaces(ctx context.Context, in *SearchWorkspacesV2, opts ...grpc.CallOption) (*SearchWorkspacesV2_Response, error) {
	out := new(SearchWorkspacesV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.WorkspaceServiceV2/searchWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServiceV2Server is the server API for WorkspaceServiceV2 service.
// All implementations must embed UnimplementedWorkspaceServiceV2Server
// for forward compatibility
type WorkspaceServiceV2Server interface {
	SetWorkspace(context.Context, *SetWorkspaceV2) (*SetWorkspaceV2_Response, error)
	GetWorkspace(context.Context, *GetWorkspaceV2) (*GetWorkspaceV2_Response, error)
	DeleteWorkspace(context.Context, *DeleteWorkspaceV2) (*DeleteWorkspaceV2_Response, error)
	SearchWorkspaces(context.Context, *SearchWorkspacesV2) (*SearchWorkspacesV2_Response, error)
	mustEmbedUnimplementedWorkspaceServiceV2Server()
}

// UnimplementedWorkspaceServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServiceV2Server struct {
}

func (UnimplementedWorkspaceServiceV2Server) SetWorkspace(context.Context, *SetWorkspaceV2) (*SetWorkspaceV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkspace not implemented")
}
func (UnimplementedWorkspaceServiceV2Server) GetWorkspace(context.Context, *GetWorkspaceV2) (*GetWorkspaceV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedWorkspaceServiceV2Server) DeleteWorkspace(context.Context, *DeleteWorkspaceV2) (*DeleteWorkspaceV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (UnimplementedWorkspaceServiceV2Server) SearchWorkspaces(context.Context, *SearchWorkspacesV2) (*SearchWorkspacesV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWorkspaces not implemented")
}
func (UnimplementedWorkspaceServiceV2Server) mustEmbedUnimplementedWorkspaceServiceV2Server() {}

// UnsafeWorkspaceServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServiceV2Server will
// result in compilation errors.
type UnsafeWorkspaceServiceV2Server interface {
	mustEmbedUnimplementedWorkspaceServiceV2Server()
}

func RegisterWorkspaceServiceV2Server(s grpc.ServiceRegistrar, srv WorkspaceServiceV2Server) {
	s.RegisterService(&WorkspaceServiceV2_ServiceDesc, srv)
}

func _WorkspaceServiceV2_SetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkspaceV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceV2Server).SetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.WorkspaceServiceV2/setWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceV2Server).SetWorkspace(ctx, req.(*SetWorkspaceV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceServiceV2_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceV2Server).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.WorkspaceServiceV2/getWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceV2Server).GetWorkspace(ctx, req.(*GetWorkspaceV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceServiceV2_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceV2Server).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.WorkspaceServiceV2/deleteWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceV2Server).DeleteWorkspace(ctx, req.(*DeleteWorkspaceV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceServiceV2_SearchWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWorkspacesV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceV2Server).SearchWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.WorkspaceServiceV2/searchWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceV2Server).SearchWorkspaces(ctx, req.(*SearchWorkspacesV2))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceServiceV2_ServiceDesc is the grpc.ServiceDesc for WorkspaceServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.WorkspaceServiceV2",
	HandlerType: (*WorkspaceServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setWorkspace",
			Handler:    _WorkspaceServiceV2_SetWorkspace_Handler,
		},
		{
			MethodName: "getWorkspace",
			Handler:    _WorkspaceServiceV2_GetWorkspace_Handler,
		},
		{
			MethodName: "deleteWorkspace",
			Handler:    _WorkspaceServiceV2_DeleteWorkspace_Handler,
		},
		{
			MethodName: "searchWorkspaces",
			Handler:    _WorkspaceServiceV2_SearchWorkspaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/WorkspaceV2.proto",
}
