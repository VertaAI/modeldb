// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: uac/Collaborator.proto

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollaboratorServiceClient is the client API for CollaboratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollaboratorServiceClient interface {
	// The caller must have permission to GET the resource accordingly
	GetResources(ctx context.Context, in *GetResources, opts ...grpc.CallOption) (*GetResources_Response, error)
	// The caller must have permission to GET the resource accordingly
	// gets resources that is available in personal workspace (all except organization workspace resources)
	GetResourcesSpecialPersonalWorkspace(ctx context.Context, in *GetResources, opts ...grpc.CallOption) (*GetResources_Response, error)
	// The caller must have permission to CREATE or UPDATE the resource accordingly
	SetResource(ctx context.Context, in *SetResource, opts ...grpc.CallOption) (*SetResource_Response, error)
	// The caller must have permission to DELETE the resource accordingly
	DeleteResources(ctx context.Context, in *DeleteResources, opts ...grpc.CallOption) (*DeleteResources_Response, error)
	GetResourceAdmins(ctx context.Context, in *GetResourceAdmins, opts ...grpc.CallOption) (*ResourceAdmins, error)
	AddResourceAdmins(ctx context.Context, in *ModifyResourceAdmins, opts ...grpc.CallOption) (*Empty, error)
	RemoveResourceAdmins(ctx context.Context, in *ModifyResourceAdmins, opts ...grpc.CallOption) (*Empty, error)
	AddOrUpdateProjectCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveProjectCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetProjectCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateDatasetCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveDatasetCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetDatasetCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateRepositoryCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveRepositoryCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetRepositoryCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateEndpointCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveEndpointCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetEndpointCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateEndpointCollaboratorCommonService(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveEndpointCollaboratorCommonService(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetEndpointCollaboratorsCommonService(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateRegisteredModelCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveRegisteredModelCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetRegisteredModelCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
	AddOrUpdateMonitoredEntityCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error)
	RemoveMonitoredEntityCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error)
	GetMonitoredEntityCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error)
}

type collaboratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaboratorServiceClient(cc grpc.ClientConnInterface) CollaboratorServiceClient {
	return &collaboratorServiceClient{cc}
}

func (c *collaboratorServiceClient) GetResources(ctx context.Context, in *GetResources, opts ...grpc.CallOption) (*GetResources_Response, error) {
	out := new(GetResources_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetResourcesSpecialPersonalWorkspace(ctx context.Context, in *GetResources, opts ...grpc.CallOption) (*GetResources_Response, error) {
	out := new(GetResources_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getResourcesSpecialPersonalWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) SetResource(ctx context.Context, in *SetResource, opts ...grpc.CallOption) (*SetResource_Response, error) {
	out := new(SetResource_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/setResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) DeleteResources(ctx context.Context, in *DeleteResources, opts ...grpc.CallOption) (*DeleteResources_Response, error) {
	out := new(DeleteResources_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/deleteResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetResourceAdmins(ctx context.Context, in *GetResourceAdmins, opts ...grpc.CallOption) (*ResourceAdmins, error) {
	out := new(ResourceAdmins)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getResourceAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddResourceAdmins(ctx context.Context, in *ModifyResourceAdmins, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addResourceAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveResourceAdmins(ctx context.Context, in *ModifyResourceAdmins, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeResourceAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateProjectCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateProjectCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveProjectCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeProjectCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetProjectCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getProjectCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateDatasetCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateDatasetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveDatasetCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeDatasetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetDatasetCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getDatasetCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateRepositoryCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateRepositoryCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveRepositoryCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeRepositoryCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetRepositoryCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getRepositoryCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateEndpointCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateEndpointCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveEndpointCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeEndpointCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetEndpointCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getEndpointCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateEndpointCollaboratorCommonService(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateEndpointCollaboratorCommonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveEndpointCollaboratorCommonService(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeEndpointCollaboratorCommonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetEndpointCollaboratorsCommonService(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getEndpointCollaboratorsCommonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateRegisteredModelCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateRegisteredModelCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveRegisteredModelCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeRegisteredModelCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetRegisteredModelCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getRegisteredModelCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) AddOrUpdateMonitoredEntityCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorRequest_Response, error) {
	out := new(AddCollaboratorRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/addOrUpdateMonitoredEntityCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) RemoveMonitoredEntityCollaborator(ctx context.Context, in *RemoveCollaborator, opts ...grpc.CallOption) (*RemoveCollaborator_Response, error) {
	out := new(RemoveCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/removeMonitoredEntityCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaboratorServiceClient) GetMonitoredEntityCollaborators(ctx context.Context, in *GetCollaborator, opts ...grpc.CallOption) (*GetCollaborator_Response, error) {
	out := new(GetCollaborator_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.CollaboratorService/getMonitoredEntityCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaboratorServiceServer is the server API for CollaboratorService service.
// All implementations must embed UnimplementedCollaboratorServiceServer
// for forward compatibility
type CollaboratorServiceServer interface {
	// The caller must have permission to GET the resource accordingly
	GetResources(context.Context, *GetResources) (*GetResources_Response, error)
	// The caller must have permission to GET the resource accordingly
	// gets resources that is available in personal workspace (all except organization workspace resources)
	GetResourcesSpecialPersonalWorkspace(context.Context, *GetResources) (*GetResources_Response, error)
	// The caller must have permission to CREATE or UPDATE the resource accordingly
	SetResource(context.Context, *SetResource) (*SetResource_Response, error)
	// The caller must have permission to DELETE the resource accordingly
	DeleteResources(context.Context, *DeleteResources) (*DeleteResources_Response, error)
	GetResourceAdmins(context.Context, *GetResourceAdmins) (*ResourceAdmins, error)
	AddResourceAdmins(context.Context, *ModifyResourceAdmins) (*Empty, error)
	RemoveResourceAdmins(context.Context, *ModifyResourceAdmins) (*Empty, error)
	AddOrUpdateProjectCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveProjectCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetProjectCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateDatasetCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveDatasetCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetDatasetCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateRepositoryCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveRepositoryCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetRepositoryCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateEndpointCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveEndpointCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetEndpointCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateEndpointCollaboratorCommonService(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveEndpointCollaboratorCommonService(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetEndpointCollaboratorsCommonService(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateRegisteredModelCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveRegisteredModelCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetRegisteredModelCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	AddOrUpdateMonitoredEntityCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error)
	RemoveMonitoredEntityCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error)
	GetMonitoredEntityCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error)
	mustEmbedUnimplementedCollaboratorServiceServer()
}

// UnimplementedCollaboratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollaboratorServiceServer struct {
}

func (UnimplementedCollaboratorServiceServer) GetResources(context.Context, *GetResources) (*GetResources_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetResourcesSpecialPersonalWorkspace(context.Context, *GetResources) (*GetResources_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcesSpecialPersonalWorkspace not implemented")
}
func (UnimplementedCollaboratorServiceServer) SetResource(context.Context, *SetResource) (*SetResource_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResource not implemented")
}
func (UnimplementedCollaboratorServiceServer) DeleteResources(context.Context, *DeleteResources) (*DeleteResources_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResources not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetResourceAdmins(context.Context, *GetResourceAdmins) (*ResourceAdmins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceAdmins not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddResourceAdmins(context.Context, *ModifyResourceAdmins) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceAdmins not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveResourceAdmins(context.Context, *ModifyResourceAdmins) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResourceAdmins not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddOrUpdateProjectCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateProjectCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveProjectCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetProjectCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectCollaborators not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddOrUpdateDatasetCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateDatasetCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveDatasetCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDatasetCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetDatasetCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetCollaborators not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddOrUpdateRepositoryCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateRepositoryCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveRepositoryCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRepositoryCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetRepositoryCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryCollaborators not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddOrUpdateEndpointCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateEndpointCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveEndpointCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEndpointCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetEndpointCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointCollaborators not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddOrUpdateEndpointCollaboratorCommonService(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateEndpointCollaboratorCommonService not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveEndpointCollaboratorCommonService(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEndpointCollaboratorCommonService not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetEndpointCollaboratorsCommonService(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointCollaboratorsCommonService not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddOrUpdateRegisteredModelCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateRegisteredModelCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveRegisteredModelCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRegisteredModelCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetRegisteredModelCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredModelCollaborators not implemented")
}
func (UnimplementedCollaboratorServiceServer) AddOrUpdateMonitoredEntityCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateMonitoredEntityCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) RemoveMonitoredEntityCollaborator(context.Context, *RemoveCollaborator) (*RemoveCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMonitoredEntityCollaborator not implemented")
}
func (UnimplementedCollaboratorServiceServer) GetMonitoredEntityCollaborators(context.Context, *GetCollaborator) (*GetCollaborator_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoredEntityCollaborators not implemented")
}
func (UnimplementedCollaboratorServiceServer) mustEmbedUnimplementedCollaboratorServiceServer() {}

// UnsafeCollaboratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaboratorServiceServer will
// result in compilation errors.
type UnsafeCollaboratorServiceServer interface {
	mustEmbedUnimplementedCollaboratorServiceServer()
}

func RegisterCollaboratorServiceServer(s grpc.ServiceRegistrar, srv CollaboratorServiceServer) {
	s.RegisterService(&CollaboratorService_ServiceDesc, srv)
}

func _CollaboratorService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetResources(ctx, req.(*GetResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetResourcesSpecialPersonalWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetResourcesSpecialPersonalWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getResourcesSpecialPersonalWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetResourcesSpecialPersonalWorkspace(ctx, req.(*GetResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_SetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).SetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/setResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).SetResource(ctx, req.(*SetResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_DeleteResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).DeleteResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/deleteResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).DeleteResources(ctx, req.(*DeleteResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetResourceAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetResourceAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getResourceAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetResourceAdmins(ctx, req.(*GetResourceAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddResourceAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyResourceAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddResourceAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addResourceAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddResourceAdmins(ctx, req.(*ModifyResourceAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveResourceAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyResourceAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveResourceAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeResourceAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveResourceAdmins(ctx, req.(*ModifyResourceAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateProjectCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateProjectCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addOrUpdateProjectCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateProjectCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveProjectCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveProjectCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeProjectCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveProjectCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetProjectCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetProjectCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getProjectCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetProjectCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateDatasetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateDatasetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addOrUpdateDatasetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateDatasetCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveDatasetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveDatasetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeDatasetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveDatasetCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetDatasetCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetDatasetCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getDatasetCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetDatasetCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateRepositoryCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateRepositoryCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addOrUpdateRepositoryCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateRepositoryCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveRepositoryCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveRepositoryCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeRepositoryCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveRepositoryCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetRepositoryCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetRepositoryCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getRepositoryCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetRepositoryCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateEndpointCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateEndpointCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addOrUpdateEndpointCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateEndpointCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveEndpointCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveEndpointCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeEndpointCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveEndpointCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetEndpointCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetEndpointCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getEndpointCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetEndpointCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateEndpointCollaboratorCommonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateEndpointCollaboratorCommonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addOrUpdateEndpointCollaboratorCommonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateEndpointCollaboratorCommonService(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveEndpointCollaboratorCommonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveEndpointCollaboratorCommonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeEndpointCollaboratorCommonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveEndpointCollaboratorCommonService(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetEndpointCollaboratorsCommonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetEndpointCollaboratorsCommonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getEndpointCollaboratorsCommonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetEndpointCollaboratorsCommonService(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateRegisteredModelCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateRegisteredModelCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addOrUpdateRegisteredModelCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateRegisteredModelCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveRegisteredModelCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveRegisteredModelCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeRegisteredModelCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveRegisteredModelCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetRegisteredModelCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetRegisteredModelCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getRegisteredModelCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetRegisteredModelCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_AddOrUpdateMonitoredEntityCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).AddOrUpdateMonitoredEntityCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/addOrUpdateMonitoredEntityCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).AddOrUpdateMonitoredEntityCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_RemoveMonitoredEntityCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).RemoveMonitoredEntityCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/removeMonitoredEntityCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).RemoveMonitoredEntityCollaborator(ctx, req.(*RemoveCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaboratorService_GetMonitoredEntityCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaboratorServiceServer).GetMonitoredEntityCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.CollaboratorService/getMonitoredEntityCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaboratorServiceServer).GetMonitoredEntityCollaborators(ctx, req.(*GetCollaborator))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaboratorService_ServiceDesc is the grpc.ServiceDesc for CollaboratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaboratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.CollaboratorService",
	HandlerType: (*CollaboratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getResources",
			Handler:    _CollaboratorService_GetResources_Handler,
		},
		{
			MethodName: "getResourcesSpecialPersonalWorkspace",
			Handler:    _CollaboratorService_GetResourcesSpecialPersonalWorkspace_Handler,
		},
		{
			MethodName: "setResource",
			Handler:    _CollaboratorService_SetResource_Handler,
		},
		{
			MethodName: "deleteResources",
			Handler:    _CollaboratorService_DeleteResources_Handler,
		},
		{
			MethodName: "getResourceAdmins",
			Handler:    _CollaboratorService_GetResourceAdmins_Handler,
		},
		{
			MethodName: "addResourceAdmins",
			Handler:    _CollaboratorService_AddResourceAdmins_Handler,
		},
		{
			MethodName: "removeResourceAdmins",
			Handler:    _CollaboratorService_RemoveResourceAdmins_Handler,
		},
		{
			MethodName: "addOrUpdateProjectCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateProjectCollaborator_Handler,
		},
		{
			MethodName: "removeProjectCollaborator",
			Handler:    _CollaboratorService_RemoveProjectCollaborator_Handler,
		},
		{
			MethodName: "getProjectCollaborators",
			Handler:    _CollaboratorService_GetProjectCollaborators_Handler,
		},
		{
			MethodName: "addOrUpdateDatasetCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateDatasetCollaborator_Handler,
		},
		{
			MethodName: "removeDatasetCollaborator",
			Handler:    _CollaboratorService_RemoveDatasetCollaborator_Handler,
		},
		{
			MethodName: "getDatasetCollaborators",
			Handler:    _CollaboratorService_GetDatasetCollaborators_Handler,
		},
		{
			MethodName: "addOrUpdateRepositoryCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateRepositoryCollaborator_Handler,
		},
		{
			MethodName: "removeRepositoryCollaborator",
			Handler:    _CollaboratorService_RemoveRepositoryCollaborator_Handler,
		},
		{
			MethodName: "getRepositoryCollaborators",
			Handler:    _CollaboratorService_GetRepositoryCollaborators_Handler,
		},
		{
			MethodName: "addOrUpdateEndpointCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateEndpointCollaborator_Handler,
		},
		{
			MethodName: "removeEndpointCollaborator",
			Handler:    _CollaboratorService_RemoveEndpointCollaborator_Handler,
		},
		{
			MethodName: "getEndpointCollaborators",
			Handler:    _CollaboratorService_GetEndpointCollaborators_Handler,
		},
		{
			MethodName: "addOrUpdateEndpointCollaboratorCommonService",
			Handler:    _CollaboratorService_AddOrUpdateEndpointCollaboratorCommonService_Handler,
		},
		{
			MethodName: "removeEndpointCollaboratorCommonService",
			Handler:    _CollaboratorService_RemoveEndpointCollaboratorCommonService_Handler,
		},
		{
			MethodName: "getEndpointCollaboratorsCommonService",
			Handler:    _CollaboratorService_GetEndpointCollaboratorsCommonService_Handler,
		},
		{
			MethodName: "addOrUpdateRegisteredModelCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateRegisteredModelCollaborator_Handler,
		},
		{
			MethodName: "removeRegisteredModelCollaborator",
			Handler:    _CollaboratorService_RemoveRegisteredModelCollaborator_Handler,
		},
		{
			MethodName: "getRegisteredModelCollaborators",
			Handler:    _CollaboratorService_GetRegisteredModelCollaborators_Handler,
		},
		{
			MethodName: "addOrUpdateMonitoredEntityCollaborator",
			Handler:    _CollaboratorService_AddOrUpdateMonitoredEntityCollaborator_Handler,
		},
		{
			MethodName: "removeMonitoredEntityCollaborator",
			Handler:    _CollaboratorService_RemoveMonitoredEntityCollaborator_Handler,
		},
		{
			MethodName: "getMonitoredEntityCollaborators",
			Handler:    _CollaboratorService_GetMonitoredEntityCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/Collaborator.proto",
}
