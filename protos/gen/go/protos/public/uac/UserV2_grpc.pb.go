// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceV2Client is the client API for UserServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceV2Client interface {
	// List for users inside an organization, returning details
	SearchUsers(ctx context.Context, in *SearchUsers, opts ...grpc.CallOption) (*SearchUsers_Response, error)
	// Adds the given user to the organization
	AddUser(ctx context.Context, in *AddUserV2, opts ...grpc.CallOption) (*AddUserV2_Response, error)
	// Removes the given user to the organization
	RemoveUser(ctx context.Context, in *RemoveUserV2, opts ...grpc.CallOption) (*RemoveUserV2_Response, error)
	// Adds a service account to the organization
	AddServiceAccount(ctx context.Context, in *AddServiceAccount, opts ...grpc.CallOption) (*AddServiceAccount_Response, error)
	// Removes a service account from the organization
	RemoveServiceAccount(ctx context.Context, in *RemoveServiceAccount, opts ...grpc.CallOption) (*RemoveServiceAccount_Response, error)
	// Get a user inside an organization, returning details
	GetUser(ctx context.Context, in *GetUserV2, opts ...grpc.CallOption) (*GetUserV2_Response, error)
	GetCurrentUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDetails, error)
	UserExists(ctx context.Context, in *UserExists, opts ...grpc.CallOption) (*UserExists_Response, error)
	ChangeCurrentUserPassword(ctx context.Context, in *ChangeCurrentUserPassword, opts ...grpc.CallOption) (*Empty, error)
}

type userServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceV2Client(cc grpc.ClientConnInterface) UserServiceV2Client {
	return &userServiceV2Client{cc}
}

func (c *userServiceV2Client) SearchUsers(ctx context.Context, in *SearchUsers, opts ...grpc.CallOption) (*SearchUsers_Response, error) {
	out := new(SearchUsers_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/searchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) AddUser(ctx context.Context, in *AddUserV2, opts ...grpc.CallOption) (*AddUserV2_Response, error) {
	out := new(AddUserV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/addUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) RemoveUser(ctx context.Context, in *RemoveUserV2, opts ...grpc.CallOption) (*RemoveUserV2_Response, error) {
	out := new(RemoveUserV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/removeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) AddServiceAccount(ctx context.Context, in *AddServiceAccount, opts ...grpc.CallOption) (*AddServiceAccount_Response, error) {
	out := new(AddServiceAccount_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/addServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) RemoveServiceAccount(ctx context.Context, in *RemoveServiceAccount, opts ...grpc.CallOption) (*RemoveServiceAccount_Response, error) {
	out := new(RemoveServiceAccount_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/removeServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) GetUser(ctx context.Context, in *GetUserV2, opts ...grpc.CallOption) (*GetUserV2_Response, error) {
	out := new(GetUserV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) GetCurrentUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDetails, error) {
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/getCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) UserExists(ctx context.Context, in *UserExists, opts ...grpc.CallOption) (*UserExists_Response, error) {
	out := new(UserExists_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/userExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV2Client) ChangeCurrentUserPassword(ctx context.Context, in *ChangeCurrentUserPassword, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UserServiceV2/changeCurrentUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceV2Server is the server API for UserServiceV2 service.
type UserServiceV2Server interface {
	// List for users inside an organization, returning details
	SearchUsers(context.Context, *SearchUsers) (*SearchUsers_Response, error)
	// Adds the given user to the organization
	AddUser(context.Context, *AddUserV2) (*AddUserV2_Response, error)
	// Removes the given user to the organization
	RemoveUser(context.Context, *RemoveUserV2) (*RemoveUserV2_Response, error)
	// Adds a service account to the organization
	AddServiceAccount(context.Context, *AddServiceAccount) (*AddServiceAccount_Response, error)
	// Removes a service account from the organization
	RemoveServiceAccount(context.Context, *RemoveServiceAccount) (*RemoveServiceAccount_Response, error)
	// Get a user inside an organization, returning details
	GetUser(context.Context, *GetUserV2) (*GetUserV2_Response, error)
	GetCurrentUser(context.Context, *Empty) (*UserDetails, error)
	UserExists(context.Context, *UserExists) (*UserExists_Response, error)
	ChangeCurrentUserPassword(context.Context, *ChangeCurrentUserPassword) (*Empty, error)
}

// UnimplementedUserServiceV2Server can be embedded to have forward compatible implementations.
type UnimplementedUserServiceV2Server struct {
}

func (*UnimplementedUserServiceV2Server) SearchUsers(context.Context, *SearchUsers) (*SearchUsers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (*UnimplementedUserServiceV2Server) AddUser(context.Context, *AddUserV2) (*AddUserV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedUserServiceV2Server) RemoveUser(context.Context, *RemoveUserV2) (*RemoveUserV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedUserServiceV2Server) AddServiceAccount(context.Context, *AddServiceAccount) (*AddServiceAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServiceAccount not implemented")
}
func (*UnimplementedUserServiceV2Server) RemoveServiceAccount(context.Context, *RemoveServiceAccount) (*RemoveServiceAccount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServiceAccount not implemented")
}
func (*UnimplementedUserServiceV2Server) GetUser(context.Context, *GetUserV2) (*GetUserV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserServiceV2Server) GetCurrentUser(context.Context, *Empty) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (*UnimplementedUserServiceV2Server) UserExists(context.Context, *UserExists) (*UserExists_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExists not implemented")
}
func (*UnimplementedUserServiceV2Server) ChangeCurrentUserPassword(context.Context, *ChangeCurrentUserPassword) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCurrentUserPassword not implemented")
}

func RegisterUserServiceV2Server(s *grpc.Server, srv UserServiceV2Server) {
	s.RegisterService(&_UserServiceV2_serviceDesc, srv)
}

func _UserServiceV2_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).SearchUsers(ctx, req.(*SearchUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).AddUser(ctx, req.(*AddUserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).RemoveUser(ctx, req.(*RemoveUserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_AddServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).AddServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/AddServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).AddServiceAccount(ctx, req.(*AddServiceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_RemoveServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServiceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).RemoveServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/RemoveServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).RemoveServiceAccount(ctx, req.(*RemoveServiceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).GetUser(ctx, req.(*GetUserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/GetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).GetCurrentUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_UserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExists)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).UserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/UserExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).UserExists(ctx, req.(*UserExists))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV2_ChangeCurrentUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCurrentUserPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV2Server).ChangeCurrentUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UserServiceV2/ChangeCurrentUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV2Server).ChangeCurrentUserPassword(ctx, req.(*ChangeCurrentUserPassword))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserServiceV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.UserServiceV2",
	HandlerType: (*UserServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchUsers",
			Handler:    _UserServiceV2_SearchUsers_Handler,
		},
		{
			MethodName: "addUser",
			Handler:    _UserServiceV2_AddUser_Handler,
		},
		{
			MethodName: "removeUser",
			Handler:    _UserServiceV2_RemoveUser_Handler,
		},
		{
			MethodName: "addServiceAccount",
			Handler:    _UserServiceV2_AddServiceAccount_Handler,
		},
		{
			MethodName: "removeServiceAccount",
			Handler:    _UserServiceV2_RemoveServiceAccount_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _UserServiceV2_GetUser_Handler,
		},
		{
			MethodName: "getCurrentUser",
			Handler:    _UserServiceV2_GetCurrentUser_Handler,
		},
		{
			MethodName: "userExists",
			Handler:    _UserServiceV2_UserExists_Handler,
		},
		{
			MethodName: "changeCurrentUserPassword",
			Handler:    _UserServiceV2_ChangeCurrentUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/UserV2.proto",
}
