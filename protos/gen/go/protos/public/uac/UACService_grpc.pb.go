// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UACServiceClient is the client API for UACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UACServiceClient interface {
	// Get the current user information verifying JWT token
	GetCurrentUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error)
	// adds new user developer key
	AddDevKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error)
	// deletes primary developer key
	DeletePrimaryDevKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error)
	// deletes secondary developer key
	DeleteSecondaryDevKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error)
	// adds new user developer key
	AddDevKeyForUser(ctx context.Context, in *ChangeDevKeyForUser, opts ...grpc.CallOption) (*UserInfo, error)
	// deletes primary developer key
	DeletePrimaryDevKeyForUser(ctx context.Context, in *ChangeDevKeyForUser, opts ...grpc.CallOption) (*UserInfo, error)
	// deletes primary developer key
	DeleteSecondaryDevKeyForUser(ctx context.Context, in *ChangeDevKeyForUser, opts ...grpc.CallOption) (*UserInfo, error)
	// Get the current user information verifying JWT token
	GetUser(ctx context.Context, in *GetUser, opts ...grpc.CallOption) (*UserInfo, error)
	GetUsers(ctx context.Context, in *GetUsers, opts ...grpc.CallOption) (*GetUsers_Response, error)
	GetUsersFuzzy(ctx context.Context, in *GetUsersFuzzy, opts ...grpc.CallOption) (*GetUsersFuzzy_Response, error)
	// For now, any user can create a new user
	CreateUser(ctx context.Context, in *CreateUser, opts ...grpc.CallOption) (*CreateUser_Response, error)
	// Only current user can update themselves
	UpdateUser(ctx context.Context, in *UpdateUser, opts ...grpc.CallOption) (*UpdateUser_Response, error)
	// Only current user can delete themselves
	DeleteUser(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*DeleteUser_Response, error)
}

type uACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUACServiceClient(cc grpc.ClientConnInterface) UACServiceClient {
	return &uACServiceClient{cc}
}

func (c *uACServiceClient) GetCurrentUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/getCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) AddDevKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/addDevKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) DeletePrimaryDevKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/deletePrimaryDevKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) DeleteSecondaryDevKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/deleteSecondaryDevKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) AddDevKeyForUser(ctx context.Context, in *ChangeDevKeyForUser, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/addDevKeyForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) DeletePrimaryDevKeyForUser(ctx context.Context, in *ChangeDevKeyForUser, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/deletePrimaryDevKeyForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) DeleteSecondaryDevKeyForUser(ctx context.Context, in *ChangeDevKeyForUser, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/deleteSecondaryDevKeyForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) GetUser(ctx context.Context, in *GetUser, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) GetUsers(ctx context.Context, in *GetUsers, opts ...grpc.CallOption) (*GetUsers_Response, error) {
	out := new(GetUsers_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/getUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) GetUsersFuzzy(ctx context.Context, in *GetUsersFuzzy, opts ...grpc.CallOption) (*GetUsersFuzzy_Response, error) {
	out := new(GetUsersFuzzy_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/getUsersFuzzy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) CreateUser(ctx context.Context, in *CreateUser, opts ...grpc.CallOption) (*CreateUser_Response, error) {
	out := new(CreateUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/createUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) UpdateUser(ctx context.Context, in *UpdateUser, opts ...grpc.CallOption) (*UpdateUser_Response, error) {
	out := new(UpdateUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/updateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uACServiceClient) DeleteUser(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*DeleteUser_Response, error) {
	out := new(DeleteUser_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.UACService/deleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UACServiceServer is the server API for UACService service.
type UACServiceServer interface {
	// Get the current user information verifying JWT token
	GetCurrentUser(context.Context, *Empty) (*UserInfo, error)
	// adds new user developer key
	AddDevKey(context.Context, *Empty) (*UserInfo, error)
	// deletes primary developer key
	DeletePrimaryDevKey(context.Context, *Empty) (*UserInfo, error)
	// deletes secondary developer key
	DeleteSecondaryDevKey(context.Context, *Empty) (*UserInfo, error)
	// adds new user developer key
	AddDevKeyForUser(context.Context, *ChangeDevKeyForUser) (*UserInfo, error)
	// deletes primary developer key
	DeletePrimaryDevKeyForUser(context.Context, *ChangeDevKeyForUser) (*UserInfo, error)
	// deletes primary developer key
	DeleteSecondaryDevKeyForUser(context.Context, *ChangeDevKeyForUser) (*UserInfo, error)
	// Get the current user information verifying JWT token
	GetUser(context.Context, *GetUser) (*UserInfo, error)
	GetUsers(context.Context, *GetUsers) (*GetUsers_Response, error)
	GetUsersFuzzy(context.Context, *GetUsersFuzzy) (*GetUsersFuzzy_Response, error)
	// For now, any user can create a new user
	CreateUser(context.Context, *CreateUser) (*CreateUser_Response, error)
	// Only current user can update themselves
	UpdateUser(context.Context, *UpdateUser) (*UpdateUser_Response, error)
	// Only current user can delete themselves
	DeleteUser(context.Context, *DeleteUser) (*DeleteUser_Response, error)
}

// UnimplementedUACServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUACServiceServer struct {
}

func (*UnimplementedUACServiceServer) GetCurrentUser(context.Context, *Empty) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (*UnimplementedUACServiceServer) AddDevKey(context.Context, *Empty) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevKey not implemented")
}
func (*UnimplementedUACServiceServer) DeletePrimaryDevKey(context.Context, *Empty) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrimaryDevKey not implemented")
}
func (*UnimplementedUACServiceServer) DeleteSecondaryDevKey(context.Context, *Empty) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecondaryDevKey not implemented")
}
func (*UnimplementedUACServiceServer) AddDevKeyForUser(context.Context, *ChangeDevKeyForUser) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevKeyForUser not implemented")
}
func (*UnimplementedUACServiceServer) DeletePrimaryDevKeyForUser(context.Context, *ChangeDevKeyForUser) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrimaryDevKeyForUser not implemented")
}
func (*UnimplementedUACServiceServer) DeleteSecondaryDevKeyForUser(context.Context, *ChangeDevKeyForUser) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecondaryDevKeyForUser not implemented")
}
func (*UnimplementedUACServiceServer) GetUser(context.Context, *GetUser) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUACServiceServer) GetUsers(context.Context, *GetUsers) (*GetUsers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedUACServiceServer) GetUsersFuzzy(context.Context, *GetUsersFuzzy) (*GetUsersFuzzy_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersFuzzy not implemented")
}
func (*UnimplementedUACServiceServer) CreateUser(context.Context, *CreateUser) (*CreateUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUACServiceServer) UpdateUser(context.Context, *UpdateUser) (*UpdateUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUACServiceServer) DeleteUser(context.Context, *DeleteUser) (*DeleteUser_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

func RegisterUACServiceServer(s *grpc.Server, srv UACServiceServer) {
	s.RegisterService(&_UACService_serviceDesc, srv)
}

func _UACService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/GetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).GetCurrentUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_AddDevKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).AddDevKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/AddDevKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).AddDevKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_DeletePrimaryDevKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).DeletePrimaryDevKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/DeletePrimaryDevKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).DeletePrimaryDevKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_DeleteSecondaryDevKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).DeleteSecondaryDevKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/DeleteSecondaryDevKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).DeleteSecondaryDevKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_AddDevKeyForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDevKeyForUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).AddDevKeyForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/AddDevKeyForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).AddDevKeyForUser(ctx, req.(*ChangeDevKeyForUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_DeletePrimaryDevKeyForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDevKeyForUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).DeletePrimaryDevKeyForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/DeletePrimaryDevKeyForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).DeletePrimaryDevKeyForUser(ctx, req.(*ChangeDevKeyForUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_DeleteSecondaryDevKeyForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDevKeyForUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).DeleteSecondaryDevKeyForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/DeleteSecondaryDevKeyForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).DeleteSecondaryDevKeyForUser(ctx, req.(*ChangeDevKeyForUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).GetUser(ctx, req.(*GetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).GetUsers(ctx, req.(*GetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_GetUsersFuzzy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersFuzzy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).GetUsersFuzzy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/GetUsersFuzzy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).GetUsersFuzzy(ctx, req.(*GetUsersFuzzy))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).CreateUser(ctx, req.(*CreateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).UpdateUser(ctx, req.(*UpdateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UACService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UACServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.UACService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UACServiceServer).DeleteUser(ctx, req.(*DeleteUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _UACService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.UACService",
	HandlerType: (*UACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCurrentUser",
			Handler:    _UACService_GetCurrentUser_Handler,
		},
		{
			MethodName: "addDevKey",
			Handler:    _UACService_AddDevKey_Handler,
		},
		{
			MethodName: "deletePrimaryDevKey",
			Handler:    _UACService_DeletePrimaryDevKey_Handler,
		},
		{
			MethodName: "deleteSecondaryDevKey",
			Handler:    _UACService_DeleteSecondaryDevKey_Handler,
		},
		{
			MethodName: "addDevKeyForUser",
			Handler:    _UACService_AddDevKeyForUser_Handler,
		},
		{
			MethodName: "deletePrimaryDevKeyForUser",
			Handler:    _UACService_DeletePrimaryDevKeyForUser_Handler,
		},
		{
			MethodName: "deleteSecondaryDevKeyForUser",
			Handler:    _UACService_DeleteSecondaryDevKeyForUser_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _UACService_GetUser_Handler,
		},
		{
			MethodName: "getUsers",
			Handler:    _UACService_GetUsers_Handler,
		},
		{
			MethodName: "getUsersFuzzy",
			Handler:    _UACService_GetUsersFuzzy_Handler,
		},
		{
			MethodName: "createUser",
			Handler:    _UACService_CreateUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _UACService_UpdateUser_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _UACService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/UACService.proto",
}
