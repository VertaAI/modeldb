// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoleServiceV2Client is the client API for RoleServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceV2Client interface {
	SetRole(ctx context.Context, in *SetRoleV2, opts ...grpc.CallOption) (*SetRoleV2_Response, error)
	DeleteRole(ctx context.Context, in *DeleteRoleV2, opts ...grpc.CallOption) (*DeleteRoleV2_Response, error)
	SearchRoles(ctx context.Context, in *SearchRolesV2, opts ...grpc.CallOption) (*SearchRolesV2_Response, error)
	GetRole(ctx context.Context, in *GetRoleV2, opts ...grpc.CallOption) (*GetRoleV2_Response, error)
	GetEnabledActions(ctx context.Context, in *GetEnabledActions, opts ...grpc.CallOption) (*GetEnabledActions_Response, error)
	GetSelfAllowedActionsBatchForWorkspace(ctx context.Context, in *GetSelfAllowedActionsBatchForWorkspace, opts ...grpc.CallOption) (*GetSelfAllowedActionsBatchForWorkspace_Response, error)
}

type roleServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceV2Client(cc grpc.ClientConnInterface) RoleServiceV2Client {
	return &roleServiceV2Client{cc}
}

func (c *roleServiceV2Client) SetRole(ctx context.Context, in *SetRoleV2, opts ...grpc.CallOption) (*SetRoleV2_Response, error) {
	out := new(SetRoleV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleServiceV2/setRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) DeleteRole(ctx context.Context, in *DeleteRoleV2, opts ...grpc.CallOption) (*DeleteRoleV2_Response, error) {
	out := new(DeleteRoleV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleServiceV2/deleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) SearchRoles(ctx context.Context, in *SearchRolesV2, opts ...grpc.CallOption) (*SearchRolesV2_Response, error) {
	out := new(SearchRolesV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleServiceV2/searchRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) GetRole(ctx context.Context, in *GetRoleV2, opts ...grpc.CallOption) (*GetRoleV2_Response, error) {
	out := new(GetRoleV2_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleServiceV2/getRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) GetEnabledActions(ctx context.Context, in *GetEnabledActions, opts ...grpc.CallOption) (*GetEnabledActions_Response, error) {
	out := new(GetEnabledActions_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleServiceV2/getEnabledActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV2Client) GetSelfAllowedActionsBatchForWorkspace(ctx context.Context, in *GetSelfAllowedActionsBatchForWorkspace, opts ...grpc.CallOption) (*GetSelfAllowedActionsBatchForWorkspace_Response, error) {
	out := new(GetSelfAllowedActionsBatchForWorkspace_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.uac.RoleServiceV2/getSelfAllowedActionsBatchForWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceV2Server is the server API for RoleServiceV2 service.
type RoleServiceV2Server interface {
	SetRole(context.Context, *SetRoleV2) (*SetRoleV2_Response, error)
	DeleteRole(context.Context, *DeleteRoleV2) (*DeleteRoleV2_Response, error)
	SearchRoles(context.Context, *SearchRolesV2) (*SearchRolesV2_Response, error)
	GetRole(context.Context, *GetRoleV2) (*GetRoleV2_Response, error)
	GetEnabledActions(context.Context, *GetEnabledActions) (*GetEnabledActions_Response, error)
	GetSelfAllowedActionsBatchForWorkspace(context.Context, *GetSelfAllowedActionsBatchForWorkspace) (*GetSelfAllowedActionsBatchForWorkspace_Response, error)
}

// UnimplementedRoleServiceV2Server can be embedded to have forward compatible implementations.
type UnimplementedRoleServiceV2Server struct {
}

func (*UnimplementedRoleServiceV2Server) SetRole(context.Context, *SetRoleV2) (*SetRoleV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (*UnimplementedRoleServiceV2Server) DeleteRole(context.Context, *DeleteRoleV2) (*DeleteRoleV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedRoleServiceV2Server) SearchRoles(context.Context, *SearchRolesV2) (*SearchRolesV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoles not implemented")
}
func (*UnimplementedRoleServiceV2Server) GetRole(context.Context, *GetRoleV2) (*GetRoleV2_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedRoleServiceV2Server) GetEnabledActions(context.Context, *GetEnabledActions) (*GetEnabledActions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnabledActions not implemented")
}
func (*UnimplementedRoleServiceV2Server) GetSelfAllowedActionsBatchForWorkspace(context.Context, *GetSelfAllowedActionsBatchForWorkspace) (*GetSelfAllowedActionsBatchForWorkspace_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfAllowedActionsBatchForWorkspace not implemented")
}

func RegisterRoleServiceV2Server(s *grpc.Server, srv RoleServiceV2Server) {
	s.RegisterService(&_RoleServiceV2_serviceDesc, srv)
}

func _RoleServiceV2_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleServiceV2/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).SetRole(ctx, req.(*SetRoleV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleServiceV2/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).DeleteRole(ctx, req.(*DeleteRoleV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_SearchRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolesV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).SearchRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleServiceV2/SearchRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).SearchRoles(ctx, req.(*SearchRolesV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleServiceV2/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).GetRole(ctx, req.(*GetRoleV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_GetEnabledActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnabledActions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).GetEnabledActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleServiceV2/GetEnabledActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).GetEnabledActions(ctx, req.(*GetEnabledActions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV2_GetSelfAllowedActionsBatchForWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfAllowedActionsBatchForWorkspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV2Server).GetSelfAllowedActionsBatchForWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.uac.RoleServiceV2/GetSelfAllowedActionsBatchForWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV2Server).GetSelfAllowedActionsBatchForWorkspace(ctx, req.(*GetSelfAllowedActionsBatchForWorkspace))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleServiceV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.uac.RoleServiceV2",
	HandlerType: (*RoleServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setRole",
			Handler:    _RoleServiceV2_SetRole_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _RoleServiceV2_DeleteRole_Handler,
		},
		{
			MethodName: "searchRoles",
			Handler:    _RoleServiceV2_SearchRoles_Handler,
		},
		{
			MethodName: "getRole",
			Handler:    _RoleServiceV2_GetRole_Handler,
		},
		{
			MethodName: "getEnabledActions",
			Handler:    _RoleServiceV2_GetEnabledActions_Handler,
		},
		{
			MethodName: "getSelfAllowedActionsBatchForWorkspace",
			Handler:    _RoleServiceV2_GetSelfAllowedActionsBatchForWorkspace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uac/RoleV2.proto",
}
