// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package events

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	FindWebhook(ctx context.Context, in *FindWebhookRequest, opts ...grpc.CallOption) (*FindWebhookRequest_Response, error)
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*common.Empty, error)
	FindWebhookCall(ctx context.Context, in *FindWebhookCallRequest, opts ...grpc.CallOption) (*FindWebhookCallRequest_Response, error)
	RetriggerWebhookCall(ctx context.Context, in *RetriggerWebhookCallRequest, opts ...grpc.CallOption) (*WebhookCall, error)
	TriggerTest(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookRequest_Response, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/createEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/createWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/updateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) FindWebhook(ctx context.Context, in *FindWebhookRequest, opts ...grpc.CallOption) (*FindWebhookRequest_Response, error) {
	out := new(FindWebhookRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/findWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/deleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) FindWebhookCall(ctx context.Context, in *FindWebhookCallRequest, opts ...grpc.CallOption) (*FindWebhookCallRequest_Response, error) {
	out := new(FindWebhookCallRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/findWebhookCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) RetriggerWebhookCall(ctx context.Context, in *RetriggerWebhookCallRequest, opts ...grpc.CallOption) (*WebhookCall, error) {
	out := new(WebhookCall)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/retriggerWebhookCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) TriggerTest(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookRequest_Response, error) {
	out := new(TestWebhookRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/triggerTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*common.Empty, error)
	CreateWebhook(context.Context, *CreateWebhookRequest) (*Webhook, error)
	UpdateWebhook(context.Context, *UpdateWebhookRequest) (*Webhook, error)
	FindWebhook(context.Context, *FindWebhookRequest) (*FindWebhookRequest_Response, error)
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*common.Empty, error)
	FindWebhookCall(context.Context, *FindWebhookCallRequest) (*FindWebhookCallRequest_Response, error)
	RetriggerWebhookCall(context.Context, *RetriggerWebhookCallRequest) (*WebhookCall, error)
	TriggerTest(context.Context, *TestWebhookRequest) (*TestWebhookRequest_Response, error)
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedEventServiceServer) CreateWebhook(context.Context, *CreateWebhookRequest) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (*UnimplementedEventServiceServer) UpdateWebhook(context.Context, *UpdateWebhookRequest) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (*UnimplementedEventServiceServer) FindWebhook(context.Context, *FindWebhookRequest) (*FindWebhookRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWebhook not implemented")
}
func (*UnimplementedEventServiceServer) DeleteWebhook(context.Context, *DeleteWebhookRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (*UnimplementedEventServiceServer) FindWebhookCall(context.Context, *FindWebhookCallRequest) (*FindWebhookCallRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWebhookCall not implemented")
}
func (*UnimplementedEventServiceServer) RetriggerWebhookCall(context.Context, *RetriggerWebhookCallRequest) (*WebhookCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetriggerWebhookCall not implemented")
}
func (*UnimplementedEventServiceServer) TriggerTest(context.Context, *TestWebhookRequest) (*TestWebhookRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerTest not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/CreateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateWebhook(ctx, req.(*CreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/UpdateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateWebhook(ctx, req.(*UpdateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_FindWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).FindWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/FindWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).FindWebhook(ctx, req.(*FindWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_FindWebhookCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWebhookCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).FindWebhookCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/FindWebhookCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).FindWebhookCall(ctx, req.(*FindWebhookCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_RetriggerWebhookCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetriggerWebhookCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).RetriggerWebhookCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/RetriggerWebhookCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).RetriggerWebhookCall(ctx, req.(*RetriggerWebhookCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_TriggerTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).TriggerTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/TriggerTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).TriggerTest(ctx, req.(*TestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.events.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
		{
			MethodName: "createWebhook",
			Handler:    _EventService_CreateWebhook_Handler,
		},
		{
			MethodName: "updateWebhook",
			Handler:    _EventService_UpdateWebhook_Handler,
		},
		{
			MethodName: "findWebhook",
			Handler:    _EventService_FindWebhook_Handler,
		},
		{
			MethodName: "deleteWebhook",
			Handler:    _EventService_DeleteWebhook_Handler,
		},
		{
			MethodName: "findWebhookCall",
			Handler:    _EventService_FindWebhookCall_Handler,
		},
		{
			MethodName: "retriggerWebhookCall",
			Handler:    _EventService_RetriggerWebhookCall_Handler,
		},
		{
			MethodName: "triggerTest",
			Handler:    _EventService_TriggerTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events/Event.proto",
}
