// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: events/Event.proto

package events

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	registry "github.com/VertaAI/modeldb/protos/gen/go/protos/public/registry"
	uac "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateEventRequest_EventType int32

const (
	CreateEventRequest_CREATE  CreateEventRequest_EventType = 0
	CreateEventRequest_READ    CreateEventRequest_EventType = 1
	CreateEventRequest_UPDATE  CreateEventRequest_EventType = 2
	CreateEventRequest_DELETE  CreateEventRequest_EventType = 3
	CreateEventRequest_PROMOTE CreateEventRequest_EventType = 4
)

// Enum value maps for CreateEventRequest_EventType.
var (
	CreateEventRequest_EventType_name = map[int32]string{
		0: "CREATE",
		1: "READ",
		2: "UPDATE",
		3: "DELETE",
		4: "PROMOTE",
	}
	CreateEventRequest_EventType_value = map[string]int32{
		"CREATE":  0,
		"READ":    1,
		"UPDATE":  2,
		"DELETE":  3,
		"PROMOTE": 4,
	}
)

func (x CreateEventRequest_EventType) Enum() *CreateEventRequest_EventType {
	p := new(CreateEventRequest_EventType)
	*p = x
	return p
}

func (x CreateEventRequest_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateEventRequest_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_events_Event_proto_enumTypes[0].Descriptor()
}

func (CreateEventRequest_EventType) Type() protoreflect.EnumType {
	return &file_events_Event_proto_enumTypes[0]
}

func (x CreateEventRequest_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateEventRequest_EventType.Descriptor instead.
func (CreateEventRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{0, 0}
}

type WebhookCall_Status int32

const (
	WebhookCall_UNKNOWN     WebhookCall_Status = 0
	WebhookCall_SUCCESS     WebhookCall_Status = 1
	WebhookCall_FAILURE     WebhookCall_Status = 2
	WebhookCall_IN_PROGRESS WebhookCall_Status = 3
)

// Enum value maps for WebhookCall_Status.
var (
	WebhookCall_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "FAILURE",
		3: "IN_PROGRESS",
	}
	WebhookCall_Status_value = map[string]int32{
		"UNKNOWN":     0,
		"SUCCESS":     1,
		"FAILURE":     2,
		"IN_PROGRESS": 3,
	}
)

func (x WebhookCall_Status) Enum() *WebhookCall_Status {
	p := new(WebhookCall_Status)
	*p = x
	return p
}

func (x WebhookCall_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookCall_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_events_Event_proto_enumTypes[1].Descriptor()
}

func (WebhookCall_Status) Type() protoreflect.EnumType {
	return &file_events_Event_proto_enumTypes[1]
}

func (x WebhookCall_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookCall_Status.Descriptor instead.
func (WebhookCall_Status) EnumDescriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{7, 0}
}

type CreateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventUuid      string                       `protobuf:"bytes,1,opt,name=event_uuid,json=eventUuid,proto3" json:"event_uuid,omitempty"` // uuid for this event to handle deduplication
	EventType      CreateEventRequest_EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=ai.verta.events.CreateEventRequest_EventType" json:"event_type,omitempty"`
	WorkspaceId    uint64                       `protobuf:"varint,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Timestamp      uint64                       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ResourceType   *uac.ResourceType            `protobuf:"bytes,5,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	OriginalEntity *EventEntity                 `protobuf:"bytes,6,opt,name=original_entity,json=originalEntity,proto3" json:"original_entity,omitempty"`
	NewEntity      *EventEntity                 `protobuf:"bytes,7,opt,name=new_entity,json=newEntity,proto3" json:"new_entity,omitempty"`
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{0}
}

func (x *CreateEventRequest) GetEventUuid() string {
	if x != nil {
		return x.EventUuid
	}
	return ""
}

func (x *CreateEventRequest) GetEventType() CreateEventRequest_EventType {
	if x != nil {
		return x.EventType
	}
	return CreateEventRequest_CREATE
}

func (x *CreateEventRequest) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (x *CreateEventRequest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CreateEventRequest) GetResourceType() *uac.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *CreateEventRequest) GetOriginalEntity() *EventEntity {
	if x != nil {
		return x.OriginalEntity
	}
	return nil
}

func (x *CreateEventRequest) GetNewEntity() *EventEntity {
	if x != nil {
		return x.NewEntity
	}
	return nil
}

// Lists all of the entity types that we support events for.
type EventEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//	*EventEntity_RegisteredModel
	//	*EventEntity_ModelVersion
	Entity isEventEntity_Entity `protobuf_oneof:"entity"`
}

func (x *EventEntity) Reset() {
	*x = EventEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEntity) ProtoMessage() {}

func (x *EventEntity) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEntity.ProtoReflect.Descriptor instead.
func (*EventEntity) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{1}
}

func (m *EventEntity) GetEntity() isEventEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *EventEntity) GetRegisteredModel() *registry.RegisteredModel {
	if x, ok := x.GetEntity().(*EventEntity_RegisteredModel); ok {
		return x.RegisteredModel
	}
	return nil
}

func (x *EventEntity) GetModelVersion() *registry.ModelVersion {
	if x, ok := x.GetEntity().(*EventEntity_ModelVersion); ok {
		return x.ModelVersion
	}
	return nil
}

type isEventEntity_Entity interface {
	isEventEntity_Entity()
}

type EventEntity_RegisteredModel struct {
	RegisteredModel *registry.RegisteredModel `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel,proto3,oneof"`
}

type EventEntity_ModelVersion struct {
	ModelVersion *registry.ModelVersion `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3,oneof"`
}

func (*EventEntity_RegisteredModel) isEventEntity_Entity() {}

func (*EventEntity_ModelVersion) isEventEntity_Entity() {}

type Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // Names must be unique within a workspace
	WorkspaceId   uint64              `protobuf:"varint,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"` // Optional
	Location      string              `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	MutualSecret  string              `protobuf:"bytes,5,opt,name=mutual_secret,json=mutualSecret,proto3" json:"mutual_secret,omitempty"` // A shared secret between the two sides for validation
	EventTypes    []string            `protobuf:"bytes,6,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	ResourceTypes []*uac.ResourceType `protobuf:"bytes,7,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{2}
}

func (x *Webhook) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Webhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Webhook) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (x *Webhook) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Webhook) GetMutualSecret() string {
	if x != nil {
		return x.MutualSecret
	}
	return ""
}

func (x *Webhook) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *Webhook) GetResourceTypes() []*uac.ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

type FindWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids           []uint64            `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Names         []string            `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	WorkspaceId   []uint64            `protobuf:"varint,3,rep,packed,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	ResourceTypes []*uac.ResourceType `protobuf:"bytes,4,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
}

func (x *FindWebhookRequest) Reset() {
	*x = FindWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindWebhookRequest) ProtoMessage() {}

func (x *FindWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindWebhookRequest.ProtoReflect.Descriptor instead.
func (*FindWebhookRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{3}
}

func (x *FindWebhookRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FindWebhookRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FindWebhookRequest) GetWorkspaceId() []uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *FindWebhookRequest) GetResourceTypes() []*uac.ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

type CreateWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                   // Names must be unique within a workspace
	WorkspaceId   uint64              `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"` // Optional
	Location      string              `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	MutualSecret  string              `protobuf:"bytes,4,opt,name=mutual_secret,json=mutualSecret,proto3" json:"mutual_secret,omitempty"` // A shared secret between the two sides for validation. Check how this is passed by github (e.g. which header)
	EventTypes    []string            `protobuf:"bytes,5,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	AllEvents     bool                `protobuf:"varint,6,opt,name=all_events,json=allEvents,proto3" json:"all_events,omitempty"` // If true, we don't filter events that trigger the webhook by the event_type field. If false, we filter events using only the values in the event_types field.
	ResourceTypes []*uac.ResourceType `protobuf:"bytes,7,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
}

func (x *CreateWebhookRequest) Reset() {
	*x = CreateWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookRequest) ProtoMessage() {}

func (x *CreateWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookRequest.ProtoReflect.Descriptor instead.
func (*CreateWebhookRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWebhookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWebhookRequest) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (x *CreateWebhookRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateWebhookRequest) GetMutualSecret() string {
	if x != nil {
		return x.MutualSecret
	}
	return ""
}

func (x *CreateWebhookRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *CreateWebhookRequest) GetAllEvents() bool {
	if x != nil {
		return x.AllEvents
	}
	return false
}

func (x *CreateWebhookRequest) GetResourceTypes() []*uac.ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

type UpdateWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NewLocation         string              `protobuf:"bytes,2,opt,name=new_location,json=newLocation,proto3" json:"new_location,omitempty"`    // Optional. If empty, keep the current setting
	MutualSecret        string              `protobuf:"bytes,3,opt,name=mutual_secret,json=mutualSecret,proto3" json:"mutual_secret,omitempty"` // Optional. If empty, keep the current setting
	AddEventTypes       []string            `protobuf:"bytes,4,rep,name=add_event_types,json=addEventTypes,proto3" json:"add_event_types,omitempty"`
	DeleteEventTypes    []string            `protobuf:"bytes,5,rep,name=delete_event_types,json=deleteEventTypes,proto3" json:"delete_event_types,omitempty"`
	SetAllEvents        bool                `protobuf:"varint,6,opt,name=set_all_events,json=setAllEvents,proto3" json:"set_all_events,omitempty"`
	ClearAllEvents      bool                `protobuf:"varint,7,opt,name=clear_all_events,json=clearAllEvents,proto3" json:"clear_all_events,omitempty"`
	AddResourceTypes    []*uac.ResourceType `protobuf:"bytes,8,rep,name=add_resource_types,json=addResourceTypes,proto3" json:"add_resource_types,omitempty"`
	DeleteResourceTypes []*uac.ResourceType `protobuf:"bytes,9,rep,name=delete_resource_types,json=deleteResourceTypes,proto3" json:"delete_resource_types,omitempty"`
}

func (x *UpdateWebhookRequest) Reset() {
	*x = UpdateWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWebhookRequest) ProtoMessage() {}

func (x *UpdateWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWebhookRequest.ProtoReflect.Descriptor instead.
func (*UpdateWebhookRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateWebhookRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateWebhookRequest) GetNewLocation() string {
	if x != nil {
		return x.NewLocation
	}
	return ""
}

func (x *UpdateWebhookRequest) GetMutualSecret() string {
	if x != nil {
		return x.MutualSecret
	}
	return ""
}

func (x *UpdateWebhookRequest) GetAddEventTypes() []string {
	if x != nil {
		return x.AddEventTypes
	}
	return nil
}

func (x *UpdateWebhookRequest) GetDeleteEventTypes() []string {
	if x != nil {
		return x.DeleteEventTypes
	}
	return nil
}

func (x *UpdateWebhookRequest) GetSetAllEvents() bool {
	if x != nil {
		return x.SetAllEvents
	}
	return false
}

func (x *UpdateWebhookRequest) GetClearAllEvents() bool {
	if x != nil {
		return x.ClearAllEvents
	}
	return false
}

func (x *UpdateWebhookRequest) GetAddResourceTypes() []*uac.ResourceType {
	if x != nil {
		return x.AddResourceTypes
	}
	return nil
}

func (x *UpdateWebhookRequest) GetDeleteResourceTypes() []*uac.ResourceType {
	if x != nil {
		return x.DeleteResourceTypes
	}
	return nil
}

type DeleteWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteWebhookRequest) Reset() {
	*x = DeleteWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebhookRequest) ProtoMessage() {}

func (x *DeleteWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebhookRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebhookRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteWebhookRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Single call of a webhook to deliver a given event
type WebhookCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WebhookId uint64             `protobuf:"varint,2,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	EventUuid string             `protobuf:"bytes,3,opt,name=event_uuid,json=eventUuid,proto3" json:"event_uuid,omitempty"`
	Status    WebhookCall_Status `protobuf:"varint,4,opt,name=status,proto3,enum=ai.verta.events.WebhookCall_Status" json:"status,omitempty"`
	Response  *any.Any           `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *WebhookCall) Reset() {
	*x = WebhookCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookCall) ProtoMessage() {}

func (x *WebhookCall) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookCall.ProtoReflect.Descriptor instead.
func (*WebhookCall) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{7}
}

func (x *WebhookCall) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebhookCall) GetWebhookId() uint64 {
	if x != nil {
		return x.WebhookId
	}
	return 0
}

func (x *WebhookCall) GetEventUuid() string {
	if x != nil {
		return x.EventUuid
	}
	return ""
}

func (x *WebhookCall) GetStatus() WebhookCall_Status {
	if x != nil {
		return x.Status
	}
	return WebhookCall_UNKNOWN
}

func (x *WebhookCall) GetResponse() *any.Any {
	if x != nil {
		return x.Response
	}
	return nil
}

type TestWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookId uint64 `protobuf:"varint,1,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
}

func (x *TestWebhookRequest) Reset() {
	*x = TestWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWebhookRequest) ProtoMessage() {}

func (x *TestWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWebhookRequest.ProtoReflect.Descriptor instead.
func (*TestWebhookRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{8}
}

func (x *TestWebhookRequest) GetWebhookId() uint64 {
	if x != nil {
		return x.WebhookId
	}
	return 0
}

type FindWebhookCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []uint64             `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	WebhookIds []uint64             `protobuf:"varint,2,rep,packed,name=webhook_ids,json=webhookIds,proto3" json:"webhook_ids,omitempty"`
	EventUuids []string             `protobuf:"bytes,3,rep,name=event_uuids,json=eventUuids,proto3" json:"event_uuids,omitempty"`
	Status     []WebhookCall_Status `protobuf:"varint,4,rep,packed,name=status,proto3,enum=ai.verta.events.WebhookCall_Status" json:"status,omitempty"`
}

func (x *FindWebhookCallRequest) Reset() {
	*x = FindWebhookCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindWebhookCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindWebhookCallRequest) ProtoMessage() {}

func (x *FindWebhookCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindWebhookCallRequest.ProtoReflect.Descriptor instead.
func (*FindWebhookCallRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{9}
}

func (x *FindWebhookCallRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FindWebhookCallRequest) GetWebhookIds() []uint64 {
	if x != nil {
		return x.WebhookIds
	}
	return nil
}

func (x *FindWebhookCallRequest) GetEventUuids() []string {
	if x != nil {
		return x.EventUuids
	}
	return nil
}

func (x *FindWebhookCallRequest) GetStatus() []WebhookCall_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// The call returned for this has a completely new ID
type RetriggerWebhookCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId uint64 `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (x *RetriggerWebhookCallRequest) Reset() {
	*x = RetriggerWebhookCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetriggerWebhookCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetriggerWebhookCallRequest) ProtoMessage() {}

func (x *RetriggerWebhookCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetriggerWebhookCallRequest.ProtoReflect.Descriptor instead.
func (*RetriggerWebhookCallRequest) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{10}
}

func (x *RetriggerWebhookCallRequest) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

type FindWebhookRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webhooks []*Webhook `protobuf:"bytes,1,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
}

func (x *FindWebhookRequest_Response) Reset() {
	*x = FindWebhookRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindWebhookRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindWebhookRequest_Response) ProtoMessage() {}

func (x *FindWebhookRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindWebhookRequest_Response.ProtoReflect.Descriptor instead.
func (*FindWebhookRequest_Response) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FindWebhookRequest_Response) GetWebhooks() []*Webhook {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

type TestWebhookRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode uint64 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *TestWebhookRequest_Response) Reset() {
	*x = TestWebhookRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestWebhookRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWebhookRequest_Response) ProtoMessage() {}

func (x *TestWebhookRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWebhookRequest_Response.ProtoReflect.Descriptor instead.
func (*TestWebhookRequest_Response) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TestWebhookRequest_Response) GetStatusCode() uint64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type FindWebhookCallRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*WebhookCall `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *FindWebhookCallRequest_Response) Reset() {
	*x = FindWebhookCallRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_Event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindWebhookCallRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindWebhookCallRequest_Response) ProtoMessage() {}

func (x *FindWebhookCallRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_events_Event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindWebhookCallRequest_Response.ProtoReflect.Descriptor instead.
func (*FindWebhookCallRequest_Response) Descriptor() ([]byte, []int) {
	return file_events_Event_proto_rawDescGZIP(), []int{9, 0}
}

func (x *FindWebhookCallRequest_Response) GetCalls() []*WebhookCall {
	if x != nil {
		return x.Calls
	}
	return nil
}

var File_events_Event_proto protoreflect.FileDescriptor

var file_events_Event_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75, 0x61, 0x63, 0x2f, 0x55, 0x41, 0x43, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x61, 0x63, 0x2f, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4c, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x46, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x04, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xf5, 0x01, 0x0a,
	0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x75, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0xae, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x61, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x28, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22, 0x60, 0x0a, 0x12, 0x54, 0x65, 0x73,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x1a, 0x2b,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x16,
	0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x36, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x32,
	0x93, 0x08, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x75, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x23, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x0f, 0x66, 0x69, 0x6e,
	0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x8e,
	0x01, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43,
	0x61, 0x6c, 0x6c, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12,
	0x83, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x41, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_Event_proto_rawDescOnce sync.Once
	file_events_Event_proto_rawDescData = file_events_Event_proto_rawDesc
)

func file_events_Event_proto_rawDescGZIP() []byte {
	file_events_Event_proto_rawDescOnce.Do(func() {
		file_events_Event_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_Event_proto_rawDescData)
	})
	return file_events_Event_proto_rawDescData
}

var file_events_Event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_events_Event_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_events_Event_proto_goTypes = []interface{}{
	(CreateEventRequest_EventType)(0),       // 0: ai.verta.events.CreateEventRequest.EventType
	(WebhookCall_Status)(0),                 // 1: ai.verta.events.WebhookCall.Status
	(*CreateEventRequest)(nil),              // 2: ai.verta.events.CreateEventRequest
	(*EventEntity)(nil),                     // 3: ai.verta.events.EventEntity
	(*Webhook)(nil),                         // 4: ai.verta.events.Webhook
	(*FindWebhookRequest)(nil),              // 5: ai.verta.events.FindWebhookRequest
	(*CreateWebhookRequest)(nil),            // 6: ai.verta.events.CreateWebhookRequest
	(*UpdateWebhookRequest)(nil),            // 7: ai.verta.events.UpdateWebhookRequest
	(*DeleteWebhookRequest)(nil),            // 8: ai.verta.events.DeleteWebhookRequest
	(*WebhookCall)(nil),                     // 9: ai.verta.events.WebhookCall
	(*TestWebhookRequest)(nil),              // 10: ai.verta.events.TestWebhookRequest
	(*FindWebhookCallRequest)(nil),          // 11: ai.verta.events.FindWebhookCallRequest
	(*RetriggerWebhookCallRequest)(nil),     // 12: ai.verta.events.RetriggerWebhookCallRequest
	(*FindWebhookRequest_Response)(nil),     // 13: ai.verta.events.FindWebhookRequest.Response
	(*TestWebhookRequest_Response)(nil),     // 14: ai.verta.events.TestWebhookRequest.Response
	(*FindWebhookCallRequest_Response)(nil), // 15: ai.verta.events.FindWebhookCallRequest.Response
	(*uac.ResourceType)(nil),                // 16: ai.verta.uac.ResourceType
	(*registry.RegisteredModel)(nil),        // 17: ai.verta.registry.RegisteredModel
	(*registry.ModelVersion)(nil),           // 18: ai.verta.registry.ModelVersion
	(*any.Any)(nil),                         // 19: google.protobuf.Any
	(*common.Empty)(nil),                    // 20: ai.verta.common.Empty
}
var file_events_Event_proto_depIdxs = []int32{
	0,  // 0: ai.verta.events.CreateEventRequest.event_type:type_name -> ai.verta.events.CreateEventRequest.EventType
	16, // 1: ai.verta.events.CreateEventRequest.resource_type:type_name -> ai.verta.uac.ResourceType
	3,  // 2: ai.verta.events.CreateEventRequest.original_entity:type_name -> ai.verta.events.EventEntity
	3,  // 3: ai.verta.events.CreateEventRequest.new_entity:type_name -> ai.verta.events.EventEntity
	17, // 4: ai.verta.events.EventEntity.registered_model:type_name -> ai.verta.registry.RegisteredModel
	18, // 5: ai.verta.events.EventEntity.model_version:type_name -> ai.verta.registry.ModelVersion
	16, // 6: ai.verta.events.Webhook.resource_types:type_name -> ai.verta.uac.ResourceType
	16, // 7: ai.verta.events.FindWebhookRequest.resource_types:type_name -> ai.verta.uac.ResourceType
	16, // 8: ai.verta.events.CreateWebhookRequest.resource_types:type_name -> ai.verta.uac.ResourceType
	16, // 9: ai.verta.events.UpdateWebhookRequest.add_resource_types:type_name -> ai.verta.uac.ResourceType
	16, // 10: ai.verta.events.UpdateWebhookRequest.delete_resource_types:type_name -> ai.verta.uac.ResourceType
	1,  // 11: ai.verta.events.WebhookCall.status:type_name -> ai.verta.events.WebhookCall.Status
	19, // 12: ai.verta.events.WebhookCall.response:type_name -> google.protobuf.Any
	1,  // 13: ai.verta.events.FindWebhookCallRequest.status:type_name -> ai.verta.events.WebhookCall.Status
	4,  // 14: ai.verta.events.FindWebhookRequest.Response.webhooks:type_name -> ai.verta.events.Webhook
	9,  // 15: ai.verta.events.FindWebhookCallRequest.Response.calls:type_name -> ai.verta.events.WebhookCall
	2,  // 16: ai.verta.events.EventService.createEvent:input_type -> ai.verta.events.CreateEventRequest
	6,  // 17: ai.verta.events.EventService.createWebhook:input_type -> ai.verta.events.CreateWebhookRequest
	7,  // 18: ai.verta.events.EventService.updateWebhook:input_type -> ai.verta.events.UpdateWebhookRequest
	5,  // 19: ai.verta.events.EventService.findWebhook:input_type -> ai.verta.events.FindWebhookRequest
	8,  // 20: ai.verta.events.EventService.deleteWebhook:input_type -> ai.verta.events.DeleteWebhookRequest
	11, // 21: ai.verta.events.EventService.findWebhookCall:input_type -> ai.verta.events.FindWebhookCallRequest
	12, // 22: ai.verta.events.EventService.retriggerWebhookCall:input_type -> ai.verta.events.RetriggerWebhookCallRequest
	10, // 23: ai.verta.events.EventService.triggerTest:input_type -> ai.verta.events.TestWebhookRequest
	20, // 24: ai.verta.events.EventService.createEvent:output_type -> ai.verta.common.Empty
	4,  // 25: ai.verta.events.EventService.createWebhook:output_type -> ai.verta.events.Webhook
	4,  // 26: ai.verta.events.EventService.updateWebhook:output_type -> ai.verta.events.Webhook
	13, // 27: ai.verta.events.EventService.findWebhook:output_type -> ai.verta.events.FindWebhookRequest.Response
	20, // 28: ai.verta.events.EventService.deleteWebhook:output_type -> ai.verta.common.Empty
	15, // 29: ai.verta.events.EventService.findWebhookCall:output_type -> ai.verta.events.FindWebhookCallRequest.Response
	9,  // 30: ai.verta.events.EventService.retriggerWebhookCall:output_type -> ai.verta.events.WebhookCall
	14, // 31: ai.verta.events.EventService.triggerTest:output_type -> ai.verta.events.TestWebhookRequest.Response
	24, // [24:32] is the sub-list for method output_type
	16, // [16:24] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_events_Event_proto_init() }
func file_events_Event_proto_init() {
	if File_events_Event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_events_Event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindWebhookCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetriggerWebhookCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindWebhookRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestWebhookRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_Event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindWebhookCallRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_events_Event_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*EventEntity_RegisteredModel)(nil),
		(*EventEntity_ModelVersion)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_Event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_events_Event_proto_goTypes,
		DependencyIndexes: file_events_Event_proto_depIdxs,
		EnumInfos:         file_events_Event_proto_enumTypes,
		MessageInfos:      file_events_Event_proto_msgTypes,
	}.Build()
	File_events_Event_proto = out.File
	file_events_Event_proto_rawDesc = nil
	file_events_Event_proto_goTypes = nil
	file_events_Event_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	FindWebhook(ctx context.Context, in *FindWebhookRequest, opts ...grpc.CallOption) (*FindWebhookRequest_Response, error)
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*common.Empty, error)
	FindWebhookCall(ctx context.Context, in *FindWebhookCallRequest, opts ...grpc.CallOption) (*FindWebhookCallRequest_Response, error)
	RetriggerWebhookCall(ctx context.Context, in *RetriggerWebhookCallRequest, opts ...grpc.CallOption) (*WebhookCall, error)
	TriggerTest(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookRequest_Response, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/createEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/createWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/updateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) FindWebhook(ctx context.Context, in *FindWebhookRequest, opts ...grpc.CallOption) (*FindWebhookRequest_Response, error) {
	out := new(FindWebhookRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/findWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/deleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) FindWebhookCall(ctx context.Context, in *FindWebhookCallRequest, opts ...grpc.CallOption) (*FindWebhookCallRequest_Response, error) {
	out := new(FindWebhookCallRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/findWebhookCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) RetriggerWebhookCall(ctx context.Context, in *RetriggerWebhookCallRequest, opts ...grpc.CallOption) (*WebhookCall, error) {
	out := new(WebhookCall)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/retriggerWebhookCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) TriggerTest(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookRequest_Response, error) {
	out := new(TestWebhookRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.events.EventService/triggerTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*common.Empty, error)
	CreateWebhook(context.Context, *CreateWebhookRequest) (*Webhook, error)
	UpdateWebhook(context.Context, *UpdateWebhookRequest) (*Webhook, error)
	FindWebhook(context.Context, *FindWebhookRequest) (*FindWebhookRequest_Response, error)
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*common.Empty, error)
	FindWebhookCall(context.Context, *FindWebhookCallRequest) (*FindWebhookCallRequest_Response, error)
	RetriggerWebhookCall(context.Context, *RetriggerWebhookCallRequest) (*WebhookCall, error)
	TriggerTest(context.Context, *TestWebhookRequest) (*TestWebhookRequest_Response, error)
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedEventServiceServer) CreateWebhook(context.Context, *CreateWebhookRequest) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (*UnimplementedEventServiceServer) UpdateWebhook(context.Context, *UpdateWebhookRequest) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (*UnimplementedEventServiceServer) FindWebhook(context.Context, *FindWebhookRequest) (*FindWebhookRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWebhook not implemented")
}
func (*UnimplementedEventServiceServer) DeleteWebhook(context.Context, *DeleteWebhookRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (*UnimplementedEventServiceServer) FindWebhookCall(context.Context, *FindWebhookCallRequest) (*FindWebhookCallRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWebhookCall not implemented")
}
func (*UnimplementedEventServiceServer) RetriggerWebhookCall(context.Context, *RetriggerWebhookCallRequest) (*WebhookCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetriggerWebhookCall not implemented")
}
func (*UnimplementedEventServiceServer) TriggerTest(context.Context, *TestWebhookRequest) (*TestWebhookRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerTest not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/CreateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateWebhook(ctx, req.(*CreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/UpdateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateWebhook(ctx, req.(*UpdateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_FindWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).FindWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/FindWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).FindWebhook(ctx, req.(*FindWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_FindWebhookCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWebhookCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).FindWebhookCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/FindWebhookCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).FindWebhookCall(ctx, req.(*FindWebhookCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_RetriggerWebhookCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetriggerWebhookCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).RetriggerWebhookCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/RetriggerWebhookCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).RetriggerWebhookCall(ctx, req.(*RetriggerWebhookCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_TriggerTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).TriggerTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.events.EventService/TriggerTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).TriggerTest(ctx, req.(*TestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.events.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
		{
			MethodName: "createWebhook",
			Handler:    _EventService_CreateWebhook_Handler,
		},
		{
			MethodName: "updateWebhook",
			Handler:    _EventService_UpdateWebhook_Handler,
		},
		{
			MethodName: "findWebhook",
			Handler:    _EventService_FindWebhook_Handler,
		},
		{
			MethodName: "deleteWebhook",
			Handler:    _EventService_DeleteWebhook_Handler,
		},
		{
			MethodName: "findWebhookCall",
			Handler:    _EventService_FindWebhookCall_Handler,
		},
		{
			MethodName: "retriggerWebhookCall",
			Handler:    _EventService_RetriggerWebhookCall_Handler,
		},
		{
			MethodName: "triggerTest",
			Handler:    _EventService_TriggerTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events/Event.proto",
}
