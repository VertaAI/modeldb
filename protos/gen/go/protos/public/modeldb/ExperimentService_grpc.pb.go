// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: modeldb/ExperimentService.proto

package modeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExperimentServiceClient is the client API for ExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperimentServiceClient interface {
	CreateExperiment(ctx context.Context, in *CreateExperiment, opts ...grpc.CallOption) (*CreateExperiment_Response, error)
	UpdateExperimentNameOrDescription(ctx context.Context, in *UpdateExperimentNameOrDescription, opts ...grpc.CallOption) (*UpdateExperimentNameOrDescription_Response, error)
	UpdateExperimentName(ctx context.Context, in *UpdateExperimentName, opts ...grpc.CallOption) (*UpdateExperimentName_Response, error)
	UpdateExperimentDescription(ctx context.Context, in *UpdateExperimentDescription, opts ...grpc.CallOption) (*UpdateExperimentDescription_Response, error)
	AddExperimentTags(ctx context.Context, in *AddExperimentTags, opts ...grpc.CallOption) (*AddExperimentTags_Response, error)
	GetExperimentTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error)
	DeleteExperimentTags(ctx context.Context, in *DeleteExperimentTags, opts ...grpc.CallOption) (*DeleteExperimentTags_Response, error)
	AddExperimentTag(ctx context.Context, in *AddExperimentTag, opts ...grpc.CallOption) (*AddExperimentTag_Response, error)
	DeleteExperimentTag(ctx context.Context, in *DeleteExperimentTag, opts ...grpc.CallOption) (*DeleteExperimentTag_Response, error)
	AddAttribute(ctx context.Context, in *AddAttributes, opts ...grpc.CallOption) (*AddAttributes_Response, error)
	AddExperimentAttributes(ctx context.Context, in *AddExperimentAttributes, opts ...grpc.CallOption) (*AddExperimentAttributes_Response, error)
	GetExperimentAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error)
	DeleteExperimentAttributes(ctx context.Context, in *DeleteExperimentAttributes, opts ...grpc.CallOption) (*DeleteExperimentAttributes_Response, error)
	// code version
	LogExperimentCodeVersion(ctx context.Context, in *LogExperimentCodeVersion, opts ...grpc.CallOption) (*LogExperimentCodeVersion_Response, error)
	GetExperimentCodeVersion(ctx context.Context, in *GetExperimentCodeVersion, opts ...grpc.CallOption) (*GetExperimentCodeVersion_Response, error)
	GetExperimentsInProject(ctx context.Context, in *GetExperimentsInProject, opts ...grpc.CallOption) (*GetExperimentsInProject_Response, error)
	GetExperimentById(ctx context.Context, in *GetExperimentById, opts ...grpc.CallOption) (*GetExperimentById_Response, error)
	GetExperimentByName(ctx context.Context, in *GetExperimentByName, opts ...grpc.CallOption) (*GetExperimentByName_Response, error)
	DeleteExperiment(ctx context.Context, in *DeleteExperiment, opts ...grpc.CallOption) (*DeleteExperiment_Response, error)
	// artifacts
	GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error)
	// queries
	FindExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*FindExperiments_Response, error)
	// artifacts
	LogArtifacts(ctx context.Context, in *LogExperimentArtifacts, opts ...grpc.CallOption) (*LogExperimentArtifacts_Response, error)
	GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error)
	DeleteArtifact(ctx context.Context, in *DeleteExperimentArtifact, opts ...grpc.CallOption) (*DeleteExperimentArtifact_Response, error)
	DeleteExperiments(ctx context.Context, in *DeleteExperiments, opts ...grpc.CallOption) (*DeleteExperiments_Response, error)
}

type experimentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentServiceClient(cc grpc.ClientConnInterface) ExperimentServiceClient {
	return &experimentServiceClient{cc}
}

func (c *experimentServiceClient) CreateExperiment(ctx context.Context, in *CreateExperiment, opts ...grpc.CallOption) (*CreateExperiment_Response, error) {
	out := new(CreateExperiment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/createExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperimentNameOrDescription(ctx context.Context, in *UpdateExperimentNameOrDescription, opts ...grpc.CallOption) (*UpdateExperimentNameOrDescription_Response, error) {
	out := new(UpdateExperimentNameOrDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/updateExperimentNameOrDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperimentName(ctx context.Context, in *UpdateExperimentName, opts ...grpc.CallOption) (*UpdateExperimentName_Response, error) {
	out := new(UpdateExperimentName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/updateExperimentName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperimentDescription(ctx context.Context, in *UpdateExperimentDescription, opts ...grpc.CallOption) (*UpdateExperimentDescription_Response, error) {
	out := new(UpdateExperimentDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/updateExperimentDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddExperimentTags(ctx context.Context, in *AddExperimentTags, opts ...grpc.CallOption) (*AddExperimentTags_Response, error) {
	out := new(AddExperimentTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addExperimentTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error) {
	out := new(GetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperimentTags(ctx context.Context, in *DeleteExperimentTags, opts ...grpc.CallOption) (*DeleteExperimentTags_Response, error) {
	out := new(DeleteExperimentTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperimentTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddExperimentTag(ctx context.Context, in *AddExperimentTag, opts ...grpc.CallOption) (*AddExperimentTag_Response, error) {
	out := new(AddExperimentTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addExperimentTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperimentTag(ctx context.Context, in *DeleteExperimentTag, opts ...grpc.CallOption) (*DeleteExperimentTag_Response, error) {
	out := new(DeleteExperimentTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperimentTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddAttribute(ctx context.Context, in *AddAttributes, opts ...grpc.CallOption) (*AddAttributes_Response, error) {
	out := new(AddAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddExperimentAttributes(ctx context.Context, in *AddExperimentAttributes, opts ...grpc.CallOption) (*AddExperimentAttributes_Response, error) {
	out := new(AddExperimentAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addExperimentAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error) {
	out := new(GetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperimentAttributes(ctx context.Context, in *DeleteExperimentAttributes, opts ...grpc.CallOption) (*DeleteExperimentAttributes_Response, error) {
	out := new(DeleteExperimentAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperimentAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) LogExperimentCodeVersion(ctx context.Context, in *LogExperimentCodeVersion, opts ...grpc.CallOption) (*LogExperimentCodeVersion_Response, error) {
	out := new(LogExperimentCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/logExperimentCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentCodeVersion(ctx context.Context, in *GetExperimentCodeVersion, opts ...grpc.CallOption) (*GetExperimentCodeVersion_Response, error) {
	out := new(GetExperimentCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentsInProject(ctx context.Context, in *GetExperimentsInProject, opts ...grpc.CallOption) (*GetExperimentsInProject_Response, error) {
	out := new(GetExperimentsInProject_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentsInProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentById(ctx context.Context, in *GetExperimentById, opts ...grpc.CallOption) (*GetExperimentById_Response, error) {
	out := new(GetExperimentById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentByName(ctx context.Context, in *GetExperimentByName, opts ...grpc.CallOption) (*GetExperimentByName_Response, error) {
	out := new(GetExperimentByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiment(ctx context.Context, in *DeleteExperiment, opts ...grpc.CallOption) (*DeleteExperiment_Response, error) {
	out := new(DeleteExperiment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error) {
	out := new(GetUrlForArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getUrlForArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) FindExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*FindExperiments_Response, error) {
	out := new(FindExperiments_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/findExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) LogArtifacts(ctx context.Context, in *LogExperimentArtifacts, opts ...grpc.CallOption) (*LogExperimentArtifacts_Response, error) {
	out := new(LogExperimentArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/logArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error) {
	out := new(GetArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteArtifact(ctx context.Context, in *DeleteExperimentArtifact, opts ...grpc.CallOption) (*DeleteExperimentArtifact_Response, error) {
	out := new(DeleteExperimentArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiments(ctx context.Context, in *DeleteExperiments, opts ...grpc.CallOption) (*DeleteExperiments_Response, error) {
	out := new(DeleteExperiments_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentServiceServer is the server API for ExperimentService service.
// All implementations must embed UnimplementedExperimentServiceServer
// for forward compatibility
type ExperimentServiceServer interface {
	CreateExperiment(context.Context, *CreateExperiment) (*CreateExperiment_Response, error)
	UpdateExperimentNameOrDescription(context.Context, *UpdateExperimentNameOrDescription) (*UpdateExperimentNameOrDescription_Response, error)
	UpdateExperimentName(context.Context, *UpdateExperimentName) (*UpdateExperimentName_Response, error)
	UpdateExperimentDescription(context.Context, *UpdateExperimentDescription) (*UpdateExperimentDescription_Response, error)
	AddExperimentTags(context.Context, *AddExperimentTags) (*AddExperimentTags_Response, error)
	GetExperimentTags(context.Context, *GetTags) (*GetTags_Response, error)
	DeleteExperimentTags(context.Context, *DeleteExperimentTags) (*DeleteExperimentTags_Response, error)
	AddExperimentTag(context.Context, *AddExperimentTag) (*AddExperimentTag_Response, error)
	DeleteExperimentTag(context.Context, *DeleteExperimentTag) (*DeleteExperimentTag_Response, error)
	AddAttribute(context.Context, *AddAttributes) (*AddAttributes_Response, error)
	AddExperimentAttributes(context.Context, *AddExperimentAttributes) (*AddExperimentAttributes_Response, error)
	GetExperimentAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error)
	DeleteExperimentAttributes(context.Context, *DeleteExperimentAttributes) (*DeleteExperimentAttributes_Response, error)
	// code version
	LogExperimentCodeVersion(context.Context, *LogExperimentCodeVersion) (*LogExperimentCodeVersion_Response, error)
	GetExperimentCodeVersion(context.Context, *GetExperimentCodeVersion) (*GetExperimentCodeVersion_Response, error)
	GetExperimentsInProject(context.Context, *GetExperimentsInProject) (*GetExperimentsInProject_Response, error)
	GetExperimentById(context.Context, *GetExperimentById) (*GetExperimentById_Response, error)
	GetExperimentByName(context.Context, *GetExperimentByName) (*GetExperimentByName_Response, error)
	DeleteExperiment(context.Context, *DeleteExperiment) (*DeleteExperiment_Response, error)
	// artifacts
	GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error)
	// queries
	FindExperiments(context.Context, *FindExperiments) (*FindExperiments_Response, error)
	// artifacts
	LogArtifacts(context.Context, *LogExperimentArtifacts) (*LogExperimentArtifacts_Response, error)
	GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error)
	DeleteArtifact(context.Context, *DeleteExperimentArtifact) (*DeleteExperimentArtifact_Response, error)
	DeleteExperiments(context.Context, *DeleteExperiments) (*DeleteExperiments_Response, error)
	mustEmbedUnimplementedExperimentServiceServer()
}

// UnimplementedExperimentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperimentServiceServer struct {
}

func (UnimplementedExperimentServiceServer) CreateExperiment(context.Context, *CreateExperiment) (*CreateExperiment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (UnimplementedExperimentServiceServer) UpdateExperimentNameOrDescription(context.Context, *UpdateExperimentNameOrDescription) (*UpdateExperimentNameOrDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentNameOrDescription not implemented")
}
func (UnimplementedExperimentServiceServer) UpdateExperimentName(context.Context, *UpdateExperimentName) (*UpdateExperimentName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentName not implemented")
}
func (UnimplementedExperimentServiceServer) UpdateExperimentDescription(context.Context, *UpdateExperimentDescription) (*UpdateExperimentDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentDescription not implemented")
}
func (UnimplementedExperimentServiceServer) AddExperimentTags(context.Context, *AddExperimentTags) (*AddExperimentTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentTags not implemented")
}
func (UnimplementedExperimentServiceServer) GetExperimentTags(context.Context, *GetTags) (*GetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentTags not implemented")
}
func (UnimplementedExperimentServiceServer) DeleteExperimentTags(context.Context, *DeleteExperimentTags) (*DeleteExperimentTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentTags not implemented")
}
func (UnimplementedExperimentServiceServer) AddExperimentTag(context.Context, *AddExperimentTag) (*AddExperimentTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentTag not implemented")
}
func (UnimplementedExperimentServiceServer) DeleteExperimentTag(context.Context, *DeleteExperimentTag) (*DeleteExperimentTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentTag not implemented")
}
func (UnimplementedExperimentServiceServer) AddAttribute(context.Context, *AddAttributes) (*AddAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttribute not implemented")
}
func (UnimplementedExperimentServiceServer) AddExperimentAttributes(context.Context, *AddExperimentAttributes) (*AddExperimentAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentAttributes not implemented")
}
func (UnimplementedExperimentServiceServer) GetExperimentAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentAttributes not implemented")
}
func (UnimplementedExperimentServiceServer) DeleteExperimentAttributes(context.Context, *DeleteExperimentAttributes) (*DeleteExperimentAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentAttributes not implemented")
}
func (UnimplementedExperimentServiceServer) LogExperimentCodeVersion(context.Context, *LogExperimentCodeVersion) (*LogExperimentCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogExperimentCodeVersion not implemented")
}
func (UnimplementedExperimentServiceServer) GetExperimentCodeVersion(context.Context, *GetExperimentCodeVersion) (*GetExperimentCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentCodeVersion not implemented")
}
func (UnimplementedExperimentServiceServer) GetExperimentsInProject(context.Context, *GetExperimentsInProject) (*GetExperimentsInProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentsInProject not implemented")
}
func (UnimplementedExperimentServiceServer) GetExperimentById(context.Context, *GetExperimentById) (*GetExperimentById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentById not implemented")
}
func (UnimplementedExperimentServiceServer) GetExperimentByName(context.Context, *GetExperimentByName) (*GetExperimentByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentByName not implemented")
}
func (UnimplementedExperimentServiceServer) DeleteExperiment(context.Context, *DeleteExperiment) (*DeleteExperiment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (UnimplementedExperimentServiceServer) GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForArtifact not implemented")
}
func (UnimplementedExperimentServiceServer) FindExperiments(context.Context, *FindExperiments) (*FindExperiments_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExperiments not implemented")
}
func (UnimplementedExperimentServiceServer) LogArtifacts(context.Context, *LogExperimentArtifacts) (*LogExperimentArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogArtifacts not implemented")
}
func (UnimplementedExperimentServiceServer) GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (UnimplementedExperimentServiceServer) DeleteArtifact(context.Context, *DeleteExperimentArtifact) (*DeleteExperimentArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (UnimplementedExperimentServiceServer) DeleteExperiments(context.Context, *DeleteExperiments) (*DeleteExperiments_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiments not implemented")
}
func (UnimplementedExperimentServiceServer) mustEmbedUnimplementedExperimentServiceServer() {}

// UnsafeExperimentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperimentServiceServer will
// result in compilation errors.
type UnsafeExperimentServiceServer interface {
	mustEmbedUnimplementedExperimentServiceServer()
}

func RegisterExperimentServiceServer(s grpc.ServiceRegistrar, srv ExperimentServiceServer) {
	s.RegisterService(&ExperimentService_ServiceDesc, srv)
}

func _ExperimentService_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperiment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/createExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, req.(*CreateExperiment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperimentNameOrDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentNameOrDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperimentNameOrDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/updateExperimentNameOrDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperimentNameOrDescription(ctx, req.(*UpdateExperimentNameOrDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperimentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperimentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/updateExperimentName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperimentName(ctx, req.(*UpdateExperimentName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperimentDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperimentDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/updateExperimentDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperimentDescription(ctx, req.(*UpdateExperimentDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddExperimentTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddExperimentTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/addExperimentTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddExperimentTags(ctx, req.(*AddExperimentTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getExperimentTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentTags(ctx, req.(*GetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperimentTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperimentTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/deleteExperimentTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperimentTags(ctx, req.(*DeleteExperimentTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddExperimentTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddExperimentTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/addExperimentTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddExperimentTag(ctx, req.(*AddExperimentTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperimentTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperimentTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/deleteExperimentTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperimentTag(ctx, req.(*DeleteExperimentTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/addAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddAttribute(ctx, req.(*AddAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddExperimentAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddExperimentAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/addExperimentAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddExperimentAttributes(ctx, req.(*AddExperimentAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getExperimentAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentAttributes(ctx, req.(*GetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperimentAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperimentAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/deleteExperimentAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperimentAttributes(ctx, req.(*DeleteExperimentAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_LogExperimentCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogExperimentCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).LogExperimentCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/logExperimentCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).LogExperimentCodeVersion(ctx, req.(*LogExperimentCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getExperimentCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentCodeVersion(ctx, req.(*GetExperimentCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentsInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentsInProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentsInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getExperimentsInProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentsInProject(ctx, req.(*GetExperimentsInProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getExperimentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentById(ctx, req.(*GetExperimentById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getExperimentByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentByName(ctx, req.(*GetExperimentByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperiment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/deleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, req.(*DeleteExperiment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetUrlForArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetUrlForArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getUrlForArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetUrlForArtifact(ctx, req.(*GetUrlForArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_FindExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExperiments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).FindExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/findExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).FindExperiments(ctx, req.(*FindExperiments))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_LogArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogExperimentArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).LogArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/logArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).LogArtifacts(ctx, req.(*LogExperimentArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/getArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetArtifacts(ctx, req.(*GetArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/deleteArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteArtifact(ctx, req.(*DeleteExperimentArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperiments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/deleteExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, req.(*DeleteExperiments))
	}
	return interceptor(ctx, in, info, handler)
}

// ExperimentService_ServiceDesc is the grpc.ServiceDesc for ExperimentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperimentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.ExperimentService",
	HandlerType: (*ExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createExperiment",
			Handler:    _ExperimentService_CreateExperiment_Handler,
		},
		{
			MethodName: "updateExperimentNameOrDescription",
			Handler:    _ExperimentService_UpdateExperimentNameOrDescription_Handler,
		},
		{
			MethodName: "updateExperimentName",
			Handler:    _ExperimentService_UpdateExperimentName_Handler,
		},
		{
			MethodName: "updateExperimentDescription",
			Handler:    _ExperimentService_UpdateExperimentDescription_Handler,
		},
		{
			MethodName: "addExperimentTags",
			Handler:    _ExperimentService_AddExperimentTags_Handler,
		},
		{
			MethodName: "getExperimentTags",
			Handler:    _ExperimentService_GetExperimentTags_Handler,
		},
		{
			MethodName: "deleteExperimentTags",
			Handler:    _ExperimentService_DeleteExperimentTags_Handler,
		},
		{
			MethodName: "addExperimentTag",
			Handler:    _ExperimentService_AddExperimentTag_Handler,
		},
		{
			MethodName: "deleteExperimentTag",
			Handler:    _ExperimentService_DeleteExperimentTag_Handler,
		},
		{
			MethodName: "addAttribute",
			Handler:    _ExperimentService_AddAttribute_Handler,
		},
		{
			MethodName: "addExperimentAttributes",
			Handler:    _ExperimentService_AddExperimentAttributes_Handler,
		},
		{
			MethodName: "getExperimentAttributes",
			Handler:    _ExperimentService_GetExperimentAttributes_Handler,
		},
		{
			MethodName: "deleteExperimentAttributes",
			Handler:    _ExperimentService_DeleteExperimentAttributes_Handler,
		},
		{
			MethodName: "logExperimentCodeVersion",
			Handler:    _ExperimentService_LogExperimentCodeVersion_Handler,
		},
		{
			MethodName: "getExperimentCodeVersion",
			Handler:    _ExperimentService_GetExperimentCodeVersion_Handler,
		},
		{
			MethodName: "getExperimentsInProject",
			Handler:    _ExperimentService_GetExperimentsInProject_Handler,
		},
		{
			MethodName: "getExperimentById",
			Handler:    _ExperimentService_GetExperimentById_Handler,
		},
		{
			MethodName: "getExperimentByName",
			Handler:    _ExperimentService_GetExperimentByName_Handler,
		},
		{
			MethodName: "deleteExperiment",
			Handler:    _ExperimentService_DeleteExperiment_Handler,
		},
		{
			MethodName: "getUrlForArtifact",
			Handler:    _ExperimentService_GetUrlForArtifact_Handler,
		},
		{
			MethodName: "findExperiments",
			Handler:    _ExperimentService_FindExperiments_Handler,
		},
		{
			MethodName: "logArtifacts",
			Handler:    _ExperimentService_LogArtifacts_Handler,
		},
		{
			MethodName: "getArtifacts",
			Handler:    _ExperimentService_GetArtifacts_Handler,
		},
		{
			MethodName: "deleteArtifact",
			Handler:    _ExperimentService_DeleteArtifact_Handler,
		},
		{
			MethodName: "deleteExperiments",
			Handler:    _ExperimentService_DeleteExperiments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/ExperimentService.proto",
}
