// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/versioning/Environment.proto

package versioning

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EnvironmentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*EnvironmentBlob_Python
	//	*EnvironmentBlob_Docker
	Content              isEnvironmentBlob_Content   `protobuf_oneof:"content"`
	EnvironmentVariables []*EnvironmentVariablesBlob `protobuf:"bytes,3,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
	CommandLine          []string                    `protobuf:"bytes,4,rep,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
}

func (x *EnvironmentBlob) Reset() {
	*x = EnvironmentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentBlob) ProtoMessage() {}

func (x *EnvironmentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentBlob.ProtoReflect.Descriptor instead.
func (*EnvironmentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{0}
}

func (m *EnvironmentBlob) GetContent() isEnvironmentBlob_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *EnvironmentBlob) GetPython() *PythonEnvironmentBlob {
	if x, ok := x.GetContent().(*EnvironmentBlob_Python); ok {
		return x.Python
	}
	return nil
}

func (x *EnvironmentBlob) GetDocker() *DockerEnvironmentBlob {
	if x, ok := x.GetContent().(*EnvironmentBlob_Docker); ok {
		return x.Docker
	}
	return nil
}

func (x *EnvironmentBlob) GetEnvironmentVariables() []*EnvironmentVariablesBlob {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *EnvironmentBlob) GetCommandLine() []string {
	if x != nil {
		return x.CommandLine
	}
	return nil
}

type isEnvironmentBlob_Content interface {
	isEnvironmentBlob_Content()
}

type EnvironmentBlob_Python struct {
	Python *PythonEnvironmentBlob `protobuf:"bytes,1,opt,name=python,proto3,oneof"`
}

type EnvironmentBlob_Docker struct {
	Docker *DockerEnvironmentBlob `protobuf:"bytes,2,opt,name=docker,proto3,oneof"`
}

func (*EnvironmentBlob_Python) isEnvironmentBlob_Content() {}

func (*EnvironmentBlob_Docker) isEnvironmentBlob_Content() {}

type EnvironmentVariablesBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvironmentVariablesBlob) Reset() {
	*x = EnvironmentVariablesBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentVariablesBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariablesBlob) ProtoMessage() {}

func (x *EnvironmentVariablesBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariablesBlob.ProtoReflect.Descriptor instead.
func (*EnvironmentVariablesBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{1}
}

func (x *EnvironmentVariablesBlob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentVariablesBlob) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VersionEnvironmentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major  int32  `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor  int32  `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch  int32  `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	Suffix string `protobuf:"bytes,4,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (x *VersionEnvironmentBlob) Reset() {
	*x = VersionEnvironmentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionEnvironmentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionEnvironmentBlob) ProtoMessage() {}

func (x *VersionEnvironmentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionEnvironmentBlob.ProtoReflect.Descriptor instead.
func (*VersionEnvironmentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{2}
}

func (x *VersionEnvironmentBlob) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *VersionEnvironmentBlob) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *VersionEnvironmentBlob) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *VersionEnvironmentBlob) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

type PythonRequirementEnvironmentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Library    string                  `protobuf:"bytes,1,opt,name=library,proto3" json:"library,omitempty"`
	Constraint string                  `protobuf:"bytes,2,opt,name=constraint,proto3" json:"constraint,omitempty"`
	Version    *VersionEnvironmentBlob `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PythonRequirementEnvironmentBlob) Reset() {
	*x = PythonRequirementEnvironmentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonRequirementEnvironmentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonRequirementEnvironmentBlob) ProtoMessage() {}

func (x *PythonRequirementEnvironmentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonRequirementEnvironmentBlob.ProtoReflect.Descriptor instead.
func (*PythonRequirementEnvironmentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{3}
}

func (x *PythonRequirementEnvironmentBlob) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *PythonRequirementEnvironmentBlob) GetConstraint() string {
	if x != nil {
		return x.Constraint
	}
	return ""
}

func (x *PythonRequirementEnvironmentBlob) GetVersion() *VersionEnvironmentBlob {
	if x != nil {
		return x.Version
	}
	return nil
}

type PythonEnvironmentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      *VersionEnvironmentBlob             `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Requirements []*PythonRequirementEnvironmentBlob `protobuf:"bytes,2,rep,name=requirements,proto3" json:"requirements,omitempty"`
	Constraints  []*PythonRequirementEnvironmentBlob `protobuf:"bytes,3,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *PythonEnvironmentBlob) Reset() {
	*x = PythonEnvironmentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonEnvironmentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonEnvironmentBlob) ProtoMessage() {}

func (x *PythonEnvironmentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonEnvironmentBlob.ProtoReflect.Descriptor instead.
func (*PythonEnvironmentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{4}
}

func (x *PythonEnvironmentBlob) GetVersion() *VersionEnvironmentBlob {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PythonEnvironmentBlob) GetRequirements() []*PythonRequirementEnvironmentBlob {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *PythonEnvironmentBlob) GetConstraints() []*PythonRequirementEnvironmentBlob {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type DockerEnvironmentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Tag        string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Sha        string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *DockerEnvironmentBlob) Reset() {
	*x = DockerEnvironmentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerEnvironmentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerEnvironmentBlob) ProtoMessage() {}

func (x *DockerEnvironmentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerEnvironmentBlob.ProtoReflect.Descriptor instead.
func (*DockerEnvironmentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{5}
}

func (x *DockerEnvironmentBlob) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *DockerEnvironmentBlob) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DockerEnvironmentBlob) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type EnvironmentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*EnvironmentDiff_Python
	//	*EnvironmentDiff_Docker
	Content isEnvironmentDiff_Content `protobuf_oneof:"content"`
	// Should only contain environment variables unique to A/B (considering all fields)
	EnvironmentVariables []*EnvironmentVariablesDiff `protobuf:"bytes,3,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
	CommandLine          *CommandLineEnvironmentDiff `protobuf:"bytes,4,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
}

func (x *EnvironmentDiff) Reset() {
	*x = EnvironmentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentDiff) ProtoMessage() {}

func (x *EnvironmentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentDiff.ProtoReflect.Descriptor instead.
func (*EnvironmentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{6}
}

func (m *EnvironmentDiff) GetContent() isEnvironmentDiff_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *EnvironmentDiff) GetPython() *PythonEnvironmentDiff {
	if x, ok := x.GetContent().(*EnvironmentDiff_Python); ok {
		return x.Python
	}
	return nil
}

func (x *EnvironmentDiff) GetDocker() *DockerEnvironmentDiff {
	if x, ok := x.GetContent().(*EnvironmentDiff_Docker); ok {
		return x.Docker
	}
	return nil
}

func (x *EnvironmentDiff) GetEnvironmentVariables() []*EnvironmentVariablesDiff {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *EnvironmentDiff) GetCommandLine() *CommandLineEnvironmentDiff {
	if x != nil {
		return x.CommandLine
	}
	return nil
}

type isEnvironmentDiff_Content interface {
	isEnvironmentDiff_Content()
}

type EnvironmentDiff_Python struct {
	Python *PythonEnvironmentDiff `protobuf:"bytes,1,opt,name=python,proto3,oneof"`
}

type EnvironmentDiff_Docker struct {
	Docker *DockerEnvironmentDiff `protobuf:"bytes,2,opt,name=docker,proto3,oneof"`
}

func (*EnvironmentDiff_Python) isEnvironmentDiff_Content() {}

func (*EnvironmentDiff_Docker) isEnvironmentDiff_Content() {}

type CommandLineEnvironmentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      []string                  `protobuf:"bytes,2,rep,name=A,proto3" json:"A,omitempty"`
	B      []string                  `protobuf:"bytes,3,rep,name=B,proto3" json:"B,omitempty"`
	C      []string                  `protobuf:"bytes,4,rep,name=C,proto3" json:"C,omitempty"`
}

func (x *CommandLineEnvironmentDiff) Reset() {
	*x = CommandLineEnvironmentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLineEnvironmentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLineEnvironmentDiff) ProtoMessage() {}

func (x *CommandLineEnvironmentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLineEnvironmentDiff.ProtoReflect.Descriptor instead.
func (*CommandLineEnvironmentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{7}
}

func (x *CommandLineEnvironmentDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *CommandLineEnvironmentDiff) GetA() []string {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *CommandLineEnvironmentDiff) GetB() []string {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *CommandLineEnvironmentDiff) GetC() []string {
	if x != nil {
		return x.C
	}
	return nil
}

type EnvironmentVariablesDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *EnvironmentVariablesBlob `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *EnvironmentVariablesBlob `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *EnvironmentVariablesBlob `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *EnvironmentVariablesDiff) Reset() {
	*x = EnvironmentVariablesDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentVariablesDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariablesDiff) ProtoMessage() {}

func (x *EnvironmentVariablesDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariablesDiff.ProtoReflect.Descriptor instead.
func (*EnvironmentVariablesDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{8}
}

func (x *EnvironmentVariablesDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *EnvironmentVariablesDiff) GetA() *EnvironmentVariablesBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *EnvironmentVariablesDiff) GetB() *EnvironmentVariablesBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *EnvironmentVariablesDiff) GetC() *EnvironmentVariablesBlob {
	if x != nil {
		return x.C
	}
	return nil
}

type PythonRequirementEnvironmentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *PythonRequirementEnvironmentBlob `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *PythonRequirementEnvironmentBlob `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *PythonRequirementEnvironmentBlob `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *PythonRequirementEnvironmentDiff) Reset() {
	*x = PythonRequirementEnvironmentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonRequirementEnvironmentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonRequirementEnvironmentDiff) ProtoMessage() {}

func (x *PythonRequirementEnvironmentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonRequirementEnvironmentDiff.ProtoReflect.Descriptor instead.
func (*PythonRequirementEnvironmentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{9}
}

func (x *PythonRequirementEnvironmentDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *PythonRequirementEnvironmentDiff) GetA() *PythonRequirementEnvironmentBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *PythonRequirementEnvironmentDiff) GetB() *PythonRequirementEnvironmentBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *PythonRequirementEnvironmentDiff) GetC() *PythonRequirementEnvironmentBlob {
	if x != nil {
		return x.C
	}
	return nil
}

type VersionEnvironmentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *VersionEnvironmentBlob   `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *VersionEnvironmentBlob   `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *VersionEnvironmentBlob   `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *VersionEnvironmentDiff) Reset() {
	*x = VersionEnvironmentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionEnvironmentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionEnvironmentDiff) ProtoMessage() {}

func (x *VersionEnvironmentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionEnvironmentDiff.ProtoReflect.Descriptor instead.
func (*VersionEnvironmentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{10}
}

func (x *VersionEnvironmentDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *VersionEnvironmentDiff) GetA() *VersionEnvironmentBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *VersionEnvironmentDiff) GetB() *VersionEnvironmentBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *VersionEnvironmentDiff) GetC() *VersionEnvironmentBlob {
	if x != nil {
		return x.C
	}
	return nil
}

type PythonEnvironmentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      *VersionEnvironmentDiff             `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Requirements []*PythonRequirementEnvironmentDiff `protobuf:"bytes,2,rep,name=requirements,proto3" json:"requirements,omitempty"`
	Constraints  []*PythonRequirementEnvironmentDiff `protobuf:"bytes,3,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *PythonEnvironmentDiff) Reset() {
	*x = PythonEnvironmentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonEnvironmentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonEnvironmentDiff) ProtoMessage() {}

func (x *PythonEnvironmentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonEnvironmentDiff.ProtoReflect.Descriptor instead.
func (*PythonEnvironmentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{11}
}

func (x *PythonEnvironmentDiff) GetVersion() *VersionEnvironmentDiff {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PythonEnvironmentDiff) GetRequirements() []*PythonRequirementEnvironmentDiff {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *PythonEnvironmentDiff) GetConstraints() []*PythonRequirementEnvironmentDiff {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type DockerEnvironmentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *DockerEnvironmentBlob    `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *DockerEnvironmentBlob    `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *DockerEnvironmentBlob    `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *DockerEnvironmentDiff) Reset() {
	*x = DockerEnvironmentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Environment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerEnvironmentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerEnvironmentDiff) ProtoMessage() {}

func (x *DockerEnvironmentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Environment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerEnvironmentDiff.ProtoReflect.Descriptor instead.
func (*DockerEnvironmentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Environment_proto_rawDescGZIP(), []int{12}
}

func (x *DockerEnvironmentDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *DockerEnvironmentDiff) GetA() *DockerEnvironmentBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *DockerEnvironmentDiff) GetB() *DockerEnvironmentBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *DockerEnvironmentDiff) GetC() *DockerEnvironmentBlob {
	if x != nil {
		return x.C
	}
	return nil
}

var File_modeldb_versioning_Environment_proto protoreflect.FileDescriptor

var file_modeldb_versioning_Environment_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x44, 0x0a,
	0x18, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0xab, 0x01, 0x0a, 0x20, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x15, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x4d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x5b, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22,
	0x80, 0x03, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x6a, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x44, 0x69, 0x66, 0x66, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44,
	0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x41, 0x12,
	0x0c, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x42, 0x12, 0x0c, 0x0a,
	0x01, 0x43, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x43, 0x22, 0xb9, 0x02, 0x0a, 0x18,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x41, 0x12, 0x43, 0x0a,
	0x01, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x01, 0x42, 0x12, 0x43, 0x0a, 0x01, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x43, 0x22, 0xd9, 0x02, 0x0a, 0x20, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x01,
	0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x41, 0x12, 0x4b, 0x0a, 0x01, 0x42, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x01, 0x42, 0x12, 0x4b, 0x0a, 0x01, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x01, 0x43, 0x22, 0xb1, 0x02, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41,
	0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01,
	0x41, 0x12, 0x41, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x01, 0x42, 0x12, 0x41, 0x0a, 0x01, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x43, 0x22, 0xaa, 0x02, 0x0a, 0x15, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x4d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x61, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40,
	0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x41,
	0x12, 0x40, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x01, 0x42, 0x12, 0x40, 0x0a, 0x01, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x01, 0x43, 0x42, 0x4d, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modeldb_versioning_Environment_proto_rawDescOnce sync.Once
	file_modeldb_versioning_Environment_proto_rawDescData = file_modeldb_versioning_Environment_proto_rawDesc
)

func file_modeldb_versioning_Environment_proto_rawDescGZIP() []byte {
	file_modeldb_versioning_Environment_proto_rawDescOnce.Do(func() {
		file_modeldb_versioning_Environment_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_versioning_Environment_proto_rawDescData)
	})
	return file_modeldb_versioning_Environment_proto_rawDescData
}

var file_modeldb_versioning_Environment_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_modeldb_versioning_Environment_proto_goTypes = []interface{}{
	(*EnvironmentBlob)(nil),                  // 0: ai.verta.modeldb.versioning.EnvironmentBlob
	(*EnvironmentVariablesBlob)(nil),         // 1: ai.verta.modeldb.versioning.EnvironmentVariablesBlob
	(*VersionEnvironmentBlob)(nil),           // 2: ai.verta.modeldb.versioning.VersionEnvironmentBlob
	(*PythonRequirementEnvironmentBlob)(nil), // 3: ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob
	(*PythonEnvironmentBlob)(nil),            // 4: ai.verta.modeldb.versioning.PythonEnvironmentBlob
	(*DockerEnvironmentBlob)(nil),            // 5: ai.verta.modeldb.versioning.DockerEnvironmentBlob
	(*EnvironmentDiff)(nil),                  // 6: ai.verta.modeldb.versioning.EnvironmentDiff
	(*CommandLineEnvironmentDiff)(nil),       // 7: ai.verta.modeldb.versioning.CommandLineEnvironmentDiff
	(*EnvironmentVariablesDiff)(nil),         // 8: ai.verta.modeldb.versioning.EnvironmentVariablesDiff
	(*PythonRequirementEnvironmentDiff)(nil), // 9: ai.verta.modeldb.versioning.PythonRequirementEnvironmentDiff
	(*VersionEnvironmentDiff)(nil),           // 10: ai.verta.modeldb.versioning.VersionEnvironmentDiff
	(*PythonEnvironmentDiff)(nil),            // 11: ai.verta.modeldb.versioning.PythonEnvironmentDiff
	(*DockerEnvironmentDiff)(nil),            // 12: ai.verta.modeldb.versioning.DockerEnvironmentDiff
	(DiffStatusEnum_DiffStatus)(0),           // 13: ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
}
var file_modeldb_versioning_Environment_proto_depIdxs = []int32{
	4,  // 0: ai.verta.modeldb.versioning.EnvironmentBlob.python:type_name -> ai.verta.modeldb.versioning.PythonEnvironmentBlob
	5,  // 1: ai.verta.modeldb.versioning.EnvironmentBlob.docker:type_name -> ai.verta.modeldb.versioning.DockerEnvironmentBlob
	1,  // 2: ai.verta.modeldb.versioning.EnvironmentBlob.environment_variables:type_name -> ai.verta.modeldb.versioning.EnvironmentVariablesBlob
	2,  // 3: ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob.version:type_name -> ai.verta.modeldb.versioning.VersionEnvironmentBlob
	2,  // 4: ai.verta.modeldb.versioning.PythonEnvironmentBlob.version:type_name -> ai.verta.modeldb.versioning.VersionEnvironmentBlob
	3,  // 5: ai.verta.modeldb.versioning.PythonEnvironmentBlob.requirements:type_name -> ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob
	3,  // 6: ai.verta.modeldb.versioning.PythonEnvironmentBlob.constraints:type_name -> ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob
	11, // 7: ai.verta.modeldb.versioning.EnvironmentDiff.python:type_name -> ai.verta.modeldb.versioning.PythonEnvironmentDiff
	12, // 8: ai.verta.modeldb.versioning.EnvironmentDiff.docker:type_name -> ai.verta.modeldb.versioning.DockerEnvironmentDiff
	8,  // 9: ai.verta.modeldb.versioning.EnvironmentDiff.environment_variables:type_name -> ai.verta.modeldb.versioning.EnvironmentVariablesDiff
	7,  // 10: ai.verta.modeldb.versioning.EnvironmentDiff.command_line:type_name -> ai.verta.modeldb.versioning.CommandLineEnvironmentDiff
	13, // 11: ai.verta.modeldb.versioning.CommandLineEnvironmentDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	13, // 12: ai.verta.modeldb.versioning.EnvironmentVariablesDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	1,  // 13: ai.verta.modeldb.versioning.EnvironmentVariablesDiff.A:type_name -> ai.verta.modeldb.versioning.EnvironmentVariablesBlob
	1,  // 14: ai.verta.modeldb.versioning.EnvironmentVariablesDiff.B:type_name -> ai.verta.modeldb.versioning.EnvironmentVariablesBlob
	1,  // 15: ai.verta.modeldb.versioning.EnvironmentVariablesDiff.C:type_name -> ai.verta.modeldb.versioning.EnvironmentVariablesBlob
	13, // 16: ai.verta.modeldb.versioning.PythonRequirementEnvironmentDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	3,  // 17: ai.verta.modeldb.versioning.PythonRequirementEnvironmentDiff.A:type_name -> ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob
	3,  // 18: ai.verta.modeldb.versioning.PythonRequirementEnvironmentDiff.B:type_name -> ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob
	3,  // 19: ai.verta.modeldb.versioning.PythonRequirementEnvironmentDiff.C:type_name -> ai.verta.modeldb.versioning.PythonRequirementEnvironmentBlob
	13, // 20: ai.verta.modeldb.versioning.VersionEnvironmentDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	2,  // 21: ai.verta.modeldb.versioning.VersionEnvironmentDiff.A:type_name -> ai.verta.modeldb.versioning.VersionEnvironmentBlob
	2,  // 22: ai.verta.modeldb.versioning.VersionEnvironmentDiff.B:type_name -> ai.verta.modeldb.versioning.VersionEnvironmentBlob
	2,  // 23: ai.verta.modeldb.versioning.VersionEnvironmentDiff.C:type_name -> ai.verta.modeldb.versioning.VersionEnvironmentBlob
	10, // 24: ai.verta.modeldb.versioning.PythonEnvironmentDiff.version:type_name -> ai.verta.modeldb.versioning.VersionEnvironmentDiff
	9,  // 25: ai.verta.modeldb.versioning.PythonEnvironmentDiff.requirements:type_name -> ai.verta.modeldb.versioning.PythonRequirementEnvironmentDiff
	9,  // 26: ai.verta.modeldb.versioning.PythonEnvironmentDiff.constraints:type_name -> ai.verta.modeldb.versioning.PythonRequirementEnvironmentDiff
	13, // 27: ai.verta.modeldb.versioning.DockerEnvironmentDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	5,  // 28: ai.verta.modeldb.versioning.DockerEnvironmentDiff.A:type_name -> ai.verta.modeldb.versioning.DockerEnvironmentBlob
	5,  // 29: ai.verta.modeldb.versioning.DockerEnvironmentDiff.B:type_name -> ai.verta.modeldb.versioning.DockerEnvironmentBlob
	5,  // 30: ai.verta.modeldb.versioning.DockerEnvironmentDiff.C:type_name -> ai.verta.modeldb.versioning.DockerEnvironmentBlob
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_modeldb_versioning_Environment_proto_init() }
func file_modeldb_versioning_Environment_proto_init() {
	if File_modeldb_versioning_Environment_proto != nil {
		return
	}
	file_modeldb_versioning_Enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_versioning_Environment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentVariablesBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionEnvironmentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonRequirementEnvironmentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonEnvironmentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerEnvironmentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLineEnvironmentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentVariablesDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonRequirementEnvironmentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionEnvironmentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonEnvironmentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Environment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerEnvironmentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_modeldb_versioning_Environment_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EnvironmentBlob_Python)(nil),
		(*EnvironmentBlob_Docker)(nil),
	}
	file_modeldb_versioning_Environment_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*EnvironmentDiff_Python)(nil),
		(*EnvironmentDiff_Docker)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_versioning_Environment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_modeldb_versioning_Environment_proto_goTypes,
		DependencyIndexes: file_modeldb_versioning_Environment_proto_depIdxs,
		MessageInfos:      file_modeldb_versioning_Environment_proto_msgTypes,
	}.Build()
	File_modeldb_versioning_Environment_proto = out.File
	file_modeldb_versioning_Environment_proto_rawDesc = nil
	file_modeldb_versioning_Environment_proto_goTypes = nil
	file_modeldb_versioning_Environment_proto_depIdxs = nil
}
