// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/versioning/Dataset.proto

package versioning

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DatasetBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*DatasetBlob_S3
	//	*DatasetBlob_Path
	//	*DatasetBlob_Query
	Content isDatasetBlob_Content `protobuf_oneof:"content"`
}

func (x *DatasetBlob) Reset() {
	*x = DatasetBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetBlob) ProtoMessage() {}

func (x *DatasetBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetBlob.ProtoReflect.Descriptor instead.
func (*DatasetBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{0}
}

func (m *DatasetBlob) GetContent() isDatasetBlob_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *DatasetBlob) GetS3() *S3DatasetBlob {
	if x, ok := x.GetContent().(*DatasetBlob_S3); ok {
		return x.S3
	}
	return nil
}

func (x *DatasetBlob) GetPath() *PathDatasetBlob {
	if x, ok := x.GetContent().(*DatasetBlob_Path); ok {
		return x.Path
	}
	return nil
}

func (x *DatasetBlob) GetQuery() *QueryDatasetBlob {
	if x, ok := x.GetContent().(*DatasetBlob_Query); ok {
		return x.Query
	}
	return nil
}

type isDatasetBlob_Content interface {
	isDatasetBlob_Content()
}

type DatasetBlob_S3 struct {
	S3 *S3DatasetBlob `protobuf:"bytes,1,opt,name=s3,proto3,oneof"` // Blob of the type S3 dataset
}

type DatasetBlob_Path struct {
	Path *PathDatasetBlob `protobuf:"bytes,2,opt,name=path,proto3,oneof"` // Blob of the type path dataset
}

type DatasetBlob_Query struct {
	Query *QueryDatasetBlob `protobuf:"bytes,3,opt,name=query,proto3,oneof"` // Blob of the type Query dataset
}

func (*DatasetBlob_S3) isDatasetBlob_Content() {}

func (*DatasetBlob_Path) isDatasetBlob_Content() {}

func (*DatasetBlob_Query) isDatasetBlob_Content() {}

type QueryDatasetBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*QueryDatasetComponentBlob `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *QueryDatasetBlob) Reset() {
	*x = QueryDatasetBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDatasetBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDatasetBlob) ProtoMessage() {}

func (x *QueryDatasetBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDatasetBlob.ProtoReflect.Descriptor instead.
func (*QueryDatasetBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{1}
}

func (x *QueryDatasetBlob) GetComponents() []*QueryDatasetComponentBlob {
	if x != nil {
		return x.Components
	}
	return nil
}

type QueryDatasetComponentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// string query_template = 2;
	// repeated QueryParameter query_parameters = 3;
	DataSourceUri      string `protobuf:"bytes,4,opt,name=data_source_uri,json=dataSourceUri,proto3" json:"data_source_uri,omitempty"`
	ExecutionTimestamp uint64 `protobuf:"varint,5,opt,name=execution_timestamp,json=executionTimestamp,proto3" json:"execution_timestamp,omitempty"`
	NumRecords         uint64 `protobuf:"varint,6,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
}

func (x *QueryDatasetComponentBlob) Reset() {
	*x = QueryDatasetComponentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDatasetComponentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDatasetComponentBlob) ProtoMessage() {}

func (x *QueryDatasetComponentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDatasetComponentBlob.ProtoReflect.Descriptor instead.
func (*QueryDatasetComponentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{2}
}

func (x *QueryDatasetComponentBlob) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryDatasetComponentBlob) GetDataSourceUri() string {
	if x != nil {
		return x.DataSourceUri
	}
	return ""
}

func (x *QueryDatasetComponentBlob) GetExecutionTimestamp() uint64 {
	if x != nil {
		return x.ExecutionTimestamp
	}
	return 0
}

func (x *QueryDatasetComponentBlob) GetNumRecords() uint64 {
	if x != nil {
		return x.NumRecords
	}
	return 0
}

type PathDatasetComponentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Full path to the file
	Size                  uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	LastModifiedAtSource  uint64 `protobuf:"varint,3,opt,name=last_modified_at_source,json=lastModifiedAtSource,proto3" json:"last_modified_at_source,omitempty"`
	Sha256                string `protobuf:"bytes,4,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Md5                   string `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	InternalVersionedPath string `protobuf:"bytes,6,opt,name=internal_versioned_path,json=internalVersionedPath,proto3" json:"internal_versioned_path,omitempty"`
	BasePath              string `protobuf:"bytes,7,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
}

func (x *PathDatasetComponentBlob) Reset() {
	*x = PathDatasetComponentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathDatasetComponentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathDatasetComponentBlob) ProtoMessage() {}

func (x *PathDatasetComponentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathDatasetComponentBlob.ProtoReflect.Descriptor instead.
func (*PathDatasetComponentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{3}
}

func (x *PathDatasetComponentBlob) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PathDatasetComponentBlob) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PathDatasetComponentBlob) GetLastModifiedAtSource() uint64 {
	if x != nil {
		return x.LastModifiedAtSource
	}
	return 0
}

func (x *PathDatasetComponentBlob) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *PathDatasetComponentBlob) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *PathDatasetComponentBlob) GetInternalVersionedPath() string {
	if x != nil {
		return x.InternalVersionedPath
	}
	return ""
}

func (x *PathDatasetComponentBlob) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

type PathDatasetBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*PathDatasetComponentBlob `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *PathDatasetBlob) Reset() {
	*x = PathDatasetBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathDatasetBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathDatasetBlob) ProtoMessage() {}

func (x *PathDatasetBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathDatasetBlob.ProtoReflect.Descriptor instead.
func (*PathDatasetBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{4}
}

func (x *PathDatasetBlob) GetComponents() []*PathDatasetComponentBlob {
	if x != nil {
		return x.Components
	}
	return nil
}

type S3DatasetComponentBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        *PathDatasetComponentBlob `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	S3VersionId string                    `protobuf:"bytes,2,opt,name=s3_version_id,json=s3VersionId,proto3" json:"s3_version_id,omitempty"` //if s3 bucket versioning is enabled, this captures the version id
}

func (x *S3DatasetComponentBlob) Reset() {
	*x = S3DatasetComponentBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3DatasetComponentBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3DatasetComponentBlob) ProtoMessage() {}

func (x *S3DatasetComponentBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3DatasetComponentBlob.ProtoReflect.Descriptor instead.
func (*S3DatasetComponentBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{5}
}

func (x *S3DatasetComponentBlob) GetPath() *PathDatasetComponentBlob {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *S3DatasetComponentBlob) GetS3VersionId() string {
	if x != nil {
		return x.S3VersionId
	}
	return ""
}

type S3DatasetBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*S3DatasetComponentBlob `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *S3DatasetBlob) Reset() {
	*x = S3DatasetBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3DatasetBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3DatasetBlob) ProtoMessage() {}

func (x *S3DatasetBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3DatasetBlob.ProtoReflect.Descriptor instead.
func (*S3DatasetBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{6}
}

func (x *S3DatasetBlob) GetComponents() []*S3DatasetComponentBlob {
	if x != nil {
		return x.Components
	}
	return nil
}

type DatasetDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*DatasetDiff_S3
	//	*DatasetDiff_Path
	//	*DatasetDiff_Query
	Content isDatasetDiff_Content `protobuf_oneof:"content"`
}

func (x *DatasetDiff) Reset() {
	*x = DatasetDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetDiff) ProtoMessage() {}

func (x *DatasetDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetDiff.ProtoReflect.Descriptor instead.
func (*DatasetDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{7}
}

func (m *DatasetDiff) GetContent() isDatasetDiff_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *DatasetDiff) GetS3() *S3DatasetDiff {
	if x, ok := x.GetContent().(*DatasetDiff_S3); ok {
		return x.S3
	}
	return nil
}

func (x *DatasetDiff) GetPath() *PathDatasetDiff {
	if x, ok := x.GetContent().(*DatasetDiff_Path); ok {
		return x.Path
	}
	return nil
}

func (x *DatasetDiff) GetQuery() *QueryDatasetDiff {
	if x, ok := x.GetContent().(*DatasetDiff_Query); ok {
		return x.Query
	}
	return nil
}

type isDatasetDiff_Content interface {
	isDatasetDiff_Content()
}

type DatasetDiff_S3 struct {
	S3 *S3DatasetDiff `protobuf:"bytes,1,opt,name=s3,proto3,oneof"`
}

type DatasetDiff_Path struct {
	Path *PathDatasetDiff `protobuf:"bytes,2,opt,name=path,proto3,oneof"`
}

type DatasetDiff_Query struct {
	Query *QueryDatasetDiff `protobuf:"bytes,3,opt,name=query,proto3,oneof"`
}

func (*DatasetDiff_S3) isDatasetDiff_Content() {}

func (*DatasetDiff_Path) isDatasetDiff_Content() {}

func (*DatasetDiff_Query) isDatasetDiff_Content() {}

type QueryDatasetComponentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *QueryDatasetComponentBlob `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *QueryDatasetComponentBlob `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *QueryDatasetComponentBlob `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *QueryDatasetComponentDiff) Reset() {
	*x = QueryDatasetComponentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDatasetComponentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDatasetComponentDiff) ProtoMessage() {}

func (x *QueryDatasetComponentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDatasetComponentDiff.ProtoReflect.Descriptor instead.
func (*QueryDatasetComponentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{8}
}

func (x *QueryDatasetComponentDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *QueryDatasetComponentDiff) GetA() *QueryDatasetComponentBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *QueryDatasetComponentDiff) GetB() *QueryDatasetComponentBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *QueryDatasetComponentDiff) GetC() *QueryDatasetComponentBlob {
	if x != nil {
		return x.C
	}
	return nil
}

type QueryDatasetDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*QueryDatasetComponentDiff `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *QueryDatasetDiff) Reset() {
	*x = QueryDatasetDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDatasetDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDatasetDiff) ProtoMessage() {}

func (x *QueryDatasetDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDatasetDiff.ProtoReflect.Descriptor instead.
func (*QueryDatasetDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{9}
}

func (x *QueryDatasetDiff) GetComponents() []*QueryDatasetComponentDiff {
	if x != nil {
		return x.Components
	}
	return nil
}

type PathDatasetComponentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *PathDatasetComponentBlob `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *PathDatasetComponentBlob `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *PathDatasetComponentBlob `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *PathDatasetComponentDiff) Reset() {
	*x = PathDatasetComponentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathDatasetComponentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathDatasetComponentDiff) ProtoMessage() {}

func (x *PathDatasetComponentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathDatasetComponentDiff.ProtoReflect.Descriptor instead.
func (*PathDatasetComponentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{10}
}

func (x *PathDatasetComponentDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *PathDatasetComponentDiff) GetA() *PathDatasetComponentBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *PathDatasetComponentDiff) GetB() *PathDatasetComponentBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *PathDatasetComponentDiff) GetC() *PathDatasetComponentBlob {
	if x != nil {
		return x.C
	}
	return nil
}

type PathDatasetDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*PathDatasetComponentDiff `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *PathDatasetDiff) Reset() {
	*x = PathDatasetDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathDatasetDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathDatasetDiff) ProtoMessage() {}

func (x *PathDatasetDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathDatasetDiff.ProtoReflect.Descriptor instead.
func (*PathDatasetDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{11}
}

func (x *PathDatasetDiff) GetComponents() []*PathDatasetComponentDiff {
	if x != nil {
		return x.Components
	}
	return nil
}

type S3DatasetComponentDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus `protobuf:"varint,3,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *S3DatasetComponentBlob   `protobuf:"bytes,4,opt,name=A,proto3" json:"A,omitempty"`
	B      *S3DatasetComponentBlob   `protobuf:"bytes,5,opt,name=B,proto3" json:"B,omitempty"`
	C      *S3DatasetComponentBlob   `protobuf:"bytes,6,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *S3DatasetComponentDiff) Reset() {
	*x = S3DatasetComponentDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3DatasetComponentDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3DatasetComponentDiff) ProtoMessage() {}

func (x *S3DatasetComponentDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3DatasetComponentDiff.ProtoReflect.Descriptor instead.
func (*S3DatasetComponentDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{12}
}

func (x *S3DatasetComponentDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *S3DatasetComponentDiff) GetA() *S3DatasetComponentBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *S3DatasetComponentDiff) GetB() *S3DatasetComponentBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *S3DatasetComponentDiff) GetC() *S3DatasetComponentBlob {
	if x != nil {
		return x.C
	}
	return nil
}

type S3DatasetDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*S3DatasetComponentDiff `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *S3DatasetDiff) Reset() {
	*x = S3DatasetDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Dataset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3DatasetDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3DatasetDiff) ProtoMessage() {}

func (x *S3DatasetDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Dataset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3DatasetDiff.ProtoReflect.Descriptor instead.
func (*S3DatasetDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Dataset_proto_rawDescGZIP(), []int{13}
}

func (x *S3DatasetDiff) GetComponents() []*S3DatasetComponentDiff {
	if x != nil {
		return x.Components
	}
	return nil
}

var File_modeldb_versioning_Dataset_proto protoreflect.FileDescriptor

var file_modeldb_versioning_Dataset_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1b, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a,
	0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe1, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x3c, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x33, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x42, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x45, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48,
	0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xab, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x13, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xf8, 0x01,
	0x0a, 0x18, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x64, 0x35, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x68, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x55, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x49, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x33, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0d,
	0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x53, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x3c, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x33, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33,
	0x12, 0x42, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x41, 0x12, 0x44, 0x0a, 0x01, 0x42, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x42,
	0x12, 0x44, 0x0a, 0x01, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x01, 0x43, 0x22, 0x6a, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x01, 0x41, 0x12, 0x43, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x42, 0x12, 0x43, 0x0a, 0x01, 0x43, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x43, 0x22, 0x68,
	0x0a, 0x0f, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x16, 0x53, 0x33, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x01, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x33, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x01, 0x41, 0x12, 0x41, 0x0a, 0x01, 0x42, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x42, 0x12, 0x41, 0x0a, 0x01, 0x43, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x43, 0x22, 0x64, 0x0a, 0x0d,
	0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x53, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x33, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x4d, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modeldb_versioning_Dataset_proto_rawDescOnce sync.Once
	file_modeldb_versioning_Dataset_proto_rawDescData = file_modeldb_versioning_Dataset_proto_rawDesc
)

func file_modeldb_versioning_Dataset_proto_rawDescGZIP() []byte {
	file_modeldb_versioning_Dataset_proto_rawDescOnce.Do(func() {
		file_modeldb_versioning_Dataset_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_versioning_Dataset_proto_rawDescData)
	})
	return file_modeldb_versioning_Dataset_proto_rawDescData
}

var file_modeldb_versioning_Dataset_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_modeldb_versioning_Dataset_proto_goTypes = []interface{}{
	(*DatasetBlob)(nil),               // 0: ai.verta.modeldb.versioning.DatasetBlob
	(*QueryDatasetBlob)(nil),          // 1: ai.verta.modeldb.versioning.QueryDatasetBlob
	(*QueryDatasetComponentBlob)(nil), // 2: ai.verta.modeldb.versioning.QueryDatasetComponentBlob
	(*PathDatasetComponentBlob)(nil),  // 3: ai.verta.modeldb.versioning.PathDatasetComponentBlob
	(*PathDatasetBlob)(nil),           // 4: ai.verta.modeldb.versioning.PathDatasetBlob
	(*S3DatasetComponentBlob)(nil),    // 5: ai.verta.modeldb.versioning.S3DatasetComponentBlob
	(*S3DatasetBlob)(nil),             // 6: ai.verta.modeldb.versioning.S3DatasetBlob
	(*DatasetDiff)(nil),               // 7: ai.verta.modeldb.versioning.DatasetDiff
	(*QueryDatasetComponentDiff)(nil), // 8: ai.verta.modeldb.versioning.QueryDatasetComponentDiff
	(*QueryDatasetDiff)(nil),          // 9: ai.verta.modeldb.versioning.QueryDatasetDiff
	(*PathDatasetComponentDiff)(nil),  // 10: ai.verta.modeldb.versioning.PathDatasetComponentDiff
	(*PathDatasetDiff)(nil),           // 11: ai.verta.modeldb.versioning.PathDatasetDiff
	(*S3DatasetComponentDiff)(nil),    // 12: ai.verta.modeldb.versioning.S3DatasetComponentDiff
	(*S3DatasetDiff)(nil),             // 13: ai.verta.modeldb.versioning.S3DatasetDiff
	(DiffStatusEnum_DiffStatus)(0),    // 14: ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
}
var file_modeldb_versioning_Dataset_proto_depIdxs = []int32{
	6,  // 0: ai.verta.modeldb.versioning.DatasetBlob.s3:type_name -> ai.verta.modeldb.versioning.S3DatasetBlob
	4,  // 1: ai.verta.modeldb.versioning.DatasetBlob.path:type_name -> ai.verta.modeldb.versioning.PathDatasetBlob
	1,  // 2: ai.verta.modeldb.versioning.DatasetBlob.query:type_name -> ai.verta.modeldb.versioning.QueryDatasetBlob
	2,  // 3: ai.verta.modeldb.versioning.QueryDatasetBlob.components:type_name -> ai.verta.modeldb.versioning.QueryDatasetComponentBlob
	3,  // 4: ai.verta.modeldb.versioning.PathDatasetBlob.components:type_name -> ai.verta.modeldb.versioning.PathDatasetComponentBlob
	3,  // 5: ai.verta.modeldb.versioning.S3DatasetComponentBlob.path:type_name -> ai.verta.modeldb.versioning.PathDatasetComponentBlob
	5,  // 6: ai.verta.modeldb.versioning.S3DatasetBlob.components:type_name -> ai.verta.modeldb.versioning.S3DatasetComponentBlob
	13, // 7: ai.verta.modeldb.versioning.DatasetDiff.s3:type_name -> ai.verta.modeldb.versioning.S3DatasetDiff
	11, // 8: ai.verta.modeldb.versioning.DatasetDiff.path:type_name -> ai.verta.modeldb.versioning.PathDatasetDiff
	9,  // 9: ai.verta.modeldb.versioning.DatasetDiff.query:type_name -> ai.verta.modeldb.versioning.QueryDatasetDiff
	14, // 10: ai.verta.modeldb.versioning.QueryDatasetComponentDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	2,  // 11: ai.verta.modeldb.versioning.QueryDatasetComponentDiff.A:type_name -> ai.verta.modeldb.versioning.QueryDatasetComponentBlob
	2,  // 12: ai.verta.modeldb.versioning.QueryDatasetComponentDiff.B:type_name -> ai.verta.modeldb.versioning.QueryDatasetComponentBlob
	2,  // 13: ai.verta.modeldb.versioning.QueryDatasetComponentDiff.C:type_name -> ai.verta.modeldb.versioning.QueryDatasetComponentBlob
	8,  // 14: ai.verta.modeldb.versioning.QueryDatasetDiff.components:type_name -> ai.verta.modeldb.versioning.QueryDatasetComponentDiff
	14, // 15: ai.verta.modeldb.versioning.PathDatasetComponentDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	3,  // 16: ai.verta.modeldb.versioning.PathDatasetComponentDiff.A:type_name -> ai.verta.modeldb.versioning.PathDatasetComponentBlob
	3,  // 17: ai.verta.modeldb.versioning.PathDatasetComponentDiff.B:type_name -> ai.verta.modeldb.versioning.PathDatasetComponentBlob
	3,  // 18: ai.verta.modeldb.versioning.PathDatasetComponentDiff.C:type_name -> ai.verta.modeldb.versioning.PathDatasetComponentBlob
	10, // 19: ai.verta.modeldb.versioning.PathDatasetDiff.components:type_name -> ai.verta.modeldb.versioning.PathDatasetComponentDiff
	14, // 20: ai.verta.modeldb.versioning.S3DatasetComponentDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	5,  // 21: ai.verta.modeldb.versioning.S3DatasetComponentDiff.A:type_name -> ai.verta.modeldb.versioning.S3DatasetComponentBlob
	5,  // 22: ai.verta.modeldb.versioning.S3DatasetComponentDiff.B:type_name -> ai.verta.modeldb.versioning.S3DatasetComponentBlob
	5,  // 23: ai.verta.modeldb.versioning.S3DatasetComponentDiff.C:type_name -> ai.verta.modeldb.versioning.S3DatasetComponentBlob
	12, // 24: ai.verta.modeldb.versioning.S3DatasetDiff.components:type_name -> ai.verta.modeldb.versioning.S3DatasetComponentDiff
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_modeldb_versioning_Dataset_proto_init() }
func file_modeldb_versioning_Dataset_proto_init() {
	if File_modeldb_versioning_Dataset_proto != nil {
		return
	}
	file_modeldb_versioning_Enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_versioning_Dataset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDatasetBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDatasetComponentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathDatasetComponentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathDatasetBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3DatasetComponentBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3DatasetBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDatasetComponentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDatasetDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathDatasetComponentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathDatasetDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3DatasetComponentDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Dataset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3DatasetDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_modeldb_versioning_Dataset_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DatasetBlob_S3)(nil),
		(*DatasetBlob_Path)(nil),
		(*DatasetBlob_Query)(nil),
	}
	file_modeldb_versioning_Dataset_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DatasetDiff_S3)(nil),
		(*DatasetDiff_Path)(nil),
		(*DatasetDiff_Query)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_versioning_Dataset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_modeldb_versioning_Dataset_proto_goTypes,
		DependencyIndexes: file_modeldb_versioning_Dataset_proto_depIdxs,
		MessageInfos:      file_modeldb_versioning_Dataset_proto_msgTypes,
	}.Build()
	File_modeldb_versioning_Dataset_proto = out.File
	file_modeldb_versioning_Dataset_proto_rawDesc = nil
	file_modeldb_versioning_Dataset_proto_goTypes = nil
	file_modeldb_versioning_Dataset_proto_depIdxs = nil
}
