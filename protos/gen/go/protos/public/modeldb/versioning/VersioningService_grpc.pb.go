// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package versioning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VersioningServiceClient is the client API for VersioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersioningServiceClient interface {
	// CRUD for repositories
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesRequest_Response, error)
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryRequest_Response, error)
	CreateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error)
	UpdateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error)
	DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryRequest_Response, error)
	// CRUD for commits
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsRequest_Response, error)
	GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitRequest_Response, error)
	CreateCommit(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CreateCommitRequest_Response, error)
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitRequest_Response, error)
	// Getting blobs and folders in a commit
	ListCommitBlobs(ctx context.Context, in *ListCommitBlobsRequest, opts ...grpc.CallOption) (*ListCommitBlobsRequest_Response, error)
	GetCommitComponent(ctx context.Context, in *GetCommitComponentRequest, opts ...grpc.CallOption) (*GetCommitComponentRequest_Response, error)
	// Git-like operations
	ComputeRepositoryDiff(ctx context.Context, in *ComputeRepositoryDiffRequest, opts ...grpc.CallOption) (*ComputeRepositoryDiffRequest_Response, error)
	// CRUD for Branches
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesRequest_Response, error)
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchRequest_Response, error)
	// Unlike tags, branches can be updated. The API must verify that the new commit is a child of the current branch.
	SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*SetBranchRequest_Response, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchRequest_Response, error)
	ListCommitsLog(ctx context.Context, in *ListCommitsLogRequest, opts ...grpc.CallOption) (*ListCommitsLogRequest_Response, error)
	MergeRepositoryCommits(ctx context.Context, in *MergeRepositoryCommitsRequest, opts ...grpc.CallOption) (*MergeRepositoryCommitsRequest_Response, error)
	RevertRepositoryCommits(ctx context.Context, in *RevertRepositoryCommitsRequest, opts ...grpc.CallOption) (*RevertRepositoryCommitsRequest_Response, error)
	// CRUD for tags
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagRequest_Response, error)
	// Can't update a tag. If someone tries to set one that exists, we should error.
	SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagRequest_Response, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error)
	FindRepositories(ctx context.Context, in *FindRepositories, opts ...grpc.CallOption) (*FindRepositories_Response, error)
	FindRepositoriesBlobs(ctx context.Context, in *FindRepositoriesBlobs, opts ...grpc.CallOption) (*FindRepositoriesBlobs_Response, error)
	GetUrlForBlobVersioned(ctx context.Context, in *GetUrlForBlobVersioned, opts ...grpc.CallOption) (*GetUrlForBlobVersioned_Response, error)
	CommitVersionedBlobArtifactPart(ctx context.Context, in *CommitVersionedBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedBlobArtifactPart_Response, error)
	GetCommittedVersionedBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedBlobArtifactParts_Response, error)
	CommitMultipartVersionedBlobArtifact(ctx context.Context, in *CommitMultipartVersionedBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedBlobArtifact_Response, error)
}

type versioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersioningServiceClient(cc grpc.ClientConnInterface) VersioningServiceClient {
	return &versioningServiceClient{cc}
}

func (c *versioningServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesRequest_Response, error) {
	out := new(ListRepositoriesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryRequest_Response, error) {
	out := new(GetRepositoryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CreateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error) {
	out := new(SetRepository_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) UpdateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error) {
	out := new(SetRepository_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryRequest_Response, error) {
	out := new(DeleteRepositoryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsRequest_Response, error) {
	out := new(ListCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitRequest_Response, error) {
	out := new(GetCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CreateCommit(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CreateCommitRequest_Response, error) {
	out := new(CreateCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/CreateCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitRequest_Response, error) {
	out := new(DeleteCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommitBlobs(ctx context.Context, in *ListCommitBlobsRequest, opts ...grpc.CallOption) (*ListCommitBlobsRequest_Response, error) {
	out := new(ListCommitBlobsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommitComponent(ctx context.Context, in *GetCommitComponentRequest, opts ...grpc.CallOption) (*GetCommitComponentRequest_Response, error) {
	out := new(GetCommitComponentRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ComputeRepositoryDiff(ctx context.Context, in *ComputeRepositoryDiffRequest, opts ...grpc.CallOption) (*ComputeRepositoryDiffRequest_Response, error) {
	out := new(ComputeRepositoryDiffRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesRequest_Response, error) {
	out := new(ListBranchesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchRequest_Response, error) {
	out := new(GetBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*SetBranchRequest_Response, error) {
	out := new(SetBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/SetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchRequest_Response, error) {
	out := new(DeleteBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommitsLog(ctx context.Context, in *ListCommitsLogRequest, opts ...grpc.CallOption) (*ListCommitsLogRequest_Response, error) {
	out := new(ListCommitsLogRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) MergeRepositoryCommits(ctx context.Context, in *MergeRepositoryCommitsRequest, opts ...grpc.CallOption) (*MergeRepositoryCommitsRequest_Response, error) {
	out := new(MergeRepositoryCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) RevertRepositoryCommits(ctx context.Context, in *RevertRepositoryCommitsRequest, opts ...grpc.CallOption) (*RevertRepositoryCommitsRequest_Response, error) {
	out := new(RevertRepositoryCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error) {
	out := new(ListTagsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagRequest_Response, error) {
	out := new(GetTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagRequest_Response, error) {
	out := new(SetTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/SetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error) {
	out := new(DeleteTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) FindRepositories(ctx context.Context, in *FindRepositories, opts ...grpc.CallOption) (*FindRepositories_Response, error) {
	out := new(FindRepositories_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/findRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) FindRepositoriesBlobs(ctx context.Context, in *FindRepositoriesBlobs, opts ...grpc.CallOption) (*FindRepositoriesBlobs_Response, error) {
	out := new(FindRepositoriesBlobs_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/findRepositoriesBlobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetUrlForBlobVersioned(ctx context.Context, in *GetUrlForBlobVersioned, opts ...grpc.CallOption) (*GetUrlForBlobVersioned_Response, error) {
	out := new(GetUrlForBlobVersioned_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/getUrlForBlobVersioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CommitVersionedBlobArtifactPart(ctx context.Context, in *CommitVersionedBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedBlobArtifactPart_Response, error) {
	out := new(CommitVersionedBlobArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/commitVersionedBlobArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommittedVersionedBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedBlobArtifactParts_Response, error) {
	out := new(GetCommittedVersionedBlobArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/getCommittedVersionedBlobArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CommitMultipartVersionedBlobArtifact(ctx context.Context, in *CommitMultipartVersionedBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedBlobArtifact_Response, error) {
	out := new(CommitMultipartVersionedBlobArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/commitMultipartVersionedBlobArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersioningServiceServer is the server API for VersioningService service.
type VersioningServiceServer interface {
	// CRUD for repositories
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesRequest_Response, error)
	GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryRequest_Response, error)
	CreateRepository(context.Context, *SetRepository) (*SetRepository_Response, error)
	UpdateRepository(context.Context, *SetRepository) (*SetRepository_Response, error)
	DeleteRepository(context.Context, *DeleteRepositoryRequest) (*DeleteRepositoryRequest_Response, error)
	// CRUD for commits
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsRequest_Response, error)
	GetCommit(context.Context, *GetCommitRequest) (*GetCommitRequest_Response, error)
	CreateCommit(context.Context, *CreateCommitRequest) (*CreateCommitRequest_Response, error)
	DeleteCommit(context.Context, *DeleteCommitRequest) (*DeleteCommitRequest_Response, error)
	// Getting blobs and folders in a commit
	ListCommitBlobs(context.Context, *ListCommitBlobsRequest) (*ListCommitBlobsRequest_Response, error)
	GetCommitComponent(context.Context, *GetCommitComponentRequest) (*GetCommitComponentRequest_Response, error)
	// Git-like operations
	ComputeRepositoryDiff(context.Context, *ComputeRepositoryDiffRequest) (*ComputeRepositoryDiffRequest_Response, error)
	// CRUD for Branches
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesRequest_Response, error)
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchRequest_Response, error)
	// Unlike tags, branches can be updated. The API must verify that the new commit is a child of the current branch.
	SetBranch(context.Context, *SetBranchRequest) (*SetBranchRequest_Response, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchRequest_Response, error)
	ListCommitsLog(context.Context, *ListCommitsLogRequest) (*ListCommitsLogRequest_Response, error)
	MergeRepositoryCommits(context.Context, *MergeRepositoryCommitsRequest) (*MergeRepositoryCommitsRequest_Response, error)
	RevertRepositoryCommits(context.Context, *RevertRepositoryCommitsRequest) (*RevertRepositoryCommitsRequest_Response, error)
	// CRUD for tags
	ListTags(context.Context, *ListTagsRequest) (*ListTagsRequest_Response, error)
	GetTag(context.Context, *GetTagRequest) (*GetTagRequest_Response, error)
	// Can't update a tag. If someone tries to set one that exists, we should error.
	SetTag(context.Context, *SetTagRequest) (*SetTagRequest_Response, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagRequest_Response, error)
	FindRepositories(context.Context, *FindRepositories) (*FindRepositories_Response, error)
	FindRepositoriesBlobs(context.Context, *FindRepositoriesBlobs) (*FindRepositoriesBlobs_Response, error)
	GetUrlForBlobVersioned(context.Context, *GetUrlForBlobVersioned) (*GetUrlForBlobVersioned_Response, error)
	CommitVersionedBlobArtifactPart(context.Context, *CommitVersionedBlobArtifactPart) (*CommitVersionedBlobArtifactPart_Response, error)
	GetCommittedVersionedBlobArtifactParts(context.Context, *GetCommittedVersionedBlobArtifactParts) (*GetCommittedVersionedBlobArtifactParts_Response, error)
	CommitMultipartVersionedBlobArtifact(context.Context, *CommitMultipartVersionedBlobArtifact) (*CommitMultipartVersionedBlobArtifact_Response, error)
}

// UnimplementedVersioningServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVersioningServiceServer struct {
}

func (*UnimplementedVersioningServiceServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (*UnimplementedVersioningServiceServer) GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) CreateRepository(context.Context, *SetRepository) (*SetRepository_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) UpdateRepository(context.Context, *SetRepository) (*SetRepository_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteRepository(context.Context, *DeleteRepositoryRequest) (*DeleteRepositoryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommit(context.Context, *GetCommitRequest) (*GetCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) CreateCommit(context.Context, *CreateCommitRequest) (*CreateCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteCommit(context.Context, *DeleteCommitRequest) (*DeleteCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommitBlobs(context.Context, *ListCommitBlobsRequest) (*ListCommitBlobsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitBlobs not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommitComponent(context.Context, *GetCommitComponentRequest) (*GetCommitComponentRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitComponent not implemented")
}
func (*UnimplementedVersioningServiceServer) ComputeRepositoryDiff(context.Context, *ComputeRepositoryDiffRequest) (*ComputeRepositoryDiffRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeRepositoryDiff not implemented")
}
func (*UnimplementedVersioningServiceServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (*UnimplementedVersioningServiceServer) GetBranch(context.Context, *GetBranchRequest) (*GetBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) SetBranch(context.Context, *SetBranchRequest) (*SetBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommitsLog(context.Context, *ListCommitsLogRequest) (*ListCommitsLogRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitsLog not implemented")
}
func (*UnimplementedVersioningServiceServer) MergeRepositoryCommits(context.Context, *MergeRepositoryCommitsRequest) (*MergeRepositoryCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeRepositoryCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) RevertRepositoryCommits(context.Context, *RevertRepositoryCommitsRequest) (*RevertRepositoryCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertRepositoryCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (*UnimplementedVersioningServiceServer) GetTag(context.Context, *GetTagRequest) (*GetTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (*UnimplementedVersioningServiceServer) SetTag(context.Context, *SetTagRequest) (*SetTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTag not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedVersioningServiceServer) FindRepositories(context.Context, *FindRepositories) (*FindRepositories_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositories not implemented")
}
func (*UnimplementedVersioningServiceServer) FindRepositoriesBlobs(context.Context, *FindRepositoriesBlobs) (*FindRepositoriesBlobs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositoriesBlobs not implemented")
}
func (*UnimplementedVersioningServiceServer) GetUrlForBlobVersioned(context.Context, *GetUrlForBlobVersioned) (*GetUrlForBlobVersioned_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForBlobVersioned not implemented")
}
func (*UnimplementedVersioningServiceServer) CommitVersionedBlobArtifactPart(context.Context, *CommitVersionedBlobArtifactPart) (*CommitVersionedBlobArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitVersionedBlobArtifactPart not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommittedVersionedBlobArtifactParts(context.Context, *GetCommittedVersionedBlobArtifactParts) (*GetCommittedVersionedBlobArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedVersionedBlobArtifactParts not implemented")
}
func (*UnimplementedVersioningServiceServer) CommitMultipartVersionedBlobArtifact(context.Context, *CommitMultipartVersionedBlobArtifact) (*CommitMultipartVersionedBlobArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartVersionedBlobArtifact not implemented")
}

func RegisterVersioningServiceServer(s *grpc.Server, srv VersioningServiceServer) {
	s.RegisterService(&_VersioningService_serviceDesc, srv)
}

func _VersioningService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CreateRepository(ctx, req.(*SetRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).UpdateRepository(ctx, req.(*SetRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteRepository(ctx, req.(*DeleteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommits(ctx, req.(*ListCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommit(ctx, req.(*GetCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CreateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CreateCommit(ctx, req.(*CreateCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommitBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommitBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommitBlobs(ctx, req.(*ListCommitBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommitComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommitComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommitComponent(ctx, req.(*GetCommitComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ComputeRepositoryDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRepositoryDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ComputeRepositoryDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ComputeRepositoryDiff(ctx, req.(*ComputeRepositoryDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_SetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).SetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/SetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).SetBranch(ctx, req.(*SetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommitsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommitsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommitsLog(ctx, req.(*ListCommitsLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_MergeRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRepositoryCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).MergeRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).MergeRepositoryCommits(ctx, req.(*MergeRepositoryCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_RevertRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertRepositoryCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).RevertRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).RevertRepositoryCommits(ctx, req.(*RevertRepositoryCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_SetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).SetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/SetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).SetTag(ctx, req.(*SetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_FindRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).FindRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/FindRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).FindRepositories(ctx, req.(*FindRepositories))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_FindRepositoriesBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositoriesBlobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).FindRepositoriesBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/FindRepositoriesBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).FindRepositoriesBlobs(ctx, req.(*FindRepositoriesBlobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetUrlForBlobVersioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForBlobVersioned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetUrlForBlobVersioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetUrlForBlobVersioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetUrlForBlobVersioned(ctx, req.(*GetUrlForBlobVersioned))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CommitVersionedBlobArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitVersionedBlobArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CommitVersionedBlobArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CommitVersionedBlobArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CommitVersionedBlobArtifactPart(ctx, req.(*CommitVersionedBlobArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommittedVersionedBlobArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedVersionedBlobArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommittedVersionedBlobArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommittedVersionedBlobArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommittedVersionedBlobArtifactParts(ctx, req.(*GetCommittedVersionedBlobArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CommitMultipartVersionedBlobArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMultipartVersionedBlobArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CommitMultipartVersionedBlobArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CommitMultipartVersionedBlobArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CommitMultipartVersionedBlobArtifact(ctx, req.(*CommitMultipartVersionedBlobArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersioningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.versioning.VersioningService",
	HandlerType: (*VersioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _VersioningService_ListRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _VersioningService_GetRepository_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _VersioningService_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _VersioningService_UpdateRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _VersioningService_DeleteRepository_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _VersioningService_ListCommits_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _VersioningService_GetCommit_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _VersioningService_CreateCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _VersioningService_DeleteCommit_Handler,
		},
		{
			MethodName: "ListCommitBlobs",
			Handler:    _VersioningService_ListCommitBlobs_Handler,
		},
		{
			MethodName: "GetCommitComponent",
			Handler:    _VersioningService_GetCommitComponent_Handler,
		},
		{
			MethodName: "ComputeRepositoryDiff",
			Handler:    _VersioningService_ComputeRepositoryDiff_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _VersioningService_ListBranches_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _VersioningService_GetBranch_Handler,
		},
		{
			MethodName: "SetBranch",
			Handler:    _VersioningService_SetBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _VersioningService_DeleteBranch_Handler,
		},
		{
			MethodName: "ListCommitsLog",
			Handler:    _VersioningService_ListCommitsLog_Handler,
		},
		{
			MethodName: "MergeRepositoryCommits",
			Handler:    _VersioningService_MergeRepositoryCommits_Handler,
		},
		{
			MethodName: "RevertRepositoryCommits",
			Handler:    _VersioningService_RevertRepositoryCommits_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _VersioningService_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _VersioningService_GetTag_Handler,
		},
		{
			MethodName: "SetTag",
			Handler:    _VersioningService_SetTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _VersioningService_DeleteTag_Handler,
		},
		{
			MethodName: "findRepositories",
			Handler:    _VersioningService_FindRepositories_Handler,
		},
		{
			MethodName: "findRepositoriesBlobs",
			Handler:    _VersioningService_FindRepositoriesBlobs_Handler,
		},
		{
			MethodName: "getUrlForBlobVersioned",
			Handler:    _VersioningService_GetUrlForBlobVersioned_Handler,
		},
		{
			MethodName: "commitVersionedBlobArtifactPart",
			Handler:    _VersioningService_CommitVersionedBlobArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedVersionedBlobArtifactParts",
			Handler:    _VersioningService_GetCommittedVersionedBlobArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartVersionedBlobArtifact",
			Handler:    _VersioningService_CommitMultipartVersionedBlobArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/versioning/VersioningService.proto",
}
