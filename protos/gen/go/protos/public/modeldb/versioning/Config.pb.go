// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/versioning/Config.proto

package versioning

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperparameterSet []*HyperparameterSetConfigBlob `protobuf:"bytes,1,rep,name=hyperparameter_set,json=hyperparameterSet,proto3" json:"hyperparameter_set,omitempty"`
	Hyperparameters   []*HyperparameterConfigBlob    `protobuf:"bytes,2,rep,name=hyperparameters,proto3" json:"hyperparameters,omitempty"`
}

func (x *ConfigBlob) Reset() {
	*x = ConfigBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigBlob) ProtoMessage() {}

func (x *ConfigBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigBlob.ProtoReflect.Descriptor instead.
func (*ConfigBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigBlob) GetHyperparameterSet() []*HyperparameterSetConfigBlob {
	if x != nil {
		return x.HyperparameterSet
	}
	return nil
}

func (x *ConfigBlob) GetHyperparameters() []*HyperparameterConfigBlob {
	if x != nil {
		return x.Hyperparameters
	}
	return nil
}

type HyperparameterConfigBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *HyperparameterValuesConfigBlob `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HyperparameterConfigBlob) Reset() {
	*x = HyperparameterConfigBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparameterConfigBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparameterConfigBlob) ProtoMessage() {}

func (x *HyperparameterConfigBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparameterConfigBlob.ProtoReflect.Descriptor instead.
func (*HyperparameterConfigBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{1}
}

func (x *HyperparameterConfigBlob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyperparameterConfigBlob) GetValue() *HyperparameterValuesConfigBlob {
	if x != nil {
		return x.Value
	}
	return nil
}

type HyperparameterValuesConfigBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*HyperparameterValuesConfigBlob_IntValue
	//	*HyperparameterValuesConfigBlob_FloatValue
	//	*HyperparameterValuesConfigBlob_StringValue
	Value isHyperparameterValuesConfigBlob_Value `protobuf_oneof:"value"`
}

func (x *HyperparameterValuesConfigBlob) Reset() {
	*x = HyperparameterValuesConfigBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparameterValuesConfigBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparameterValuesConfigBlob) ProtoMessage() {}

func (x *HyperparameterValuesConfigBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparameterValuesConfigBlob.ProtoReflect.Descriptor instead.
func (*HyperparameterValuesConfigBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{2}
}

func (m *HyperparameterValuesConfigBlob) GetValue() isHyperparameterValuesConfigBlob_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HyperparameterValuesConfigBlob) GetIntValue() int64 {
	if x, ok := x.GetValue().(*HyperparameterValuesConfigBlob_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *HyperparameterValuesConfigBlob) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*HyperparameterValuesConfigBlob_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *HyperparameterValuesConfigBlob) GetStringValue() string {
	if x, ok := x.GetValue().(*HyperparameterValuesConfigBlob_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isHyperparameterValuesConfigBlob_Value interface {
	isHyperparameterValuesConfigBlob_Value()
}

type HyperparameterValuesConfigBlob_IntValue struct {
	IntValue int64 `protobuf:"varint,1,opt,name=int_value,json=intValue,proto3,oneof"`
}

type HyperparameterValuesConfigBlob_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type HyperparameterValuesConfigBlob_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*HyperparameterValuesConfigBlob_IntValue) isHyperparameterValuesConfigBlob_Value() {}

func (*HyperparameterValuesConfigBlob_FloatValue) isHyperparameterValuesConfigBlob_Value() {}

func (*HyperparameterValuesConfigBlob_StringValue) isHyperparameterValuesConfigBlob_Value() {}

type HyperparameterSetConfigBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*HyperparameterSetConfigBlob_Continuous
	//	*HyperparameterSetConfigBlob_Discrete
	Value isHyperparameterSetConfigBlob_Value `protobuf_oneof:"value"`
}

func (x *HyperparameterSetConfigBlob) Reset() {
	*x = HyperparameterSetConfigBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparameterSetConfigBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparameterSetConfigBlob) ProtoMessage() {}

func (x *HyperparameterSetConfigBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparameterSetConfigBlob.ProtoReflect.Descriptor instead.
func (*HyperparameterSetConfigBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{3}
}

func (x *HyperparameterSetConfigBlob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *HyperparameterSetConfigBlob) GetValue() isHyperparameterSetConfigBlob_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HyperparameterSetConfigBlob) GetContinuous() *ContinuousHyperparameterSetConfigBlob {
	if x, ok := x.GetValue().(*HyperparameterSetConfigBlob_Continuous); ok {
		return x.Continuous
	}
	return nil
}

func (x *HyperparameterSetConfigBlob) GetDiscrete() *DiscreteHyperparameterSetConfigBlob {
	if x, ok := x.GetValue().(*HyperparameterSetConfigBlob_Discrete); ok {
		return x.Discrete
	}
	return nil
}

type isHyperparameterSetConfigBlob_Value interface {
	isHyperparameterSetConfigBlob_Value()
}

type HyperparameterSetConfigBlob_Continuous struct {
	Continuous *ContinuousHyperparameterSetConfigBlob `protobuf:"bytes,2,opt,name=continuous,proto3,oneof"`
}

type HyperparameterSetConfigBlob_Discrete struct {
	Discrete *DiscreteHyperparameterSetConfigBlob `protobuf:"bytes,3,opt,name=discrete,proto3,oneof"`
}

func (*HyperparameterSetConfigBlob_Continuous) isHyperparameterSetConfigBlob_Value() {}

func (*HyperparameterSetConfigBlob_Discrete) isHyperparameterSetConfigBlob_Value() {}

type ContinuousHyperparameterSetConfigBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalBegin *HyperparameterValuesConfigBlob `protobuf:"bytes,2,opt,name=interval_begin,json=intervalBegin,proto3" json:"interval_begin,omitempty"`
	IntervalEnd   *HyperparameterValuesConfigBlob `protobuf:"bytes,3,opt,name=interval_end,json=intervalEnd,proto3" json:"interval_end,omitempty"`
	IntervalStep  *HyperparameterValuesConfigBlob `protobuf:"bytes,4,opt,name=interval_step,json=intervalStep,proto3" json:"interval_step,omitempty"`
}

func (x *ContinuousHyperparameterSetConfigBlob) Reset() {
	*x = ContinuousHyperparameterSetConfigBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousHyperparameterSetConfigBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousHyperparameterSetConfigBlob) ProtoMessage() {}

func (x *ContinuousHyperparameterSetConfigBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousHyperparameterSetConfigBlob.ProtoReflect.Descriptor instead.
func (*ContinuousHyperparameterSetConfigBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{4}
}

func (x *ContinuousHyperparameterSetConfigBlob) GetIntervalBegin() *HyperparameterValuesConfigBlob {
	if x != nil {
		return x.IntervalBegin
	}
	return nil
}

func (x *ContinuousHyperparameterSetConfigBlob) GetIntervalEnd() *HyperparameterValuesConfigBlob {
	if x != nil {
		return x.IntervalEnd
	}
	return nil
}

func (x *ContinuousHyperparameterSetConfigBlob) GetIntervalStep() *HyperparameterValuesConfigBlob {
	if x != nil {
		return x.IntervalStep
	}
	return nil
}

type DiscreteHyperparameterSetConfigBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*HyperparameterValuesConfigBlob `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DiscreteHyperparameterSetConfigBlob) Reset() {
	*x = DiscreteHyperparameterSetConfigBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscreteHyperparameterSetConfigBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteHyperparameterSetConfigBlob) ProtoMessage() {}

func (x *DiscreteHyperparameterSetConfigBlob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteHyperparameterSetConfigBlob.ProtoReflect.Descriptor instead.
func (*DiscreteHyperparameterSetConfigBlob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{5}
}

func (x *DiscreteHyperparameterSetConfigBlob) GetValues() []*HyperparameterValuesConfigBlob {
	if x != nil {
		return x.Values
	}
	return nil
}

type ConfigDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperparameterSet []*HyperparameterSetConfigDiff `protobuf:"bytes,1,rep,name=hyperparameter_set,json=hyperparameterSet,proto3" json:"hyperparameter_set,omitempty"`
	Hyperparameters   []*HyperparameterConfigDiff    `protobuf:"bytes,2,rep,name=hyperparameters,proto3" json:"hyperparameters,omitempty"`
}

func (x *ConfigDiff) Reset() {
	*x = ConfigDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDiff) ProtoMessage() {}

func (x *ConfigDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDiff.ProtoReflect.Descriptor instead.
func (*ConfigDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigDiff) GetHyperparameterSet() []*HyperparameterSetConfigDiff {
	if x != nil {
		return x.HyperparameterSet
	}
	return nil
}

func (x *ConfigDiff) GetHyperparameters() []*HyperparameterConfigDiff {
	if x != nil {
		return x.Hyperparameters
	}
	return nil
}

type HyperparameterSetConfigDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus    `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *HyperparameterSetConfigBlob `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *HyperparameterSetConfigBlob `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *HyperparameterSetConfigBlob `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *HyperparameterSetConfigDiff) Reset() {
	*x = HyperparameterSetConfigDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparameterSetConfigDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparameterSetConfigDiff) ProtoMessage() {}

func (x *HyperparameterSetConfigDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparameterSetConfigDiff.ProtoReflect.Descriptor instead.
func (*HyperparameterSetConfigDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{7}
}

func (x *HyperparameterSetConfigDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *HyperparameterSetConfigDiff) GetA() *HyperparameterSetConfigBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *HyperparameterSetConfigDiff) GetB() *HyperparameterSetConfigBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *HyperparameterSetConfigDiff) GetC() *HyperparameterSetConfigBlob {
	if x != nil {
		return x.C
	}
	return nil
}

type HyperparameterConfigDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiffStatusEnum_DiffStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	A      *HyperparameterConfigBlob `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B      *HyperparameterConfigBlob `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
	C      *HyperparameterConfigBlob `protobuf:"bytes,4,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *HyperparameterConfigDiff) Reset() {
	*x = HyperparameterConfigDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_Config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparameterConfigDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparameterConfigDiff) ProtoMessage() {}

func (x *HyperparameterConfigDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_Config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparameterConfigDiff.ProtoReflect.Descriptor instead.
func (*HyperparameterConfigDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_Config_proto_rawDescGZIP(), []int{8}
}

func (x *HyperparameterConfigDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (x *HyperparameterConfigDiff) GetA() *HyperparameterConfigBlob {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *HyperparameterConfigDiff) GetB() *HyperparameterConfigBlob {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *HyperparameterConfigDiff) GetC() *HyperparameterConfigBlob {
	if x != nil {
		return x.C
	}
	return nil
}

var File_modeldb_versioning_Config_proto protoreflect.FileDescriptor

var file_modeldb_versioning_Config_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x1e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6,
	0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x67, 0x0a,
	0x12, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x11, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80,
	0x02, 0x0a, 0x1b, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xcd, 0x02, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x62, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x5e, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x12,
	0x60, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x65,
	0x70, 0x22, 0x7a, 0x0a, 0x23, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x53, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd6, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x12, 0x67, 0x0a, 0x12,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x11, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x1b, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x41, 0x12, 0x46,
	0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x01, 0x42, 0x12, 0x46, 0x0a, 0x01, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x43, 0x22, 0xb9,
	0x02, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x01, 0x41,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x41,
	0x12, 0x43, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x01, 0x42, 0x12, 0x43, 0x0a, 0x01, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x01, 0x43, 0x42, 0x4d, 0x50, 0x01, 0x5a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61,
	0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_modeldb_versioning_Config_proto_rawDescOnce sync.Once
	file_modeldb_versioning_Config_proto_rawDescData = file_modeldb_versioning_Config_proto_rawDesc
)

func file_modeldb_versioning_Config_proto_rawDescGZIP() []byte {
	file_modeldb_versioning_Config_proto_rawDescOnce.Do(func() {
		file_modeldb_versioning_Config_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_versioning_Config_proto_rawDescData)
	})
	return file_modeldb_versioning_Config_proto_rawDescData
}

var file_modeldb_versioning_Config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_modeldb_versioning_Config_proto_goTypes = []interface{}{
	(*ConfigBlob)(nil),                            // 0: ai.verta.modeldb.versioning.ConfigBlob
	(*HyperparameterConfigBlob)(nil),              // 1: ai.verta.modeldb.versioning.HyperparameterConfigBlob
	(*HyperparameterValuesConfigBlob)(nil),        // 2: ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob
	(*HyperparameterSetConfigBlob)(nil),           // 3: ai.verta.modeldb.versioning.HyperparameterSetConfigBlob
	(*ContinuousHyperparameterSetConfigBlob)(nil), // 4: ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob
	(*DiscreteHyperparameterSetConfigBlob)(nil),   // 5: ai.verta.modeldb.versioning.DiscreteHyperparameterSetConfigBlob
	(*ConfigDiff)(nil),                            // 6: ai.verta.modeldb.versioning.ConfigDiff
	(*HyperparameterSetConfigDiff)(nil),           // 7: ai.verta.modeldb.versioning.HyperparameterSetConfigDiff
	(*HyperparameterConfigDiff)(nil),              // 8: ai.verta.modeldb.versioning.HyperparameterConfigDiff
	(DiffStatusEnum_DiffStatus)(0),                // 9: ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
}
var file_modeldb_versioning_Config_proto_depIdxs = []int32{
	3,  // 0: ai.verta.modeldb.versioning.ConfigBlob.hyperparameter_set:type_name -> ai.verta.modeldb.versioning.HyperparameterSetConfigBlob
	1,  // 1: ai.verta.modeldb.versioning.ConfigBlob.hyperparameters:type_name -> ai.verta.modeldb.versioning.HyperparameterConfigBlob
	2,  // 2: ai.verta.modeldb.versioning.HyperparameterConfigBlob.value:type_name -> ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob
	4,  // 3: ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.continuous:type_name -> ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob
	5,  // 4: ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.discrete:type_name -> ai.verta.modeldb.versioning.DiscreteHyperparameterSetConfigBlob
	2,  // 5: ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob.interval_begin:type_name -> ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob
	2,  // 6: ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob.interval_end:type_name -> ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob
	2,  // 7: ai.verta.modeldb.versioning.ContinuousHyperparameterSetConfigBlob.interval_step:type_name -> ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob
	2,  // 8: ai.verta.modeldb.versioning.DiscreteHyperparameterSetConfigBlob.values:type_name -> ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob
	7,  // 9: ai.verta.modeldb.versioning.ConfigDiff.hyperparameter_set:type_name -> ai.verta.modeldb.versioning.HyperparameterSetConfigDiff
	8,  // 10: ai.verta.modeldb.versioning.ConfigDiff.hyperparameters:type_name -> ai.verta.modeldb.versioning.HyperparameterConfigDiff
	9,  // 11: ai.verta.modeldb.versioning.HyperparameterSetConfigDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	3,  // 12: ai.verta.modeldb.versioning.HyperparameterSetConfigDiff.A:type_name -> ai.verta.modeldb.versioning.HyperparameterSetConfigBlob
	3,  // 13: ai.verta.modeldb.versioning.HyperparameterSetConfigDiff.B:type_name -> ai.verta.modeldb.versioning.HyperparameterSetConfigBlob
	3,  // 14: ai.verta.modeldb.versioning.HyperparameterSetConfigDiff.C:type_name -> ai.verta.modeldb.versioning.HyperparameterSetConfigBlob
	9,  // 15: ai.verta.modeldb.versioning.HyperparameterConfigDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	1,  // 16: ai.verta.modeldb.versioning.HyperparameterConfigDiff.A:type_name -> ai.verta.modeldb.versioning.HyperparameterConfigBlob
	1,  // 17: ai.verta.modeldb.versioning.HyperparameterConfigDiff.B:type_name -> ai.verta.modeldb.versioning.HyperparameterConfigBlob
	1,  // 18: ai.verta.modeldb.versioning.HyperparameterConfigDiff.C:type_name -> ai.verta.modeldb.versioning.HyperparameterConfigBlob
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_modeldb_versioning_Config_proto_init() }
func file_modeldb_versioning_Config_proto_init() {
	if File_modeldb_versioning_Config_proto != nil {
		return
	}
	file_modeldb_versioning_Enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_versioning_Config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparameterConfigBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparameterValuesConfigBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparameterSetConfigBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousHyperparameterSetConfigBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscreteHyperparameterSetConfigBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparameterSetConfigDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_Config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparameterConfigDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_modeldb_versioning_Config_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*HyperparameterValuesConfigBlob_IntValue)(nil),
		(*HyperparameterValuesConfigBlob_FloatValue)(nil),
		(*HyperparameterValuesConfigBlob_StringValue)(nil),
	}
	file_modeldb_versioning_Config_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*HyperparameterSetConfigBlob_Continuous)(nil),
		(*HyperparameterSetConfigBlob_Discrete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_versioning_Config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_modeldb_versioning_Config_proto_goTypes,
		DependencyIndexes: file_modeldb_versioning_Config_proto_depIdxs,
		MessageInfos:      file_modeldb_versioning_Config_proto_msgTypes,
	}.Build()
	File_modeldb_versioning_Config_proto = out.File
	file_modeldb_versioning_Config_proto_rawDesc = nil
	file_modeldb_versioning_Config_proto_goTypes = nil
	file_modeldb_versioning_Config_proto_depIdxs = nil
}
