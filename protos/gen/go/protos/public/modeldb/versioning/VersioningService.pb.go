// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/versioning/VersioningService.proto

package versioning

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BlobType int32

const (
	BlobType_UNKNOWN          BlobType = 0
	BlobType_DATASET_BLOB     BlobType = 1
	BlobType_ENVIRONMENT_BLOB BlobType = 2
	BlobType_CODE_BLOB        BlobType = 3
	BlobType_CONFIG_BLOB      BlobType = 4
)

// Enum value maps for BlobType.
var (
	BlobType_name = map[int32]string{
		0: "UNKNOWN",
		1: "DATASET_BLOB",
		2: "ENVIRONMENT_BLOB",
		3: "CODE_BLOB",
		4: "CONFIG_BLOB",
	}
	BlobType_value = map[string]int32{
		"UNKNOWN":          0,
		"DATASET_BLOB":     1,
		"ENVIRONMENT_BLOB": 2,
		"CODE_BLOB":        3,
		"CONFIG_BLOB":      4,
	}
)

func (x BlobType) Enum() *BlobType {
	p := new(BlobType)
	*p = x
	return p
}

func (x BlobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobType) Descriptor() protoreflect.EnumDescriptor {
	return file_modeldb_versioning_VersioningService_proto_enumTypes[0].Descriptor()
}

func (BlobType) Type() protoreflect.EnumType {
	return &file_modeldb_versioning_VersioningService_proto_enumTypes[0]
}

func (x BlobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobType.Descriptor instead.
func (BlobType) EnumDescriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{0}
}

type RepositoryVisibilityEnum_RepositoryVisibility int32

const (
	RepositoryVisibilityEnum_PRIVATE           RepositoryVisibilityEnum_RepositoryVisibility = 0 // default
	RepositoryVisibilityEnum_PUBLIC            RepositoryVisibilityEnum_RepositoryVisibility = 1
	RepositoryVisibilityEnum_ORG_SCOPED_PUBLIC RepositoryVisibilityEnum_RepositoryVisibility = 2
)

// Enum value maps for RepositoryVisibilityEnum_RepositoryVisibility.
var (
	RepositoryVisibilityEnum_RepositoryVisibility_name = map[int32]string{
		0: "PRIVATE",
		1: "PUBLIC",
		2: "ORG_SCOPED_PUBLIC",
	}
	RepositoryVisibilityEnum_RepositoryVisibility_value = map[string]int32{
		"PRIVATE":           0,
		"PUBLIC":            1,
		"ORG_SCOPED_PUBLIC": 2,
	}
)

func (x RepositoryVisibilityEnum_RepositoryVisibility) Enum() *RepositoryVisibilityEnum_RepositoryVisibility {
	p := new(RepositoryVisibilityEnum_RepositoryVisibility)
	*p = x
	return p
}

func (x RepositoryVisibilityEnum_RepositoryVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryVisibilityEnum_RepositoryVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_modeldb_versioning_VersioningService_proto_enumTypes[1].Descriptor()
}

func (RepositoryVisibilityEnum_RepositoryVisibility) Type() protoreflect.EnumType {
	return &file_modeldb_versioning_VersioningService_proto_enumTypes[1]
}

func (x RepositoryVisibilityEnum_RepositoryVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryVisibilityEnum_RepositoryVisibility.Descriptor instead.
func (RepositoryVisibilityEnum_RepositoryVisibility) EnumDescriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{8, 0}
}

// Base commit for the versioning system
// DO NOT USE TO COMPUTE SHA
type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the parent commits.
	ParentShas []string `protobuf:"bytes,1,rep,name=parent_shas,json=parentShas,proto3" json:"parent_shas,omitempty"`
	// Message associated with the commit.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Date associated with the commit.
	// It will be computed by the backend by default, but a feature flag should enable setting by the client.
	DateCreated uint64 `protobuf:"varint,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// ID of the user who created the commit.
	Author    string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	CommitSha string `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// Updated Date while create tags & attribute for the commit.
	DateUpdated uint64 `protobuf:"varint,6,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{0}
}

func (x *Commit) GetParentShas() []string {
	if x != nil {
		return x.ParentShas
	}
	return nil
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetDateCreated() uint64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Commit) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *Commit) GetDateUpdated() uint64 {
	if x != nil {
		return x.DateUpdated
	}
	return 0
}

// Data structure used to compute the SHA of a folder
type InternalFolderElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementSha  string `protobuf:"bytes,1,opt,name=element_sha,json=elementSha,proto3" json:"element_sha,omitempty"`
	ElementName string `protobuf:"bytes,2,opt,name=element_name,json=elementName,proto3" json:"element_name,omitempty"`
}

func (x *InternalFolderElement) Reset() {
	*x = InternalFolderElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalFolderElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalFolderElement) ProtoMessage() {}

func (x *InternalFolderElement) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalFolderElement.ProtoReflect.Descriptor instead.
func (*InternalFolderElement) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{1}
}

func (x *InternalFolderElement) GetElementSha() string {
	if x != nil {
		return x.ElementSha
	}
	return ""
}

func (x *InternalFolderElement) GetElementName() string {
	if x != nil {
		return x.ElementName
	}
	return ""
}

type InternalFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blobs      []*InternalFolderElement `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	SubFolders []*InternalFolderElement `protobuf:"bytes,2,rep,name=sub_folders,json=subFolders,proto3" json:"sub_folders,omitempty"`
}

func (x *InternalFolder) Reset() {
	*x = InternalFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalFolder) ProtoMessage() {}

func (x *InternalFolder) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalFolder.ProtoReflect.Descriptor instead.
func (*InternalFolder) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{2}
}

func (x *InternalFolder) GetBlobs() []*InternalFolderElement {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *InternalFolder) GetSubFolders() []*InternalFolderElement {
	if x != nil {
		return x.SubFolders
	}
	return nil
}

// DO NOT USE TO COMPUTE SHA
type FolderElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the element inside the folder.
	ElementName string `protobuf:"bytes,2,opt,name=element_name,json=elementName,proto3" json:"element_name,omitempty"`
}

func (x *FolderElement) Reset() {
	*x = FolderElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderElement) ProtoMessage() {}

func (x *FolderElement) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderElement.ProtoReflect.Descriptor instead.
func (*FolderElement) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{3}
}

func (x *FolderElement) GetElementName() string {
	if x != nil {
		return x.ElementName
	}
	return ""
}

// DO NOT USE TO COMPUTE SHA
type Folder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Blobs, which correspond to direct entries/files
	Blobs []*FolderElement `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	// Subfolders
	SubFolders []*FolderElement `protobuf:"bytes,2,rep,name=sub_folders,json=subFolders,proto3" json:"sub_folders,omitempty"`
}

func (x *Folder) Reset() {
	*x = Folder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Folder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Folder) ProtoMessage() {}

func (x *Folder) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Folder.ProtoReflect.Descriptor instead.
func (*Folder) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{4}
}

func (x *Folder) GetBlobs() []*FolderElement {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *Folder) GetSubFolders() []*FolderElement {
	if x != nil {
		return x.SubFolders
	}
	return nil
}

type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Blob_Dataset
	//	*Blob_Environment
	//	*Blob_Code
	//	*Blob_Config
	Content isBlob_Content `protobuf_oneof:"content"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{5}
}

func (m *Blob) GetContent() isBlob_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Blob) GetDataset() *DatasetBlob {
	if x, ok := x.GetContent().(*Blob_Dataset); ok {
		return x.Dataset
	}
	return nil
}

func (x *Blob) GetEnvironment() *EnvironmentBlob {
	if x, ok := x.GetContent().(*Blob_Environment); ok {
		return x.Environment
	}
	return nil
}

func (x *Blob) GetCode() *CodeBlob {
	if x, ok := x.GetContent().(*Blob_Code); ok {
		return x.Code
	}
	return nil
}

func (x *Blob) GetConfig() *ConfigBlob {
	if x, ok := x.GetContent().(*Blob_Config); ok {
		return x.Config
	}
	return nil
}

type isBlob_Content interface {
	isBlob_Content()
}

type Blob_Dataset struct {
	Dataset *DatasetBlob `protobuf:"bytes,2,opt,name=dataset,proto3,oneof"` // Blob of the type dataset
}

type Blob_Environment struct {
	Environment *EnvironmentBlob `protobuf:"bytes,3,opt,name=environment,proto3,oneof"`
}

type Blob_Code struct {
	Code *CodeBlob `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type Blob_Config struct {
	Config *ConfigBlob `protobuf:"bytes,5,opt,name=config,proto3,oneof"`
}

func (*Blob_Dataset) isBlob_Content() {}

func (*Blob_Environment) isBlob_Content() {}

func (*Blob_Code) isBlob_Content() {}

func (*Blob_Config) isBlob_Content() {}

type BlobExpanded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of folder names, with the last element being the name of the blob
	// Each element goes one level deeper. So ["foo", "bar"] represents the same as /foo/bar
	Location   []string           `protobuf:"bytes,1,rep,name=location,proto3" json:"location,omitempty"`
	Blob       *Blob              `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	Attributes []*common.KeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *BlobExpanded) Reset() {
	*x = BlobExpanded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobExpanded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobExpanded) ProtoMessage() {}

func (x *BlobExpanded) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobExpanded.ProtoReflect.Descriptor instead.
func (*BlobExpanded) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{6}
}

func (x *BlobExpanded) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BlobExpanded) GetBlob() *Blob {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *BlobExpanded) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type BlobDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of folder names, with the last element being the name of the blob
	// Each element goes one level deeper. So ["foo", "bar"] represents the same as /foo/bar
	Location []string                  `protobuf:"bytes,1,rep,name=location,proto3" json:"location,omitempty"`
	Status   DiffStatusEnum_DiffStatus `protobuf:"varint,2,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	// If a file changes its type, consider just as a removal of the old and addition of the new,
	// instead of trying to figure out inter-types diff
	//
	// Types that are assignable to Content:
	//	*BlobDiff_Dataset
	//	*BlobDiff_Environment
	//	*BlobDiff_Code
	//	*BlobDiff_Config
	Content isBlobDiff_Content `protobuf_oneof:"content"`
}

func (x *BlobDiff) Reset() {
	*x = BlobDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobDiff) ProtoMessage() {}

func (x *BlobDiff) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobDiff.ProtoReflect.Descriptor instead.
func (*BlobDiff) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{7}
}

func (x *BlobDiff) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BlobDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if x != nil {
		return x.Status
	}
	return DiffStatusEnum_UNKNOWN
}

func (m *BlobDiff) GetContent() isBlobDiff_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *BlobDiff) GetDataset() *DatasetDiff {
	if x, ok := x.GetContent().(*BlobDiff_Dataset); ok {
		return x.Dataset
	}
	return nil
}

func (x *BlobDiff) GetEnvironment() *EnvironmentDiff {
	if x, ok := x.GetContent().(*BlobDiff_Environment); ok {
		return x.Environment
	}
	return nil
}

func (x *BlobDiff) GetCode() *CodeDiff {
	if x, ok := x.GetContent().(*BlobDiff_Code); ok {
		return x.Code
	}
	return nil
}

func (x *BlobDiff) GetConfig() *ConfigDiff {
	if x, ok := x.GetContent().(*BlobDiff_Config); ok {
		return x.Config
	}
	return nil
}

type isBlobDiff_Content interface {
	isBlobDiff_Content()
}

type BlobDiff_Dataset struct {
	Dataset *DatasetDiff `protobuf:"bytes,3,opt,name=dataset,proto3,oneof"`
}

type BlobDiff_Environment struct {
	Environment *EnvironmentDiff `protobuf:"bytes,4,opt,name=environment,proto3,oneof"`
}

type BlobDiff_Code struct {
	Code *CodeDiff `protobuf:"bytes,5,opt,name=code,proto3,oneof"`
}

type BlobDiff_Config struct {
	Config *ConfigDiff `protobuf:"bytes,6,opt,name=config,proto3,oneof"`
}

func (*BlobDiff_Dataset) isBlobDiff_Content() {}

func (*BlobDiff_Environment) isBlobDiff_Content() {}

func (*BlobDiff_Code) isBlobDiff_Content() {}

func (*BlobDiff_Config) isBlobDiff_Content() {}

type RepositoryVisibilityEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryVisibilityEnum) Reset() {
	*x = RepositoryVisibilityEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryVisibilityEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryVisibilityEnum) ProtoMessage() {}

func (x *RepositoryVisibilityEnum) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryVisibilityEnum.ProtoReflect.Descriptor instead.
func (*RepositoryVisibilityEnum) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{8}
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Name that can be used in URL, like in GitHub
	DateCreated          uint64                                        `protobuf:"varint,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateUpdated          uint64                                        `protobuf:"varint,4,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	WorkspaceId          string                                        `protobuf:"bytes,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	WorkspaceType        common.WorkspaceTypeEnum_WorkspaceType        `protobuf:"varint,6,opt,name=workspace_type,json=workspaceType,proto3,enum=ai.verta.common.WorkspaceTypeEnum_WorkspaceType" json:"workspace_type,omitempty"`
	RepositoryVisibility RepositoryVisibilityEnum_RepositoryVisibility `protobuf:"varint,7,opt,name=repository_visibility,json=repositoryVisibility,proto3,enum=ai.verta.modeldb.versioning.RepositoryVisibilityEnum_RepositoryVisibility" json:"repository_visibility,omitempty"`
	Owner                string                                        `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	Description          string                                        `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Attributes           []*common.KeyValue                            `protobuf:"bytes,12,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{9}
}

func (x *Repository) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetDateCreated() uint64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *Repository) GetDateUpdated() uint64 {
	if x != nil {
		return x.DateUpdated
	}
	return 0
}

func (x *Repository) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *Repository) GetWorkspaceType() common.WorkspaceTypeEnum_WorkspaceType {
	if x != nil {
		return x.WorkspaceType
	}
	return common.WorkspaceTypeEnum_UNKNOWN
}

func (x *Repository) GetRepositoryVisibility() RepositoryVisibilityEnum_RepositoryVisibility {
	if x != nil {
		return x.RepositoryVisibility
	}
	return RepositoryVisibilityEnum_PRIVATE
}

func (x *Repository) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Repository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repository) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// CRUD for repositories
type RepositoryNamedIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceName string `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *RepositoryNamedIdentification) Reset() {
	*x = RepositoryNamedIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryNamedIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryNamedIdentification) ProtoMessage() {}

func (x *RepositoryNamedIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryNamedIdentification.ProtoReflect.Descriptor instead.
func (*RepositoryNamedIdentification) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{10}
}

func (x *RepositoryNamedIdentification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepositoryNamedIdentification) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

// changed from oneof because of that bug: https://github.com/grpc-ecosystem/grpc-gateway/issues/753
type RepositoryIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamedId *RepositoryNamedIdentification `protobuf:"bytes,1,opt,name=named_id,json=namedId,proto3" json:"named_id,omitempty"`
	RepoId  uint64                         `protobuf:"varint,2,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
}

func (x *RepositoryIdentification) Reset() {
	*x = RepositoryIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryIdentification) ProtoMessage() {}

func (x *RepositoryIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryIdentification.ProtoReflect.Descriptor instead.
func (*RepositoryIdentification) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{11}
}

func (x *RepositoryIdentification) GetNamedId() *RepositoryNamedIdentification {
	if x != nil {
		return x.NamedId
	}
	return nil
}

func (x *RepositoryIdentification) GetRepoId() uint64 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

type ListRepositoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceName string             `protobuf:"bytes,1,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	Pagination    *common.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListRepositoriesRequest) Reset() {
	*x = ListRepositoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesRequest) ProtoMessage() {}

func (x *ListRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*ListRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{12}
}

func (x *ListRepositoriesRequest) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *ListRepositoriesRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *RepositoryIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRepositoryRequest) Reset() {
	*x = GetRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryRequest) ProtoMessage() {}

func (x *GetRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryRequest.ProtoReflect.Descriptor instead.
func (*GetRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{13}
}

func (x *GetRepositoryRequest) GetId() *RepositoryIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

type SetRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *RepositoryIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Repository *Repository               `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *SetRepository) Reset() {
	*x = SetRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRepository) ProtoMessage() {}

func (x *SetRepository) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRepository.ProtoReflect.Descriptor instead.
func (*SetRepository) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{14}
}

func (x *SetRepository) GetId() *RepositoryIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetRepository) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type DeleteRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *DeleteRepositoryRequest) Reset() {
	*x = DeleteRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryRequest) ProtoMessage() {}

func (x *DeleteRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteRepositoryRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

// CRUD for commits
type ListCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Pagination   *common.Pagination        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CommitBase   string                    `protobuf:"bytes,3,opt,name=commit_base,json=commitBase,proto3" json:"commit_base,omitempty"` // If empty, consider commits from the beginning
	CommitHead   string                    `protobuf:"bytes,4,opt,name=commit_head,json=commitHead,proto3" json:"commit_head,omitempty"` // If empty, consider commits from the base to the latest
}

func (x *ListCommitsRequest) Reset() {
	*x = ListCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsRequest) ProtoMessage() {}

func (x *ListCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsRequest.ProtoReflect.Descriptor instead.
func (*ListCommitsRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{16}
}

func (x *ListCommitsRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *ListCommitsRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCommitsRequest) GetCommitBase() string {
	if x != nil {
		return x.CommitBase
	}
	return ""
}

func (x *ListCommitsRequest) GetCommitHead() string {
	if x != nil {
		return x.CommitHead
	}
	return ""
}

type GetCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *GetCommitRequest) Reset() {
	*x = GetCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitRequest) ProtoMessage() {}

func (x *GetCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitRequest.ProtoReflect.Descriptor instead.
func (*GetCommitRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{17}
}

func (x *GetCommitRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *GetCommitRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type CreateCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Commit       *Commit                   `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Blobs        []*BlobExpanded           `protobuf:"bytes,3,rep,name=blobs,proto3" json:"blobs,omitempty"`
	// Apply the diffs on top of commit_base
	// If a blob was added in the diff, add it on top of commit_base (doesn't matter if it was present already or not)
	// If a blob was deleted, delete if from commit_base if present
	// If a blob was modified, then:
	// 1) check that the type of the diff is consistent with the type of the blob. If they are different, raise an error saying so
	// 2) apply the diff to the blob as per the following logic:
	// 2a) if the field is atomic (e.g. python version, git repository), use the newer version (B) from the diff and overwrite what the commit_base has
	// 2b) if the field is not atomic (e.g. list of python requirements, dataset components), merge the lists by a) copying new values, b) deleting removed values, c) updating values that are already present based on some reasonable key
	CommitBase string      `protobuf:"bytes,4,opt,name=commit_base,json=commitBase,proto3" json:"commit_base,omitempty"`
	Diffs      []*BlobDiff `protobuf:"bytes,5,rep,name=diffs,proto3" json:"diffs,omitempty"`
}

func (x *CreateCommitRequest) Reset() {
	*x = CreateCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitRequest) ProtoMessage() {}

func (x *CreateCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitRequest.ProtoReflect.Descriptor instead.
func (*CreateCommitRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{18}
}

func (x *CreateCommitRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *CreateCommitRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *CreateCommitRequest) GetBlobs() []*BlobExpanded {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *CreateCommitRequest) GetCommitBase() string {
	if x != nil {
		return x.CommitBase
	}
	return ""
}

func (x *CreateCommitRequest) GetDiffs() []*BlobDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

type DeleteCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *DeleteCommitRequest) Reset() {
	*x = DeleteCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommitRequest) ProtoMessage() {}

func (x *DeleteCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommitRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommitRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteCommitRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *DeleteCommitRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

// Getting blobs and folders in a commit
type ListCommitBlobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	// Pagination pagination = 2;
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// List of folder names (with the last element potentially representing the blob name)
	// This will be used to limit the search to scope just this location, like `git log /my/path` would do
	LocationPrefix []string `protobuf:"bytes,4,rep,name=location_prefix,json=locationPrefix,proto3" json:"location_prefix,omitempty"`
}

func (x *ListCommitBlobsRequest) Reset() {
	*x = ListCommitBlobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitBlobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitBlobsRequest) ProtoMessage() {}

func (x *ListCommitBlobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitBlobsRequest.ProtoReflect.Descriptor instead.
func (*ListCommitBlobsRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{20}
}

func (x *ListCommitBlobsRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *ListCommitBlobsRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *ListCommitBlobsRequest) GetLocationPrefix() []string {
	if x != nil {
		return x.LocationPrefix
	}
	return nil
}

type GetCommitComponentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// List of folder names, with the last element being the name of the blob or tree
	// the last element determines if the response to be returned is Folder or Blob
	// Each element goes one level deeper. So ["foo", "bar"] represents the same as /foo/bar
	Location []string `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
}

func (x *GetCommitComponentRequest) Reset() {
	*x = GetCommitComponentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitComponentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitComponentRequest) ProtoMessage() {}

func (x *GetCommitComponentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitComponentRequest.ProtoReflect.Descriptor instead.
func (*GetCommitComponentRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{21}
}

func (x *GetCommitComponentRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *GetCommitComponentRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *GetCommitComponentRequest) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

// Git-like operations
type ComputeRepositoryDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitA      string                    `protobuf:"bytes,2,opt,name=commit_a,json=commitA,proto3" json:"commit_a,omitempty"`
	CommitB      string                    `protobuf:"bytes,3,opt,name=commit_b,json=commitB,proto3" json:"commit_b,omitempty"`
	//Replace commit_a with the nearest common ancestor of commit_a and commit_b
	ReplaceAWithCommonAncestor bool `protobuf:"varint,5,opt,name=replace_a_with_common_ancestor,json=replaceAWithCommonAncestor,proto3" json:"replace_a_with_common_ancestor,omitempty"`
	//for a or b only one of commit or branch should be populated
	BranchA string `protobuf:"bytes,6,opt,name=branch_a,json=branchA,proto3" json:"branch_a,omitempty"`
	BranchB string `protobuf:"bytes,7,opt,name=branch_b,json=branchB,proto3" json:"branch_b,omitempty"`
}

func (x *ComputeRepositoryDiffRequest) Reset() {
	*x = ComputeRepositoryDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeRepositoryDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeRepositoryDiffRequest) ProtoMessage() {}

func (x *ComputeRepositoryDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeRepositoryDiffRequest.ProtoReflect.Descriptor instead.
func (*ComputeRepositoryDiffRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{22}
}

func (x *ComputeRepositoryDiffRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *ComputeRepositoryDiffRequest) GetCommitA() string {
	if x != nil {
		return x.CommitA
	}
	return ""
}

func (x *ComputeRepositoryDiffRequest) GetCommitB() string {
	if x != nil {
		return x.CommitB
	}
	return ""
}

func (x *ComputeRepositoryDiffRequest) GetReplaceAWithCommonAncestor() bool {
	if x != nil {
		return x.ReplaceAWithCommonAncestor
	}
	return false
}

func (x *ComputeRepositoryDiffRequest) GetBranchA() string {
	if x != nil {
		return x.BranchA
	}
	return ""
}

func (x *ComputeRepositoryDiffRequest) GetBranchB() string {
	if x != nil {
		return x.BranchB
	}
	return ""
}

type ListCommitsLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	// Pagination pagination = 2;
	Branch    string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitSha string `protobuf:"bytes,4,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *ListCommitsLogRequest) Reset() {
	*x = ListCommitsLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsLogRequest) ProtoMessage() {}

func (x *ListCommitsLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsLogRequest.ProtoReflect.Descriptor instead.
func (*ListCommitsLogRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{23}
}

func (x *ListCommitsLogRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *ListCommitsLogRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ListCommitsLogRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

// CRUD for branches
// Branches, like in git, are unique
type ListBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *ListBranchesRequest) Reset() {
	*x = ListBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest) ProtoMessage() {}

func (x *ListBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{24}
}

func (x *ListBranchesRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

type GetBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Branch       string                    `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GetBranchRequest) Reset() {
	*x = GetBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchRequest) ProtoMessage() {}

func (x *GetBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchRequest.ProtoReflect.Descriptor instead.
func (*GetBranchRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{25}
}

func (x *GetBranchRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *GetBranchRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type SetBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Branch       string                    `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitSha    string                    `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *SetBranchRequest) Reset() {
	*x = SetBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBranchRequest) ProtoMessage() {}

func (x *SetBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBranchRequest.ProtoReflect.Descriptor instead.
func (*SetBranchRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{26}
}

func (x *SetBranchRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *SetBranchRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SetBranchRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Branch       string                    `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteBranchRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *DeleteBranchRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

// CRUD for tags
// Tags, like in git, are unique
type ListTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *ListTagsRequest) Reset() {
	*x = ListTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagsRequest) ProtoMessage() {}

func (x *ListTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagsRequest.ProtoReflect.Descriptor instead.
func (*ListTagsRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{28}
}

func (x *ListTagsRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

type GetTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string                    `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *GetTagRequest) Reset() {
	*x = GetTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagRequest) ProtoMessage() {}

func (x *GetTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagRequest.ProtoReflect.Descriptor instead.
func (*GetTagRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{29}
}

func (x *GetTagRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *GetTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type SetTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string                    `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	CommitSha    string                    `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *SetTagRequest) Reset() {
	*x = SetTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagRequest) ProtoMessage() {}

func (x *SetTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagRequest.ProtoReflect.Descriptor instead.
func (*SetTagRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{30}
}

func (x *SetTagRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *SetTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SetTagRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type DeleteTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string                    `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteTagRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *DeleteTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type MergeRepositoryCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitShaA   string                    `protobuf:"bytes,2,opt,name=commit_sha_a,json=commitShaA,proto3" json:"commit_sha_a,omitempty"`
	CommitShaB   string                    `protobuf:"bytes,3,opt,name=commit_sha_b,json=commitShaB,proto3" json:"commit_sha_b,omitempty"`
	Content      *Commit                   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	//for a or b only one of commit or branch should be populated
	BranchA  string `protobuf:"bytes,5,opt,name=branch_a,json=branchA,proto3" json:"branch_a,omitempty"`
	BranchB  string `protobuf:"bytes,6,opt,name=branch_b,json=branchB,proto3" json:"branch_b,omitempty"`
	IsDryRun bool   `protobuf:"varint,7,opt,name=is_dry_run,json=isDryRun,proto3" json:"is_dry_run,omitempty"`
}

func (x *MergeRepositoryCommitsRequest) Reset() {
	*x = MergeRepositoryCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRepositoryCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRepositoryCommitsRequest) ProtoMessage() {}

func (x *MergeRepositoryCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRepositoryCommitsRequest.ProtoReflect.Descriptor instead.
func (*MergeRepositoryCommitsRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{32}
}

func (x *MergeRepositoryCommitsRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *MergeRepositoryCommitsRequest) GetCommitShaA() string {
	if x != nil {
		return x.CommitShaA
	}
	return ""
}

func (x *MergeRepositoryCommitsRequest) GetCommitShaB() string {
	if x != nil {
		return x.CommitShaB
	}
	return ""
}

func (x *MergeRepositoryCommitsRequest) GetContent() *Commit {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MergeRepositoryCommitsRequest) GetBranchA() string {
	if x != nil {
		return x.BranchA
	}
	return ""
}

func (x *MergeRepositoryCommitsRequest) GetBranchB() string {
	if x != nil {
		return x.BranchB
	}
	return ""
}

func (x *MergeRepositoryCommitsRequest) GetIsDryRun() bool {
	if x != nil {
		return x.IsDryRun
	}
	return false
}

type RevertRepositoryCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId      *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitToRevertSha string                    `protobuf:"bytes,2,opt,name=commit_to_revert_sha,json=commitToRevertSha,proto3" json:"commit_to_revert_sha,omitempty"` //commit to revert
	BaseCommitSha     string                    `protobuf:"bytes,3,opt,name=base_commit_sha,json=baseCommitSha,proto3" json:"base_commit_sha,omitempty"`               // commit to apply reverted commit on
	Content           *Commit                   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RevertRepositoryCommitsRequest) Reset() {
	*x = RevertRepositoryCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertRepositoryCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertRepositoryCommitsRequest) ProtoMessage() {}

func (x *RevertRepositoryCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertRepositoryCommitsRequest.ProtoReflect.Descriptor instead.
func (*RevertRepositoryCommitsRequest) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{33}
}

func (x *RevertRepositoryCommitsRequest) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *RevertRepositoryCommitsRequest) GetCommitToRevertSha() string {
	if x != nil {
		return x.CommitToRevertSha
	}
	return ""
}

func (x *RevertRepositoryCommitsRequest) GetBaseCommitSha() string {
	if x != nil {
		return x.BaseCommitSha
	}
	return ""
}

func (x *RevertRepositoryCommitsRequest) GetContent() *Commit {
	if x != nil {
		return x.Content
	}
	return nil
}

//If any of the request parameters are not set then backend will return all the repositories.
//the query like: FROM RepositoryEntity repo ORDER BY repo.date_updated DESC
type FindRepositories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoIds       []uint64                `protobuf:"varint,1,rep,packed,name=repo_ids,json=repoIds,proto3" json:"repo_ids,omitempty"`           //if repo_ids not present in request then the backend returns all the matching repositories, else returns a subsetfrom the list that are in the parameter repo_ids
	WorkspaceName string                  `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"` //If auth service is configured will default to Personal workspace, if authservice is not configured then parameter is ignored
	Predicates    []*common.KeyValueQuery `protobuf:"bytes,3,rep,name=predicates,proto3" json:"predicates,omitempty"`                            //predicates like: {key:labels, value:Backend}, {key:name, value:repo_name}, if absent all the accessible repositories are returned.
	//For pagination
	PageNumber int32 `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"` //If not present no pagination is applied.
	PageLimit  int32 `protobuf:"varint,7,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`    //If not present no pagination is applied.
}

func (x *FindRepositories) Reset() {
	*x = FindRepositories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRepositories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRepositories) ProtoMessage() {}

func (x *FindRepositories) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRepositories.ProtoReflect.Descriptor instead.
func (*FindRepositories) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{34}
}

func (x *FindRepositories) GetRepoIds() []uint64 {
	if x != nil {
		return x.RepoIds
	}
	return nil
}

func (x *FindRepositories) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *FindRepositories) GetPredicates() []*common.KeyValueQuery {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *FindRepositories) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindRepositories) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

type FindRepositoriesBlobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoIds        []uint64   `protobuf:"varint,1,rep,packed,name=repo_ids,json=repoIds,proto3" json:"repo_ids,omitempty"`                                              //if repo_ids not present in request then the backend returns all the matching repositories blobs, else returns a subsetfrom the list that are in the parameter repo_ids and return those repositories blobs
	WorkspaceName  string     `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`                                    //If auth service is configured will default to Personal workspace, if authservice is not configured then parameter is ignored
	LocationPrefix []string   `protobuf:"bytes,3,rep,name=location_prefix,json=locationPrefix,proto3" json:"location_prefix,omitempty"`                                 //location like: ["dataset","train"], If location_prefix not found in request then backend returns all the blobs from root folder else return matching location_prefix blobs
	BlobType       []BlobType `protobuf:"varint,4,rep,packed,name=blob_type,json=blobType,proto3,enum=ai.verta.modeldb.versioning.BlobType" json:"blob_type,omitempty"` //Backend consider this field with 'OR' operator in query and if it not present then ignore type and return all blob_type results
	Commits        []string   `protobuf:"bytes,5,rep,name=commits,proto3" json:"commits,omitempty"`                                                                     //if commits not present in request then the backend returns all the matching commits blobs, else returns a subsetfrom the list that are in the parameter commits and return those commits blobs
	//For pagination
	PageNumber int32 `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"` //If not present no pagination is applied.
	PageLimit  int32 `protobuf:"varint,7,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`    //If not present no pagination is applied.
	//In future requirement
	//bool ascending = 8;
	//string sort_key = 9;
	Predicates []*common.KeyValueQuery `protobuf:"bytes,10,rep,name=predicates,proto3" json:"predicates,omitempty"`
}

func (x *FindRepositoriesBlobs) Reset() {
	*x = FindRepositoriesBlobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRepositoriesBlobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRepositoriesBlobs) ProtoMessage() {}

func (x *FindRepositoriesBlobs) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRepositoriesBlobs.ProtoReflect.Descriptor instead.
func (*FindRepositoriesBlobs) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{35}
}

func (x *FindRepositoriesBlobs) GetRepoIds() []uint64 {
	if x != nil {
		return x.RepoIds
	}
	return nil
}

func (x *FindRepositoriesBlobs) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *FindRepositoriesBlobs) GetLocationPrefix() []string {
	if x != nil {
		return x.LocationPrefix
	}
	return nil
}

func (x *FindRepositoriesBlobs) GetBlobType() []BlobType {
	if x != nil {
		return x.BlobType
	}
	return nil
}

func (x *FindRepositoriesBlobs) GetCommits() []string {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *FindRepositoriesBlobs) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindRepositoriesBlobs) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *FindRepositoriesBlobs) GetPredicates() []*common.KeyValueQuery {
	if x != nil {
		return x.Predicates
	}
	return nil
}

type GetUrlForBlobVersioned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	Method                       string                    `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`                            //This is either GET or PUT
	PartNumber                   uint64                    `protobuf:"varint,6,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"` // if 0, don’t do multipart
}

func (x *GetUrlForBlobVersioned) Reset() {
	*x = GetUrlForBlobVersioned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUrlForBlobVersioned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUrlForBlobVersioned) ProtoMessage() {}

func (x *GetUrlForBlobVersioned) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUrlForBlobVersioned.ProtoReflect.Descriptor instead.
func (*GetUrlForBlobVersioned) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{36}
}

func (x *GetUrlForBlobVersioned) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *GetUrlForBlobVersioned) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *GetUrlForBlobVersioned) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GetUrlForBlobVersioned) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

func (x *GetUrlForBlobVersioned) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *GetUrlForBlobVersioned) GetPartNumber() uint64 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

type CommitVersionedBlobArtifactPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	ArtifactPart                 *common.ArtifactPart      `protobuf:"bytes,5,opt,name=artifact_part,json=artifactPart,proto3" json:"artifact_part,omitempty"`
}

func (x *CommitVersionedBlobArtifactPart) Reset() {
	*x = CommitVersionedBlobArtifactPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitVersionedBlobArtifactPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitVersionedBlobArtifactPart) ProtoMessage() {}

func (x *CommitVersionedBlobArtifactPart) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitVersionedBlobArtifactPart.ProtoReflect.Descriptor instead.
func (*CommitVersionedBlobArtifactPart) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{37}
}

func (x *CommitVersionedBlobArtifactPart) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *CommitVersionedBlobArtifactPart) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *CommitVersionedBlobArtifactPart) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CommitVersionedBlobArtifactPart) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

func (x *CommitVersionedBlobArtifactPart) GetArtifactPart() *common.ArtifactPart {
	if x != nil {
		return x.ArtifactPart
	}
	return nil
}

type GetCommittedVersionedBlobArtifactParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
}

func (x *GetCommittedVersionedBlobArtifactParts) Reset() {
	*x = GetCommittedVersionedBlobArtifactParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommittedVersionedBlobArtifactParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommittedVersionedBlobArtifactParts) ProtoMessage() {}

func (x *GetCommittedVersionedBlobArtifactParts) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommittedVersionedBlobArtifactParts.ProtoReflect.Descriptor instead.
func (*GetCommittedVersionedBlobArtifactParts) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{38}
}

func (x *GetCommittedVersionedBlobArtifactParts) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *GetCommittedVersionedBlobArtifactParts) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *GetCommittedVersionedBlobArtifactParts) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GetCommittedVersionedBlobArtifactParts) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

type CommitMultipartVersionedBlobArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
}

func (x *CommitMultipartVersionedBlobArtifact) Reset() {
	*x = CommitMultipartVersionedBlobArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMultipartVersionedBlobArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMultipartVersionedBlobArtifact) ProtoMessage() {}

func (x *CommitMultipartVersionedBlobArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMultipartVersionedBlobArtifact.ProtoReflect.Descriptor instead.
func (*CommitMultipartVersionedBlobArtifact) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{39}
}

func (x *CommitMultipartVersionedBlobArtifact) GetRepositoryId() *RepositoryIdentification {
	if x != nil {
		return x.RepositoryId
	}
	return nil
}

func (x *CommitMultipartVersionedBlobArtifact) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *CommitMultipartVersionedBlobArtifact) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CommitMultipartVersionedBlobArtifact) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

type ListRepositoriesRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	TotalRecords int64         `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *ListRepositoriesRequest_Response) Reset() {
	*x = ListRepositoriesRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesRequest_Response) ProtoMessage() {}

func (x *ListRepositoriesRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesRequest_Response.ProtoReflect.Descriptor instead.
func (*ListRepositoriesRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ListRepositoriesRequest_Response) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *ListRepositoriesRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetRepositoryRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *GetRepositoryRequest_Response) Reset() {
	*x = GetRepositoryRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryRequest_Response) ProtoMessage() {}

func (x *GetRepositoryRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryRequest_Response.ProtoReflect.Descriptor instead.
func (*GetRepositoryRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetRepositoryRequest_Response) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type SetRepository_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *SetRepository_Response) Reset() {
	*x = SetRepository_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRepository_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRepository_Response) ProtoMessage() {}

func (x *SetRepository_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRepository_Response.ProtoReflect.Descriptor instead.
func (*SetRepository_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SetRepository_Response) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type DeleteRepositoryRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteRepositoryRequest_Response) Reset() {
	*x = DeleteRepositoryRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryRequest_Response) ProtoMessage() {}

func (x *DeleteRepositoryRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryRequest_Response.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{15, 0}
}

func (x *DeleteRepositoryRequest_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ListCommitsRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits      []*Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	TotalRecords int64     `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *ListCommitsRequest_Response) Reset() {
	*x = ListCommitsRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsRequest_Response) ProtoMessage() {}

func (x *ListCommitsRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsRequest_Response.ProtoReflect.Descriptor instead.
func (*ListCommitsRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ListCommitsRequest_Response) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *ListCommitsRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetCommitRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GetCommitRequest_Response) Reset() {
	*x = GetCommitRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitRequest_Response) ProtoMessage() {}

func (x *GetCommitRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitRequest_Response.ProtoReflect.Descriptor instead.
func (*GetCommitRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetCommitRequest_Response) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type CreateCommitRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *CreateCommitRequest_Response) Reset() {
	*x = CreateCommitRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitRequest_Response) ProtoMessage() {}

func (x *CreateCommitRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitRequest_Response.ProtoReflect.Descriptor instead.
func (*CreateCommitRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CreateCommitRequest_Response) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type DeleteCommitRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCommitRequest_Response) Reset() {
	*x = DeleteCommitRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommitRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommitRequest_Response) ProtoMessage() {}

func (x *DeleteCommitRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommitRequest_Response.ProtoReflect.Descriptor instead.
func (*DeleteCommitRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{19, 0}
}

type ListCommitBlobsRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blobs        []*BlobExpanded `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	TotalRecords int64           `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *ListCommitBlobsRequest_Response) Reset() {
	*x = ListCommitBlobsRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitBlobsRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitBlobsRequest_Response) ProtoMessage() {}

func (x *ListCommitBlobsRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitBlobsRequest_Response.ProtoReflect.Descriptor instead.
func (*ListCommitBlobsRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ListCommitBlobsRequest_Response) GetBlobs() []*BlobExpanded {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *ListCommitBlobsRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetCommitComponentRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//	*GetCommitComponentRequest_Response_Folder
	//	*GetCommitComponentRequest_Response_Blob
	Component  isGetCommitComponentRequest_Response_Component `protobuf_oneof:"component"`
	Attributes []*common.KeyValue                             `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *GetCommitComponentRequest_Response) Reset() {
	*x = GetCommitComponentRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitComponentRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitComponentRequest_Response) ProtoMessage() {}

func (x *GetCommitComponentRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitComponentRequest_Response.ProtoReflect.Descriptor instead.
func (*GetCommitComponentRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{21, 0}
}

func (m *GetCommitComponentRequest_Response) GetComponent() isGetCommitComponentRequest_Response_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *GetCommitComponentRequest_Response) GetFolder() *Folder {
	if x, ok := x.GetComponent().(*GetCommitComponentRequest_Response_Folder); ok {
		return x.Folder
	}
	return nil
}

func (x *GetCommitComponentRequest_Response) GetBlob() *Blob {
	if x, ok := x.GetComponent().(*GetCommitComponentRequest_Response_Blob); ok {
		return x.Blob
	}
	return nil
}

func (x *GetCommitComponentRequest_Response) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type isGetCommitComponentRequest_Response_Component interface {
	isGetCommitComponentRequest_Response_Component()
}

type GetCommitComponentRequest_Response_Folder struct {
	Folder *Folder `protobuf:"bytes,1,opt,name=folder,proto3,oneof"`
}

type GetCommitComponentRequest_Response_Blob struct {
	Blob *Blob `protobuf:"bytes,2,opt,name=blob,proto3,oneof"`
}

func (*GetCommitComponentRequest_Response_Folder) isGetCommitComponentRequest_Response_Component() {}

func (*GetCommitComponentRequest_Response_Blob) isGetCommitComponentRequest_Response_Component() {}

type ComputeRepositoryDiffRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs []*BlobDiff `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
}

func (x *ComputeRepositoryDiffRequest_Response) Reset() {
	*x = ComputeRepositoryDiffRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeRepositoryDiffRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeRepositoryDiffRequest_Response) ProtoMessage() {}

func (x *ComputeRepositoryDiffRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeRepositoryDiffRequest_Response.ProtoReflect.Descriptor instead.
func (*ComputeRepositoryDiffRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ComputeRepositoryDiffRequest_Response) GetDiffs() []*BlobDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

type ListCommitsLogRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits      []*Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	TotalRecords int64     `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *ListCommitsLogRequest_Response) Reset() {
	*x = ListCommitsLogRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsLogRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsLogRequest_Response) ProtoMessage() {}

func (x *ListCommitsLogRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsLogRequest_Response.ProtoReflect.Descriptor instead.
func (*ListCommitsLogRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ListCommitsLogRequest_Response) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *ListCommitsLogRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type ListBranchesRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches     []string `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	TotalRecords int64    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *ListBranchesRequest_Response) Reset() {
	*x = ListBranchesRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest_Response) ProtoMessage() {}

func (x *ListBranchesRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest_Response.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ListBranchesRequest_Response) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *ListBranchesRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetBranchRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GetBranchRequest_Response) Reset() {
	*x = GetBranchRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchRequest_Response) ProtoMessage() {}

func (x *GetBranchRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchRequest_Response.ProtoReflect.Descriptor instead.
func (*GetBranchRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{25, 0}
}

func (x *GetBranchRequest_Response) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type SetBranchRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBranchRequest_Response) Reset() {
	*x = SetBranchRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBranchRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBranchRequest_Response) ProtoMessage() {}

func (x *SetBranchRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBranchRequest_Response.ProtoReflect.Descriptor instead.
func (*SetBranchRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{26, 0}
}

type DeleteBranchRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBranchRequest_Response) Reset() {
	*x = DeleteBranchRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest_Response) ProtoMessage() {}

func (x *DeleteBranchRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest_Response.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{27, 0}
}

type ListTagsRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags         []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	TotalRecords int64    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *ListTagsRequest_Response) Reset() {
	*x = ListTagsRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTagsRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagsRequest_Response) ProtoMessage() {}

func (x *ListTagsRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagsRequest_Response.ProtoReflect.Descriptor instead.
func (*ListTagsRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ListTagsRequest_Response) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListTagsRequest_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetTagRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GetTagRequest_Response) Reset() {
	*x = GetTagRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagRequest_Response) ProtoMessage() {}

func (x *GetTagRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagRequest_Response.ProtoReflect.Descriptor instead.
func (*GetTagRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{29, 0}
}

func (x *GetTagRequest_Response) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type SetTagRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTagRequest_Response) Reset() {
	*x = SetTagRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTagRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagRequest_Response) ProtoMessage() {}

func (x *SetTagRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagRequest_Response.ProtoReflect.Descriptor instead.
func (*SetTagRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{30, 0}
}

type DeleteTagRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagRequest_Response) Reset() {
	*x = DeleteTagRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest_Response) ProtoMessage() {}

func (x *DeleteTagRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest_Response.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{31, 0}
}

type MergeRepositoryCommitsRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit    *Commit     `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Conflicts []*BlobDiff `protobuf:"bytes,2,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
	// In case of a conflict, stop at the first such conflict and return it
	CommonBase *Commit `protobuf:"bytes,3,opt,name=common_base,json=commonBase,proto3" json:"common_base,omitempty"` // Common base shared between the two commits
}

func (x *MergeRepositoryCommitsRequest_Response) Reset() {
	*x = MergeRepositoryCommitsRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRepositoryCommitsRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRepositoryCommitsRequest_Response) ProtoMessage() {}

func (x *MergeRepositoryCommitsRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRepositoryCommitsRequest_Response.ProtoReflect.Descriptor instead.
func (*MergeRepositoryCommitsRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{32, 0}
}

func (x *MergeRepositoryCommitsRequest_Response) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *MergeRepositoryCommitsRequest_Response) GetConflicts() []*BlobDiff {
	if x != nil {
		return x.Conflicts
	}
	return nil
}

func (x *MergeRepositoryCommitsRequest_Response) GetCommonBase() *Commit {
	if x != nil {
		return x.CommonBase
	}
	return nil
}

type RevertRepositoryCommitsRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *RevertRepositoryCommitsRequest_Response) Reset() {
	*x = RevertRepositoryCommitsRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertRepositoryCommitsRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertRepositoryCommitsRequest_Response) ProtoMessage() {}

func (x *RevertRepositoryCommitsRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertRepositoryCommitsRequest_Response.ProtoReflect.Descriptor instead.
func (*RevertRepositoryCommitsRequest_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{33, 0}
}

func (x *RevertRepositoryCommitsRequest_Response) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type FindRepositories_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	TotalRecords int64         `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindRepositories_Response) Reset() {
	*x = FindRepositories_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRepositories_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRepositories_Response) ProtoMessage() {}

func (x *FindRepositories_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRepositories_Response.ProtoReflect.Descriptor instead.
func (*FindRepositories_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{34, 0}
}

func (x *FindRepositories_Response) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *FindRepositories_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type FindRepositoriesBlobs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blobs        []*BlobExpanded `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	TotalRecords int64           `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindRepositoriesBlobs_Response) Reset() {
	*x = FindRepositoriesBlobs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRepositoriesBlobs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRepositoriesBlobs_Response) ProtoMessage() {}

func (x *FindRepositoriesBlobs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRepositoriesBlobs_Response.ProtoReflect.Descriptor instead.
func (*FindRepositoriesBlobs_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{35, 0}
}

func (x *FindRepositoriesBlobs_Response) GetBlobs() []*BlobExpanded {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *FindRepositoriesBlobs_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetUrlForBlobVersioned_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url               string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	MultipartUploadOk bool   `protobuf:"varint,3,opt,name=multipart_upload_ok,json=multipartUploadOk,proto3" json:"multipart_upload_ok,omitempty"` // for backcompat: new Client, old Backend
}

func (x *GetUrlForBlobVersioned_Response) Reset() {
	*x = GetUrlForBlobVersioned_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUrlForBlobVersioned_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUrlForBlobVersioned_Response) ProtoMessage() {}

func (x *GetUrlForBlobVersioned_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUrlForBlobVersioned_Response.ProtoReflect.Descriptor instead.
func (*GetUrlForBlobVersioned_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{36, 0}
}

func (x *GetUrlForBlobVersioned_Response) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetUrlForBlobVersioned_Response) GetMultipartUploadOk() bool {
	if x != nil {
		return x.MultipartUploadOk
	}
	return false
}

type CommitVersionedBlobArtifactPart_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitVersionedBlobArtifactPart_Response) Reset() {
	*x = CommitVersionedBlobArtifactPart_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitVersionedBlobArtifactPart_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitVersionedBlobArtifactPart_Response) ProtoMessage() {}

func (x *CommitVersionedBlobArtifactPart_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitVersionedBlobArtifactPart_Response.ProtoReflect.Descriptor instead.
func (*CommitVersionedBlobArtifactPart_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{37, 0}
}

type GetCommittedVersionedBlobArtifactParts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactParts []*common.ArtifactPart `protobuf:"bytes,1,rep,name=artifact_parts,json=artifactParts,proto3" json:"artifact_parts,omitempty"`
}

func (x *GetCommittedVersionedBlobArtifactParts_Response) Reset() {
	*x = GetCommittedVersionedBlobArtifactParts_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommittedVersionedBlobArtifactParts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommittedVersionedBlobArtifactParts_Response) ProtoMessage() {}

func (x *GetCommittedVersionedBlobArtifactParts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommittedVersionedBlobArtifactParts_Response.ProtoReflect.Descriptor instead.
func (*GetCommittedVersionedBlobArtifactParts_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{38, 0}
}

func (x *GetCommittedVersionedBlobArtifactParts_Response) GetArtifactParts() []*common.ArtifactPart {
	if x != nil {
		return x.ArtifactParts
	}
	return nil
}

type CommitMultipartVersionedBlobArtifact_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitMultipartVersionedBlobArtifact_Response) Reset() {
	*x = CommitMultipartVersionedBlobArtifact_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMultipartVersionedBlobArtifact_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMultipartVersionedBlobArtifact_Response) ProtoMessage() {}

func (x *CommitMultipartVersionedBlobArtifact_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_versioning_VersioningService_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMultipartVersionedBlobArtifact_Response.ProtoReflect.Descriptor instead.
func (*CommitMultipartVersionedBlobArtifact_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_versioning_VersioningService_proto_rawDescGZIP(), []int{39, 0}
}

var File_modeldb_versioning_VersioningService_proto protoreflect.FileDescriptor

var file_modeldb_versioning_VersioningService_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5b,
	0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x32, 0x0a,
	0x0d, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x97, 0x01, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x4b,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x04,
	0x42, 0x6c, 0x6f, 0x62, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c,
	0x6f, 0x62, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x62,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x99, 0x03, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x44, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x62, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x46,
	0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x52, 0x47, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x22, 0xe6, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7f, 0x0a, 0x15, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x5a, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x53, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x53, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf,
	0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x1a, 0x6e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xd6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x1a, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x96, 0x03, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x1a, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xae, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x1a, 0x70, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xca, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x39, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x42, 0x1a, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x1a, 0x6e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x4b, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x1a, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x68, 0x61, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x47, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x68, 0x61, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7,
	0x04, 0x0a, 0x1d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x41, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x5f, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x42,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x42, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x1a, 0xd2, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x44, 0x69, 0x66, 0x66, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x53, 0x68, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a,
	0x47, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x7c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd2, 0x03,
	0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x49,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x42, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6c,
	0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x1a, 0x70, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72,
	0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x5a, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x70, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x4c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4f, 0x6b, 0x22, 0xd0, 0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x0c, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68,
	0x1a, 0x50, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x61,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x5f, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x42, 0x4c, 0x4f, 0x42, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x04, 0x32, 0xe8, 0x47, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe7, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x12,
	0x37, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x8c, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x84, 0x01, 0x12, 0x56, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x5a, 0x2a, 0x12, 0x28, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x51, 0x22, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x99, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x9c, 0x01, 0x1a, 0x56, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5a, 0x36, 0x1a, 0x28, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0xb6, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xa5, 0x01, 0x2a, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x5a, 0x35, 0x2a, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb7, 0x02, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb5, 0x01, 0x12,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5a, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0xcc, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xd0, 0x01, 0x12, 0x81, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x5a, 0x4a, 0x12, 0x48, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x7d, 0x12, 0xc0, 0x02, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbb, 0x01, 0x22, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x40, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xd5, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xd0, 0x01, 0x2a, 0x81,
	0x01, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x7d, 0x5a, 0x4a, 0x2a, 0x48, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x12, 0xea,
	0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xdc, 0x01, 0x12,
	0x87, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x5a, 0x50, 0x12, 0x4e, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0xf1, 0x02, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xda, 0x01, 0x12, 0x86, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x5a, 0x4f,
	0x12, 0x4d, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x12,
	0xcf, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x66, 0x66, 0x12, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xaf, 0x01, 0x12, 0x71, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x64, 0x69, 0x66, 0x66, 0x5a, 0x3a, 0x12, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x66,
	0x66, 0x12, 0xbc, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbe, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb7, 0x01, 0x12, 0x75, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x5a, 0x3e, 0x12, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x12, 0xc5, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2d,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc9, 0x01, 0x12,
	0x7e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x5a,
	0x47, 0x12, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f,
	0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x12, 0xdd, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe8, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xe1, 0x01, 0x1a, 0x7e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x3a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x68, 0x61, 0x5a, 0x53, 0x1a, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x3a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x12, 0xce, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xc9, 0x01,
	0x2a, 0x7e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d,
	0x5a, 0x47, 0x2a, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x2f, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x12, 0xb8, 0x04, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x32, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0xad, 0x03, 0x12, 0x82, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f,
	0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x5a, 0x4b, 0x12, 0x49,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x5a, 0x88, 0x01, 0x12, 0x85, 0x01, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d,
	0x2f, 0x6c, 0x6f, 0x67, 0x5a, 0x4e, 0x12, 0x4c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d,
	0x2f, 0x6c, 0x6f, 0x67, 0x12, 0xda, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbe, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb7, 0x01, 0x22, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x3a, 0x01,
	0x2a, 0x5a, 0x3e, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x9e, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3b, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xff, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xf8, 0x01, 0x22, 0x92, 0x01, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x3a,
	0x01, 0x2a, 0x5a, 0x5e, 0x22, 0x59, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0xa8, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xaf, 0x01, 0x12, 0x71,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x67,
	0x73, 0x5a, 0x3a, 0x12, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x12, 0xae, 0x02,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0xbb, 0x01, 0x12, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x7d, 0x5a, 0x40, 0x12, 0x3e,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x7d, 0x12, 0xc6,
	0x02, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xd3, 0x01, 0x1a, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x7d, 0x3a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x5a, 0x4c, 0x1a, 0x3e, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x7d, 0x3a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x12, 0xb7, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xbb, 0x01, 0x2a, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x7d, 0x5a,
	0x40, 0x2a, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67,
	0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xd5, 0x01, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x12,
	0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x1a, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x03,
	0x0a, 0x16, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72,
	0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x1a, 0x3c, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x72, 0x6c, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x84, 0x02, 0x22, 0x98, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c,
	0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x3a, 0x01, 0x2a, 0x5a, 0x64, 0x22, 0x5f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x7d, 0x2f,
	0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xe1, 0x01, 0x0a, 0x1f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x3c, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x1a, 0x45, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xfa, 0x01,
	0x0a, 0x26, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x43, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x1a, 0x4c, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x24, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x41, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x4a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a,
	0x01, 0x2a, 0x42, 0x4d, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modeldb_versioning_VersioningService_proto_rawDescOnce sync.Once
	file_modeldb_versioning_VersioningService_proto_rawDescData = file_modeldb_versioning_VersioningService_proto_rawDesc
)

func file_modeldb_versioning_VersioningService_proto_rawDescGZIP() []byte {
	file_modeldb_versioning_VersioningService_proto_rawDescOnce.Do(func() {
		file_modeldb_versioning_VersioningService_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_versioning_VersioningService_proto_rawDescData)
	})
	return file_modeldb_versioning_VersioningService_proto_rawDescData
}

var file_modeldb_versioning_VersioningService_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_modeldb_versioning_VersioningService_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_modeldb_versioning_VersioningService_proto_goTypes = []interface{}{
	(BlobType)(0), // 0: ai.verta.modeldb.versioning.BlobType
	(RepositoryVisibilityEnum_RepositoryVisibility)(0), // 1: ai.verta.modeldb.versioning.RepositoryVisibilityEnum.RepositoryVisibility
	(*Commit)(nil),                                          // 2: ai.verta.modeldb.versioning.Commit
	(*InternalFolderElement)(nil),                           // 3: ai.verta.modeldb.versioning.InternalFolderElement
	(*InternalFolder)(nil),                                  // 4: ai.verta.modeldb.versioning.InternalFolder
	(*FolderElement)(nil),                                   // 5: ai.verta.modeldb.versioning.FolderElement
	(*Folder)(nil),                                          // 6: ai.verta.modeldb.versioning.Folder
	(*Blob)(nil),                                            // 7: ai.verta.modeldb.versioning.Blob
	(*BlobExpanded)(nil),                                    // 8: ai.verta.modeldb.versioning.BlobExpanded
	(*BlobDiff)(nil),                                        // 9: ai.verta.modeldb.versioning.BlobDiff
	(*RepositoryVisibilityEnum)(nil),                        // 10: ai.verta.modeldb.versioning.RepositoryVisibilityEnum
	(*Repository)(nil),                                      // 11: ai.verta.modeldb.versioning.Repository
	(*RepositoryNamedIdentification)(nil),                   // 12: ai.verta.modeldb.versioning.RepositoryNamedIdentification
	(*RepositoryIdentification)(nil),                        // 13: ai.verta.modeldb.versioning.RepositoryIdentification
	(*ListRepositoriesRequest)(nil),                         // 14: ai.verta.modeldb.versioning.ListRepositoriesRequest
	(*GetRepositoryRequest)(nil),                            // 15: ai.verta.modeldb.versioning.GetRepositoryRequest
	(*SetRepository)(nil),                                   // 16: ai.verta.modeldb.versioning.SetRepository
	(*DeleteRepositoryRequest)(nil),                         // 17: ai.verta.modeldb.versioning.DeleteRepositoryRequest
	(*ListCommitsRequest)(nil),                              // 18: ai.verta.modeldb.versioning.ListCommitsRequest
	(*GetCommitRequest)(nil),                                // 19: ai.verta.modeldb.versioning.GetCommitRequest
	(*CreateCommitRequest)(nil),                             // 20: ai.verta.modeldb.versioning.CreateCommitRequest
	(*DeleteCommitRequest)(nil),                             // 21: ai.verta.modeldb.versioning.DeleteCommitRequest
	(*ListCommitBlobsRequest)(nil),                          // 22: ai.verta.modeldb.versioning.ListCommitBlobsRequest
	(*GetCommitComponentRequest)(nil),                       // 23: ai.verta.modeldb.versioning.GetCommitComponentRequest
	(*ComputeRepositoryDiffRequest)(nil),                    // 24: ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest
	(*ListCommitsLogRequest)(nil),                           // 25: ai.verta.modeldb.versioning.ListCommitsLogRequest
	(*ListBranchesRequest)(nil),                             // 26: ai.verta.modeldb.versioning.ListBranchesRequest
	(*GetBranchRequest)(nil),                                // 27: ai.verta.modeldb.versioning.GetBranchRequest
	(*SetBranchRequest)(nil),                                // 28: ai.verta.modeldb.versioning.SetBranchRequest
	(*DeleteBranchRequest)(nil),                             // 29: ai.verta.modeldb.versioning.DeleteBranchRequest
	(*ListTagsRequest)(nil),                                 // 30: ai.verta.modeldb.versioning.ListTagsRequest
	(*GetTagRequest)(nil),                                   // 31: ai.verta.modeldb.versioning.GetTagRequest
	(*SetTagRequest)(nil),                                   // 32: ai.verta.modeldb.versioning.SetTagRequest
	(*DeleteTagRequest)(nil),                                // 33: ai.verta.modeldb.versioning.DeleteTagRequest
	(*MergeRepositoryCommitsRequest)(nil),                   // 34: ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest
	(*RevertRepositoryCommitsRequest)(nil),                  // 35: ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest
	(*FindRepositories)(nil),                                // 36: ai.verta.modeldb.versioning.FindRepositories
	(*FindRepositoriesBlobs)(nil),                           // 37: ai.verta.modeldb.versioning.FindRepositoriesBlobs
	(*GetUrlForBlobVersioned)(nil),                          // 38: ai.verta.modeldb.versioning.GetUrlForBlobVersioned
	(*CommitVersionedBlobArtifactPart)(nil),                 // 39: ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart
	(*GetCommittedVersionedBlobArtifactParts)(nil),          // 40: ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts
	(*CommitMultipartVersionedBlobArtifact)(nil),            // 41: ai.verta.modeldb.versioning.CommitMultipartVersionedBlobArtifact
	(*ListRepositoriesRequest_Response)(nil),                // 42: ai.verta.modeldb.versioning.ListRepositoriesRequest.Response
	(*GetRepositoryRequest_Response)(nil),                   // 43: ai.verta.modeldb.versioning.GetRepositoryRequest.Response
	(*SetRepository_Response)(nil),                          // 44: ai.verta.modeldb.versioning.SetRepository.Response
	(*DeleteRepositoryRequest_Response)(nil),                // 45: ai.verta.modeldb.versioning.DeleteRepositoryRequest.Response
	(*ListCommitsRequest_Response)(nil),                     // 46: ai.verta.modeldb.versioning.ListCommitsRequest.Response
	(*GetCommitRequest_Response)(nil),                       // 47: ai.verta.modeldb.versioning.GetCommitRequest.Response
	(*CreateCommitRequest_Response)(nil),                    // 48: ai.verta.modeldb.versioning.CreateCommitRequest.Response
	(*DeleteCommitRequest_Response)(nil),                    // 49: ai.verta.modeldb.versioning.DeleteCommitRequest.Response
	(*ListCommitBlobsRequest_Response)(nil),                 // 50: ai.verta.modeldb.versioning.ListCommitBlobsRequest.Response
	(*GetCommitComponentRequest_Response)(nil),              // 51: ai.verta.modeldb.versioning.GetCommitComponentRequest.Response
	(*ComputeRepositoryDiffRequest_Response)(nil),           // 52: ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest.Response
	(*ListCommitsLogRequest_Response)(nil),                  // 53: ai.verta.modeldb.versioning.ListCommitsLogRequest.Response
	(*ListBranchesRequest_Response)(nil),                    // 54: ai.verta.modeldb.versioning.ListBranchesRequest.Response
	(*GetBranchRequest_Response)(nil),                       // 55: ai.verta.modeldb.versioning.GetBranchRequest.Response
	(*SetBranchRequest_Response)(nil),                       // 56: ai.verta.modeldb.versioning.SetBranchRequest.Response
	(*DeleteBranchRequest_Response)(nil),                    // 57: ai.verta.modeldb.versioning.DeleteBranchRequest.Response
	(*ListTagsRequest_Response)(nil),                        // 58: ai.verta.modeldb.versioning.ListTagsRequest.Response
	(*GetTagRequest_Response)(nil),                          // 59: ai.verta.modeldb.versioning.GetTagRequest.Response
	(*SetTagRequest_Response)(nil),                          // 60: ai.verta.modeldb.versioning.SetTagRequest.Response
	(*DeleteTagRequest_Response)(nil),                       // 61: ai.verta.modeldb.versioning.DeleteTagRequest.Response
	(*MergeRepositoryCommitsRequest_Response)(nil),          // 62: ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.Response
	(*RevertRepositoryCommitsRequest_Response)(nil),         // 63: ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest.Response
	(*FindRepositories_Response)(nil),                       // 64: ai.verta.modeldb.versioning.FindRepositories.Response
	(*FindRepositoriesBlobs_Response)(nil),                  // 65: ai.verta.modeldb.versioning.FindRepositoriesBlobs.Response
	(*GetUrlForBlobVersioned_Response)(nil),                 // 66: ai.verta.modeldb.versioning.GetUrlForBlobVersioned.Response
	(*CommitVersionedBlobArtifactPart_Response)(nil),        // 67: ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart.Response
	(*GetCommittedVersionedBlobArtifactParts_Response)(nil), // 68: ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts.Response
	(*CommitMultipartVersionedBlobArtifact_Response)(nil),   // 69: ai.verta.modeldb.versioning.CommitMultipartVersionedBlobArtifact.Response
	(*DatasetBlob)(nil),                                     // 70: ai.verta.modeldb.versioning.DatasetBlob
	(*EnvironmentBlob)(nil),                                 // 71: ai.verta.modeldb.versioning.EnvironmentBlob
	(*CodeBlob)(nil),                                        // 72: ai.verta.modeldb.versioning.CodeBlob
	(*ConfigBlob)(nil),                                      // 73: ai.verta.modeldb.versioning.ConfigBlob
	(*common.KeyValue)(nil),                                 // 74: ai.verta.common.KeyValue
	(DiffStatusEnum_DiffStatus)(0),                          // 75: ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	(*DatasetDiff)(nil),                                     // 76: ai.verta.modeldb.versioning.DatasetDiff
	(*EnvironmentDiff)(nil),                                 // 77: ai.verta.modeldb.versioning.EnvironmentDiff
	(*CodeDiff)(nil),                                        // 78: ai.verta.modeldb.versioning.CodeDiff
	(*ConfigDiff)(nil),                                      // 79: ai.verta.modeldb.versioning.ConfigDiff
	(common.WorkspaceTypeEnum_WorkspaceType)(0),             // 80: ai.verta.common.WorkspaceTypeEnum.WorkspaceType
	(*common.Pagination)(nil),                               // 81: ai.verta.common.Pagination
	(*common.KeyValueQuery)(nil),                            // 82: ai.verta.common.KeyValueQuery
	(*common.ArtifactPart)(nil),                             // 83: ai.verta.common.ArtifactPart
}
var file_modeldb_versioning_VersioningService_proto_depIdxs = []int32{
	3,   // 0: ai.verta.modeldb.versioning.InternalFolder.blobs:type_name -> ai.verta.modeldb.versioning.InternalFolderElement
	3,   // 1: ai.verta.modeldb.versioning.InternalFolder.sub_folders:type_name -> ai.verta.modeldb.versioning.InternalFolderElement
	5,   // 2: ai.verta.modeldb.versioning.Folder.blobs:type_name -> ai.verta.modeldb.versioning.FolderElement
	5,   // 3: ai.verta.modeldb.versioning.Folder.sub_folders:type_name -> ai.verta.modeldb.versioning.FolderElement
	70,  // 4: ai.verta.modeldb.versioning.Blob.dataset:type_name -> ai.verta.modeldb.versioning.DatasetBlob
	71,  // 5: ai.verta.modeldb.versioning.Blob.environment:type_name -> ai.verta.modeldb.versioning.EnvironmentBlob
	72,  // 6: ai.verta.modeldb.versioning.Blob.code:type_name -> ai.verta.modeldb.versioning.CodeBlob
	73,  // 7: ai.verta.modeldb.versioning.Blob.config:type_name -> ai.verta.modeldb.versioning.ConfigBlob
	7,   // 8: ai.verta.modeldb.versioning.BlobExpanded.blob:type_name -> ai.verta.modeldb.versioning.Blob
	74,  // 9: ai.verta.modeldb.versioning.BlobExpanded.attributes:type_name -> ai.verta.common.KeyValue
	75,  // 10: ai.verta.modeldb.versioning.BlobDiff.status:type_name -> ai.verta.modeldb.versioning.DiffStatusEnum.DiffStatus
	76,  // 11: ai.verta.modeldb.versioning.BlobDiff.dataset:type_name -> ai.verta.modeldb.versioning.DatasetDiff
	77,  // 12: ai.verta.modeldb.versioning.BlobDiff.environment:type_name -> ai.verta.modeldb.versioning.EnvironmentDiff
	78,  // 13: ai.verta.modeldb.versioning.BlobDiff.code:type_name -> ai.verta.modeldb.versioning.CodeDiff
	79,  // 14: ai.verta.modeldb.versioning.BlobDiff.config:type_name -> ai.verta.modeldb.versioning.ConfigDiff
	80,  // 15: ai.verta.modeldb.versioning.Repository.workspace_type:type_name -> ai.verta.common.WorkspaceTypeEnum.WorkspaceType
	1,   // 16: ai.verta.modeldb.versioning.Repository.repository_visibility:type_name -> ai.verta.modeldb.versioning.RepositoryVisibilityEnum.RepositoryVisibility
	74,  // 17: ai.verta.modeldb.versioning.Repository.attributes:type_name -> ai.verta.common.KeyValue
	12,  // 18: ai.verta.modeldb.versioning.RepositoryIdentification.named_id:type_name -> ai.verta.modeldb.versioning.RepositoryNamedIdentification
	81,  // 19: ai.verta.modeldb.versioning.ListRepositoriesRequest.pagination:type_name -> ai.verta.common.Pagination
	13,  // 20: ai.verta.modeldb.versioning.GetRepositoryRequest.id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 21: ai.verta.modeldb.versioning.SetRepository.id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	11,  // 22: ai.verta.modeldb.versioning.SetRepository.repository:type_name -> ai.verta.modeldb.versioning.Repository
	13,  // 23: ai.verta.modeldb.versioning.DeleteRepositoryRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 24: ai.verta.modeldb.versioning.ListCommitsRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	81,  // 25: ai.verta.modeldb.versioning.ListCommitsRequest.pagination:type_name -> ai.verta.common.Pagination
	13,  // 26: ai.verta.modeldb.versioning.GetCommitRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 27: ai.verta.modeldb.versioning.CreateCommitRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	2,   // 28: ai.verta.modeldb.versioning.CreateCommitRequest.commit:type_name -> ai.verta.modeldb.versioning.Commit
	8,   // 29: ai.verta.modeldb.versioning.CreateCommitRequest.blobs:type_name -> ai.verta.modeldb.versioning.BlobExpanded
	9,   // 30: ai.verta.modeldb.versioning.CreateCommitRequest.diffs:type_name -> ai.verta.modeldb.versioning.BlobDiff
	13,  // 31: ai.verta.modeldb.versioning.DeleteCommitRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 32: ai.verta.modeldb.versioning.ListCommitBlobsRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 33: ai.verta.modeldb.versioning.GetCommitComponentRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 34: ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 35: ai.verta.modeldb.versioning.ListCommitsLogRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 36: ai.verta.modeldb.versioning.ListBranchesRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 37: ai.verta.modeldb.versioning.GetBranchRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 38: ai.verta.modeldb.versioning.SetBranchRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 39: ai.verta.modeldb.versioning.DeleteBranchRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 40: ai.verta.modeldb.versioning.ListTagsRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 41: ai.verta.modeldb.versioning.GetTagRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 42: ai.verta.modeldb.versioning.SetTagRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 43: ai.verta.modeldb.versioning.DeleteTagRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 44: ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	2,   // 45: ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.content:type_name -> ai.verta.modeldb.versioning.Commit
	13,  // 46: ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	2,   // 47: ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest.content:type_name -> ai.verta.modeldb.versioning.Commit
	82,  // 48: ai.verta.modeldb.versioning.FindRepositories.predicates:type_name -> ai.verta.common.KeyValueQuery
	0,   // 49: ai.verta.modeldb.versioning.FindRepositoriesBlobs.blob_type:type_name -> ai.verta.modeldb.versioning.BlobType
	82,  // 50: ai.verta.modeldb.versioning.FindRepositoriesBlobs.predicates:type_name -> ai.verta.common.KeyValueQuery
	13,  // 51: ai.verta.modeldb.versioning.GetUrlForBlobVersioned.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 52: ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	83,  // 53: ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart.artifact_part:type_name -> ai.verta.common.ArtifactPart
	13,  // 54: ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	13,  // 55: ai.verta.modeldb.versioning.CommitMultipartVersionedBlobArtifact.repository_id:type_name -> ai.verta.modeldb.versioning.RepositoryIdentification
	11,  // 56: ai.verta.modeldb.versioning.ListRepositoriesRequest.Response.repositories:type_name -> ai.verta.modeldb.versioning.Repository
	11,  // 57: ai.verta.modeldb.versioning.GetRepositoryRequest.Response.repository:type_name -> ai.verta.modeldb.versioning.Repository
	11,  // 58: ai.verta.modeldb.versioning.SetRepository.Response.repository:type_name -> ai.verta.modeldb.versioning.Repository
	2,   // 59: ai.verta.modeldb.versioning.ListCommitsRequest.Response.commits:type_name -> ai.verta.modeldb.versioning.Commit
	2,   // 60: ai.verta.modeldb.versioning.GetCommitRequest.Response.commit:type_name -> ai.verta.modeldb.versioning.Commit
	2,   // 61: ai.verta.modeldb.versioning.CreateCommitRequest.Response.commit:type_name -> ai.verta.modeldb.versioning.Commit
	8,   // 62: ai.verta.modeldb.versioning.ListCommitBlobsRequest.Response.blobs:type_name -> ai.verta.modeldb.versioning.BlobExpanded
	6,   // 63: ai.verta.modeldb.versioning.GetCommitComponentRequest.Response.folder:type_name -> ai.verta.modeldb.versioning.Folder
	7,   // 64: ai.verta.modeldb.versioning.GetCommitComponentRequest.Response.blob:type_name -> ai.verta.modeldb.versioning.Blob
	74,  // 65: ai.verta.modeldb.versioning.GetCommitComponentRequest.Response.attributes:type_name -> ai.verta.common.KeyValue
	9,   // 66: ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest.Response.diffs:type_name -> ai.verta.modeldb.versioning.BlobDiff
	2,   // 67: ai.verta.modeldb.versioning.ListCommitsLogRequest.Response.commits:type_name -> ai.verta.modeldb.versioning.Commit
	2,   // 68: ai.verta.modeldb.versioning.GetBranchRequest.Response.commit:type_name -> ai.verta.modeldb.versioning.Commit
	2,   // 69: ai.verta.modeldb.versioning.GetTagRequest.Response.commit:type_name -> ai.verta.modeldb.versioning.Commit
	2,   // 70: ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.Response.commit:type_name -> ai.verta.modeldb.versioning.Commit
	9,   // 71: ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.Response.conflicts:type_name -> ai.verta.modeldb.versioning.BlobDiff
	2,   // 72: ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.Response.common_base:type_name -> ai.verta.modeldb.versioning.Commit
	2,   // 73: ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest.Response.commit:type_name -> ai.verta.modeldb.versioning.Commit
	11,  // 74: ai.verta.modeldb.versioning.FindRepositories.Response.repositories:type_name -> ai.verta.modeldb.versioning.Repository
	8,   // 75: ai.verta.modeldb.versioning.FindRepositoriesBlobs.Response.blobs:type_name -> ai.verta.modeldb.versioning.BlobExpanded
	83,  // 76: ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts.Response.artifact_parts:type_name -> ai.verta.common.ArtifactPart
	14,  // 77: ai.verta.modeldb.versioning.VersioningService.ListRepositories:input_type -> ai.verta.modeldb.versioning.ListRepositoriesRequest
	15,  // 78: ai.verta.modeldb.versioning.VersioningService.GetRepository:input_type -> ai.verta.modeldb.versioning.GetRepositoryRequest
	16,  // 79: ai.verta.modeldb.versioning.VersioningService.CreateRepository:input_type -> ai.verta.modeldb.versioning.SetRepository
	16,  // 80: ai.verta.modeldb.versioning.VersioningService.UpdateRepository:input_type -> ai.verta.modeldb.versioning.SetRepository
	17,  // 81: ai.verta.modeldb.versioning.VersioningService.DeleteRepository:input_type -> ai.verta.modeldb.versioning.DeleteRepositoryRequest
	18,  // 82: ai.verta.modeldb.versioning.VersioningService.ListCommits:input_type -> ai.verta.modeldb.versioning.ListCommitsRequest
	19,  // 83: ai.verta.modeldb.versioning.VersioningService.GetCommit:input_type -> ai.verta.modeldb.versioning.GetCommitRequest
	20,  // 84: ai.verta.modeldb.versioning.VersioningService.CreateCommit:input_type -> ai.verta.modeldb.versioning.CreateCommitRequest
	21,  // 85: ai.verta.modeldb.versioning.VersioningService.DeleteCommit:input_type -> ai.verta.modeldb.versioning.DeleteCommitRequest
	22,  // 86: ai.verta.modeldb.versioning.VersioningService.ListCommitBlobs:input_type -> ai.verta.modeldb.versioning.ListCommitBlobsRequest
	23,  // 87: ai.verta.modeldb.versioning.VersioningService.GetCommitComponent:input_type -> ai.verta.modeldb.versioning.GetCommitComponentRequest
	24,  // 88: ai.verta.modeldb.versioning.VersioningService.ComputeRepositoryDiff:input_type -> ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest
	26,  // 89: ai.verta.modeldb.versioning.VersioningService.ListBranches:input_type -> ai.verta.modeldb.versioning.ListBranchesRequest
	27,  // 90: ai.verta.modeldb.versioning.VersioningService.GetBranch:input_type -> ai.verta.modeldb.versioning.GetBranchRequest
	28,  // 91: ai.verta.modeldb.versioning.VersioningService.SetBranch:input_type -> ai.verta.modeldb.versioning.SetBranchRequest
	29,  // 92: ai.verta.modeldb.versioning.VersioningService.DeleteBranch:input_type -> ai.verta.modeldb.versioning.DeleteBranchRequest
	25,  // 93: ai.verta.modeldb.versioning.VersioningService.ListCommitsLog:input_type -> ai.verta.modeldb.versioning.ListCommitsLogRequest
	34,  // 94: ai.verta.modeldb.versioning.VersioningService.MergeRepositoryCommits:input_type -> ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest
	35,  // 95: ai.verta.modeldb.versioning.VersioningService.RevertRepositoryCommits:input_type -> ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest
	30,  // 96: ai.verta.modeldb.versioning.VersioningService.ListTags:input_type -> ai.verta.modeldb.versioning.ListTagsRequest
	31,  // 97: ai.verta.modeldb.versioning.VersioningService.GetTag:input_type -> ai.verta.modeldb.versioning.GetTagRequest
	32,  // 98: ai.verta.modeldb.versioning.VersioningService.SetTag:input_type -> ai.verta.modeldb.versioning.SetTagRequest
	33,  // 99: ai.verta.modeldb.versioning.VersioningService.DeleteTag:input_type -> ai.verta.modeldb.versioning.DeleteTagRequest
	36,  // 100: ai.verta.modeldb.versioning.VersioningService.findRepositories:input_type -> ai.verta.modeldb.versioning.FindRepositories
	37,  // 101: ai.verta.modeldb.versioning.VersioningService.findRepositoriesBlobs:input_type -> ai.verta.modeldb.versioning.FindRepositoriesBlobs
	38,  // 102: ai.verta.modeldb.versioning.VersioningService.getUrlForBlobVersioned:input_type -> ai.verta.modeldb.versioning.GetUrlForBlobVersioned
	39,  // 103: ai.verta.modeldb.versioning.VersioningService.commitVersionedBlobArtifactPart:input_type -> ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart
	40,  // 104: ai.verta.modeldb.versioning.VersioningService.getCommittedVersionedBlobArtifactParts:input_type -> ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts
	41,  // 105: ai.verta.modeldb.versioning.VersioningService.commitMultipartVersionedBlobArtifact:input_type -> ai.verta.modeldb.versioning.CommitMultipartVersionedBlobArtifact
	42,  // 106: ai.verta.modeldb.versioning.VersioningService.ListRepositories:output_type -> ai.verta.modeldb.versioning.ListRepositoriesRequest.Response
	43,  // 107: ai.verta.modeldb.versioning.VersioningService.GetRepository:output_type -> ai.verta.modeldb.versioning.GetRepositoryRequest.Response
	44,  // 108: ai.verta.modeldb.versioning.VersioningService.CreateRepository:output_type -> ai.verta.modeldb.versioning.SetRepository.Response
	44,  // 109: ai.verta.modeldb.versioning.VersioningService.UpdateRepository:output_type -> ai.verta.modeldb.versioning.SetRepository.Response
	45,  // 110: ai.verta.modeldb.versioning.VersioningService.DeleteRepository:output_type -> ai.verta.modeldb.versioning.DeleteRepositoryRequest.Response
	46,  // 111: ai.verta.modeldb.versioning.VersioningService.ListCommits:output_type -> ai.verta.modeldb.versioning.ListCommitsRequest.Response
	47,  // 112: ai.verta.modeldb.versioning.VersioningService.GetCommit:output_type -> ai.verta.modeldb.versioning.GetCommitRequest.Response
	48,  // 113: ai.verta.modeldb.versioning.VersioningService.CreateCommit:output_type -> ai.verta.modeldb.versioning.CreateCommitRequest.Response
	49,  // 114: ai.verta.modeldb.versioning.VersioningService.DeleteCommit:output_type -> ai.verta.modeldb.versioning.DeleteCommitRequest.Response
	50,  // 115: ai.verta.modeldb.versioning.VersioningService.ListCommitBlobs:output_type -> ai.verta.modeldb.versioning.ListCommitBlobsRequest.Response
	51,  // 116: ai.verta.modeldb.versioning.VersioningService.GetCommitComponent:output_type -> ai.verta.modeldb.versioning.GetCommitComponentRequest.Response
	52,  // 117: ai.verta.modeldb.versioning.VersioningService.ComputeRepositoryDiff:output_type -> ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest.Response
	54,  // 118: ai.verta.modeldb.versioning.VersioningService.ListBranches:output_type -> ai.verta.modeldb.versioning.ListBranchesRequest.Response
	55,  // 119: ai.verta.modeldb.versioning.VersioningService.GetBranch:output_type -> ai.verta.modeldb.versioning.GetBranchRequest.Response
	56,  // 120: ai.verta.modeldb.versioning.VersioningService.SetBranch:output_type -> ai.verta.modeldb.versioning.SetBranchRequest.Response
	57,  // 121: ai.verta.modeldb.versioning.VersioningService.DeleteBranch:output_type -> ai.verta.modeldb.versioning.DeleteBranchRequest.Response
	53,  // 122: ai.verta.modeldb.versioning.VersioningService.ListCommitsLog:output_type -> ai.verta.modeldb.versioning.ListCommitsLogRequest.Response
	62,  // 123: ai.verta.modeldb.versioning.VersioningService.MergeRepositoryCommits:output_type -> ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.Response
	63,  // 124: ai.verta.modeldb.versioning.VersioningService.RevertRepositoryCommits:output_type -> ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest.Response
	58,  // 125: ai.verta.modeldb.versioning.VersioningService.ListTags:output_type -> ai.verta.modeldb.versioning.ListTagsRequest.Response
	59,  // 126: ai.verta.modeldb.versioning.VersioningService.GetTag:output_type -> ai.verta.modeldb.versioning.GetTagRequest.Response
	60,  // 127: ai.verta.modeldb.versioning.VersioningService.SetTag:output_type -> ai.verta.modeldb.versioning.SetTagRequest.Response
	61,  // 128: ai.verta.modeldb.versioning.VersioningService.DeleteTag:output_type -> ai.verta.modeldb.versioning.DeleteTagRequest.Response
	64,  // 129: ai.verta.modeldb.versioning.VersioningService.findRepositories:output_type -> ai.verta.modeldb.versioning.FindRepositories.Response
	65,  // 130: ai.verta.modeldb.versioning.VersioningService.findRepositoriesBlobs:output_type -> ai.verta.modeldb.versioning.FindRepositoriesBlobs.Response
	66,  // 131: ai.verta.modeldb.versioning.VersioningService.getUrlForBlobVersioned:output_type -> ai.verta.modeldb.versioning.GetUrlForBlobVersioned.Response
	67,  // 132: ai.verta.modeldb.versioning.VersioningService.commitVersionedBlobArtifactPart:output_type -> ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart.Response
	68,  // 133: ai.verta.modeldb.versioning.VersioningService.getCommittedVersionedBlobArtifactParts:output_type -> ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts.Response
	69,  // 134: ai.verta.modeldb.versioning.VersioningService.commitMultipartVersionedBlobArtifact:output_type -> ai.verta.modeldb.versioning.CommitMultipartVersionedBlobArtifact.Response
	106, // [106:135] is the sub-list for method output_type
	77,  // [77:106] is the sub-list for method input_type
	77,  // [77:77] is the sub-list for extension type_name
	77,  // [77:77] is the sub-list for extension extendee
	0,   // [0:77] is the sub-list for field type_name
}

func init() { file_modeldb_versioning_VersioningService_proto_init() }
func file_modeldb_versioning_VersioningService_proto_init() {
	if File_modeldb_versioning_VersioningService_proto != nil {
		return
	}
	file_modeldb_versioning_Code_proto_init()
	file_modeldb_versioning_Config_proto_init()
	file_modeldb_versioning_Dataset_proto_init()
	file_modeldb_versioning_Enums_proto_init()
	file_modeldb_versioning_Environment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_versioning_VersioningService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalFolderElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Folder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobExpanded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryVisibilityEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryNamedIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitBlobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitComponentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeRepositoryDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRepositoryCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertRepositoryCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRepositories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRepositoriesBlobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUrlForBlobVersioned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitVersionedBlobArtifactPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommittedVersionedBlobArtifactParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMultipartVersionedBlobArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRepository_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommitRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitBlobsRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitComponentRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeRepositoryDiffRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsLogRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBranchRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTagsRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTagRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRepositoryCommitsRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertRepositoryCommitsRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRepositories_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRepositoriesBlobs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUrlForBlobVersioned_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitVersionedBlobArtifactPart_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommittedVersionedBlobArtifactParts_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_versioning_VersioningService_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMultipartVersionedBlobArtifact_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_modeldb_versioning_VersioningService_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Blob_Dataset)(nil),
		(*Blob_Environment)(nil),
		(*Blob_Code)(nil),
		(*Blob_Config)(nil),
	}
	file_modeldb_versioning_VersioningService_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*BlobDiff_Dataset)(nil),
		(*BlobDiff_Environment)(nil),
		(*BlobDiff_Code)(nil),
		(*BlobDiff_Config)(nil),
	}
	file_modeldb_versioning_VersioningService_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*GetCommitComponentRequest_Response_Folder)(nil),
		(*GetCommitComponentRequest_Response_Blob)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_versioning_VersioningService_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modeldb_versioning_VersioningService_proto_goTypes,
		DependencyIndexes: file_modeldb_versioning_VersioningService_proto_depIdxs,
		EnumInfos:         file_modeldb_versioning_VersioningService_proto_enumTypes,
		MessageInfos:      file_modeldb_versioning_VersioningService_proto_msgTypes,
	}.Build()
	File_modeldb_versioning_VersioningService_proto = out.File
	file_modeldb_versioning_VersioningService_proto_rawDesc = nil
	file_modeldb_versioning_VersioningService_proto_goTypes = nil
	file_modeldb_versioning_VersioningService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VersioningServiceClient is the client API for VersioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersioningServiceClient interface {
	// CRUD for repositories
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesRequest_Response, error)
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryRequest_Response, error)
	CreateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error)
	UpdateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error)
	DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryRequest_Response, error)
	// CRUD for commits
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsRequest_Response, error)
	GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitRequest_Response, error)
	CreateCommit(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CreateCommitRequest_Response, error)
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitRequest_Response, error)
	// Getting blobs and folders in a commit
	ListCommitBlobs(ctx context.Context, in *ListCommitBlobsRequest, opts ...grpc.CallOption) (*ListCommitBlobsRequest_Response, error)
	GetCommitComponent(ctx context.Context, in *GetCommitComponentRequest, opts ...grpc.CallOption) (*GetCommitComponentRequest_Response, error)
	// Git-like operations
	ComputeRepositoryDiff(ctx context.Context, in *ComputeRepositoryDiffRequest, opts ...grpc.CallOption) (*ComputeRepositoryDiffRequest_Response, error)
	// CRUD for Branches
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesRequest_Response, error)
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchRequest_Response, error)
	// Unlike tags, branches can be updated. The API must verify that the new commit is a child of the current branch.
	SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*SetBranchRequest_Response, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchRequest_Response, error)
	ListCommitsLog(ctx context.Context, in *ListCommitsLogRequest, opts ...grpc.CallOption) (*ListCommitsLogRequest_Response, error)
	MergeRepositoryCommits(ctx context.Context, in *MergeRepositoryCommitsRequest, opts ...grpc.CallOption) (*MergeRepositoryCommitsRequest_Response, error)
	RevertRepositoryCommits(ctx context.Context, in *RevertRepositoryCommitsRequest, opts ...grpc.CallOption) (*RevertRepositoryCommitsRequest_Response, error)
	// CRUD for tags
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagRequest_Response, error)
	// Can't update a tag. If someone tries to set one that exists, we should error.
	SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagRequest_Response, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error)
	FindRepositories(ctx context.Context, in *FindRepositories, opts ...grpc.CallOption) (*FindRepositories_Response, error)
	FindRepositoriesBlobs(ctx context.Context, in *FindRepositoriesBlobs, opts ...grpc.CallOption) (*FindRepositoriesBlobs_Response, error)
	GetUrlForBlobVersioned(ctx context.Context, in *GetUrlForBlobVersioned, opts ...grpc.CallOption) (*GetUrlForBlobVersioned_Response, error)
	CommitVersionedBlobArtifactPart(ctx context.Context, in *CommitVersionedBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedBlobArtifactPart_Response, error)
	GetCommittedVersionedBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedBlobArtifactParts_Response, error)
	CommitMultipartVersionedBlobArtifact(ctx context.Context, in *CommitMultipartVersionedBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedBlobArtifact_Response, error)
}

type versioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersioningServiceClient(cc grpc.ClientConnInterface) VersioningServiceClient {
	return &versioningServiceClient{cc}
}

func (c *versioningServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesRequest_Response, error) {
	out := new(ListRepositoriesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryRequest_Response, error) {
	out := new(GetRepositoryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CreateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error) {
	out := new(SetRepository_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) UpdateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error) {
	out := new(SetRepository_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryRequest_Response, error) {
	out := new(DeleteRepositoryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsRequest_Response, error) {
	out := new(ListCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitRequest_Response, error) {
	out := new(GetCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CreateCommit(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CreateCommitRequest_Response, error) {
	out := new(CreateCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/CreateCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitRequest_Response, error) {
	out := new(DeleteCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommitBlobs(ctx context.Context, in *ListCommitBlobsRequest, opts ...grpc.CallOption) (*ListCommitBlobsRequest_Response, error) {
	out := new(ListCommitBlobsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommitComponent(ctx context.Context, in *GetCommitComponentRequest, opts ...grpc.CallOption) (*GetCommitComponentRequest_Response, error) {
	out := new(GetCommitComponentRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ComputeRepositoryDiff(ctx context.Context, in *ComputeRepositoryDiffRequest, opts ...grpc.CallOption) (*ComputeRepositoryDiffRequest_Response, error) {
	out := new(ComputeRepositoryDiffRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesRequest_Response, error) {
	out := new(ListBranchesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchRequest_Response, error) {
	out := new(GetBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*SetBranchRequest_Response, error) {
	out := new(SetBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/SetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchRequest_Response, error) {
	out := new(DeleteBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommitsLog(ctx context.Context, in *ListCommitsLogRequest, opts ...grpc.CallOption) (*ListCommitsLogRequest_Response, error) {
	out := new(ListCommitsLogRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) MergeRepositoryCommits(ctx context.Context, in *MergeRepositoryCommitsRequest, opts ...grpc.CallOption) (*MergeRepositoryCommitsRequest_Response, error) {
	out := new(MergeRepositoryCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) RevertRepositoryCommits(ctx context.Context, in *RevertRepositoryCommitsRequest, opts ...grpc.CallOption) (*RevertRepositoryCommitsRequest_Response, error) {
	out := new(RevertRepositoryCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error) {
	out := new(ListTagsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagRequest_Response, error) {
	out := new(GetTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagRequest_Response, error) {
	out := new(SetTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/SetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error) {
	out := new(DeleteTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) FindRepositories(ctx context.Context, in *FindRepositories, opts ...grpc.CallOption) (*FindRepositories_Response, error) {
	out := new(FindRepositories_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/findRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) FindRepositoriesBlobs(ctx context.Context, in *FindRepositoriesBlobs, opts ...grpc.CallOption) (*FindRepositoriesBlobs_Response, error) {
	out := new(FindRepositoriesBlobs_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/findRepositoriesBlobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetUrlForBlobVersioned(ctx context.Context, in *GetUrlForBlobVersioned, opts ...grpc.CallOption) (*GetUrlForBlobVersioned_Response, error) {
	out := new(GetUrlForBlobVersioned_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/getUrlForBlobVersioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CommitVersionedBlobArtifactPart(ctx context.Context, in *CommitVersionedBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedBlobArtifactPart_Response, error) {
	out := new(CommitVersionedBlobArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/commitVersionedBlobArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommittedVersionedBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedBlobArtifactParts_Response, error) {
	out := new(GetCommittedVersionedBlobArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/getCommittedVersionedBlobArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CommitMultipartVersionedBlobArtifact(ctx context.Context, in *CommitMultipartVersionedBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedBlobArtifact_Response, error) {
	out := new(CommitMultipartVersionedBlobArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/commitMultipartVersionedBlobArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersioningServiceServer is the server API for VersioningService service.
type VersioningServiceServer interface {
	// CRUD for repositories
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesRequest_Response, error)
	GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryRequest_Response, error)
	CreateRepository(context.Context, *SetRepository) (*SetRepository_Response, error)
	UpdateRepository(context.Context, *SetRepository) (*SetRepository_Response, error)
	DeleteRepository(context.Context, *DeleteRepositoryRequest) (*DeleteRepositoryRequest_Response, error)
	// CRUD for commits
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsRequest_Response, error)
	GetCommit(context.Context, *GetCommitRequest) (*GetCommitRequest_Response, error)
	CreateCommit(context.Context, *CreateCommitRequest) (*CreateCommitRequest_Response, error)
	DeleteCommit(context.Context, *DeleteCommitRequest) (*DeleteCommitRequest_Response, error)
	// Getting blobs and folders in a commit
	ListCommitBlobs(context.Context, *ListCommitBlobsRequest) (*ListCommitBlobsRequest_Response, error)
	GetCommitComponent(context.Context, *GetCommitComponentRequest) (*GetCommitComponentRequest_Response, error)
	// Git-like operations
	ComputeRepositoryDiff(context.Context, *ComputeRepositoryDiffRequest) (*ComputeRepositoryDiffRequest_Response, error)
	// CRUD for Branches
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesRequest_Response, error)
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchRequest_Response, error)
	// Unlike tags, branches can be updated. The API must verify that the new commit is a child of the current branch.
	SetBranch(context.Context, *SetBranchRequest) (*SetBranchRequest_Response, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchRequest_Response, error)
	ListCommitsLog(context.Context, *ListCommitsLogRequest) (*ListCommitsLogRequest_Response, error)
	MergeRepositoryCommits(context.Context, *MergeRepositoryCommitsRequest) (*MergeRepositoryCommitsRequest_Response, error)
	RevertRepositoryCommits(context.Context, *RevertRepositoryCommitsRequest) (*RevertRepositoryCommitsRequest_Response, error)
	// CRUD for tags
	ListTags(context.Context, *ListTagsRequest) (*ListTagsRequest_Response, error)
	GetTag(context.Context, *GetTagRequest) (*GetTagRequest_Response, error)
	// Can't update a tag. If someone tries to set one that exists, we should error.
	SetTag(context.Context, *SetTagRequest) (*SetTagRequest_Response, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagRequest_Response, error)
	FindRepositories(context.Context, *FindRepositories) (*FindRepositories_Response, error)
	FindRepositoriesBlobs(context.Context, *FindRepositoriesBlobs) (*FindRepositoriesBlobs_Response, error)
	GetUrlForBlobVersioned(context.Context, *GetUrlForBlobVersioned) (*GetUrlForBlobVersioned_Response, error)
	CommitVersionedBlobArtifactPart(context.Context, *CommitVersionedBlobArtifactPart) (*CommitVersionedBlobArtifactPart_Response, error)
	GetCommittedVersionedBlobArtifactParts(context.Context, *GetCommittedVersionedBlobArtifactParts) (*GetCommittedVersionedBlobArtifactParts_Response, error)
	CommitMultipartVersionedBlobArtifact(context.Context, *CommitMultipartVersionedBlobArtifact) (*CommitMultipartVersionedBlobArtifact_Response, error)
}

// UnimplementedVersioningServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVersioningServiceServer struct {
}

func (*UnimplementedVersioningServiceServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (*UnimplementedVersioningServiceServer) GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) CreateRepository(context.Context, *SetRepository) (*SetRepository_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) UpdateRepository(context.Context, *SetRepository) (*SetRepository_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteRepository(context.Context, *DeleteRepositoryRequest) (*DeleteRepositoryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommit(context.Context, *GetCommitRequest) (*GetCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) CreateCommit(context.Context, *CreateCommitRequest) (*CreateCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteCommit(context.Context, *DeleteCommitRequest) (*DeleteCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommitBlobs(context.Context, *ListCommitBlobsRequest) (*ListCommitBlobsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitBlobs not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommitComponent(context.Context, *GetCommitComponentRequest) (*GetCommitComponentRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitComponent not implemented")
}
func (*UnimplementedVersioningServiceServer) ComputeRepositoryDiff(context.Context, *ComputeRepositoryDiffRequest) (*ComputeRepositoryDiffRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeRepositoryDiff not implemented")
}
func (*UnimplementedVersioningServiceServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (*UnimplementedVersioningServiceServer) GetBranch(context.Context, *GetBranchRequest) (*GetBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) SetBranch(context.Context, *SetBranchRequest) (*SetBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommitsLog(context.Context, *ListCommitsLogRequest) (*ListCommitsLogRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitsLog not implemented")
}
func (*UnimplementedVersioningServiceServer) MergeRepositoryCommits(context.Context, *MergeRepositoryCommitsRequest) (*MergeRepositoryCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeRepositoryCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) RevertRepositoryCommits(context.Context, *RevertRepositoryCommitsRequest) (*RevertRepositoryCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertRepositoryCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (*UnimplementedVersioningServiceServer) GetTag(context.Context, *GetTagRequest) (*GetTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (*UnimplementedVersioningServiceServer) SetTag(context.Context, *SetTagRequest) (*SetTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTag not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedVersioningServiceServer) FindRepositories(context.Context, *FindRepositories) (*FindRepositories_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositories not implemented")
}
func (*UnimplementedVersioningServiceServer) FindRepositoriesBlobs(context.Context, *FindRepositoriesBlobs) (*FindRepositoriesBlobs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositoriesBlobs not implemented")
}
func (*UnimplementedVersioningServiceServer) GetUrlForBlobVersioned(context.Context, *GetUrlForBlobVersioned) (*GetUrlForBlobVersioned_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForBlobVersioned not implemented")
}
func (*UnimplementedVersioningServiceServer) CommitVersionedBlobArtifactPart(context.Context, *CommitVersionedBlobArtifactPart) (*CommitVersionedBlobArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitVersionedBlobArtifactPart not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommittedVersionedBlobArtifactParts(context.Context, *GetCommittedVersionedBlobArtifactParts) (*GetCommittedVersionedBlobArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedVersionedBlobArtifactParts not implemented")
}
func (*UnimplementedVersioningServiceServer) CommitMultipartVersionedBlobArtifact(context.Context, *CommitMultipartVersionedBlobArtifact) (*CommitMultipartVersionedBlobArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartVersionedBlobArtifact not implemented")
}

func RegisterVersioningServiceServer(s *grpc.Server, srv VersioningServiceServer) {
	s.RegisterService(&_VersioningService_serviceDesc, srv)
}

func _VersioningService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CreateRepository(ctx, req.(*SetRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).UpdateRepository(ctx, req.(*SetRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteRepository(ctx, req.(*DeleteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommits(ctx, req.(*ListCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommit(ctx, req.(*GetCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CreateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CreateCommit(ctx, req.(*CreateCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommitBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommitBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommitBlobs(ctx, req.(*ListCommitBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommitComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommitComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommitComponent(ctx, req.(*GetCommitComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ComputeRepositoryDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRepositoryDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ComputeRepositoryDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ComputeRepositoryDiff(ctx, req.(*ComputeRepositoryDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_SetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).SetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/SetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).SetBranch(ctx, req.(*SetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommitsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommitsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommitsLog(ctx, req.(*ListCommitsLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_MergeRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRepositoryCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).MergeRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).MergeRepositoryCommits(ctx, req.(*MergeRepositoryCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_RevertRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertRepositoryCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).RevertRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).RevertRepositoryCommits(ctx, req.(*RevertRepositoryCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_SetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).SetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/SetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).SetTag(ctx, req.(*SetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_FindRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).FindRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/FindRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).FindRepositories(ctx, req.(*FindRepositories))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_FindRepositoriesBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositoriesBlobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).FindRepositoriesBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/FindRepositoriesBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).FindRepositoriesBlobs(ctx, req.(*FindRepositoriesBlobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetUrlForBlobVersioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForBlobVersioned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetUrlForBlobVersioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetUrlForBlobVersioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetUrlForBlobVersioned(ctx, req.(*GetUrlForBlobVersioned))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CommitVersionedBlobArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitVersionedBlobArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CommitVersionedBlobArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CommitVersionedBlobArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CommitVersionedBlobArtifactPart(ctx, req.(*CommitVersionedBlobArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommittedVersionedBlobArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedVersionedBlobArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommittedVersionedBlobArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommittedVersionedBlobArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommittedVersionedBlobArtifactParts(ctx, req.(*GetCommittedVersionedBlobArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CommitMultipartVersionedBlobArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMultipartVersionedBlobArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CommitMultipartVersionedBlobArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CommitMultipartVersionedBlobArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CommitMultipartVersionedBlobArtifact(ctx, req.(*CommitMultipartVersionedBlobArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersioningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.versioning.VersioningService",
	HandlerType: (*VersioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _VersioningService_ListRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _VersioningService_GetRepository_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _VersioningService_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _VersioningService_UpdateRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _VersioningService_DeleteRepository_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _VersioningService_ListCommits_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _VersioningService_GetCommit_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _VersioningService_CreateCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _VersioningService_DeleteCommit_Handler,
		},
		{
			MethodName: "ListCommitBlobs",
			Handler:    _VersioningService_ListCommitBlobs_Handler,
		},
		{
			MethodName: "GetCommitComponent",
			Handler:    _VersioningService_GetCommitComponent_Handler,
		},
		{
			MethodName: "ComputeRepositoryDiff",
			Handler:    _VersioningService_ComputeRepositoryDiff_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _VersioningService_ListBranches_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _VersioningService_GetBranch_Handler,
		},
		{
			MethodName: "SetBranch",
			Handler:    _VersioningService_SetBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _VersioningService_DeleteBranch_Handler,
		},
		{
			MethodName: "ListCommitsLog",
			Handler:    _VersioningService_ListCommitsLog_Handler,
		},
		{
			MethodName: "MergeRepositoryCommits",
			Handler:    _VersioningService_MergeRepositoryCommits_Handler,
		},
		{
			MethodName: "RevertRepositoryCommits",
			Handler:    _VersioningService_RevertRepositoryCommits_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _VersioningService_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _VersioningService_GetTag_Handler,
		},
		{
			MethodName: "SetTag",
			Handler:    _VersioningService_SetTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _VersioningService_DeleteTag_Handler,
		},
		{
			MethodName: "findRepositories",
			Handler:    _VersioningService_FindRepositories_Handler,
		},
		{
			MethodName: "findRepositoriesBlobs",
			Handler:    _VersioningService_FindRepositoriesBlobs_Handler,
		},
		{
			MethodName: "getUrlForBlobVersioned",
			Handler:    _VersioningService_GetUrlForBlobVersioned_Handler,
		},
		{
			MethodName: "commitVersionedBlobArtifactPart",
			Handler:    _VersioningService_CommitVersionedBlobArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedVersionedBlobArtifactParts",
			Handler:    _VersioningService_GetCommittedVersionedBlobArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartVersionedBlobArtifact",
			Handler:    _VersioningService_CommitMultipartVersionedBlobArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/versioning/VersioningService.proto",
}
