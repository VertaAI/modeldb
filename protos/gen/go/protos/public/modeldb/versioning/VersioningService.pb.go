// Code generated by protoc-gen-go. DO NOT EDIT.
// source: modeldb/versioning/VersioningService.proto

package versioning

import (
	context "context"
	fmt "fmt"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	modeldb "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlobType int32

const (
	BlobType_UNKNOWN          BlobType = 0
	BlobType_DATASET_BLOB     BlobType = 1
	BlobType_ENVIRONMENT_BLOB BlobType = 2
	BlobType_CODE_BLOB        BlobType = 3
	BlobType_CONFIG_BLOB      BlobType = 4
)

var BlobType_name = map[int32]string{
	0: "UNKNOWN",
	1: "DATASET_BLOB",
	2: "ENVIRONMENT_BLOB",
	3: "CODE_BLOB",
	4: "CONFIG_BLOB",
}

var BlobType_value = map[string]int32{
	"UNKNOWN":          0,
	"DATASET_BLOB":     1,
	"ENVIRONMENT_BLOB": 2,
	"CODE_BLOB":        3,
	"CONFIG_BLOB":      4,
}

func (x BlobType) String() string {
	return proto.EnumName(BlobType_name, int32(x))
}

func (BlobType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{0}
}

type RepositoryVisibilityEnum_RepositoryVisibility int32

const (
	RepositoryVisibilityEnum_PRIVATE           RepositoryVisibilityEnum_RepositoryVisibility = 0
	RepositoryVisibilityEnum_PUBLIC            RepositoryVisibilityEnum_RepositoryVisibility = 1
	RepositoryVisibilityEnum_ORG_SCOPED_PUBLIC RepositoryVisibilityEnum_RepositoryVisibility = 2
)

var RepositoryVisibilityEnum_RepositoryVisibility_name = map[int32]string{
	0: "PRIVATE",
	1: "PUBLIC",
	2: "ORG_SCOPED_PUBLIC",
}

var RepositoryVisibilityEnum_RepositoryVisibility_value = map[string]int32{
	"PRIVATE":           0,
	"PUBLIC":            1,
	"ORG_SCOPED_PUBLIC": 2,
}

func (x RepositoryVisibilityEnum_RepositoryVisibility) String() string {
	return proto.EnumName(RepositoryVisibilityEnum_RepositoryVisibility_name, int32(x))
}

func (RepositoryVisibilityEnum_RepositoryVisibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{8, 0}
}

// Base commit for the versioning system
// DO NOT USE TO COMPUTE SHA
type Commit struct {
	// ID of the parent commits.
	ParentShas []string `protobuf:"bytes,1,rep,name=parent_shas,json=parentShas,proto3" json:"parent_shas,omitempty"`
	// Message associated with the commit.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Date associated with the commit.
	// It will be computed by the backend by default, but a feature flag should enable setting by the client.
	DateCreated uint64 `protobuf:"varint,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// ID of the user who created the commit.
	Author               string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	CommitSha            string   `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Commit) Reset()         { *m = Commit{} }
func (m *Commit) String() string { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()    {}
func (*Commit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{0}
}

func (m *Commit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Commit.Unmarshal(m, b)
}
func (m *Commit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Commit.Marshal(b, m, deterministic)
}
func (m *Commit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commit.Merge(m, src)
}
func (m *Commit) XXX_Size() int {
	return xxx_messageInfo_Commit.Size(m)
}
func (m *Commit) XXX_DiscardUnknown() {
	xxx_messageInfo_Commit.DiscardUnknown(m)
}

var xxx_messageInfo_Commit proto.InternalMessageInfo

func (m *Commit) GetParentShas() []string {
	if m != nil {
		return m.ParentShas
	}
	return nil
}

func (m *Commit) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Commit) GetDateCreated() uint64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *Commit) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Commit) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

// Data structure used to compute the SHA of a folder
type InternalFolderElement struct {
	ElementSha           string   `protobuf:"bytes,1,opt,name=element_sha,json=elementSha,proto3" json:"element_sha,omitempty"`
	ElementName          string   `protobuf:"bytes,2,opt,name=element_name,json=elementName,proto3" json:"element_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalFolderElement) Reset()         { *m = InternalFolderElement{} }
func (m *InternalFolderElement) String() string { return proto.CompactTextString(m) }
func (*InternalFolderElement) ProtoMessage()    {}
func (*InternalFolderElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{1}
}

func (m *InternalFolderElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalFolderElement.Unmarshal(m, b)
}
func (m *InternalFolderElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalFolderElement.Marshal(b, m, deterministic)
}
func (m *InternalFolderElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalFolderElement.Merge(m, src)
}
func (m *InternalFolderElement) XXX_Size() int {
	return xxx_messageInfo_InternalFolderElement.Size(m)
}
func (m *InternalFolderElement) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalFolderElement.DiscardUnknown(m)
}

var xxx_messageInfo_InternalFolderElement proto.InternalMessageInfo

func (m *InternalFolderElement) GetElementSha() string {
	if m != nil {
		return m.ElementSha
	}
	return ""
}

func (m *InternalFolderElement) GetElementName() string {
	if m != nil {
		return m.ElementName
	}
	return ""
}

type InternalFolder struct {
	Blobs                []*InternalFolderElement `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	SubFolders           []*InternalFolderElement `protobuf:"bytes,2,rep,name=sub_folders,json=subFolders,proto3" json:"sub_folders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *InternalFolder) Reset()         { *m = InternalFolder{} }
func (m *InternalFolder) String() string { return proto.CompactTextString(m) }
func (*InternalFolder) ProtoMessage()    {}
func (*InternalFolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{2}
}

func (m *InternalFolder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalFolder.Unmarshal(m, b)
}
func (m *InternalFolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalFolder.Marshal(b, m, deterministic)
}
func (m *InternalFolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalFolder.Merge(m, src)
}
func (m *InternalFolder) XXX_Size() int {
	return xxx_messageInfo_InternalFolder.Size(m)
}
func (m *InternalFolder) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalFolder.DiscardUnknown(m)
}

var xxx_messageInfo_InternalFolder proto.InternalMessageInfo

func (m *InternalFolder) GetBlobs() []*InternalFolderElement {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *InternalFolder) GetSubFolders() []*InternalFolderElement {
	if m != nil {
		return m.SubFolders
	}
	return nil
}

// DO NOT USE TO COMPUTE SHA
type FolderElement struct {
	// Name of the element inside the folder.
	ElementName          string   `protobuf:"bytes,2,opt,name=element_name,json=elementName,proto3" json:"element_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FolderElement) Reset()         { *m = FolderElement{} }
func (m *FolderElement) String() string { return proto.CompactTextString(m) }
func (*FolderElement) ProtoMessage()    {}
func (*FolderElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{3}
}

func (m *FolderElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FolderElement.Unmarshal(m, b)
}
func (m *FolderElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FolderElement.Marshal(b, m, deterministic)
}
func (m *FolderElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolderElement.Merge(m, src)
}
func (m *FolderElement) XXX_Size() int {
	return xxx_messageInfo_FolderElement.Size(m)
}
func (m *FolderElement) XXX_DiscardUnknown() {
	xxx_messageInfo_FolderElement.DiscardUnknown(m)
}

var xxx_messageInfo_FolderElement proto.InternalMessageInfo

func (m *FolderElement) GetElementName() string {
	if m != nil {
		return m.ElementName
	}
	return ""
}

// DO NOT USE TO COMPUTE SHA
type Folder struct {
	// Blobs, which correspond to direct entries/files
	Blobs []*FolderElement `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	// Subfolders
	SubFolders           []*FolderElement `protobuf:"bytes,2,rep,name=sub_folders,json=subFolders,proto3" json:"sub_folders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Folder) Reset()         { *m = Folder{} }
func (m *Folder) String() string { return proto.CompactTextString(m) }
func (*Folder) ProtoMessage()    {}
func (*Folder) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{4}
}

func (m *Folder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Folder.Unmarshal(m, b)
}
func (m *Folder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Folder.Marshal(b, m, deterministic)
}
func (m *Folder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Folder.Merge(m, src)
}
func (m *Folder) XXX_Size() int {
	return xxx_messageInfo_Folder.Size(m)
}
func (m *Folder) XXX_DiscardUnknown() {
	xxx_messageInfo_Folder.DiscardUnknown(m)
}

var xxx_messageInfo_Folder proto.InternalMessageInfo

func (m *Folder) GetBlobs() []*FolderElement {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *Folder) GetSubFolders() []*FolderElement {
	if m != nil {
		return m.SubFolders
	}
	return nil
}

type Blob struct {
	// Types that are valid to be assigned to Content:
	//	*Blob_Dataset
	//	*Blob_Environment
	//	*Blob_Code
	//	*Blob_Config
	Content              isBlob_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Blob) Reset()         { *m = Blob{} }
func (m *Blob) String() string { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()    {}
func (*Blob) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{5}
}

func (m *Blob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blob.Unmarshal(m, b)
}
func (m *Blob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blob.Marshal(b, m, deterministic)
}
func (m *Blob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blob.Merge(m, src)
}
func (m *Blob) XXX_Size() int {
	return xxx_messageInfo_Blob.Size(m)
}
func (m *Blob) XXX_DiscardUnknown() {
	xxx_messageInfo_Blob.DiscardUnknown(m)
}

var xxx_messageInfo_Blob proto.InternalMessageInfo

type isBlob_Content interface {
	isBlob_Content()
}

type Blob_Dataset struct {
	Dataset *DatasetBlob `protobuf:"bytes,2,opt,name=dataset,proto3,oneof"`
}

type Blob_Environment struct {
	Environment *EnvironmentBlob `protobuf:"bytes,3,opt,name=environment,proto3,oneof"`
}

type Blob_Code struct {
	Code *CodeBlob `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type Blob_Config struct {
	Config *ConfigBlob `protobuf:"bytes,5,opt,name=config,proto3,oneof"`
}

func (*Blob_Dataset) isBlob_Content() {}

func (*Blob_Environment) isBlob_Content() {}

func (*Blob_Code) isBlob_Content() {}

func (*Blob_Config) isBlob_Content() {}

func (m *Blob) GetContent() isBlob_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Blob) GetDataset() *DatasetBlob {
	if x, ok := m.GetContent().(*Blob_Dataset); ok {
		return x.Dataset
	}
	return nil
}

func (m *Blob) GetEnvironment() *EnvironmentBlob {
	if x, ok := m.GetContent().(*Blob_Environment); ok {
		return x.Environment
	}
	return nil
}

func (m *Blob) GetCode() *CodeBlob {
	if x, ok := m.GetContent().(*Blob_Code); ok {
		return x.Code
	}
	return nil
}

func (m *Blob) GetConfig() *ConfigBlob {
	if x, ok := m.GetContent().(*Blob_Config); ok {
		return x.Config
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Blob) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Blob_Dataset)(nil),
		(*Blob_Environment)(nil),
		(*Blob_Code)(nil),
		(*Blob_Config)(nil),
	}
}

type BlobExpanded struct {
	// List of folder names, with the last element being the name of the blob
	// Each element goes one level deeper. So ["foo", "bar"] represents the same as /foo/bar
	Location             []string `protobuf:"bytes,1,rep,name=location,proto3" json:"location,omitempty"`
	Blob                 *Blob    `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlobExpanded) Reset()         { *m = BlobExpanded{} }
func (m *BlobExpanded) String() string { return proto.CompactTextString(m) }
func (*BlobExpanded) ProtoMessage()    {}
func (*BlobExpanded) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{6}
}

func (m *BlobExpanded) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlobExpanded.Unmarshal(m, b)
}
func (m *BlobExpanded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlobExpanded.Marshal(b, m, deterministic)
}
func (m *BlobExpanded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobExpanded.Merge(m, src)
}
func (m *BlobExpanded) XXX_Size() int {
	return xxx_messageInfo_BlobExpanded.Size(m)
}
func (m *BlobExpanded) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobExpanded.DiscardUnknown(m)
}

var xxx_messageInfo_BlobExpanded proto.InternalMessageInfo

func (m *BlobExpanded) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *BlobExpanded) GetBlob() *Blob {
	if m != nil {
		return m.Blob
	}
	return nil
}

type BlobDiff struct {
	// List of folder names, with the last element being the name of the blob
	// Each element goes one level deeper. So ["foo", "bar"] represents the same as /foo/bar
	Location []string                  `protobuf:"bytes,1,rep,name=location,proto3" json:"location,omitempty"`
	Status   DiffStatusEnum_DiffStatus `protobuf:"varint,2,opt,name=status,proto3,enum=ai.verta.modeldb.versioning.DiffStatusEnum_DiffStatus" json:"status,omitempty"`
	// If a file changes its type, consider just as a removal of the old and addition of the new,
	// instead of trying to figure out inter-types diff
	//
	// Types that are valid to be assigned to Content:
	//	*BlobDiff_Dataset
	//	*BlobDiff_Environment
	//	*BlobDiff_Code
	//	*BlobDiff_Config
	Content              isBlobDiff_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BlobDiff) Reset()         { *m = BlobDiff{} }
func (m *BlobDiff) String() string { return proto.CompactTextString(m) }
func (*BlobDiff) ProtoMessage()    {}
func (*BlobDiff) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{7}
}

func (m *BlobDiff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlobDiff.Unmarshal(m, b)
}
func (m *BlobDiff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlobDiff.Marshal(b, m, deterministic)
}
func (m *BlobDiff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobDiff.Merge(m, src)
}
func (m *BlobDiff) XXX_Size() int {
	return xxx_messageInfo_BlobDiff.Size(m)
}
func (m *BlobDiff) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobDiff.DiscardUnknown(m)
}

var xxx_messageInfo_BlobDiff proto.InternalMessageInfo

func (m *BlobDiff) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *BlobDiff) GetStatus() DiffStatusEnum_DiffStatus {
	if m != nil {
		return m.Status
	}
	return DiffStatusEnum_UNKNOWN
}

type isBlobDiff_Content interface {
	isBlobDiff_Content()
}

type BlobDiff_Dataset struct {
	Dataset *DatasetDiff `protobuf:"bytes,3,opt,name=dataset,proto3,oneof"`
}

type BlobDiff_Environment struct {
	Environment *EnvironmentDiff `protobuf:"bytes,4,opt,name=environment,proto3,oneof"`
}

type BlobDiff_Code struct {
	Code *CodeDiff `protobuf:"bytes,5,opt,name=code,proto3,oneof"`
}

type BlobDiff_Config struct {
	Config *ConfigDiff `protobuf:"bytes,6,opt,name=config,proto3,oneof"`
}

func (*BlobDiff_Dataset) isBlobDiff_Content() {}

func (*BlobDiff_Environment) isBlobDiff_Content() {}

func (*BlobDiff_Code) isBlobDiff_Content() {}

func (*BlobDiff_Config) isBlobDiff_Content() {}

func (m *BlobDiff) GetContent() isBlobDiff_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BlobDiff) GetDataset() *DatasetDiff {
	if x, ok := m.GetContent().(*BlobDiff_Dataset); ok {
		return x.Dataset
	}
	return nil
}

func (m *BlobDiff) GetEnvironment() *EnvironmentDiff {
	if x, ok := m.GetContent().(*BlobDiff_Environment); ok {
		return x.Environment
	}
	return nil
}

func (m *BlobDiff) GetCode() *CodeDiff {
	if x, ok := m.GetContent().(*BlobDiff_Code); ok {
		return x.Code
	}
	return nil
}

func (m *BlobDiff) GetConfig() *ConfigDiff {
	if x, ok := m.GetContent().(*BlobDiff_Config); ok {
		return x.Config
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BlobDiff) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BlobDiff_Dataset)(nil),
		(*BlobDiff_Environment)(nil),
		(*BlobDiff_Code)(nil),
		(*BlobDiff_Config)(nil),
	}
}

type RepositoryVisibilityEnum struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepositoryVisibilityEnum) Reset()         { *m = RepositoryVisibilityEnum{} }
func (m *RepositoryVisibilityEnum) String() string { return proto.CompactTextString(m) }
func (*RepositoryVisibilityEnum) ProtoMessage()    {}
func (*RepositoryVisibilityEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{8}
}

func (m *RepositoryVisibilityEnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepositoryVisibilityEnum.Unmarshal(m, b)
}
func (m *RepositoryVisibilityEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepositoryVisibilityEnum.Marshal(b, m, deterministic)
}
func (m *RepositoryVisibilityEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryVisibilityEnum.Merge(m, src)
}
func (m *RepositoryVisibilityEnum) XXX_Size() int {
	return xxx_messageInfo_RepositoryVisibilityEnum.Size(m)
}
func (m *RepositoryVisibilityEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryVisibilityEnum.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryVisibilityEnum proto.InternalMessageInfo

type Repository struct {
	Id                   uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DateCreated          uint64                                        `protobuf:"varint,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateUpdated          uint64                                        `protobuf:"varint,4,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	WorkspaceId          string                                        `protobuf:"bytes,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	WorkspaceType        common.WorkspaceTypeEnum_WorkspaceType        `protobuf:"varint,6,opt,name=workspace_type,json=workspaceType,proto3,enum=ai.verta.common.WorkspaceTypeEnum_WorkspaceType" json:"workspace_type,omitempty"`
	RepositoryVisibility RepositoryVisibilityEnum_RepositoryVisibility `protobuf:"varint,7,opt,name=repository_visibility,json=repositoryVisibility,proto3,enum=ai.verta.modeldb.versioning.RepositoryVisibilityEnum_RepositoryVisibility" json:"repository_visibility,omitempty"`
	Owner                string                                        `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{9}
}

func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetDateCreated() uint64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *Repository) GetDateUpdated() uint64 {
	if m != nil {
		return m.DateUpdated
	}
	return 0
}

func (m *Repository) GetWorkspaceId() string {
	if m != nil {
		return m.WorkspaceId
	}
	return ""
}

func (m *Repository) GetWorkspaceType() common.WorkspaceTypeEnum_WorkspaceType {
	if m != nil {
		return m.WorkspaceType
	}
	return common.WorkspaceTypeEnum_UNKNOWN
}

func (m *Repository) GetRepositoryVisibility() RepositoryVisibilityEnum_RepositoryVisibility {
	if m != nil {
		return m.RepositoryVisibility
	}
	return RepositoryVisibilityEnum_PRIVATE
}

func (m *Repository) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// For pagination
type Pagination struct {
	PageNumber           int32    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit            int32    `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{10}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *Pagination) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

// CRUD for repositories
type RepositoryNamedIdentification struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceName        string   `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepositoryNamedIdentification) Reset()         { *m = RepositoryNamedIdentification{} }
func (m *RepositoryNamedIdentification) String() string { return proto.CompactTextString(m) }
func (*RepositoryNamedIdentification) ProtoMessage()    {}
func (*RepositoryNamedIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{11}
}

func (m *RepositoryNamedIdentification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepositoryNamedIdentification.Unmarshal(m, b)
}
func (m *RepositoryNamedIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepositoryNamedIdentification.Marshal(b, m, deterministic)
}
func (m *RepositoryNamedIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryNamedIdentification.Merge(m, src)
}
func (m *RepositoryNamedIdentification) XXX_Size() int {
	return xxx_messageInfo_RepositoryNamedIdentification.Size(m)
}
func (m *RepositoryNamedIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryNamedIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryNamedIdentification proto.InternalMessageInfo

func (m *RepositoryNamedIdentification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryNamedIdentification) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

// changed from oneof because of that bug: https://github.com/grpc-ecosystem/grpc-gateway/issues/753
type RepositoryIdentification struct {
	NamedId              *RepositoryNamedIdentification `protobuf:"bytes,1,opt,name=named_id,json=namedId,proto3" json:"named_id,omitempty"`
	RepoId               uint64                         `protobuf:"varint,2,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RepositoryIdentification) Reset()         { *m = RepositoryIdentification{} }
func (m *RepositoryIdentification) String() string { return proto.CompactTextString(m) }
func (*RepositoryIdentification) ProtoMessage()    {}
func (*RepositoryIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{12}
}

func (m *RepositoryIdentification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepositoryIdentification.Unmarshal(m, b)
}
func (m *RepositoryIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepositoryIdentification.Marshal(b, m, deterministic)
}
func (m *RepositoryIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryIdentification.Merge(m, src)
}
func (m *RepositoryIdentification) XXX_Size() int {
	return xxx_messageInfo_RepositoryIdentification.Size(m)
}
func (m *RepositoryIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryIdentification proto.InternalMessageInfo

func (m *RepositoryIdentification) GetNamedId() *RepositoryNamedIdentification {
	if m != nil {
		return m.NamedId
	}
	return nil
}

func (m *RepositoryIdentification) GetRepoId() uint64 {
	if m != nil {
		return m.RepoId
	}
	return 0
}

type ListRepositoriesRequest struct {
	WorkspaceName        string      `protobuf:"bytes,1,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListRepositoriesRequest) Reset()         { *m = ListRepositoriesRequest{} }
func (m *ListRepositoriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesRequest) ProtoMessage()    {}
func (*ListRepositoriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{13}
}

func (m *ListRepositoriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesRequest.Unmarshal(m, b)
}
func (m *ListRepositoriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesRequest.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesRequest.Merge(m, src)
}
func (m *ListRepositoriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesRequest.Size(m)
}
func (m *ListRepositoriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesRequest proto.InternalMessageInfo

func (m *ListRepositoriesRequest) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

func (m *ListRepositoriesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListRepositoriesRequest_Response struct {
	Repositories         []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	TotalRecords         int64         `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRepositoriesRequest_Response) Reset()         { *m = ListRepositoriesRequest_Response{} }
func (m *ListRepositoriesRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesRequest_Response) ProtoMessage()    {}
func (*ListRepositoriesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{13, 0}
}

func (m *ListRepositoriesRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesRequest_Response.Unmarshal(m, b)
}
func (m *ListRepositoriesRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesRequest_Response.Merge(m, src)
}
func (m *ListRepositoriesRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesRequest_Response.Size(m)
}
func (m *ListRepositoriesRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesRequest_Response proto.InternalMessageInfo

func (m *ListRepositoriesRequest_Response) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

func (m *ListRepositoriesRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type GetRepositoryRequest struct {
	Id                   *RepositoryIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetRepositoryRequest) Reset()         { *m = GetRepositoryRequest{} }
func (m *GetRepositoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetRepositoryRequest) ProtoMessage()    {}
func (*GetRepositoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{14}
}

func (m *GetRepositoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRepositoryRequest.Unmarshal(m, b)
}
func (m *GetRepositoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRepositoryRequest.Marshal(b, m, deterministic)
}
func (m *GetRepositoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRepositoryRequest.Merge(m, src)
}
func (m *GetRepositoryRequest) XXX_Size() int {
	return xxx_messageInfo_GetRepositoryRequest.Size(m)
}
func (m *GetRepositoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRepositoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRepositoryRequest proto.InternalMessageInfo

func (m *GetRepositoryRequest) GetId() *RepositoryIdentification {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetRepositoryRequest_Response struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetRepositoryRequest_Response) Reset()         { *m = GetRepositoryRequest_Response{} }
func (m *GetRepositoryRequest_Response) String() string { return proto.CompactTextString(m) }
func (*GetRepositoryRequest_Response) ProtoMessage()    {}
func (*GetRepositoryRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{14, 0}
}

func (m *GetRepositoryRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRepositoryRequest_Response.Unmarshal(m, b)
}
func (m *GetRepositoryRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRepositoryRequest_Response.Marshal(b, m, deterministic)
}
func (m *GetRepositoryRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRepositoryRequest_Response.Merge(m, src)
}
func (m *GetRepositoryRequest_Response) XXX_Size() int {
	return xxx_messageInfo_GetRepositoryRequest_Response.Size(m)
}
func (m *GetRepositoryRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRepositoryRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetRepositoryRequest_Response proto.InternalMessageInfo

func (m *GetRepositoryRequest_Response) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type SetRepository struct {
	Id                   *RepositoryIdentification `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Repository           *Repository               `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetRepository) Reset()         { *m = SetRepository{} }
func (m *SetRepository) String() string { return proto.CompactTextString(m) }
func (*SetRepository) ProtoMessage()    {}
func (*SetRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{15}
}

func (m *SetRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRepository.Unmarshal(m, b)
}
func (m *SetRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRepository.Marshal(b, m, deterministic)
}
func (m *SetRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRepository.Merge(m, src)
}
func (m *SetRepository) XXX_Size() int {
	return xxx_messageInfo_SetRepository.Size(m)
}
func (m *SetRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRepository.DiscardUnknown(m)
}

var xxx_messageInfo_SetRepository proto.InternalMessageInfo

func (m *SetRepository) GetId() *RepositoryIdentification {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SetRepository) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type SetRepository_Response struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SetRepository_Response) Reset()         { *m = SetRepository_Response{} }
func (m *SetRepository_Response) String() string { return proto.CompactTextString(m) }
func (*SetRepository_Response) ProtoMessage()    {}
func (*SetRepository_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{15, 0}
}

func (m *SetRepository_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRepository_Response.Unmarshal(m, b)
}
func (m *SetRepository_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRepository_Response.Marshal(b, m, deterministic)
}
func (m *SetRepository_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRepository_Response.Merge(m, src)
}
func (m *SetRepository_Response) XXX_Size() int {
	return xxx_messageInfo_SetRepository_Response.Size(m)
}
func (m *SetRepository_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRepository_Response.DiscardUnknown(m)
}

var xxx_messageInfo_SetRepository_Response proto.InternalMessageInfo

func (m *SetRepository_Response) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type DeleteRepositoryRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DeleteRepositoryRequest) Reset()         { *m = DeleteRepositoryRequest{} }
func (m *DeleteRepositoryRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRepositoryRequest) ProtoMessage()    {}
func (*DeleteRepositoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{16}
}

func (m *DeleteRepositoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRepositoryRequest.Unmarshal(m, b)
}
func (m *DeleteRepositoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRepositoryRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRepositoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRepositoryRequest.Merge(m, src)
}
func (m *DeleteRepositoryRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRepositoryRequest.Size(m)
}
func (m *DeleteRepositoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRepositoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRepositoryRequest proto.InternalMessageInfo

func (m *DeleteRepositoryRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

type DeleteRepositoryRequest_Response struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRepositoryRequest_Response) Reset()         { *m = DeleteRepositoryRequest_Response{} }
func (m *DeleteRepositoryRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteRepositoryRequest_Response) ProtoMessage()    {}
func (*DeleteRepositoryRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{16, 0}
}

func (m *DeleteRepositoryRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRepositoryRequest_Response.Unmarshal(m, b)
}
func (m *DeleteRepositoryRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRepositoryRequest_Response.Marshal(b, m, deterministic)
}
func (m *DeleteRepositoryRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRepositoryRequest_Response.Merge(m, src)
}
func (m *DeleteRepositoryRequest_Response) XXX_Size() int {
	return xxx_messageInfo_DeleteRepositoryRequest_Response.Size(m)
}
func (m *DeleteRepositoryRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRepositoryRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRepositoryRequest_Response proto.InternalMessageInfo

func (m *DeleteRepositoryRequest_Response) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

// CRUD for commits
type ListCommitsRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Pagination           *Pagination               `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CommitBase           string                    `protobuf:"bytes,3,opt,name=commit_base,json=commitBase,proto3" json:"commit_base,omitempty"`
	CommitHead           string                    `protobuf:"bytes,4,opt,name=commit_head,json=commitHead,proto3" json:"commit_head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListCommitsRequest) Reset()         { *m = ListCommitsRequest{} }
func (m *ListCommitsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommitsRequest) ProtoMessage()    {}
func (*ListCommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{17}
}

func (m *ListCommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitsRequest.Unmarshal(m, b)
}
func (m *ListCommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitsRequest.Marshal(b, m, deterministic)
}
func (m *ListCommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitsRequest.Merge(m, src)
}
func (m *ListCommitsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommitsRequest.Size(m)
}
func (m *ListCommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitsRequest proto.InternalMessageInfo

func (m *ListCommitsRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *ListCommitsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListCommitsRequest) GetCommitBase() string {
	if m != nil {
		return m.CommitBase
	}
	return ""
}

func (m *ListCommitsRequest) GetCommitHead() string {
	if m != nil {
		return m.CommitHead
	}
	return ""
}

type ListCommitsRequest_Response struct {
	Commits              []*Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	TotalRecords         int64     `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListCommitsRequest_Response) Reset()         { *m = ListCommitsRequest_Response{} }
func (m *ListCommitsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListCommitsRequest_Response) ProtoMessage()    {}
func (*ListCommitsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{17, 0}
}

func (m *ListCommitsRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitsRequest_Response.Unmarshal(m, b)
}
func (m *ListCommitsRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitsRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListCommitsRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitsRequest_Response.Merge(m, src)
}
func (m *ListCommitsRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListCommitsRequest_Response.Size(m)
}
func (m *ListCommitsRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitsRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitsRequest_Response proto.InternalMessageInfo

func (m *ListCommitsRequest_Response) GetCommits() []*Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *ListCommitsRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type GetCommitRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha            string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetCommitRequest) Reset()         { *m = GetCommitRequest{} }
func (m *GetCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GetCommitRequest) ProtoMessage()    {}
func (*GetCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{18}
}

func (m *GetCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommitRequest.Unmarshal(m, b)
}
func (m *GetCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommitRequest.Marshal(b, m, deterministic)
}
func (m *GetCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitRequest.Merge(m, src)
}
func (m *GetCommitRequest) XXX_Size() int {
	return xxx_messageInfo_GetCommitRequest.Size(m)
}
func (m *GetCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitRequest proto.InternalMessageInfo

func (m *GetCommitRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *GetCommitRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type GetCommitRequest_Response struct {
	Commit               *Commit  `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCommitRequest_Response) Reset()         { *m = GetCommitRequest_Response{} }
func (m *GetCommitRequest_Response) String() string { return proto.CompactTextString(m) }
func (*GetCommitRequest_Response) ProtoMessage()    {}
func (*GetCommitRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{18, 0}
}

func (m *GetCommitRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommitRequest_Response.Unmarshal(m, b)
}
func (m *GetCommitRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommitRequest_Response.Marshal(b, m, deterministic)
}
func (m *GetCommitRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitRequest_Response.Merge(m, src)
}
func (m *GetCommitRequest_Response) XXX_Size() int {
	return xxx_messageInfo_GetCommitRequest_Response.Size(m)
}
func (m *GetCommitRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitRequest_Response proto.InternalMessageInfo

func (m *GetCommitRequest_Response) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type CreateCommitRequest struct {
	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Commit       *Commit                   `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Blobs        []*BlobExpanded           `protobuf:"bytes,3,rep,name=blobs,proto3" json:"blobs,omitempty"`
	// Apply the diffs on top of commit_base
	// If a blob was added in the diff, add it on top of commit_base (doesn't matter if it was present already or not)
	// If a blob was deleted, delete if from commit_base if present
	// If a blob was modified, then:
	// 1) check that the type of the diff is consistent with the type of the blob. If they are different, raise an error saying so
	// 2) apply the diff to the blob as per the following logic:
	// 2a) if the field is atomic (e.g. python version, git repository), use the newer version (B) from the diff and overwrite what the commit_base has
	// 2b) if the field is not atomic (e.g. list of python requirements, dataset components), merge the lists by a) copying new values, b) deleting removed values, c) updating values that are already present based on some reasonable key
	CommitBase           string      `protobuf:"bytes,4,opt,name=commit_base,json=commitBase,proto3" json:"commit_base,omitempty"`
	Diffs                []*BlobDiff `protobuf:"bytes,5,rep,name=diffs,proto3" json:"diffs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateCommitRequest) Reset()         { *m = CreateCommitRequest{} }
func (m *CreateCommitRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCommitRequest) ProtoMessage()    {}
func (*CreateCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{19}
}

func (m *CreateCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCommitRequest.Unmarshal(m, b)
}
func (m *CreateCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCommitRequest.Marshal(b, m, deterministic)
}
func (m *CreateCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommitRequest.Merge(m, src)
}
func (m *CreateCommitRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCommitRequest.Size(m)
}
func (m *CreateCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommitRequest proto.InternalMessageInfo

func (m *CreateCommitRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *CreateCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CreateCommitRequest) GetBlobs() []*BlobExpanded {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *CreateCommitRequest) GetCommitBase() string {
	if m != nil {
		return m.CommitBase
	}
	return ""
}

func (m *CreateCommitRequest) GetDiffs() []*BlobDiff {
	if m != nil {
		return m.Diffs
	}
	return nil
}

type CreateCommitRequest_Response struct {
	Commit               *Commit  `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCommitRequest_Response) Reset()         { *m = CreateCommitRequest_Response{} }
func (m *CreateCommitRequest_Response) String() string { return proto.CompactTextString(m) }
func (*CreateCommitRequest_Response) ProtoMessage()    {}
func (*CreateCommitRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{19, 0}
}

func (m *CreateCommitRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCommitRequest_Response.Unmarshal(m, b)
}
func (m *CreateCommitRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCommitRequest_Response.Marshal(b, m, deterministic)
}
func (m *CreateCommitRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommitRequest_Response.Merge(m, src)
}
func (m *CreateCommitRequest_Response) XXX_Size() int {
	return xxx_messageInfo_CreateCommitRequest_Response.Size(m)
}
func (m *CreateCommitRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommitRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommitRequest_Response proto.InternalMessageInfo

func (m *CreateCommitRequest_Response) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type DeleteCommitRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha            string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DeleteCommitRequest) Reset()         { *m = DeleteCommitRequest{} }
func (m *DeleteCommitRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCommitRequest) ProtoMessage()    {}
func (*DeleteCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{20}
}

func (m *DeleteCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCommitRequest.Unmarshal(m, b)
}
func (m *DeleteCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCommitRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommitRequest.Merge(m, src)
}
func (m *DeleteCommitRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCommitRequest.Size(m)
}
func (m *DeleteCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommitRequest proto.InternalMessageInfo

func (m *DeleteCommitRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *DeleteCommitRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type DeleteCommitRequest_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCommitRequest_Response) Reset()         { *m = DeleteCommitRequest_Response{} }
func (m *DeleteCommitRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteCommitRequest_Response) ProtoMessage()    {}
func (*DeleteCommitRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{20, 0}
}

func (m *DeleteCommitRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCommitRequest_Response.Unmarshal(m, b)
}
func (m *DeleteCommitRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCommitRequest_Response.Marshal(b, m, deterministic)
}
func (m *DeleteCommitRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommitRequest_Response.Merge(m, src)
}
func (m *DeleteCommitRequest_Response) XXX_Size() int {
	return xxx_messageInfo_DeleteCommitRequest_Response.Size(m)
}
func (m *DeleteCommitRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommitRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommitRequest_Response proto.InternalMessageInfo

// Getting blobs and folders in a commit
type ListCommitBlobsRequest struct {
	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	// Pagination pagination = 2;
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// List of folder names (with the last element potentially representing the blob name)
	// This will be used to limit the search to scope just this location, like `git log /my/path` would do
	LocationPrefix       []string `protobuf:"bytes,4,rep,name=location_prefix,json=locationPrefix,proto3" json:"location_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCommitBlobsRequest) Reset()         { *m = ListCommitBlobsRequest{} }
func (m *ListCommitBlobsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommitBlobsRequest) ProtoMessage()    {}
func (*ListCommitBlobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{21}
}

func (m *ListCommitBlobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitBlobsRequest.Unmarshal(m, b)
}
func (m *ListCommitBlobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitBlobsRequest.Marshal(b, m, deterministic)
}
func (m *ListCommitBlobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitBlobsRequest.Merge(m, src)
}
func (m *ListCommitBlobsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommitBlobsRequest.Size(m)
}
func (m *ListCommitBlobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitBlobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitBlobsRequest proto.InternalMessageInfo

func (m *ListCommitBlobsRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *ListCommitBlobsRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *ListCommitBlobsRequest) GetLocationPrefix() []string {
	if m != nil {
		return m.LocationPrefix
	}
	return nil
}

type ListCommitBlobsRequest_Response struct {
	Blobs                []*BlobExpanded `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	TotalRecords         int64           `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListCommitBlobsRequest_Response) Reset()         { *m = ListCommitBlobsRequest_Response{} }
func (m *ListCommitBlobsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListCommitBlobsRequest_Response) ProtoMessage()    {}
func (*ListCommitBlobsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{21, 0}
}

func (m *ListCommitBlobsRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitBlobsRequest_Response.Unmarshal(m, b)
}
func (m *ListCommitBlobsRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitBlobsRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListCommitBlobsRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitBlobsRequest_Response.Merge(m, src)
}
func (m *ListCommitBlobsRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListCommitBlobsRequest_Response.Size(m)
}
func (m *ListCommitBlobsRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitBlobsRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitBlobsRequest_Response proto.InternalMessageInfo

func (m *ListCommitBlobsRequest_Response) GetBlobs() []*BlobExpanded {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *ListCommitBlobsRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

// Getting experimentRuns linked to a commit
type ListCommitExperimentRunsRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Pagination           *Pagination               `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CommitSha            string                    `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListCommitExperimentRunsRequest) Reset()         { *m = ListCommitExperimentRunsRequest{} }
func (m *ListCommitExperimentRunsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommitExperimentRunsRequest) ProtoMessage()    {}
func (*ListCommitExperimentRunsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{22}
}

func (m *ListCommitExperimentRunsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitExperimentRunsRequest.Unmarshal(m, b)
}
func (m *ListCommitExperimentRunsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitExperimentRunsRequest.Marshal(b, m, deterministic)
}
func (m *ListCommitExperimentRunsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitExperimentRunsRequest.Merge(m, src)
}
func (m *ListCommitExperimentRunsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommitExperimentRunsRequest.Size(m)
}
func (m *ListCommitExperimentRunsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitExperimentRunsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitExperimentRunsRequest proto.InternalMessageInfo

func (m *ListCommitExperimentRunsRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *ListCommitExperimentRunsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListCommitExperimentRunsRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type ListCommitExperimentRunsRequest_Response struct {
	Runs                 []*modeldb.ExperimentRun `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	TotalRecords         int64                    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListCommitExperimentRunsRequest_Response) Reset() {
	*m = ListCommitExperimentRunsRequest_Response{}
}
func (m *ListCommitExperimentRunsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListCommitExperimentRunsRequest_Response) ProtoMessage()    {}
func (*ListCommitExperimentRunsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{22, 0}
}

func (m *ListCommitExperimentRunsRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitExperimentRunsRequest_Response.Unmarshal(m, b)
}
func (m *ListCommitExperimentRunsRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitExperimentRunsRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListCommitExperimentRunsRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitExperimentRunsRequest_Response.Merge(m, src)
}
func (m *ListCommitExperimentRunsRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListCommitExperimentRunsRequest_Response.Size(m)
}
func (m *ListCommitExperimentRunsRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitExperimentRunsRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitExperimentRunsRequest_Response proto.InternalMessageInfo

func (m *ListCommitExperimentRunsRequest_Response) GetRuns() []*modeldb.ExperimentRun {
	if m != nil {
		return m.Runs
	}
	return nil
}

func (m *ListCommitExperimentRunsRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

// Getting experimentRuns linked to a blob
type ListBlobExperimentRunsRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Pagination           *Pagination               `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CommitSha            string                    `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location             []string                  `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListBlobExperimentRunsRequest) Reset()         { *m = ListBlobExperimentRunsRequest{} }
func (m *ListBlobExperimentRunsRequest) String() string { return proto.CompactTextString(m) }
func (*ListBlobExperimentRunsRequest) ProtoMessage()    {}
func (*ListBlobExperimentRunsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{23}
}

func (m *ListBlobExperimentRunsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBlobExperimentRunsRequest.Unmarshal(m, b)
}
func (m *ListBlobExperimentRunsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBlobExperimentRunsRequest.Marshal(b, m, deterministic)
}
func (m *ListBlobExperimentRunsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlobExperimentRunsRequest.Merge(m, src)
}
func (m *ListBlobExperimentRunsRequest) XXX_Size() int {
	return xxx_messageInfo_ListBlobExperimentRunsRequest.Size(m)
}
func (m *ListBlobExperimentRunsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlobExperimentRunsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlobExperimentRunsRequest proto.InternalMessageInfo

func (m *ListBlobExperimentRunsRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *ListBlobExperimentRunsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListBlobExperimentRunsRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *ListBlobExperimentRunsRequest) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

type ListBlobExperimentRunsRequest_Response struct {
	Runs                 []*modeldb.ExperimentRun `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	TotalRecords         int64                    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListBlobExperimentRunsRequest_Response) Reset() {
	*m = ListBlobExperimentRunsRequest_Response{}
}
func (m *ListBlobExperimentRunsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListBlobExperimentRunsRequest_Response) ProtoMessage()    {}
func (*ListBlobExperimentRunsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{23, 0}
}

func (m *ListBlobExperimentRunsRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBlobExperimentRunsRequest_Response.Unmarshal(m, b)
}
func (m *ListBlobExperimentRunsRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBlobExperimentRunsRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListBlobExperimentRunsRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlobExperimentRunsRequest_Response.Merge(m, src)
}
func (m *ListBlobExperimentRunsRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListBlobExperimentRunsRequest_Response.Size(m)
}
func (m *ListBlobExperimentRunsRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlobExperimentRunsRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlobExperimentRunsRequest_Response proto.InternalMessageInfo

func (m *ListBlobExperimentRunsRequest_Response) GetRuns() []*modeldb.ExperimentRun {
	if m != nil {
		return m.Runs
	}
	return nil
}

func (m *ListBlobExperimentRunsRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type GetCommitComponentRequest struct {
	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// List of folder names, with the last element being the name of the blob or tree
	// the last element determines if the response to be returned is Folder or Blob
	// Each element goes one level deeper. So ["foo", "bar"] represents the same as /foo/bar
	Location             []string `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCommitComponentRequest) Reset()         { *m = GetCommitComponentRequest{} }
func (m *GetCommitComponentRequest) String() string { return proto.CompactTextString(m) }
func (*GetCommitComponentRequest) ProtoMessage()    {}
func (*GetCommitComponentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{24}
}

func (m *GetCommitComponentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommitComponentRequest.Unmarshal(m, b)
}
func (m *GetCommitComponentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommitComponentRequest.Marshal(b, m, deterministic)
}
func (m *GetCommitComponentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitComponentRequest.Merge(m, src)
}
func (m *GetCommitComponentRequest) XXX_Size() int {
	return xxx_messageInfo_GetCommitComponentRequest.Size(m)
}
func (m *GetCommitComponentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitComponentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitComponentRequest proto.InternalMessageInfo

func (m *GetCommitComponentRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *GetCommitComponentRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *GetCommitComponentRequest) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

type GetCommitComponentRequest_Response struct {
	// Types that are valid to be assigned to Component:
	//	*GetCommitComponentRequest_Response_Folder
	//	*GetCommitComponentRequest_Response_Blob
	Component            isGetCommitComponentRequest_Response_Component `protobuf_oneof:"component"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *GetCommitComponentRequest_Response) Reset()         { *m = GetCommitComponentRequest_Response{} }
func (m *GetCommitComponentRequest_Response) String() string { return proto.CompactTextString(m) }
func (*GetCommitComponentRequest_Response) ProtoMessage()    {}
func (*GetCommitComponentRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{24, 0}
}

func (m *GetCommitComponentRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommitComponentRequest_Response.Unmarshal(m, b)
}
func (m *GetCommitComponentRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommitComponentRequest_Response.Marshal(b, m, deterministic)
}
func (m *GetCommitComponentRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommitComponentRequest_Response.Merge(m, src)
}
func (m *GetCommitComponentRequest_Response) XXX_Size() int {
	return xxx_messageInfo_GetCommitComponentRequest_Response.Size(m)
}
func (m *GetCommitComponentRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommitComponentRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommitComponentRequest_Response proto.InternalMessageInfo

type isGetCommitComponentRequest_Response_Component interface {
	isGetCommitComponentRequest_Response_Component()
}

type GetCommitComponentRequest_Response_Folder struct {
	Folder *Folder `protobuf:"bytes,1,opt,name=folder,proto3,oneof"`
}

type GetCommitComponentRequest_Response_Blob struct {
	Blob *Blob `protobuf:"bytes,2,opt,name=blob,proto3,oneof"`
}

func (*GetCommitComponentRequest_Response_Folder) isGetCommitComponentRequest_Response_Component() {}

func (*GetCommitComponentRequest_Response_Blob) isGetCommitComponentRequest_Response_Component() {}

func (m *GetCommitComponentRequest_Response) GetComponent() isGetCommitComponentRequest_Response_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *GetCommitComponentRequest_Response) GetFolder() *Folder {
	if x, ok := m.GetComponent().(*GetCommitComponentRequest_Response_Folder); ok {
		return x.Folder
	}
	return nil
}

func (m *GetCommitComponentRequest_Response) GetBlob() *Blob {
	if x, ok := m.GetComponent().(*GetCommitComponentRequest_Response_Blob); ok {
		return x.Blob
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetCommitComponentRequest_Response) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetCommitComponentRequest_Response_Folder)(nil),
		(*GetCommitComponentRequest_Response_Blob)(nil),
	}
}

// Git-like operations
type ComputeRepositoryDiffRequest struct {
	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitA      string                    `protobuf:"bytes,2,opt,name=commit_a,json=commitA,proto3" json:"commit_a,omitempty"`
	CommitB      string                    `protobuf:"bytes,3,opt,name=commit_b,json=commitB,proto3" json:"commit_b,omitempty"`
	//Replace commit_a with the nearest common ancestor of commit_a and commit_b
	ReplaceAWithCommonAncestor bool `protobuf:"varint,5,opt,name=replace_a_with_common_ancestor,json=replaceAWithCommonAncestor,proto3" json:"replace_a_with_common_ancestor,omitempty"`
	//for a or b only one of commit or branch should be populated
	BranchA              string   `protobuf:"bytes,6,opt,name=branch_a,json=branchA,proto3" json:"branch_a,omitempty"`
	BranchB              string   `protobuf:"bytes,7,opt,name=branch_b,json=branchB,proto3" json:"branch_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeRepositoryDiffRequest) Reset()         { *m = ComputeRepositoryDiffRequest{} }
func (m *ComputeRepositoryDiffRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeRepositoryDiffRequest) ProtoMessage()    {}
func (*ComputeRepositoryDiffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{25}
}

func (m *ComputeRepositoryDiffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeRepositoryDiffRequest.Unmarshal(m, b)
}
func (m *ComputeRepositoryDiffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeRepositoryDiffRequest.Marshal(b, m, deterministic)
}
func (m *ComputeRepositoryDiffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeRepositoryDiffRequest.Merge(m, src)
}
func (m *ComputeRepositoryDiffRequest) XXX_Size() int {
	return xxx_messageInfo_ComputeRepositoryDiffRequest.Size(m)
}
func (m *ComputeRepositoryDiffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeRepositoryDiffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeRepositoryDiffRequest proto.InternalMessageInfo

func (m *ComputeRepositoryDiffRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *ComputeRepositoryDiffRequest) GetCommitA() string {
	if m != nil {
		return m.CommitA
	}
	return ""
}

func (m *ComputeRepositoryDiffRequest) GetCommitB() string {
	if m != nil {
		return m.CommitB
	}
	return ""
}

func (m *ComputeRepositoryDiffRequest) GetReplaceAWithCommonAncestor() bool {
	if m != nil {
		return m.ReplaceAWithCommonAncestor
	}
	return false
}

func (m *ComputeRepositoryDiffRequest) GetBranchA() string {
	if m != nil {
		return m.BranchA
	}
	return ""
}

func (m *ComputeRepositoryDiffRequest) GetBranchB() string {
	if m != nil {
		return m.BranchB
	}
	return ""
}

type ComputeRepositoryDiffRequest_Response struct {
	Diffs                []*BlobDiff `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ComputeRepositoryDiffRequest_Response) Reset()         { *m = ComputeRepositoryDiffRequest_Response{} }
func (m *ComputeRepositoryDiffRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ComputeRepositoryDiffRequest_Response) ProtoMessage()    {}
func (*ComputeRepositoryDiffRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{25, 0}
}

func (m *ComputeRepositoryDiffRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeRepositoryDiffRequest_Response.Unmarshal(m, b)
}
func (m *ComputeRepositoryDiffRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeRepositoryDiffRequest_Response.Marshal(b, m, deterministic)
}
func (m *ComputeRepositoryDiffRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeRepositoryDiffRequest_Response.Merge(m, src)
}
func (m *ComputeRepositoryDiffRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ComputeRepositoryDiffRequest_Response.Size(m)
}
func (m *ComputeRepositoryDiffRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeRepositoryDiffRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeRepositoryDiffRequest_Response proto.InternalMessageInfo

func (m *ComputeRepositoryDiffRequest_Response) GetDiffs() []*BlobDiff {
	if m != nil {
		return m.Diffs
	}
	return nil
}

type ListCommitsLogRequest struct {
	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	// Pagination pagination = 2;
	Branch               string   `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitSha            string   `protobuf:"bytes,4,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCommitsLogRequest) Reset()         { *m = ListCommitsLogRequest{} }
func (m *ListCommitsLogRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommitsLogRequest) ProtoMessage()    {}
func (*ListCommitsLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{26}
}

func (m *ListCommitsLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitsLogRequest.Unmarshal(m, b)
}
func (m *ListCommitsLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitsLogRequest.Marshal(b, m, deterministic)
}
func (m *ListCommitsLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitsLogRequest.Merge(m, src)
}
func (m *ListCommitsLogRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommitsLogRequest.Size(m)
}
func (m *ListCommitsLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitsLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitsLogRequest proto.InternalMessageInfo

func (m *ListCommitsLogRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *ListCommitsLogRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ListCommitsLogRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type ListCommitsLogRequest_Response struct {
	Commits              []*Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	TotalRecords         int64     `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListCommitsLogRequest_Response) Reset()         { *m = ListCommitsLogRequest_Response{} }
func (m *ListCommitsLogRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListCommitsLogRequest_Response) ProtoMessage()    {}
func (*ListCommitsLogRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{26, 0}
}

func (m *ListCommitsLogRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitsLogRequest_Response.Unmarshal(m, b)
}
func (m *ListCommitsLogRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitsLogRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListCommitsLogRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitsLogRequest_Response.Merge(m, src)
}
func (m *ListCommitsLogRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListCommitsLogRequest_Response.Size(m)
}
func (m *ListCommitsLogRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitsLogRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitsLogRequest_Response proto.InternalMessageInfo

func (m *ListCommitsLogRequest_Response) GetCommits() []*Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *ListCommitsLogRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

// CRUD for branches
// Branches, like in git, are unique
type ListBranchesRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListBranchesRequest) Reset()         { *m = ListBranchesRequest{} }
func (m *ListBranchesRequest) String() string { return proto.CompactTextString(m) }
func (*ListBranchesRequest) ProtoMessage()    {}
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{27}
}

func (m *ListBranchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBranchesRequest.Unmarshal(m, b)
}
func (m *ListBranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBranchesRequest.Marshal(b, m, deterministic)
}
func (m *ListBranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBranchesRequest.Merge(m, src)
}
func (m *ListBranchesRequest) XXX_Size() int {
	return xxx_messageInfo_ListBranchesRequest.Size(m)
}
func (m *ListBranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBranchesRequest proto.InternalMessageInfo

func (m *ListBranchesRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

type ListBranchesRequest_Response struct {
	Branches             []string `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	TotalRecords         int64    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBranchesRequest_Response) Reset()         { *m = ListBranchesRequest_Response{} }
func (m *ListBranchesRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListBranchesRequest_Response) ProtoMessage()    {}
func (*ListBranchesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{27, 0}
}

func (m *ListBranchesRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBranchesRequest_Response.Unmarshal(m, b)
}
func (m *ListBranchesRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBranchesRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListBranchesRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBranchesRequest_Response.Merge(m, src)
}
func (m *ListBranchesRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListBranchesRequest_Response.Size(m)
}
func (m *ListBranchesRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBranchesRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListBranchesRequest_Response proto.InternalMessageInfo

func (m *ListBranchesRequest_Response) GetBranches() []string {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *ListBranchesRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type GetBranchRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Branch               string                    `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetBranchRequest) Reset()         { *m = GetBranchRequest{} }
func (m *GetBranchRequest) String() string { return proto.CompactTextString(m) }
func (*GetBranchRequest) ProtoMessage()    {}
func (*GetBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{28}
}

func (m *GetBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBranchRequest.Unmarshal(m, b)
}
func (m *GetBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBranchRequest.Marshal(b, m, deterministic)
}
func (m *GetBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchRequest.Merge(m, src)
}
func (m *GetBranchRequest) XXX_Size() int {
	return xxx_messageInfo_GetBranchRequest.Size(m)
}
func (m *GetBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchRequest proto.InternalMessageInfo

func (m *GetBranchRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *GetBranchRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type GetBranchRequest_Response struct {
	Commit               *Commit  `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBranchRequest_Response) Reset()         { *m = GetBranchRequest_Response{} }
func (m *GetBranchRequest_Response) String() string { return proto.CompactTextString(m) }
func (*GetBranchRequest_Response) ProtoMessage()    {}
func (*GetBranchRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{28, 0}
}

func (m *GetBranchRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBranchRequest_Response.Unmarshal(m, b)
}
func (m *GetBranchRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBranchRequest_Response.Marshal(b, m, deterministic)
}
func (m *GetBranchRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBranchRequest_Response.Merge(m, src)
}
func (m *GetBranchRequest_Response) XXX_Size() int {
	return xxx_messageInfo_GetBranchRequest_Response.Size(m)
}
func (m *GetBranchRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBranchRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetBranchRequest_Response proto.InternalMessageInfo

func (m *GetBranchRequest_Response) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type SetBranchRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Branch               string                    `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitSha            string                    `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetBranchRequest) Reset()         { *m = SetBranchRequest{} }
func (m *SetBranchRequest) String() string { return proto.CompactTextString(m) }
func (*SetBranchRequest) ProtoMessage()    {}
func (*SetBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{29}
}

func (m *SetBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBranchRequest.Unmarshal(m, b)
}
func (m *SetBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBranchRequest.Marshal(b, m, deterministic)
}
func (m *SetBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBranchRequest.Merge(m, src)
}
func (m *SetBranchRequest) XXX_Size() int {
	return xxx_messageInfo_SetBranchRequest.Size(m)
}
func (m *SetBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBranchRequest proto.InternalMessageInfo

func (m *SetBranchRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *SetBranchRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *SetBranchRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type SetBranchRequest_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBranchRequest_Response) Reset()         { *m = SetBranchRequest_Response{} }
func (m *SetBranchRequest_Response) String() string { return proto.CompactTextString(m) }
func (*SetBranchRequest_Response) ProtoMessage()    {}
func (*SetBranchRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{29, 0}
}

func (m *SetBranchRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetBranchRequest_Response.Unmarshal(m, b)
}
func (m *SetBranchRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetBranchRequest_Response.Marshal(b, m, deterministic)
}
func (m *SetBranchRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBranchRequest_Response.Merge(m, src)
}
func (m *SetBranchRequest_Response) XXX_Size() int {
	return xxx_messageInfo_SetBranchRequest_Response.Size(m)
}
func (m *SetBranchRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBranchRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_SetBranchRequest_Response proto.InternalMessageInfo

type DeleteBranchRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Branch               string                    `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DeleteBranchRequest) Reset()         { *m = DeleteBranchRequest{} }
func (m *DeleteBranchRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBranchRequest) ProtoMessage()    {}
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{30}
}

func (m *DeleteBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBranchRequest.Unmarshal(m, b)
}
func (m *DeleteBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBranchRequest.Marshal(b, m, deterministic)
}
func (m *DeleteBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBranchRequest.Merge(m, src)
}
func (m *DeleteBranchRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBranchRequest.Size(m)
}
func (m *DeleteBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBranchRequest proto.InternalMessageInfo

func (m *DeleteBranchRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *DeleteBranchRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type DeleteBranchRequest_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBranchRequest_Response) Reset()         { *m = DeleteBranchRequest_Response{} }
func (m *DeleteBranchRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteBranchRequest_Response) ProtoMessage()    {}
func (*DeleteBranchRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{30, 0}
}

func (m *DeleteBranchRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBranchRequest_Response.Unmarshal(m, b)
}
func (m *DeleteBranchRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBranchRequest_Response.Marshal(b, m, deterministic)
}
func (m *DeleteBranchRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBranchRequest_Response.Merge(m, src)
}
func (m *DeleteBranchRequest_Response) XXX_Size() int {
	return xxx_messageInfo_DeleteBranchRequest_Response.Size(m)
}
func (m *DeleteBranchRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBranchRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBranchRequest_Response proto.InternalMessageInfo

// CRUD for tags
// Tags, like in git, are unique
type ListTagsRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListTagsRequest) Reset()         { *m = ListTagsRequest{} }
func (m *ListTagsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTagsRequest) ProtoMessage()    {}
func (*ListTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{31}
}

func (m *ListTagsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTagsRequest.Unmarshal(m, b)
}
func (m *ListTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTagsRequest.Marshal(b, m, deterministic)
}
func (m *ListTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTagsRequest.Merge(m, src)
}
func (m *ListTagsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTagsRequest.Size(m)
}
func (m *ListTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTagsRequest proto.InternalMessageInfo

func (m *ListTagsRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

type ListTagsRequest_Response struct {
	Tags                 []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	TotalRecords         int64    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTagsRequest_Response) Reset()         { *m = ListTagsRequest_Response{} }
func (m *ListTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListTagsRequest_Response) ProtoMessage()    {}
func (*ListTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{31, 0}
}

func (m *ListTagsRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTagsRequest_Response.Unmarshal(m, b)
}
func (m *ListTagsRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTagsRequest_Response.Marshal(b, m, deterministic)
}
func (m *ListTagsRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTagsRequest_Response.Merge(m, src)
}
func (m *ListTagsRequest_Response) XXX_Size() int {
	return xxx_messageInfo_ListTagsRequest_Response.Size(m)
}
func (m *ListTagsRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTagsRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_ListTagsRequest_Response proto.InternalMessageInfo

func (m *ListTagsRequest_Response) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListTagsRequest_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type GetTagRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag                  string                    `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetTagRequest) Reset()         { *m = GetTagRequest{} }
func (m *GetTagRequest) String() string { return proto.CompactTextString(m) }
func (*GetTagRequest) ProtoMessage()    {}
func (*GetTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{32}
}

func (m *GetTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTagRequest.Unmarshal(m, b)
}
func (m *GetTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTagRequest.Marshal(b, m, deterministic)
}
func (m *GetTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagRequest.Merge(m, src)
}
func (m *GetTagRequest) XXX_Size() int {
	return xxx_messageInfo_GetTagRequest.Size(m)
}
func (m *GetTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagRequest proto.InternalMessageInfo

func (m *GetTagRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *GetTagRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type GetTagRequest_Response struct {
	Commit               *Commit  `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTagRequest_Response) Reset()         { *m = GetTagRequest_Response{} }
func (m *GetTagRequest_Response) String() string { return proto.CompactTextString(m) }
func (*GetTagRequest_Response) ProtoMessage()    {}
func (*GetTagRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{32, 0}
}

func (m *GetTagRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTagRequest_Response.Unmarshal(m, b)
}
func (m *GetTagRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTagRequest_Response.Marshal(b, m, deterministic)
}
func (m *GetTagRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagRequest_Response.Merge(m, src)
}
func (m *GetTagRequest_Response) XXX_Size() int {
	return xxx_messageInfo_GetTagRequest_Response.Size(m)
}
func (m *GetTagRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagRequest_Response proto.InternalMessageInfo

func (m *GetTagRequest_Response) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type SetTagRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag                  string                    `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	CommitSha            string                    `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetTagRequest) Reset()         { *m = SetTagRequest{} }
func (m *SetTagRequest) String() string { return proto.CompactTextString(m) }
func (*SetTagRequest) ProtoMessage()    {}
func (*SetTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{33}
}

func (m *SetTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetTagRequest.Unmarshal(m, b)
}
func (m *SetTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetTagRequest.Marshal(b, m, deterministic)
}
func (m *SetTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTagRequest.Merge(m, src)
}
func (m *SetTagRequest) XXX_Size() int {
	return xxx_messageInfo_SetTagRequest.Size(m)
}
func (m *SetTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetTagRequest proto.InternalMessageInfo

func (m *SetTagRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *SetTagRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *SetTagRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type SetTagRequest_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetTagRequest_Response) Reset()         { *m = SetTagRequest_Response{} }
func (m *SetTagRequest_Response) String() string { return proto.CompactTextString(m) }
func (*SetTagRequest_Response) ProtoMessage()    {}
func (*SetTagRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{33, 0}
}

func (m *SetTagRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetTagRequest_Response.Unmarshal(m, b)
}
func (m *SetTagRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetTagRequest_Response.Marshal(b, m, deterministic)
}
func (m *SetTagRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTagRequest_Response.Merge(m, src)
}
func (m *SetTagRequest_Response) XXX_Size() int {
	return xxx_messageInfo_SetTagRequest_Response.Size(m)
}
func (m *SetTagRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTagRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_SetTagRequest_Response proto.InternalMessageInfo

type DeleteTagRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag                  string                    `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DeleteTagRequest) Reset()         { *m = DeleteTagRequest{} }
func (m *DeleteTagRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTagRequest) ProtoMessage()    {}
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{34}
}

func (m *DeleteTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTagRequest.Unmarshal(m, b)
}
func (m *DeleteTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTagRequest.Marshal(b, m, deterministic)
}
func (m *DeleteTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTagRequest.Merge(m, src)
}
func (m *DeleteTagRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTagRequest.Size(m)
}
func (m *DeleteTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTagRequest proto.InternalMessageInfo

func (m *DeleteTagRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *DeleteTagRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type DeleteTagRequest_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTagRequest_Response) Reset()         { *m = DeleteTagRequest_Response{} }
func (m *DeleteTagRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteTagRequest_Response) ProtoMessage()    {}
func (*DeleteTagRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{34, 0}
}

func (m *DeleteTagRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTagRequest_Response.Unmarshal(m, b)
}
func (m *DeleteTagRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTagRequest_Response.Marshal(b, m, deterministic)
}
func (m *DeleteTagRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTagRequest_Response.Merge(m, src)
}
func (m *DeleteTagRequest_Response) XXX_Size() int {
	return xxx_messageInfo_DeleteTagRequest_Response.Size(m)
}
func (m *DeleteTagRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTagRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTagRequest_Response proto.InternalMessageInfo

type MergeRepositoryCommitsRequest struct {
	RepositoryId *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitShaA   string                    `protobuf:"bytes,2,opt,name=commit_sha_a,json=commitShaA,proto3" json:"commit_sha_a,omitempty"`
	CommitShaB   string                    `protobuf:"bytes,3,opt,name=commit_sha_b,json=commitShaB,proto3" json:"commit_sha_b,omitempty"`
	Content      *Commit                   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	//for a or b only one of commit or branch should be populated
	BranchA              string   `protobuf:"bytes,5,opt,name=branch_a,json=branchA,proto3" json:"branch_a,omitempty"`
	BranchB              string   `protobuf:"bytes,6,opt,name=branch_b,json=branchB,proto3" json:"branch_b,omitempty"`
	IsDryRun             bool     `protobuf:"varint,7,opt,name=is_dry_run,json=isDryRun,proto3" json:"is_dry_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MergeRepositoryCommitsRequest) Reset()         { *m = MergeRepositoryCommitsRequest{} }
func (m *MergeRepositoryCommitsRequest) String() string { return proto.CompactTextString(m) }
func (*MergeRepositoryCommitsRequest) ProtoMessage()    {}
func (*MergeRepositoryCommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{35}
}

func (m *MergeRepositoryCommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MergeRepositoryCommitsRequest.Unmarshal(m, b)
}
func (m *MergeRepositoryCommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MergeRepositoryCommitsRequest.Marshal(b, m, deterministic)
}
func (m *MergeRepositoryCommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeRepositoryCommitsRequest.Merge(m, src)
}
func (m *MergeRepositoryCommitsRequest) XXX_Size() int {
	return xxx_messageInfo_MergeRepositoryCommitsRequest.Size(m)
}
func (m *MergeRepositoryCommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeRepositoryCommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MergeRepositoryCommitsRequest proto.InternalMessageInfo

func (m *MergeRepositoryCommitsRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *MergeRepositoryCommitsRequest) GetCommitShaA() string {
	if m != nil {
		return m.CommitShaA
	}
	return ""
}

func (m *MergeRepositoryCommitsRequest) GetCommitShaB() string {
	if m != nil {
		return m.CommitShaB
	}
	return ""
}

func (m *MergeRepositoryCommitsRequest) GetContent() *Commit {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *MergeRepositoryCommitsRequest) GetBranchA() string {
	if m != nil {
		return m.BranchA
	}
	return ""
}

func (m *MergeRepositoryCommitsRequest) GetBranchB() string {
	if m != nil {
		return m.BranchB
	}
	return ""
}

func (m *MergeRepositoryCommitsRequest) GetIsDryRun() bool {
	if m != nil {
		return m.IsDryRun
	}
	return false
}

type MergeRepositoryCommitsRequest_Response struct {
	Commit    *Commit     `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Conflicts []*BlobDiff `protobuf:"bytes,2,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
	// In case of a conflict, stop at the first such conflict and return it
	CommonBase           *Commit  `protobuf:"bytes,3,opt,name=common_base,json=commonBase,proto3" json:"common_base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MergeRepositoryCommitsRequest_Response) Reset() {
	*m = MergeRepositoryCommitsRequest_Response{}
}
func (m *MergeRepositoryCommitsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*MergeRepositoryCommitsRequest_Response) ProtoMessage()    {}
func (*MergeRepositoryCommitsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{35, 0}
}

func (m *MergeRepositoryCommitsRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MergeRepositoryCommitsRequest_Response.Unmarshal(m, b)
}
func (m *MergeRepositoryCommitsRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MergeRepositoryCommitsRequest_Response.Marshal(b, m, deterministic)
}
func (m *MergeRepositoryCommitsRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeRepositoryCommitsRequest_Response.Merge(m, src)
}
func (m *MergeRepositoryCommitsRequest_Response) XXX_Size() int {
	return xxx_messageInfo_MergeRepositoryCommitsRequest_Response.Size(m)
}
func (m *MergeRepositoryCommitsRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeRepositoryCommitsRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_MergeRepositoryCommitsRequest_Response proto.InternalMessageInfo

func (m *MergeRepositoryCommitsRequest_Response) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *MergeRepositoryCommitsRequest_Response) GetConflicts() []*BlobDiff {
	if m != nil {
		return m.Conflicts
	}
	return nil
}

func (m *MergeRepositoryCommitsRequest_Response) GetCommonBase() *Commit {
	if m != nil {
		return m.CommonBase
	}
	return nil
}

type RevertRepositoryCommitsRequest struct {
	RepositoryId         *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitToRevertSha    string                    `protobuf:"bytes,2,opt,name=commit_to_revert_sha,json=commitToRevertSha,proto3" json:"commit_to_revert_sha,omitempty"`
	BaseCommitSha        string                    `protobuf:"bytes,3,opt,name=base_commit_sha,json=baseCommitSha,proto3" json:"base_commit_sha,omitempty"`
	Content              *Commit                   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RevertRepositoryCommitsRequest) Reset()         { *m = RevertRepositoryCommitsRequest{} }
func (m *RevertRepositoryCommitsRequest) String() string { return proto.CompactTextString(m) }
func (*RevertRepositoryCommitsRequest) ProtoMessage()    {}
func (*RevertRepositoryCommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{36}
}

func (m *RevertRepositoryCommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevertRepositoryCommitsRequest.Unmarshal(m, b)
}
func (m *RevertRepositoryCommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevertRepositoryCommitsRequest.Marshal(b, m, deterministic)
}
func (m *RevertRepositoryCommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevertRepositoryCommitsRequest.Merge(m, src)
}
func (m *RevertRepositoryCommitsRequest) XXX_Size() int {
	return xxx_messageInfo_RevertRepositoryCommitsRequest.Size(m)
}
func (m *RevertRepositoryCommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevertRepositoryCommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevertRepositoryCommitsRequest proto.InternalMessageInfo

func (m *RevertRepositoryCommitsRequest) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *RevertRepositoryCommitsRequest) GetCommitToRevertSha() string {
	if m != nil {
		return m.CommitToRevertSha
	}
	return ""
}

func (m *RevertRepositoryCommitsRequest) GetBaseCommitSha() string {
	if m != nil {
		return m.BaseCommitSha
	}
	return ""
}

func (m *RevertRepositoryCommitsRequest) GetContent() *Commit {
	if m != nil {
		return m.Content
	}
	return nil
}

type RevertRepositoryCommitsRequest_Response struct {
	Commit               *Commit  `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevertRepositoryCommitsRequest_Response) Reset() {
	*m = RevertRepositoryCommitsRequest_Response{}
}
func (m *RevertRepositoryCommitsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*RevertRepositoryCommitsRequest_Response) ProtoMessage()    {}
func (*RevertRepositoryCommitsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{36, 0}
}

func (m *RevertRepositoryCommitsRequest_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevertRepositoryCommitsRequest_Response.Unmarshal(m, b)
}
func (m *RevertRepositoryCommitsRequest_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevertRepositoryCommitsRequest_Response.Marshal(b, m, deterministic)
}
func (m *RevertRepositoryCommitsRequest_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevertRepositoryCommitsRequest_Response.Merge(m, src)
}
func (m *RevertRepositoryCommitsRequest_Response) XXX_Size() int {
	return xxx_messageInfo_RevertRepositoryCommitsRequest_Response.Size(m)
}
func (m *RevertRepositoryCommitsRequest_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_RevertRepositoryCommitsRequest_Response.DiscardUnknown(m)
}

var xxx_messageInfo_RevertRepositoryCommitsRequest_Response proto.InternalMessageInfo

func (m *RevertRepositoryCommitsRequest_Response) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

//If any of the request parameters are not set then backend will return all the repositories.
//the query like: FROM RepositoryEntity repo ORDER BY repo.date_updated DESC
type FindRepositories struct {
	RepoIds       []uint64                 `protobuf:"varint,1,rep,packed,name=repo_ids,json=repoIds,proto3" json:"repo_ids,omitempty"`
	WorkspaceName string                   `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	Predicates    []*modeldb.KeyValueQuery `protobuf:"bytes,3,rep,name=predicates,proto3" json:"predicates,omitempty"`
	//For pagination
	PageNumber           int32    `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit            int32    `protobuf:"varint,7,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRepositories) Reset()         { *m = FindRepositories{} }
func (m *FindRepositories) String() string { return proto.CompactTextString(m) }
func (*FindRepositories) ProtoMessage()    {}
func (*FindRepositories) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{37}
}

func (m *FindRepositories) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRepositories.Unmarshal(m, b)
}
func (m *FindRepositories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRepositories.Marshal(b, m, deterministic)
}
func (m *FindRepositories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRepositories.Merge(m, src)
}
func (m *FindRepositories) XXX_Size() int {
	return xxx_messageInfo_FindRepositories.Size(m)
}
func (m *FindRepositories) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRepositories.DiscardUnknown(m)
}

var xxx_messageInfo_FindRepositories proto.InternalMessageInfo

func (m *FindRepositories) GetRepoIds() []uint64 {
	if m != nil {
		return m.RepoIds
	}
	return nil
}

func (m *FindRepositories) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

func (m *FindRepositories) GetPredicates() []*modeldb.KeyValueQuery {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *FindRepositories) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *FindRepositories) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

type FindRepositories_Response struct {
	Repositories         []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	TotalRecords         int64         `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FindRepositories_Response) Reset()         { *m = FindRepositories_Response{} }
func (m *FindRepositories_Response) String() string { return proto.CompactTextString(m) }
func (*FindRepositories_Response) ProtoMessage()    {}
func (*FindRepositories_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{37, 0}
}

func (m *FindRepositories_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRepositories_Response.Unmarshal(m, b)
}
func (m *FindRepositories_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRepositories_Response.Marshal(b, m, deterministic)
}
func (m *FindRepositories_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRepositories_Response.Merge(m, src)
}
func (m *FindRepositories_Response) XXX_Size() int {
	return xxx_messageInfo_FindRepositories_Response.Size(m)
}
func (m *FindRepositories_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRepositories_Response.DiscardUnknown(m)
}

var xxx_messageInfo_FindRepositories_Response proto.InternalMessageInfo

func (m *FindRepositories_Response) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

func (m *FindRepositories_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type FindRepositoriesBlobs struct {
	RepoIds        []uint64   `protobuf:"varint,1,rep,packed,name=repo_ids,json=repoIds,proto3" json:"repo_ids,omitempty"`
	WorkspaceName  string     `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	LocationPrefix []string   `protobuf:"bytes,3,rep,name=location_prefix,json=locationPrefix,proto3" json:"location_prefix,omitempty"`
	BlobType       []BlobType `protobuf:"varint,4,rep,packed,name=blob_type,json=blobType,proto3,enum=ai.verta.modeldb.versioning.BlobType" json:"blob_type,omitempty"`
	Commits        []string   `protobuf:"bytes,5,rep,name=commits,proto3" json:"commits,omitempty"`
	//For pagination
	PageNumber           int32    `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit            int32    `protobuf:"varint,7,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRepositoriesBlobs) Reset()         { *m = FindRepositoriesBlobs{} }
func (m *FindRepositoriesBlobs) String() string { return proto.CompactTextString(m) }
func (*FindRepositoriesBlobs) ProtoMessage()    {}
func (*FindRepositoriesBlobs) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{38}
}

func (m *FindRepositoriesBlobs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRepositoriesBlobs.Unmarshal(m, b)
}
func (m *FindRepositoriesBlobs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRepositoriesBlobs.Marshal(b, m, deterministic)
}
func (m *FindRepositoriesBlobs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRepositoriesBlobs.Merge(m, src)
}
func (m *FindRepositoriesBlobs) XXX_Size() int {
	return xxx_messageInfo_FindRepositoriesBlobs.Size(m)
}
func (m *FindRepositoriesBlobs) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRepositoriesBlobs.DiscardUnknown(m)
}

var xxx_messageInfo_FindRepositoriesBlobs proto.InternalMessageInfo

func (m *FindRepositoriesBlobs) GetRepoIds() []uint64 {
	if m != nil {
		return m.RepoIds
	}
	return nil
}

func (m *FindRepositoriesBlobs) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

func (m *FindRepositoriesBlobs) GetLocationPrefix() []string {
	if m != nil {
		return m.LocationPrefix
	}
	return nil
}

func (m *FindRepositoriesBlobs) GetBlobType() []BlobType {
	if m != nil {
		return m.BlobType
	}
	return nil
}

func (m *FindRepositoriesBlobs) GetCommits() []string {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *FindRepositoriesBlobs) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *FindRepositoriesBlobs) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

type FindRepositoriesBlobs_Response struct {
	Blobs                []*BlobExpanded `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	TotalRecords         int64           `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FindRepositoriesBlobs_Response) Reset()         { *m = FindRepositoriesBlobs_Response{} }
func (m *FindRepositoriesBlobs_Response) String() string { return proto.CompactTextString(m) }
func (*FindRepositoriesBlobs_Response) ProtoMessage()    {}
func (*FindRepositoriesBlobs_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{38, 0}
}

func (m *FindRepositoriesBlobs_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRepositoriesBlobs_Response.Unmarshal(m, b)
}
func (m *FindRepositoriesBlobs_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRepositoriesBlobs_Response.Marshal(b, m, deterministic)
}
func (m *FindRepositoriesBlobs_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRepositoriesBlobs_Response.Merge(m, src)
}
func (m *FindRepositoriesBlobs_Response) XXX_Size() int {
	return xxx_messageInfo_FindRepositoriesBlobs_Response.Size(m)
}
func (m *FindRepositoriesBlobs_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRepositoriesBlobs_Response.DiscardUnknown(m)
}

var xxx_messageInfo_FindRepositoriesBlobs_Response proto.InternalMessageInfo

func (m *FindRepositoriesBlobs_Response) GetBlobs() []*BlobExpanded {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *FindRepositoriesBlobs_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type GetUrlForBlobVersioned struct {
	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	Method                       string                    `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	PartNumber                   uint64                    `protobuf:"varint,6,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                  `json:"-"`
	XXX_unrecognized             []byte                    `json:"-"`
	XXX_sizecache                int32                     `json:"-"`
}

func (m *GetUrlForBlobVersioned) Reset()         { *m = GetUrlForBlobVersioned{} }
func (m *GetUrlForBlobVersioned) String() string { return proto.CompactTextString(m) }
func (*GetUrlForBlobVersioned) ProtoMessage()    {}
func (*GetUrlForBlobVersioned) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{39}
}

func (m *GetUrlForBlobVersioned) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUrlForBlobVersioned.Unmarshal(m, b)
}
func (m *GetUrlForBlobVersioned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUrlForBlobVersioned.Marshal(b, m, deterministic)
}
func (m *GetUrlForBlobVersioned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUrlForBlobVersioned.Merge(m, src)
}
func (m *GetUrlForBlobVersioned) XXX_Size() int {
	return xxx_messageInfo_GetUrlForBlobVersioned.Size(m)
}
func (m *GetUrlForBlobVersioned) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUrlForBlobVersioned.DiscardUnknown(m)
}

var xxx_messageInfo_GetUrlForBlobVersioned proto.InternalMessageInfo

func (m *GetUrlForBlobVersioned) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *GetUrlForBlobVersioned) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *GetUrlForBlobVersioned) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GetUrlForBlobVersioned) GetPathDatasetComponentBlobPath() string {
	if m != nil {
		return m.PathDatasetComponentBlobPath
	}
	return ""
}

func (m *GetUrlForBlobVersioned) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GetUrlForBlobVersioned) GetPartNumber() uint64 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

type GetUrlForBlobVersioned_Response struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	MultipartUploadOk    bool     `protobuf:"varint,3,opt,name=multipart_upload_ok,json=multipartUploadOk,proto3" json:"multipart_upload_ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUrlForBlobVersioned_Response) Reset()         { *m = GetUrlForBlobVersioned_Response{} }
func (m *GetUrlForBlobVersioned_Response) String() string { return proto.CompactTextString(m) }
func (*GetUrlForBlobVersioned_Response) ProtoMessage()    {}
func (*GetUrlForBlobVersioned_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{39, 0}
}

func (m *GetUrlForBlobVersioned_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUrlForBlobVersioned_Response.Unmarshal(m, b)
}
func (m *GetUrlForBlobVersioned_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUrlForBlobVersioned_Response.Marshal(b, m, deterministic)
}
func (m *GetUrlForBlobVersioned_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUrlForBlobVersioned_Response.Merge(m, src)
}
func (m *GetUrlForBlobVersioned_Response) XXX_Size() int {
	return xxx_messageInfo_GetUrlForBlobVersioned_Response.Size(m)
}
func (m *GetUrlForBlobVersioned_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUrlForBlobVersioned_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetUrlForBlobVersioned_Response proto.InternalMessageInfo

func (m *GetUrlForBlobVersioned_Response) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GetUrlForBlobVersioned_Response) GetMultipartUploadOk() bool {
	if m != nil {
		return m.MultipartUploadOk
	}
	return false
}

type CommitVersionedBlobArtifactPart struct {
	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	ArtifactPart                 *modeldb.ArtifactPart     `protobuf:"bytes,5,opt,name=artifact_part,json=artifactPart,proto3" json:"artifact_part,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                  `json:"-"`
	XXX_unrecognized             []byte                    `json:"-"`
	XXX_sizecache                int32                     `json:"-"`
}

func (m *CommitVersionedBlobArtifactPart) Reset()         { *m = CommitVersionedBlobArtifactPart{} }
func (m *CommitVersionedBlobArtifactPart) String() string { return proto.CompactTextString(m) }
func (*CommitVersionedBlobArtifactPart) ProtoMessage()    {}
func (*CommitVersionedBlobArtifactPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{40}
}

func (m *CommitVersionedBlobArtifactPart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitVersionedBlobArtifactPart.Unmarshal(m, b)
}
func (m *CommitVersionedBlobArtifactPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitVersionedBlobArtifactPart.Marshal(b, m, deterministic)
}
func (m *CommitVersionedBlobArtifactPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitVersionedBlobArtifactPart.Merge(m, src)
}
func (m *CommitVersionedBlobArtifactPart) XXX_Size() int {
	return xxx_messageInfo_CommitVersionedBlobArtifactPart.Size(m)
}
func (m *CommitVersionedBlobArtifactPart) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitVersionedBlobArtifactPart.DiscardUnknown(m)
}

var xxx_messageInfo_CommitVersionedBlobArtifactPart proto.InternalMessageInfo

func (m *CommitVersionedBlobArtifactPart) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *CommitVersionedBlobArtifactPart) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *CommitVersionedBlobArtifactPart) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CommitVersionedBlobArtifactPart) GetPathDatasetComponentBlobPath() string {
	if m != nil {
		return m.PathDatasetComponentBlobPath
	}
	return ""
}

func (m *CommitVersionedBlobArtifactPart) GetArtifactPart() *modeldb.ArtifactPart {
	if m != nil {
		return m.ArtifactPart
	}
	return nil
}

type CommitVersionedBlobArtifactPart_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitVersionedBlobArtifactPart_Response) Reset() {
	*m = CommitVersionedBlobArtifactPart_Response{}
}
func (m *CommitVersionedBlobArtifactPart_Response) String() string { return proto.CompactTextString(m) }
func (*CommitVersionedBlobArtifactPart_Response) ProtoMessage()    {}
func (*CommitVersionedBlobArtifactPart_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{40, 0}
}

func (m *CommitVersionedBlobArtifactPart_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitVersionedBlobArtifactPart_Response.Unmarshal(m, b)
}
func (m *CommitVersionedBlobArtifactPart_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitVersionedBlobArtifactPart_Response.Marshal(b, m, deterministic)
}
func (m *CommitVersionedBlobArtifactPart_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitVersionedBlobArtifactPart_Response.Merge(m, src)
}
func (m *CommitVersionedBlobArtifactPart_Response) XXX_Size() int {
	return xxx_messageInfo_CommitVersionedBlobArtifactPart_Response.Size(m)
}
func (m *CommitVersionedBlobArtifactPart_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitVersionedBlobArtifactPart_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CommitVersionedBlobArtifactPart_Response proto.InternalMessageInfo

type GetCommittedVersionedBlobArtifactParts struct {
	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                  `json:"-"`
	XXX_unrecognized             []byte                    `json:"-"`
	XXX_sizecache                int32                     `json:"-"`
}

func (m *GetCommittedVersionedBlobArtifactParts) Reset() {
	*m = GetCommittedVersionedBlobArtifactParts{}
}
func (m *GetCommittedVersionedBlobArtifactParts) String() string { return proto.CompactTextString(m) }
func (*GetCommittedVersionedBlobArtifactParts) ProtoMessage()    {}
func (*GetCommittedVersionedBlobArtifactParts) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{41}
}

func (m *GetCommittedVersionedBlobArtifactParts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommittedVersionedBlobArtifactParts.Unmarshal(m, b)
}
func (m *GetCommittedVersionedBlobArtifactParts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommittedVersionedBlobArtifactParts.Marshal(b, m, deterministic)
}
func (m *GetCommittedVersionedBlobArtifactParts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommittedVersionedBlobArtifactParts.Merge(m, src)
}
func (m *GetCommittedVersionedBlobArtifactParts) XXX_Size() int {
	return xxx_messageInfo_GetCommittedVersionedBlobArtifactParts.Size(m)
}
func (m *GetCommittedVersionedBlobArtifactParts) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommittedVersionedBlobArtifactParts.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommittedVersionedBlobArtifactParts proto.InternalMessageInfo

func (m *GetCommittedVersionedBlobArtifactParts) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *GetCommittedVersionedBlobArtifactParts) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *GetCommittedVersionedBlobArtifactParts) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GetCommittedVersionedBlobArtifactParts) GetPathDatasetComponentBlobPath() string {
	if m != nil {
		return m.PathDatasetComponentBlobPath
	}
	return ""
}

type GetCommittedVersionedBlobArtifactParts_Response struct {
	ArtifactParts        []*modeldb.ArtifactPart `protobuf:"bytes,1,rep,name=artifact_parts,json=artifactParts,proto3" json:"artifact_parts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetCommittedVersionedBlobArtifactParts_Response) Reset() {
	*m = GetCommittedVersionedBlobArtifactParts_Response{}
}
func (m *GetCommittedVersionedBlobArtifactParts_Response) String() string {
	return proto.CompactTextString(m)
}
func (*GetCommittedVersionedBlobArtifactParts_Response) ProtoMessage() {}
func (*GetCommittedVersionedBlobArtifactParts_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{41, 0}
}

func (m *GetCommittedVersionedBlobArtifactParts_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommittedVersionedBlobArtifactParts_Response.Unmarshal(m, b)
}
func (m *GetCommittedVersionedBlobArtifactParts_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommittedVersionedBlobArtifactParts_Response.Marshal(b, m, deterministic)
}
func (m *GetCommittedVersionedBlobArtifactParts_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommittedVersionedBlobArtifactParts_Response.Merge(m, src)
}
func (m *GetCommittedVersionedBlobArtifactParts_Response) XXX_Size() int {
	return xxx_messageInfo_GetCommittedVersionedBlobArtifactParts_Response.Size(m)
}
func (m *GetCommittedVersionedBlobArtifactParts_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommittedVersionedBlobArtifactParts_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommittedVersionedBlobArtifactParts_Response proto.InternalMessageInfo

func (m *GetCommittedVersionedBlobArtifactParts_Response) GetArtifactParts() []*modeldb.ArtifactPart {
	if m != nil {
		return m.ArtifactParts
	}
	return nil
}

type CommitMultipartVersionedBlobArtifact struct {
	RepositoryId                 *RepositoryIdentification `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	CommitSha                    string                    `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Location                     []string                  `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	PathDatasetComponentBlobPath string                    `protobuf:"bytes,4,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                  `json:"-"`
	XXX_unrecognized             []byte                    `json:"-"`
	XXX_sizecache                int32                     `json:"-"`
}

func (m *CommitMultipartVersionedBlobArtifact) Reset()         { *m = CommitMultipartVersionedBlobArtifact{} }
func (m *CommitMultipartVersionedBlobArtifact) String() string { return proto.CompactTextString(m) }
func (*CommitMultipartVersionedBlobArtifact) ProtoMessage()    {}
func (*CommitMultipartVersionedBlobArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{42}
}

func (m *CommitMultipartVersionedBlobArtifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitMultipartVersionedBlobArtifact.Unmarshal(m, b)
}
func (m *CommitMultipartVersionedBlobArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitMultipartVersionedBlobArtifact.Marshal(b, m, deterministic)
}
func (m *CommitMultipartVersionedBlobArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitMultipartVersionedBlobArtifact.Merge(m, src)
}
func (m *CommitMultipartVersionedBlobArtifact) XXX_Size() int {
	return xxx_messageInfo_CommitMultipartVersionedBlobArtifact.Size(m)
}
func (m *CommitMultipartVersionedBlobArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitMultipartVersionedBlobArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_CommitMultipartVersionedBlobArtifact proto.InternalMessageInfo

func (m *CommitMultipartVersionedBlobArtifact) GetRepositoryId() *RepositoryIdentification {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

func (m *CommitMultipartVersionedBlobArtifact) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *CommitMultipartVersionedBlobArtifact) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CommitMultipartVersionedBlobArtifact) GetPathDatasetComponentBlobPath() string {
	if m != nil {
		return m.PathDatasetComponentBlobPath
	}
	return ""
}

type CommitMultipartVersionedBlobArtifact_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitMultipartVersionedBlobArtifact_Response) Reset() {
	*m = CommitMultipartVersionedBlobArtifact_Response{}
}
func (m *CommitMultipartVersionedBlobArtifact_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CommitMultipartVersionedBlobArtifact_Response) ProtoMessage() {}
func (*CommitMultipartVersionedBlobArtifact_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece5516234261395, []int{42, 0}
}

func (m *CommitMultipartVersionedBlobArtifact_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitMultipartVersionedBlobArtifact_Response.Unmarshal(m, b)
}
func (m *CommitMultipartVersionedBlobArtifact_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitMultipartVersionedBlobArtifact_Response.Marshal(b, m, deterministic)
}
func (m *CommitMultipartVersionedBlobArtifact_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitMultipartVersionedBlobArtifact_Response.Merge(m, src)
}
func (m *CommitMultipartVersionedBlobArtifact_Response) XXX_Size() int {
	return xxx_messageInfo_CommitMultipartVersionedBlobArtifact_Response.Size(m)
}
func (m *CommitMultipartVersionedBlobArtifact_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitMultipartVersionedBlobArtifact_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CommitMultipartVersionedBlobArtifact_Response proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ai.verta.modeldb.versioning.BlobType", BlobType_name, BlobType_value)
	proto.RegisterEnum("ai.verta.modeldb.versioning.RepositoryVisibilityEnum_RepositoryVisibility", RepositoryVisibilityEnum_RepositoryVisibility_name, RepositoryVisibilityEnum_RepositoryVisibility_value)
	proto.RegisterType((*Commit)(nil), "ai.verta.modeldb.versioning.Commit")
	proto.RegisterType((*InternalFolderElement)(nil), "ai.verta.modeldb.versioning.InternalFolderElement")
	proto.RegisterType((*InternalFolder)(nil), "ai.verta.modeldb.versioning.InternalFolder")
	proto.RegisterType((*FolderElement)(nil), "ai.verta.modeldb.versioning.FolderElement")
	proto.RegisterType((*Folder)(nil), "ai.verta.modeldb.versioning.Folder")
	proto.RegisterType((*Blob)(nil), "ai.verta.modeldb.versioning.Blob")
	proto.RegisterType((*BlobExpanded)(nil), "ai.verta.modeldb.versioning.BlobExpanded")
	proto.RegisterType((*BlobDiff)(nil), "ai.verta.modeldb.versioning.BlobDiff")
	proto.RegisterType((*RepositoryVisibilityEnum)(nil), "ai.verta.modeldb.versioning.RepositoryVisibilityEnum")
	proto.RegisterType((*Repository)(nil), "ai.verta.modeldb.versioning.Repository")
	proto.RegisterType((*Pagination)(nil), "ai.verta.modeldb.versioning.Pagination")
	proto.RegisterType((*RepositoryNamedIdentification)(nil), "ai.verta.modeldb.versioning.RepositoryNamedIdentification")
	proto.RegisterType((*RepositoryIdentification)(nil), "ai.verta.modeldb.versioning.RepositoryIdentification")
	proto.RegisterType((*ListRepositoriesRequest)(nil), "ai.verta.modeldb.versioning.ListRepositoriesRequest")
	proto.RegisterType((*ListRepositoriesRequest_Response)(nil), "ai.verta.modeldb.versioning.ListRepositoriesRequest.Response")
	proto.RegisterType((*GetRepositoryRequest)(nil), "ai.verta.modeldb.versioning.GetRepositoryRequest")
	proto.RegisterType((*GetRepositoryRequest_Response)(nil), "ai.verta.modeldb.versioning.GetRepositoryRequest.Response")
	proto.RegisterType((*SetRepository)(nil), "ai.verta.modeldb.versioning.SetRepository")
	proto.RegisterType((*SetRepository_Response)(nil), "ai.verta.modeldb.versioning.SetRepository.Response")
	proto.RegisterType((*DeleteRepositoryRequest)(nil), "ai.verta.modeldb.versioning.DeleteRepositoryRequest")
	proto.RegisterType((*DeleteRepositoryRequest_Response)(nil), "ai.verta.modeldb.versioning.DeleteRepositoryRequest.Response")
	proto.RegisterType((*ListCommitsRequest)(nil), "ai.verta.modeldb.versioning.ListCommitsRequest")
	proto.RegisterType((*ListCommitsRequest_Response)(nil), "ai.verta.modeldb.versioning.ListCommitsRequest.Response")
	proto.RegisterType((*GetCommitRequest)(nil), "ai.verta.modeldb.versioning.GetCommitRequest")
	proto.RegisterType((*GetCommitRequest_Response)(nil), "ai.verta.modeldb.versioning.GetCommitRequest.Response")
	proto.RegisterType((*CreateCommitRequest)(nil), "ai.verta.modeldb.versioning.CreateCommitRequest")
	proto.RegisterType((*CreateCommitRequest_Response)(nil), "ai.verta.modeldb.versioning.CreateCommitRequest.Response")
	proto.RegisterType((*DeleteCommitRequest)(nil), "ai.verta.modeldb.versioning.DeleteCommitRequest")
	proto.RegisterType((*DeleteCommitRequest_Response)(nil), "ai.verta.modeldb.versioning.DeleteCommitRequest.Response")
	proto.RegisterType((*ListCommitBlobsRequest)(nil), "ai.verta.modeldb.versioning.ListCommitBlobsRequest")
	proto.RegisterType((*ListCommitBlobsRequest_Response)(nil), "ai.verta.modeldb.versioning.ListCommitBlobsRequest.Response")
	proto.RegisterType((*ListCommitExperimentRunsRequest)(nil), "ai.verta.modeldb.versioning.ListCommitExperimentRunsRequest")
	proto.RegisterType((*ListCommitExperimentRunsRequest_Response)(nil), "ai.verta.modeldb.versioning.ListCommitExperimentRunsRequest.Response")
	proto.RegisterType((*ListBlobExperimentRunsRequest)(nil), "ai.verta.modeldb.versioning.ListBlobExperimentRunsRequest")
	proto.RegisterType((*ListBlobExperimentRunsRequest_Response)(nil), "ai.verta.modeldb.versioning.ListBlobExperimentRunsRequest.Response")
	proto.RegisterType((*GetCommitComponentRequest)(nil), "ai.verta.modeldb.versioning.GetCommitComponentRequest")
	proto.RegisterType((*GetCommitComponentRequest_Response)(nil), "ai.verta.modeldb.versioning.GetCommitComponentRequest.Response")
	proto.RegisterType((*ComputeRepositoryDiffRequest)(nil), "ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest")
	proto.RegisterType((*ComputeRepositoryDiffRequest_Response)(nil), "ai.verta.modeldb.versioning.ComputeRepositoryDiffRequest.Response")
	proto.RegisterType((*ListCommitsLogRequest)(nil), "ai.verta.modeldb.versioning.ListCommitsLogRequest")
	proto.RegisterType((*ListCommitsLogRequest_Response)(nil), "ai.verta.modeldb.versioning.ListCommitsLogRequest.Response")
	proto.RegisterType((*ListBranchesRequest)(nil), "ai.verta.modeldb.versioning.ListBranchesRequest")
	proto.RegisterType((*ListBranchesRequest_Response)(nil), "ai.verta.modeldb.versioning.ListBranchesRequest.Response")
	proto.RegisterType((*GetBranchRequest)(nil), "ai.verta.modeldb.versioning.GetBranchRequest")
	proto.RegisterType((*GetBranchRequest_Response)(nil), "ai.verta.modeldb.versioning.GetBranchRequest.Response")
	proto.RegisterType((*SetBranchRequest)(nil), "ai.verta.modeldb.versioning.SetBranchRequest")
	proto.RegisterType((*SetBranchRequest_Response)(nil), "ai.verta.modeldb.versioning.SetBranchRequest.Response")
	proto.RegisterType((*DeleteBranchRequest)(nil), "ai.verta.modeldb.versioning.DeleteBranchRequest")
	proto.RegisterType((*DeleteBranchRequest_Response)(nil), "ai.verta.modeldb.versioning.DeleteBranchRequest.Response")
	proto.RegisterType((*ListTagsRequest)(nil), "ai.verta.modeldb.versioning.ListTagsRequest")
	proto.RegisterType((*ListTagsRequest_Response)(nil), "ai.verta.modeldb.versioning.ListTagsRequest.Response")
	proto.RegisterType((*GetTagRequest)(nil), "ai.verta.modeldb.versioning.GetTagRequest")
	proto.RegisterType((*GetTagRequest_Response)(nil), "ai.verta.modeldb.versioning.GetTagRequest.Response")
	proto.RegisterType((*SetTagRequest)(nil), "ai.verta.modeldb.versioning.SetTagRequest")
	proto.RegisterType((*SetTagRequest_Response)(nil), "ai.verta.modeldb.versioning.SetTagRequest.Response")
	proto.RegisterType((*DeleteTagRequest)(nil), "ai.verta.modeldb.versioning.DeleteTagRequest")
	proto.RegisterType((*DeleteTagRequest_Response)(nil), "ai.verta.modeldb.versioning.DeleteTagRequest.Response")
	proto.RegisterType((*MergeRepositoryCommitsRequest)(nil), "ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest")
	proto.RegisterType((*MergeRepositoryCommitsRequest_Response)(nil), "ai.verta.modeldb.versioning.MergeRepositoryCommitsRequest.Response")
	proto.RegisterType((*RevertRepositoryCommitsRequest)(nil), "ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest")
	proto.RegisterType((*RevertRepositoryCommitsRequest_Response)(nil), "ai.verta.modeldb.versioning.RevertRepositoryCommitsRequest.Response")
	proto.RegisterType((*FindRepositories)(nil), "ai.verta.modeldb.versioning.FindRepositories")
	proto.RegisterType((*FindRepositories_Response)(nil), "ai.verta.modeldb.versioning.FindRepositories.Response")
	proto.RegisterType((*FindRepositoriesBlobs)(nil), "ai.verta.modeldb.versioning.FindRepositoriesBlobs")
	proto.RegisterType((*FindRepositoriesBlobs_Response)(nil), "ai.verta.modeldb.versioning.FindRepositoriesBlobs.Response")
	proto.RegisterType((*GetUrlForBlobVersioned)(nil), "ai.verta.modeldb.versioning.GetUrlForBlobVersioned")
	proto.RegisterType((*GetUrlForBlobVersioned_Response)(nil), "ai.verta.modeldb.versioning.GetUrlForBlobVersioned.Response")
	proto.RegisterType((*CommitVersionedBlobArtifactPart)(nil), "ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart")
	proto.RegisterType((*CommitVersionedBlobArtifactPart_Response)(nil), "ai.verta.modeldb.versioning.CommitVersionedBlobArtifactPart.Response")
	proto.RegisterType((*GetCommittedVersionedBlobArtifactParts)(nil), "ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts")
	proto.RegisterType((*GetCommittedVersionedBlobArtifactParts_Response)(nil), "ai.verta.modeldb.versioning.GetCommittedVersionedBlobArtifactParts.Response")
	proto.RegisterType((*CommitMultipartVersionedBlobArtifact)(nil), "ai.verta.modeldb.versioning.CommitMultipartVersionedBlobArtifact")
	proto.RegisterType((*CommitMultipartVersionedBlobArtifact_Response)(nil), "ai.verta.modeldb.versioning.CommitMultipartVersionedBlobArtifact.Response")
}

func init() {
	proto.RegisterFile("modeldb/versioning/VersioningService.proto", fileDescriptor_ece5516234261395)
}

var fileDescriptor_ece5516234261395 = []byte{
	// 3643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5c, 0x6b, 0x6c, 0x23, 0x57,
	0xf5, 0xdf, 0x19, 0x3b, 0xaf, 0xe3, 0x24, 0xeb, 0xbd, 0xfb, 0x4a, 0xa7, 0xfb, 0xea, 0xf4, 0xb5,
	0x7f, 0xab, 0xff, 0xb8, 0xcd, 0xfe, 0xb7, 0xed, 0x66, 0xbb, 0x8f, 0x38, 0xc9, 0x66, 0xd3, 0xcd,
	0x26, 0xe9, 0x78, 0x1f, 0x7f, 0x8c, 0x54, 0x6b, 0xec, 0xb9, 0x76, 0x46, 0x75, 0x66, 0xdc, 0x99,
	0xf1, 0x6e, 0xa3, 0x65, 0x41, 0x94, 0x47, 0x81, 0x56, 0x42, 0x14, 0xf1, 0x58, 0x54, 0xf8, 0x82,
	0x10, 0x45, 0x82, 0x56, 0x54, 0xd0, 0x22, 0x51, 0x55, 0x80, 0xa0, 0x12, 0xa2, 0xa2, 0x85, 0x0a,
	0x90, 0x56, 0xf4, 0x43, 0x45, 0x11, 0x88, 0x7e, 0x42, 0x80, 0x54, 0xf1, 0x01, 0xd0, 0xbd, 0x77,
	0xc6, 0x33, 0xe3, 0x4c, 0x3c, 0xe3, 0xc4, 0xb5, 0xc3, 0x7e, 0x8a, 0xef, 0xbd, 0xe7, 0x9c, 0x39,
	0xe7, 0x77, 0xce, 0xbd, 0xf7, 0xdc, 0x7b, 0x8f, 0x02, 0xa9, 0x65, 0x5d, 0xc1, 0x15, 0xa5, 0x90,
	0xbe, 0x84, 0x0d, 0x53, 0xd5, 0x35, 0x55, 0x2b, 0xa7, 0x2f, 0xd4, 0x7f, 0x66, 0xb1, 0x71, 0x49,
	0x2d, 0xe2, 0xd1, 0xaa, 0xa1, 0x5b, 0x3a, 0xba, 0x59, 0x56, 0x47, 0x2f, 0x61, 0xc3, 0x92, 0x47,
	0x6d, 0xa6, 0x51, 0x97, 0x49, 0xd8, 0x53, 0xd6, 0xf5, 0x72, 0x05, 0xa7, 0xe5, 0xaa, 0x9a, 0x96,
	0x35, 0x4d, 0xb7, 0x64, 0x4b, 0xd5, 0x35, 0x93, 0xb1, 0x0a, 0x42, 0x51, 0x5f, 0x5e, 0xd6, 0xb5,
	0xf4, 0x24, 0xfd, 0xe3, 0x13, 0x2b, 0xdc, 0xec, 0xa8, 0x10, 0x34, 0x28, 0x3a, 0x83, 0xd3, 0x8f,
	0x55, 0xb1, 0xa1, 0x2e, 0x63, 0xcd, 0x92, 0x6a, 0x0d, 0x34, 0x7b, 0x03, 0x6c, 0x98, 0xd4, 0x15,
	0x67, 0x78, 0x7f, 0xe0, 0xb0, 0x56, 0x52, 0xcb, 0x36, 0xc1, 0x81, 0x00, 0x82, 0x29, 0xd9, 0x92,
	0x4d, 0x6c, 0xd9, 0x14, 0xfb, 0x02, 0x28, 0xa6, 0xb5, 0xda, 0xb2, 0x63, 0xde, 0x6d, 0x81, 0xe3,
	0x97, 0x54, 0x43, 0xd7, 0x88, 0xc6, 0x8c, 0x4a, 0xfc, 0x2a, 0x07, 0xbd, 0xc4, 0x46, 0xd5, 0x42,
	0xfb, 0x21, 0x51, 0x95, 0x0d, 0xac, 0x59, 0x79, 0x73, 0x49, 0x36, 0x47, 0xb8, 0x03, 0xb1, 0x83,
	0x03, 0x12, 0xb0, 0xae, 0xec, 0x92, 0x6c, 0xa2, 0x11, 0xe8, 0x5b, 0xc6, 0xa6, 0x29, 0x97, 0xf1,
	0x08, 0x7f, 0x80, 0x3b, 0x38, 0x20, 0x39, 0x4d, 0x74, 0x0b, 0x0c, 0x2a, 0xb2, 0x85, 0xf3, 0x45,
	0x03, 0xcb, 0x16, 0x56, 0x46, 0x62, 0x07, 0xb8, 0x83, 0x71, 0x29, 0x41, 0xfa, 0x26, 0x59, 0x17,
	0xda, 0x05, 0xbd, 0x72, 0xcd, 0x5a, 0xd2, 0x8d, 0x91, 0x38, 0xe5, 0xb5, 0x5b, 0x68, 0x2f, 0x40,
	0x91, 0x7e, 0x9f, 0x7c, 0x75, 0xa4, 0x87, 0x8e, 0x0d, 0xb0, 0x9e, 0xec, 0x92, 0x2c, 0x7e, 0x10,
	0x76, 0xce, 0x6a, 0x16, 0x36, 0x34, 0xb9, 0x72, 0x4a, 0xaf, 0x28, 0xd8, 0x98, 0xae, 0x60, 0xa2,
	0x3e, 0xd1, 0x16, 0xb3, 0x9f, 0x94, 0x91, 0xa3, 0x8c, 0x60, 0x77, 0x65, 0x97, 0x64, 0xa2, 0x93,
	0x43, 0xa0, 0xc9, 0xcb, 0x8e, 0xca, 0x0e, 0xd3, 0xbc, 0xbc, 0x8c, 0xc5, 0xe7, 0x39, 0x18, 0xf6,
	0x4b, 0x47, 0xa7, 0xa1, 0xa7, 0x50, 0xd1, 0x0b, 0xcc, 0xfc, 0xc4, 0xd8, 0xd8, 0x68, 0x93, 0xf8,
	0x1a, 0x0d, 0xd4, 0x4c, 0x62, 0x02, 0x50, 0x16, 0x12, 0x66, 0xad, 0x90, 0x2f, 0xd1, 0x31, 0x73,
	0x84, 0x5f, 0xb7, 0x3c, 0x30, 0x6b, 0x05, 0xd6, 0x63, 0x8a, 0x63, 0x30, 0xe4, 0x87, 0x21, 0x82,
	0x95, 0x5f, 0xe2, 0xa0, 0xd7, 0xb6, 0xee, 0xa4, 0xdf, 0xba, 0x54, 0x53, 0x6d, 0x02, 0xad, 0x3a,
	0x13, 0x64, 0x55, 0x2b, 0x72, 0xbc, 0xd6, 0x7c, 0x8b, 0x87, 0x78, 0xa6, 0xa2, 0x17, 0xd0, 0x14,
	0xf4, 0x29, 0x2c, 0xb8, 0xa9, 0x01, 0x89, 0xb1, 0x83, 0x4d, 0x25, 0xda, 0x13, 0x81, 0xb0, 0x9e,
	0xde, 0x22, 0x39, 0xac, 0x68, 0x11, 0x12, 0xd8, 0x0d, 0x70, 0x1a, 0x84, 0x89, 0xb1, 0xbb, 0x9a,
	0x4a, 0xf2, 0x4c, 0x08, 0x5b, 0x9a, 0x57, 0x04, 0x3a, 0x0a, 0xf1, 0xa2, 0xae, 0x60, 0x1a, 0xb2,
	0x89, 0xb1, 0xdb, 0x9b, 0x8a, 0x22, 0xb3, 0xdb, 0x96, 0x41, 0x99, 0xd0, 0x04, 0xf4, 0x16, 0xe9,
	0x94, 0xa6, 0x51, 0x9d, 0x18, 0xbb, 0x33, 0x84, 0x9d, 0x90, 0xda, 0x02, 0x6c, 0xc6, 0xcc, 0x00,
	0xf4, 0x15, 0x75, 0xcd, 0xc2, 0x9a, 0x25, 0xca, 0x30, 0x48, 0x06, 0xa7, 0x1f, 0xab, 0xca, 0x9a,
	0x82, 0x15, 0x24, 0x40, 0x7f, 0x45, 0x2f, 0xd2, 0x05, 0xcd, 0x9e, 0xaa, 0xf5, 0x36, 0x3a, 0x0c,
	0x71, 0xe2, 0x2d, 0x1b, 0xcb, 0x5b, 0x9a, 0x7e, 0x97, 0x08, 0x95, 0x28, 0xb9, 0x78, 0x2d, 0x06,
	0xfd, 0xa4, 0x39, 0xa5, 0x96, 0x4a, 0x4d, 0xe5, 0xcf, 0x43, 0xaf, 0x69, 0xc9, 0x56, 0xcd, 0xa4,
	0x5f, 0x18, 0x1e, 0xbb, 0xb7, 0xb9, 0xb7, 0xd4, 0x52, 0x29, 0x4b, 0xc9, 0xc9, 0xf2, 0xe4, 0x69,
	0x4a, 0xb6, 0x14, 0xaf, 0xfb, 0x63, 0xd1, 0xdd, 0x4f, 0x04, 0x35, 0x71, 0x7f, 0xbc, 0x35, 0xf7,
	0xdb, 0xd2, 0x02, 0xdd, 0xdf, 0x13, 0xd1, 0xfd, 0xb6, 0x8c, 0x46, 0xf7, 0xf7, 0x46, 0x76, 0xbf,
	0x2d, 0x20, 0xc0, 0xfd, 0x05, 0x18, 0x91, 0x70, 0x55, 0x37, 0x55, 0x4b, 0x37, 0x56, 0x2e, 0xa8,
	0xa6, 0x5a, 0x50, 0x2b, 0xaa, 0xb5, 0x42, 0x10, 0x15, 0x4f, 0xc1, 0x8e, 0xa0, 0x31, 0x94, 0x80,
	0xbe, 0x45, 0x69, 0xf6, 0xc2, 0xc4, 0xb9, 0xe9, 0xe4, 0x16, 0x04, 0xd0, 0xbb, 0x78, 0x3e, 0x33,
	0x37, 0x3b, 0x99, 0xe4, 0xd0, 0x4e, 0xd8, 0xb6, 0x20, 0xcd, 0xe4, 0xb3, 0x93, 0x0b, 0x8b, 0xd3,
	0x53, 0x79, 0xbb, 0x9b, 0x17, 0x3f, 0x1d, 0x03, 0x70, 0x05, 0xa1, 0x61, 0xe0, 0x55, 0x85, 0x2e,
	0xac, 0x71, 0x89, 0x57, 0x15, 0x84, 0x20, 0xee, 0x59, 0x62, 0xe8, 0xef, 0x28, 0x0b, 0xbf, 0x43,
	0x52, 0xab, 0x2a, 0x94, 0x24, 0xee, 0x92, 0x9c, 0x67, 0x5d, 0x84, 0xe4, 0xb2, 0x6e, 0x3c, 0x62,
	0x56, 0xe5, 0x22, 0xce, 0xab, 0x8a, 0xbd, 0x0b, 0x24, 0xea, 0x7d, 0xb3, 0x0a, 0xba, 0x08, 0xc3,
	0x2e, 0x89, 0xb5, 0x52, 0xc5, 0x14, 0xd5, 0xe1, 0xb1, 0xbb, 0x5d, 0x54, 0xd9, 0x76, 0x3e, 0x7a,
	0xd1, 0x21, 0x3b, 0xb7, 0x52, 0xc5, 0x34, 0xe2, 0x7c, 0x3d, 0xd2, 0xd0, 0x65, 0x6f, 0x13, 0x7d,
	0x04, 0x76, 0x1a, 0x75, 0x9b, 0xf3, 0x97, 0xea, 0xe8, 0x8d, 0xf4, 0x51, 0xf9, 0x0f, 0x36, 0xf5,
	0xda, 0x5a, 0x2e, 0x09, 0x1c, 0x90, 0x76, 0x18, 0x41, 0x5e, 0xda, 0x01, 0x3d, 0xfa, 0x65, 0x0d,
	0x1b, 0x23, 0x40, 0xad, 0x66, 0x0d, 0x71, 0x0e, 0x60, 0x51, 0x2e, 0xab, 0x1a, 0x9b, 0x70, 0x74,
	0x6b, 0x2e, 0xe3, 0xbc, 0x56, 0x5b, 0x2e, 0x60, 0x83, 0x7a, 0xa0, 0x87, 0x6c, 0xcd, 0x65, 0x3c,
	0x4f, 0x7b, 0xc8, 0x2e, 0x4a, 0x09, 0x2a, 0xea, 0xb2, 0xca, 0x26, 0x51, 0x8f, 0x34, 0x40, 0x7a,
	0xe6, 0x48, 0x87, 0x98, 0x83, 0xbd, 0xae, 0x46, 0x64, 0x53, 0x50, 0x66, 0x15, 0xac, 0x59, 0x6a,
	0x49, 0xb5, 0x67, 0xb4, 0xe3, 0x5b, 0xce, 0xe3, 0xdb, 0xdb, 0xbd, 0x90, 0x7b, 0x3c, 0xef, 0x02,
	0x48, 0xb7, 0x97, 0xcf, 0x70, 0xde, 0xd0, 0x6c, 0x90, 0x7b, 0x1e, 0xfa, 0x09, 0xa7, 0x92, 0xb7,
	0x23, 0x29, 0x31, 0x36, 0x1e, 0x11, 0xd0, 0x00, 0x2d, 0xa5, 0x3e, 0x8d, 0x75, 0xa2, 0xdd, 0xd0,
	0x47, 0xb0, 0x24, 0x52, 0x79, 0x1a, 0x4e, 0xbd, 0xa4, 0x39, 0xab, 0x88, 0x4f, 0xf0, 0xb0, 0x7b,
	0x4e, 0x35, 0xad, 0xba, 0x1c, 0x15, 0x9b, 0x12, 0x7e, 0xb4, 0x86, 0x4d, 0x2b, 0xc0, 0x1e, 0x2e,
	0xc0, 0x1e, 0x34, 0x43, 0xa1, 0xb4, 0x91, 0xb7, 0x97, 0xd0, 0xe6, 0x73, 0xd7, 0x75, 0x94, 0xe4,
	0x61, 0x15, 0x3e, 0x04, 0xfd, 0x12, 0x36, 0xab, 0xba, 0x66, 0x62, 0x74, 0x06, 0x06, 0x0d, 0x8f,
	0x4a, 0xf6, 0xfe, 0x7b, 0x67, 0x44, 0x2c, 0x24, 0x1f, 0x33, 0xba, 0x15, 0x86, 0x2c, 0xdd, 0x92,
	0x2b, 0x79, 0x03, 0x17, 0x75, 0x43, 0x61, 0xab, 0x70, 0x4c, 0x1a, 0xa4, 0x9d, 0x12, 0xeb, 0x13,
	0x5f, 0xe0, 0x60, 0xc7, 0x0c, 0xb6, 0x3c, 0x42, 0x6c, 0x18, 0xa6, 0xeb, 0xd3, 0x3a, 0x31, 0x76,
	0x38, 0xa2, 0x02, 0x0d, 0x7e, 0xe0, 0x55, 0x45, 0xc8, 0x7a, 0xac, 0x9b, 0x01, 0x70, 0x43, 0xdb,
	0x16, 0x1d, 0xd9, 0x36, 0x0f, 0xab, 0xf8, 0x77, 0x0e, 0x86, 0xb2, 0x5e, 0xa5, 0xdb, 0xa4, 0x6d,
	0x83, 0x86, 0xfc, 0xba, 0x35, 0x7c, 0x7f, 0xcc, 0xbe, 0xc6, 0xc1, 0xee, 0x29, 0x5c, 0xc1, 0x16,
	0x5e, 0xed, 0xae, 0x1c, 0x0c, 0x79, 0xd6, 0xa7, 0x8d, 0x62, 0xe1, 0x06, 0xd2, 0xca, 0xac, 0x22,
	0x88, 0x1e, 0x63, 0x76, 0xd5, 0xf7, 0x74, 0xf2, 0x81, 0x7e, 0x67, 0x6f, 0x16, 0xdf, 0xe5, 0x01,
	0x91, 0x19, 0xc5, 0x0e, 0x09, 0x66, 0x07, 0xd4, 0x6a, 0xdb, 0x0c, 0x24, 0xcb, 0xa6, 0x7d, 0xb6,
	0x28, 0xc8, 0x26, 0xa6, 0xcb, 0xe2, 0x80, 0x64, 0x1f, 0x37, 0x32, 0xb2, 0x89, 0x3d, 0x04, 0x4b,
	0x58, 0x56, 0xec, 0x93, 0x89, 0x4d, 0x70, 0x1a, 0xcb, 0x8a, 0xa0, 0x79, 0x10, 0x3a, 0x46, 0x76,
	0x63, 0x0a, 0x82, 0x3d, 0x7d, 0x6f, 0x0d, 0xd9, 0xd1, 0x09, 0xad, 0xe4, 0xf0, 0x44, 0x9b, 0xb5,
	0xbf, 0xe5, 0x20, 0x39, 0x83, 0x6d, 0xb0, 0x3b, 0x81, 0xb5, 0xff, 0xf8, 0xc5, 0x37, 0x1c, 0xbf,
	0x84, 0x19, 0x8f, 0xfd, 0x47, 0x49, 0x42, 0x43, 0x06, 0xec, 0xef, 0x47, 0x32, 0xdf, 0x66, 0x11,
	0xbf, 0x18, 0x83, 0xed, 0x2c, 0x23, 0xe8, 0x9c, 0x6d, 0xae, 0xc2, 0x7c, 0xcb, 0x0a, 0xa3, 0x13,
	0xce, 0x51, 0x29, 0x46, 0x7d, 0xfd, 0x3f, 0xa1, 0x49, 0xb4, 0x93, 0x99, 0x3b, 0x27, 0xa5, 0x86,
	0xe0, 0x8b, 0xaf, 0x0a, 0xbe, 0xa3, 0xd0, 0xa3, 0xa8, 0xa5, 0x92, 0x39, 0xd2, 0x43, 0xbf, 0x70,
	0x7b, 0xe8, 0x17, 0x48, 0x76, 0x28, 0x31, 0x9e, 0xf6, 0x39, 0xe6, 0x19, 0x0e, 0xb6, 0xb3, 0xb5,
	0x67, 0xd3, 0x04, 0x1d, 0xb8, 0xb6, 0x89, 0xcf, 0xf1, 0xb0, 0xcb, 0x5d, 0x7e, 0x08, 0x0a, 0x66,
	0xe7, 0x35, 0x8c, 0x35, 0x68, 0x88, 0xee, 0x84, 0xad, 0xce, 0x61, 0x28, 0x5f, 0x35, 0x70, 0x49,
	0x7d, 0x6c, 0x24, 0x4e, 0xcf, 0x48, 0xc3, 0x4e, 0xf7, 0x22, 0xed, 0x15, 0xaa, 0x1e, 0x37, 0x9d,
	0xf0, 0x1f, 0xbe, 0x5b, 0x8f, 0xa8, 0x48, 0x2b, 0xc8, 0x2f, 0x78, 0xd8, 0xef, 0x02, 0xe6, 0xbb,
	0xa1, 0xfa, 0xef, 0x5a, 0xbc, 0x9b, 0xbb, 0x40, 0x50, 0x3c, 0xc8, 0x1e, 0x82, 0xb8, 0x51, 0xd3,
	0x1c, 0x60, 0xf7, 0xaf, 0xfe, 0x9a, 0x0f, 0x06, 0x89, 0x12, 0x47, 0x43, 0xf3, 0x8f, 0x3c, 0xec,
	0x25, 0x68, 0xda, 0xee, 0xb8, 0x31, 0xb1, 0xf4, 0x9d, 0xf5, 0xe3, 0xfe, 0xb3, 0x7e, 0x87, 0x70,
	0xfe, 0x29, 0x0f, 0x37, 0xd5, 0xf7, 0xbd, 0x49, 0x7d, 0xb9, 0xaa, 0x6b, 0x44, 0x48, 0xd7, 0xd7,
	0x22, 0x1f, 0x34, 0xb1, 0x06, 0x68, 0x3e, 0xcb, 0xf9, 0xb2, 0x83, 0x5e, 0x76, 0x29, 0x16, 0x69,
	0x11, 0x66, 0x37, 0x60, 0xe4, 0xa8, 0xcf, 0x98, 0xd0, 0x7d, 0x2d, 0x5e, 0xd9, 0x9c, 0xde, 0xc2,
	0x2e, 0x6d, 0x32, 0x09, 0x20, 0xda, 0x32, 0xbc, 0xc4, 0xbf, 0xf1, 0xb0, 0x87, 0xa0, 0x57, 0xf3,
	0x66, 0x92, 0x74, 0xdb, 0xe8, 0x00, 0x92, 0x37, 0x41, 0xbf, 0x8d, 0xa4, 0x83, 0xa3, 0x9d, 0xfb,
	0x4c, 0x78, 0x86, 0x0a, 0x76, 0xf4, 0xd9, 0x43, 0x19, 0x94, 0x81, 0x7d, 0x06, 0xae, 0x56, 0xc8,
	0x99, 0x4c, 0xce, 0x5f, 0x56, 0xad, 0xa5, 0x3c, 0x3b, 0xc7, 0xe7, 0x65, 0xad, 0x88, 0x4d, 0x4b,
	0x37, 0xe8, 0x6d, 0x40, 0xbf, 0x24, 0xd8, 0x54, 0x13, 0x17, 0x55, 0x6b, 0x89, 0xdd, 0xca, 0x4f,
	0xd8, 0x14, 0x44, 0x7c, 0xc1, 0x90, 0xb5, 0xe2, 0x52, 0x5e, 0xa6, 0xd7, 0x02, 0x03, 0x52, 0x1f,
	0x6b, 0x4f, 0x78, 0x86, 0x0a, 0xf4, 0x44, 0x5f, 0x1f, 0xca, 0x34, 0x6c, 0xa1, 0xf6, 0x5e, 0xcc,
	0xb5, 0xbe, 0x17, 0x8b, 0x5f, 0xe1, 0x61, 0xa7, 0x27, 0x45, 0x9e, 0xd3, 0xcb, 0x9d, 0x80, 0x7b,
	0x17, 0xf4, 0x32, 0x4b, 0x6c, 0x44, 0xed, 0x56, 0x43, 0x40, 0xc7, 0x1b, 0xd7, 0xcd, 0x4e, 0x67,
	0xb4, 0xaf, 0x70, 0xb0, 0x9d, 0xae, 0xa0, 0x54, 0x3b, 0xdc, 0x89, 0x75, 0x53, 0x38, 0xe3, 0xb1,
	0x51, 0x70, 0x02, 0x00, 0x3b, 0x4f, 0x1a, 0xf5, 0x76, 0x34, 0x03, 0x5e, 0x67, 0x29, 0x39, 0xd3,
	0xbf, 0xb3, 0x8e, 0xe5, 0xbd, 0x8e, 0x6d, 0x5f, 0xca, 0xf7, 0x5d, 0x0e, 0x92, 0xd9, 0x4d, 0x60,
	0x51, 0xd8, 0x16, 0xef, 0xcd, 0x03, 0xbf, 0x50, 0x4f, 0x53, 0xbb, 0xef, 0x08, 0xaf, 0x5e, 0x2f,
	0x70, 0xb0, 0x95, 0x84, 0xf7, 0x39, 0xb9, 0xdc, 0x91, 0xd0, 0x9e, 0xf4, 0x04, 0x01, 0x82, 0xb8,
	0x25, 0x97, 0x9d, 0xb0, 0xa6, 0xbf, 0xa3, 0x85, 0xf4, 0xab, 0x1c, 0x0c, 0xcd, 0x60, 0xa2, 0x73,
	0x27, 0x60, 0x4c, 0x42, 0xcc, 0x92, 0xcb, 0x36, 0x86, 0xe4, 0x67, 0xfb, 0x22, 0xf9, 0x59, 0x76,
	0x5f, 0xd4, 0x2d, 0x43, 0x5a, 0x09, 0xe0, 0xa7, 0x38, 0x48, 0xb2, 0x00, 0xee, 0x1a, 0xec, 0x5e,
	0x75, 0xbe, 0x19, 0x87, 0xbd, 0x67, 0xb1, 0x51, 0xf6, 0xe4, 0x09, 0x1d, 0xbc, 0xe1, 0x39, 0x00,
	0x83, 0x2e, 0x6e, 0xf5, 0x74, 0x01, 0xea, 0xc8, 0x4d, 0x34, 0x50, 0x14, 0xfc, 0x77, 0x37, 0xd9,
	0x25, 0x39, 0xc3, 0x36, 0x2f, 0xfa, 0x38, 0x62, 0x3f, 0xf5, 0x44, 0xdd, 0xbc, 0x28, 0x8f, 0x2f,
	0x67, 0xe8, 0x59, 0x3b, 0x67, 0xf0, 0xa5, 0x13, 0x19, 0xb4, 0x07, 0x40, 0x35, 0xf3, 0x8a, 0xb1,
	0x92, 0x37, 0x6a, 0x1a, 0x4d, 0x28, 0xfa, 0xa5, 0x7e, 0xd5, 0x9c, 0x32, 0x56, 0xa4, 0x9a, 0x26,
	0xfc, 0x9a, 0x6b, 0x53, 0x60, 0xa3, 0x49, 0x92, 0xd5, 0x69, 0xa5, 0x8a, 0x5a, 0xb4, 0x9c, 0x47,
	0xd6, 0x88, 0x39, 0x89, 0xcb, 0x87, 0xa6, 0xd8, 0x0d, 0x84, 0xae, 0xb9, 0xd7, 0x5f, 0x11, 0xd5,
	0x00, 0xc6, 0x97, 0x91, 0x4d, 0x2c, 0xbe, 0xc5, 0xc3, 0x3e, 0x09, 0x13, 0x8e, 0xae, 0x84, 0x4a,
	0x1a, 0x76, 0xd8, 0x81, 0x60, 0xe9, 0x79, 0x83, 0xea, 0xe1, 0xc9, 0xd4, 0xb7, 0xb1, 0xb1, 0x73,
	0x3a, 0xd3, 0x90, 0x64, 0xec, 0x77, 0xc0, 0x56, 0x62, 0x6e, 0x7e, 0xd5, 0xc4, 0x1c, 0x22, 0xdd,
	0x93, 0xf5, 0xcc, 0x7e, 0x63, 0xf1, 0xd3, 0xbe, 0x35, 0xec, 0x4d, 0x1e, 0x92, 0xa7, 0x54, 0x4d,
	0xf1, 0x3e, 0x59, 0x90, 0x10, 0xb4, 0x1f, 0x38, 0xd8, 0xf2, 0x1e, 0x97, 0xfa, 0xd8, 0x0b, 0x87,
	0x19, 0xf1, 0x59, 0x06, 0x9d, 0x00, 0xa8, 0x1a, 0x58, 0x21, 0xa0, 0x62, 0xe7, 0x12, 0x2b, 0xe0,
	0xc4, 0x76, 0x06, 0xaf, 0x5c, 0x90, 0x2b, 0x35, 0xfc, 0x50, 0x0d, 0x1b, 0x2b, 0x92, 0x87, 0xa5,
	0xf1, 0xcd, 0xa9, 0x37, 0xe4, 0xcd, 0xa9, 0xaf, 0xe1, 0xcd, 0xa9, 0xcb, 0xcf, 0x1f, 0x4f, 0xc7,
	0x60, 0x67, 0x23, 0xaa, 0xf4, 0xf6, 0xa8, 0x0d, 0xd0, 0x06, 0xdc, 0xfe, 0xc4, 0x82, 0x6e, 0x7f,
	0x50, 0x06, 0x06, 0xc8, 0x19, 0x8d, 0xbd, 0x57, 0x92, 0x83, 0xf5, 0x70, 0x84, 0x59, 0x4c, 0x1f,
	0x29, 0xfb, 0x0b, 0xf6, 0x2f, 0x34, 0xe2, 0xe6, 0xe8, 0x3d, 0xf4, 0x23, 0xf5, 0xf4, 0x7b, 0xa3,
	0x0e, 0xea, 0xfc, 0xdd, 0xd4, 0xbf, 0x78, 0xd8, 0x35, 0x83, 0xad, 0xf3, 0x46, 0xe5, 0x94, 0x6e,
	0x10, 0x29, 0x76, 0x55, 0x17, 0x56, 0x36, 0xe9, 0x11, 0x1f, 0x9d, 0x82, 0x03, 0x55, 0xd9, 0x5a,
	0xca, 0xdb, 0x35, 0x06, 0xf9, 0xfa, 0x51, 0x3b, 0x4f, 0x1d, 0x4b, 0xc6, 0xec, 0x23, 0xd6, 0x1e,
	0xf2, 0xdb, 0xae, 0x4c, 0xa8, 0x5f, 0x60, 0x10, 0x1b, 0x17, 0x65, 0x6b, 0x89, 0xa4, 0x92, 0xcb,
	0xd8, 0x5a, 0xd2, 0x9d, 0xb7, 0x6d, 0xbb, 0x65, 0xd7, 0x5c, 0x59, 0x5e, 0x1f, 0xc6, 0x69, 0xcd,
	0x95, 0xc5, 0x7c, 0x28, 0xcc, 0x79, 0x9c, 0x94, 0x84, 0x58, 0xcd, 0xa8, 0xd8, 0xaf, 0x96, 0xe4,
	0x27, 0x1a, 0x85, 0xed, 0xcb, 0xb5, 0x8a, 0xa5, 0x52, 0x19, 0xb5, 0x6a, 0x45, 0x97, 0x95, 0xbc,
	0xfe, 0x08, 0x5d, 0xef, 0xfa, 0xa5, 0x6d, 0xf5, 0xa1, 0xf3, 0x74, 0x64, 0xe1, 0x11, 0xf1, 0x57,
	0x3c, 0xec, 0x67, 0xcb, 0x4f, 0x1d, 0x79, 0xa2, 0xe2, 0x84, 0x61, 0xa9, 0x25, 0xb9, 0x68, 0x2d,
	0xca, 0x86, 0x75, 0xa3, 0x7b, 0x62, 0x12, 0x86, 0x64, 0xdb, 0xdc, 0x3c, 0xc1, 0xc6, 0x2e, 0xee,
	0xd8, 0xb7, 0xda, 0x3c, 0x2f, 0x2a, 0xd2, 0xa0, 0xec, 0x69, 0xf9, 0x32, 0xa9, 0xeb, 0x3c, 0xdc,
	0x51, 0xbf, 0xba, 0xb2, 0xb0, 0xb2, 0x26, 0xb2, 0xe6, 0x0d, 0x0e, 0xad, 0xf0, 0x90, 0x27, 0x56,
	0xa7, 0x61, 0xd8, 0x07, 0xb3, 0xb3, 0xb2, 0x84, 0xe1, 0x3c, 0xe4, 0xc5, 0xd9, 0x14, 0x3f, 0xc7,
	0xc3, 0x6d, 0x0c, 0xd9, 0xb3, 0x4e, 0x30, 0x07, 0xe2, 0x7b, 0xa3, 0x43, 0xeb, 0x09, 0xb8, 0x54,
	0x9e, 0x55, 0x69, 0xd1, 0xdd, 0x21, 0x01, 0x7d, 0xe7, 0xe7, 0xcf, 0xcc, 0x2f, 0x5c, 0x9c, 0x4f,
	0x6e, 0x41, 0x49, 0x18, 0x9c, 0x9a, 0x38, 0x37, 0x91, 0x9d, 0x3e, 0x97, 0xcf, 0xcc, 0x2d, 0x64,
	0x92, 0x1c, 0xda, 0x01, 0xc9, 0xe9, 0xf9, 0x0b, 0xb3, 0xd2, 0xc2, 0xfc, 0xd9, 0xe9, 0x79, 0xbb,
	0x97, 0x47, 0x43, 0x30, 0x30, 0xb9, 0x30, 0x35, 0xcd, 0x9a, 0x31, 0xb4, 0x15, 0x12, 0x93, 0x0b,
	0xf3, 0xa7, 0x66, 0x67, 0x58, 0x47, 0x7c, 0xec, 0xbd, 0xb3, 0xb0, 0x6d, 0x55, 0xbd, 0x2d, 0xfa,
	0x13, 0x07, 0xc9, 0xc6, 0xd2, 0x0a, 0xf4, 0x7f, 0x4d, 0xf1, 0x5d, 0xa3, 0x12, 0x43, 0x38, 0xb6,
	0x1e, 0xae, 0xd1, 0xfa, 0x8c, 0x7b, 0xf8, 0xf1, 0x37, 0xdf, 0xf9, 0x3c, 0xff, 0xff, 0xe8, 0xbe,
	0xf4, 0xa5, 0x7b, 0xbc, 0xd5, 0xad, 0xf5, 0x5d, 0xda, 0x4c, 0x5f, 0xf1, 0xef, 0xe3, 0x57, 0xd3,
	0xde, 0x0c, 0x22, 0xb7, 0x17, 0xdd, 0xdc, 0xc0, 0xea, 0x4b, 0x30, 0x9e, 0xe2, 0xe9, 0xf1, 0xd8,
	0x53, 0x85, 0x70, 0x4f, 0x53, 0x85, 0x83, 0xca, 0x2c, 0x84, 0xf1, 0x96, 0x59, 0x5c, 0x03, 0x9f,
	0xe4, 0xa8, 0x85, 0x1f, 0xe7, 0xd0, 0x85, 0x26, 0x26, 0xaa, 0xca, 0xa8, 0x53, 0x5b, 0x33, 0xda,
	0xcc, 0x5c, 0x3f, 0x25, 0x1d, 0xcf, 0xa5, 0xd0, 0xc1, 0x26, 0x08, 0x50, 0x0e, 0x3b, 0x49, 0xba,
	0x8a, 0x5e, 0xe3, 0x20, 0xc9, 0x9e, 0x6e, 0x3d, 0x88, 0x34, 0x2f, 0xf9, 0xf4, 0xd5, 0x70, 0x08,
	0x87, 0xa2, 0xd3, 0xba, 0x18, 0x5c, 0xa4, 0x10, 0x3c, 0x24, 0x4e, 0xb6, 0x01, 0x81, 0x71, 0x4f,
	0xb1, 0x05, 0xba, 0xc6, 0x43, 0x92, 0x15, 0x9e, 0x75, 0xd2, 0x9c, 0xaf, 0x33, 0x97, 0x3e, 0xc3,
	0x09, 0xef, 0x93, 0x4b, 0xbd, 0x36, 0xe6, 0xee, 0x15, 0x22, 0xbb, 0xd7, 0x87, 0xcd, 0x8b, 0xbc,
	0x73, 0x49, 0xe1, 0xc1, 0xa6, 0xf9, 0x1c, 0x5f, 0xa3, 0x6e, 0x25, 0x64, 0x8e, 0xaf, 0xc1, 0xe5,
	0xe2, 0xf5, 0x6d, 0x86, 0xd7, 0x37, 0xb8, 0x54, 0xa5, 0x09, 0x5e, 0xbe, 0x25, 0x3f, 0x2a, 0x74,
	0x6b, 0x30, 0xb1, 0x89, 0x71, 0x38, 0x75, 0xa8, 0x29, 0x72, 0x7e, 0xe6, 0xfa, 0x1c, 0x79, 0x89,
	0x87, 0x84, 0xe7, 0x09, 0x00, 0xa5, 0x43, 0x57, 0x38, 0xff, 0x11, 0x5a, 0xb8, 0xbf, 0x45, 0x06,
	0x17, 0xa9, 0x97, 0x19, 0x52, 0xdf, 0xe7, 0x90, 0xd5, 0x49, 0xa4, 0xd2, 0xf6, 0x31, 0x24, 0x77,
	0x0c, 0x1d, 0x5d, 0x07, 0x62, 0x0e, 0x3b, 0x7a, 0x8d, 0x87, 0x81, 0x7a, 0xfa, 0x84, 0xfe, 0x37,
	0x6c, 0xd5, 0xf4, 0x15, 0x29, 0x08, 0xf7, 0xb6, 0x44, 0xee, 0x62, 0xf6, 0x3b, 0x86, 0xd9, 0x1b,
	0x1c, 0xfa, 0x28, 0xd7, 0x0d, 0xd0, 0xd2, 0x57, 0xdc, 0x84, 0xe2, 0x6a, 0xee, 0x41, 0x74, 0x7a,
	0x03, 0x08, 0xfa, 0x64, 0xa1, 0x1f, 0xf1, 0x30, 0xe8, 0xad, 0xb3, 0x41, 0x77, 0x37, 0xbf, 0x8b,
	0x58, 0x5d, 0x92, 0x23, 0x1c, 0x69, 0x95, 0xc3, 0xc5, 0xf5, 0x27, 0x0c, 0xd7, 0x1f, 0x72, 0x62,
	0x57, 0x62, 0x71, 0x9c, 0x4b, 0xe5, 0x4e, 0x8a, 0x1b, 0x09, 0xc7, 0x71, 0x2e, 0x85, 0x7e, 0xc3,
	0xc3, 0xa0, 0xb7, 0x22, 0x26, 0x04, 0xc2, 0x80, 0xe2, 0x99, 0x10, 0x08, 0x03, 0x38, 0x02, 0x42,
	0x33, 0xb5, 0x29, 0x42, 0x33, 0xd5, 0xbe, 0xd0, 0xfc, 0x0b, 0xcf, 0x9e, 0x4a, 0x3c, 0xa5, 0x3c,
	0xe8, 0x50, 0xc4, 0x65, 0xcf, 0x5b, 0xf8, 0x23, 0x3c, 0xb0, 0x0e, 0x26, 0x17, 0xe0, 0x3f, 0x30,
	0x80, 0x7f, 0xcf, 0xa1, 0x27, 0xba, 0x0f, 0x70, 0x9a, 0xde, 0x9e, 0xe4, 0x16, 0xd1, 0x7c, 0xbb,
	0x60, 0x66, 0x12, 0xd1, 0xc7, 0x62, 0x30, 0xb2, 0x56, 0x19, 0x10, 0x8a, 0x0a, 0x60, 0x60, 0xc5,
	0x8b, 0x30, 0xbd, 0x11, 0x6e, 0xd7, 0x0f, 0x6f, 0x33, 0x3f, 0x5c, 0xe7, 0xd0, 0x27, 0x37, 0x81,
	0x1f, 0x8c, 0x9a, 0x66, 0xe6, 0x16, 0xd0, 0xd9, 0xb6, 0xb9, 0x81, 0xd6, 0xbe, 0x3c, 0x11, 0x63,
	0xd5, 0x6b, 0xab, 0xcb, 0x87, 0xd0, 0x78, 0x28, 0x8a, 0x6b, 0xd6, 0x1c, 0x09, 0x93, 0xeb, 0xe7,
	0x75, 0xf1, 0x7f, 0x97, 0xe1, 0xff, 0x0e, 0x87, 0x9e, 0xdc, 0x04, 0xf8, 0x93, 0xd3, 0x2f, 0x73,
	0xc2, 0x39, 0x24, 0xb5, 0xcd, 0x09, 0x75, 0xa9, 0xe8, 0xaf, 0x3c, 0xa0, 0xd5, 0x05, 0x46, 0x28,
	0x62, 0x02, 0xd1, 0x58, 0x91, 0x24, 0x9c, 0x58, 0x1f, 0xdf, 0x66, 0x8d, 0x7e, 0x82, 0x53, 0x5b,
	0xa3, 0x9f, 0x08, 0x44, 0xaf, 0xf3, 0xb0, 0x33, 0xb0, 0x1a, 0x09, 0x1d, 0x09, 0x7b, 0x20, 0x59,
	0xb3, 0x82, 0x49, 0xc8, 0xac, 0x9b, 0xd5, 0x05, 0xff, 0x45, 0x06, 0xfe, 0xf3, 0x1c, 0x7a, 0xb4,
	0xa3, 0xd8, 0x2b, 0x6a, 0xa9, 0x94, 0x1b, 0x47, 0xf7, 0xaf, 0x07, 0x66, 0xc2, 0x8b, 0x5e, 0xe6,
	0x61, 0xd0, 0x5b, 0x4c, 0x13, 0x92, 0x9a, 0x04, 0xd4, 0xdd, 0x84, 0xa4, 0x26, 0x01, 0x1c, 0x2e,
	0x6c, 0xaf, 0x30, 0xd8, 0x5e, 0xe2, 0x50, 0xad, 0xa3, 0xb0, 0x39, 0xf5, 0x3a, 0xb9, 0xe3, 0xe8,
	0x81, 0xf5, 0x40, 0x57, 0xaf, 0xf7, 0xf9, 0x19, 0x3b, 0x6b, 0x30, 0x03, 0xc3, 0xcf, 0x1a, 0xbe,
	0x4a, 0x93, 0xf0, 0xb3, 0x86, 0x8f, 0xdc, 0x45, 0xed, 0x0d, 0x86, 0xda, 0xcf, 0x39, 0xf4, 0xe1,
	0xae, 0xa0, 0x96, 0xbe, 0xc2, 0x7e, 0x5d, 0xcd, 0xcd, 0xa0, 0xe9, 0x8d, 0xc0, 0x57, 0x17, 0x84,
	0xde, 0xe2, 0x61, 0x20, 0x1b, 0x11, 0xc7, 0x6c, 0x6b, 0x38, 0x66, 0xd7, 0xc4, 0xf1, 0xcf, 0x0c,
	0xc7, 0xb7, 0x39, 0xa1, 0xcb, 0x38, 0x8e, 0x7b, 0x6e, 0x83, 0x73, 0x59, 0xa1, 0x3d, 0x98, 0x7a,
	0x85, 0xa2, 0x5f, 0xd6, 0x4f, 0x20, 0x36, 0xc4, 0x51, 0x4e, 0x20, 0x7e, 0x94, 0x8f, 0xb4, 0xca,
	0x11, 0x10, 0xb0, 0xa9, 0xae, 0x07, 0x6c, 0xaa, 0x4d, 0x01, 0xfb, 0x83, 0x38, 0x0c, 0xfb, 0x2b,
	0x34, 0xd1, 0x58, 0xd4, 0x0b, 0x17, 0xb7, 0x9c, 0x53, 0x38, 0xda, 0x3a, 0x8f, 0x0b, 0xeb, 0xf7,
	0x62, 0x14, 0xd6, 0xef, 0xc4, 0xd0, 0xe3, 0x5c, 0x77, 0x71, 0x4d, 0x57, 0xf4, 0x72, 0xee, 0x0c,
	0x9a, 0x6d, 0x0b, 0xb6, 0x54, 0xd8, 0xa7, 0x38, 0xf4, 0x89, 0x4d, 0x90, 0xc6, 0x10, 0x55, 0xe6,
	0xd1, 0x5c, 0xdb, 0xb2, 0x98, 0x8a, 0x5e, 0x46, 0xd7, 0x79, 0xd8, 0x15, 0x5c, 0x28, 0x15, 0x92,
	0xc2, 0x37, 0xad, 0xae, 0x0a, 0x49, 0xe1, 0x9b, 0xf2, 0x06, 0x6c, 0xc8, 0xa2, 0xd1, 0x51, 0xf0,
	0x97, 0x89, 0x7a, 0xe3, 0x5c, 0x2a, 0x77, 0x5c, 0x3c, 0xb2, 0x1e, 0xb0, 0x1d, 0x7e, 0xf4, 0xb5,
	0x18, 0xec, 0x5e, 0xa3, 0xb6, 0x08, 0x1d, 0x0d, 0x79, 0xba, 0x6b, 0x56, 0x91, 0x24, 0x4c, 0x6d,
	0x80, 0xd9, 0xc5, 0xf7, 0xdf, 0x0c, 0xdf, 0xf7, 0x38, 0xf1, 0xe9, 0xee, 0x46, 0xb7, 0xaf, 0xf4,
	0x89, 0x48, 0x22, 0xbf, 0x89, 0x03, 0x1e, 0x16, 0x3f, 0xd0, 0x8e, 0x68, 0x5f, 0x4b, 0x3e, 0x7a,
	0x96, 0x87, 0x7e, 0xa7, 0xbc, 0x15, 0xdd, 0x15, 0xba, 0xfc, 0x79, 0xaa, 0x60, 0x85, 0xc3, 0xad,
	0x50, 0x77, 0x3f, 0x37, 0xb7, 0xe4, 0xb2, 0xb9, 0xde, 0xdc, 0x9c, 0x56, 0xde, 0x3e, 0xc7, 0x43,
	0x2f, 0x2b, 0xaa, 0x0d, 0x79, 0x4d, 0xf2, 0x55, 0xde, 0x86, 0xbc, 0x26, 0xf9, 0x68, 0x03, 0xee,
	0x59, 0xd1, 0xe5, 0x8e, 0x83, 0x94, 0xbe, 0x62, 0xc9, 0xe5, 0xab, 0xb9, 0x93, 0xe8, 0xf8, 0x7a,
	0xa1, 0x62, 0x12, 0xd0, 0xab, 0x3c, 0xf4, 0x66, 0xa3, 0x00, 0x96, 0x6d, 0x01, 0xb0, 0x6c, 0x30,
	0x60, 0xd7, 0x19, 0x60, 0x6f, 0x72, 0x42, 0xb7, 0x00, 0xf3, 0x65, 0x8d, 0x73, 0xc2, 0x06, 0xc1,
	0xf3, 0xa5, 0x8b, 0x2f, 0xf1, 0x30, 0x50, 0x2f, 0x2d, 0x0e, 0x49, 0xc7, 0x1b, 0x4b, 0x90, 0x43,
	0xd2, 0xf1, 0x46, 0xf2, 0x80, 0x10, 0x4c, 0x75, 0x2f, 0x04, 0x53, 0x1b, 0x0d, 0xc1, 0x1f, 0x73,
	0x90, 0x2c, 0x35, 0xd6, 0x5e, 0x36, 0x07, 0xb0, 0xb1, 0xa8, 0x30, 0x04, 0xc0, 0x46, 0x72, 0x17,
	0xc0, 0x53, 0x14, 0xbf, 0xd5, 0xcf, 0x15, 0xcd, 0xaa, 0x18, 0x1a, 0x75, 0xa5, 0xcf, 0x15, 0x1c,
	0xec, 0x2c, 0x05, 0x56, 0x3a, 0x8e, 0xb5, 0xa4, 0x19, 0xe5, 0x09, 0x49, 0x71, 0x03, 0x79, 0x5c,
	0x93, 0xce, 0x50, 0x93, 0xa6, 0xc5, 0x93, 0x1b, 0x30, 0x89, 0x8a, 0x24, 0x76, 0x5d, 0x8b, 0xc1,
	0xae, 0x72, 0x70, 0xb1, 0x60, 0xe8, 0x9a, 0x19, 0xc0, 0x14, 0xf2, 0x6a, 0x10, 0xcc, 0xe4, 0x29,
	0xc9, 0xe0, 0x59, 0x49, 0x06, 0x2f, 0x7e, 0x79, 0x13, 0x24, 0xba, 0xc1, 0xb8, 0x90, 0x84, 0x40,
	0x11, 0xf3, 0x6d, 0x4b, 0x7f, 0xd7, 0xfc, 0x0a, 0x7a, 0x9b, 0x83, 0xfd, 0xc5, 0x90, 0x3a, 0xc2,
	0x07, 0x22, 0x14, 0x41, 0xaf, 0xc9, 0x1d, 0xf2, 0xc8, 0x10, 0xc2, 0xed, 0xba, 0xed, 0x08, 0xf5,
	0xda, 0x21, 0x71, 0xb4, 0x01, 0x94, 0x10, 0xe5, 0x89, 0x8d, 0xff, 0xe4, 0xe0, 0x8e, 0x72, 0xb4,
	0xba, 0xbe, 0xc9, 0x68, 0xb7, 0xc1, 0x4d, 0x85, 0x08, 0x73, 0x6d, 0x10, 0xe2, 0x1a, 0x7e, 0x8c,
	0x1a, 0x7e, 0x1f, 0x3a, 0xdc, 0x60, 0x78, 0x44, 0x8b, 0xfe, 0xc1, 0xc1, 0x6d, 0xc5, 0x28, 0x75,
	0x77, 0x13, 0x11, 0xfc, 0xd4, 0x5c, 0x84, 0xf0, 0xe0, 0x86, 0x45, 0xb8, 0x66, 0x1f, 0xa7, 0x66,
	0xdf, 0x2f, 0x1e, 0x0a, 0xf4, 0x77, 0x73, 0x29, 0xe3, 0x5c, 0x2a, 0x73, 0x76, 0x91, 0xcb, 0xcd,
	0x96, 0x55, 0x6b, 0xa9, 0x56, 0x18, 0x2d, 0xea, 0xcb, 0xe9, 0x0b, 0x44, 0xad, 0x89, 0xd9, 0xb4,
	0xf3, 0xbf, 0x14, 0xe9, 0x3f, 0x4d, 0x34, 0xd3, 0x65, 0xac, 0xa5, 0xcb, 0xba, 0xd3, 0xaa, 0xd6,
	0x0a, 0x15, 0xb5, 0x98, 0x5e, 0xfd, 0xff, 0x16, 0x0b, 0xbd, 0x94, 0xe2, 0xd0, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xca, 0x47, 0xf9, 0x00, 0xd2, 0x52, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VersioningServiceClient is the client API for VersioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersioningServiceClient interface {
	// CRUD for repositories
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesRequest_Response, error)
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryRequest_Response, error)
	CreateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error)
	UpdateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error)
	DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryRequest_Response, error)
	// CRUD for commits
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsRequest_Response, error)
	GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitRequest_Response, error)
	CreateCommit(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CreateCommitRequest_Response, error)
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitRequest_Response, error)
	// Getting blobs and folders in a commit
	ListCommitBlobs(ctx context.Context, in *ListCommitBlobsRequest, opts ...grpc.CallOption) (*ListCommitBlobsRequest_Response, error)
	// Getting ExperimentRuns linked to a commit
	ListCommitExperimentRuns(ctx context.Context, in *ListCommitExperimentRunsRequest, opts ...grpc.CallOption) (*ListCommitExperimentRunsRequest_Response, error)
	// Getting ExperimentRuns linked to a blob
	ListBlobExperimentRuns(ctx context.Context, in *ListBlobExperimentRunsRequest, opts ...grpc.CallOption) (*ListBlobExperimentRunsRequest_Response, error)
	GetCommitComponent(ctx context.Context, in *GetCommitComponentRequest, opts ...grpc.CallOption) (*GetCommitComponentRequest_Response, error)
	// Git-like operations
	ComputeRepositoryDiff(ctx context.Context, in *ComputeRepositoryDiffRequest, opts ...grpc.CallOption) (*ComputeRepositoryDiffRequest_Response, error)
	// CRUD for Branches
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesRequest_Response, error)
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchRequest_Response, error)
	// Unlike tags, branches can be updated. The API must verify that the new commit is a child of the current branch.
	SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*SetBranchRequest_Response, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchRequest_Response, error)
	ListCommitsLog(ctx context.Context, in *ListCommitsLogRequest, opts ...grpc.CallOption) (*ListCommitsLogRequest_Response, error)
	MergeRepositoryCommits(ctx context.Context, in *MergeRepositoryCommitsRequest, opts ...grpc.CallOption) (*MergeRepositoryCommitsRequest_Response, error)
	RevertRepositoryCommits(ctx context.Context, in *RevertRepositoryCommitsRequest, opts ...grpc.CallOption) (*RevertRepositoryCommitsRequest_Response, error)
	// CRUD for tags
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagRequest_Response, error)
	// Can't update a tag. If someone tries to set one that exists, we should error.
	SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagRequest_Response, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error)
	FindRepositories(ctx context.Context, in *FindRepositories, opts ...grpc.CallOption) (*FindRepositories_Response, error)
	FindRepositoriesBlobs(ctx context.Context, in *FindRepositoriesBlobs, opts ...grpc.CallOption) (*FindRepositoriesBlobs_Response, error)
	GetUrlForBlobVersioned(ctx context.Context, in *GetUrlForBlobVersioned, opts ...grpc.CallOption) (*GetUrlForBlobVersioned_Response, error)
	CommitVersionedBlobArtifactPart(ctx context.Context, in *CommitVersionedBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedBlobArtifactPart_Response, error)
	GetCommittedVersionedBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedBlobArtifactParts_Response, error)
	CommitMultipartVersionedBlobArtifact(ctx context.Context, in *CommitMultipartVersionedBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedBlobArtifact_Response, error)
}

type versioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersioningServiceClient(cc grpc.ClientConnInterface) VersioningServiceClient {
	return &versioningServiceClient{cc}
}

func (c *versioningServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesRequest_Response, error) {
	out := new(ListRepositoriesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*GetRepositoryRequest_Response, error) {
	out := new(GetRepositoryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CreateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error) {
	out := new(SetRepository_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) UpdateRepository(ctx context.Context, in *SetRepository, opts ...grpc.CallOption) (*SetRepository_Response, error) {
	out := new(SetRepository_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryRequest_Response, error) {
	out := new(DeleteRepositoryRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsRequest_Response, error) {
	out := new(ListCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitRequest_Response, error) {
	out := new(GetCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CreateCommit(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CreateCommitRequest_Response, error) {
	out := new(CreateCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/CreateCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitRequest_Response, error) {
	out := new(DeleteCommitRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommitBlobs(ctx context.Context, in *ListCommitBlobsRequest, opts ...grpc.CallOption) (*ListCommitBlobsRequest_Response, error) {
	out := new(ListCommitBlobsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommitExperimentRuns(ctx context.Context, in *ListCommitExperimentRunsRequest, opts ...grpc.CallOption) (*ListCommitExperimentRunsRequest_Response, error) {
	out := new(ListCommitExperimentRunsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommitExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListBlobExperimentRuns(ctx context.Context, in *ListBlobExperimentRunsRequest, opts ...grpc.CallOption) (*ListBlobExperimentRunsRequest_Response, error) {
	out := new(ListBlobExperimentRunsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListBlobExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommitComponent(ctx context.Context, in *GetCommitComponentRequest, opts ...grpc.CallOption) (*GetCommitComponentRequest_Response, error) {
	out := new(GetCommitComponentRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ComputeRepositoryDiff(ctx context.Context, in *ComputeRepositoryDiffRequest, opts ...grpc.CallOption) (*ComputeRepositoryDiffRequest_Response, error) {
	out := new(ComputeRepositoryDiffRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesRequest_Response, error) {
	out := new(ListBranchesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchRequest_Response, error) {
	out := new(GetBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*SetBranchRequest_Response, error) {
	out := new(SetBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/SetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchRequest_Response, error) {
	out := new(DeleteBranchRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListCommitsLog(ctx context.Context, in *ListCommitsLogRequest, opts ...grpc.CallOption) (*ListCommitsLogRequest_Response, error) {
	out := new(ListCommitsLogRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) MergeRepositoryCommits(ctx context.Context, in *MergeRepositoryCommitsRequest, opts ...grpc.CallOption) (*MergeRepositoryCommitsRequest_Response, error) {
	out := new(MergeRepositoryCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) RevertRepositoryCommits(ctx context.Context, in *RevertRepositoryCommitsRequest, opts ...grpc.CallOption) (*RevertRepositoryCommitsRequest_Response, error) {
	out := new(RevertRepositoryCommitsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error) {
	out := new(ListTagsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagRequest_Response, error) {
	out := new(GetTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) SetTag(ctx context.Context, in *SetTagRequest, opts ...grpc.CallOption) (*SetTagRequest_Response, error) {
	out := new(SetTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/SetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error) {
	out := new(DeleteTagRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) FindRepositories(ctx context.Context, in *FindRepositories, opts ...grpc.CallOption) (*FindRepositories_Response, error) {
	out := new(FindRepositories_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/findRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) FindRepositoriesBlobs(ctx context.Context, in *FindRepositoriesBlobs, opts ...grpc.CallOption) (*FindRepositoriesBlobs_Response, error) {
	out := new(FindRepositoriesBlobs_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/findRepositoriesBlobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetUrlForBlobVersioned(ctx context.Context, in *GetUrlForBlobVersioned, opts ...grpc.CallOption) (*GetUrlForBlobVersioned_Response, error) {
	out := new(GetUrlForBlobVersioned_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/getUrlForBlobVersioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CommitVersionedBlobArtifactPart(ctx context.Context, in *CommitVersionedBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedBlobArtifactPart_Response, error) {
	out := new(CommitVersionedBlobArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/commitVersionedBlobArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) GetCommittedVersionedBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedBlobArtifactParts_Response, error) {
	out := new(GetCommittedVersionedBlobArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/getCommittedVersionedBlobArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versioningServiceClient) CommitMultipartVersionedBlobArtifact(ctx context.Context, in *CommitMultipartVersionedBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedBlobArtifact_Response, error) {
	out := new(CommitMultipartVersionedBlobArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.versioning.VersioningService/commitMultipartVersionedBlobArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersioningServiceServer is the server API for VersioningService service.
type VersioningServiceServer interface {
	// CRUD for repositories
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesRequest_Response, error)
	GetRepository(context.Context, *GetRepositoryRequest) (*GetRepositoryRequest_Response, error)
	CreateRepository(context.Context, *SetRepository) (*SetRepository_Response, error)
	UpdateRepository(context.Context, *SetRepository) (*SetRepository_Response, error)
	DeleteRepository(context.Context, *DeleteRepositoryRequest) (*DeleteRepositoryRequest_Response, error)
	// CRUD for commits
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsRequest_Response, error)
	GetCommit(context.Context, *GetCommitRequest) (*GetCommitRequest_Response, error)
	CreateCommit(context.Context, *CreateCommitRequest) (*CreateCommitRequest_Response, error)
	DeleteCommit(context.Context, *DeleteCommitRequest) (*DeleteCommitRequest_Response, error)
	// Getting blobs and folders in a commit
	ListCommitBlobs(context.Context, *ListCommitBlobsRequest) (*ListCommitBlobsRequest_Response, error)
	// Getting ExperimentRuns linked to a commit
	ListCommitExperimentRuns(context.Context, *ListCommitExperimentRunsRequest) (*ListCommitExperimentRunsRequest_Response, error)
	// Getting ExperimentRuns linked to a blob
	ListBlobExperimentRuns(context.Context, *ListBlobExperimentRunsRequest) (*ListBlobExperimentRunsRequest_Response, error)
	GetCommitComponent(context.Context, *GetCommitComponentRequest) (*GetCommitComponentRequest_Response, error)
	// Git-like operations
	ComputeRepositoryDiff(context.Context, *ComputeRepositoryDiffRequest) (*ComputeRepositoryDiffRequest_Response, error)
	// CRUD for Branches
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesRequest_Response, error)
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchRequest_Response, error)
	// Unlike tags, branches can be updated. The API must verify that the new commit is a child of the current branch.
	SetBranch(context.Context, *SetBranchRequest) (*SetBranchRequest_Response, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchRequest_Response, error)
	ListCommitsLog(context.Context, *ListCommitsLogRequest) (*ListCommitsLogRequest_Response, error)
	MergeRepositoryCommits(context.Context, *MergeRepositoryCommitsRequest) (*MergeRepositoryCommitsRequest_Response, error)
	RevertRepositoryCommits(context.Context, *RevertRepositoryCommitsRequest) (*RevertRepositoryCommitsRequest_Response, error)
	// CRUD for tags
	ListTags(context.Context, *ListTagsRequest) (*ListTagsRequest_Response, error)
	GetTag(context.Context, *GetTagRequest) (*GetTagRequest_Response, error)
	// Can't update a tag. If someone tries to set one that exists, we should error.
	SetTag(context.Context, *SetTagRequest) (*SetTagRequest_Response, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagRequest_Response, error)
	FindRepositories(context.Context, *FindRepositories) (*FindRepositories_Response, error)
	FindRepositoriesBlobs(context.Context, *FindRepositoriesBlobs) (*FindRepositoriesBlobs_Response, error)
	GetUrlForBlobVersioned(context.Context, *GetUrlForBlobVersioned) (*GetUrlForBlobVersioned_Response, error)
	CommitVersionedBlobArtifactPart(context.Context, *CommitVersionedBlobArtifactPart) (*CommitVersionedBlobArtifactPart_Response, error)
	GetCommittedVersionedBlobArtifactParts(context.Context, *GetCommittedVersionedBlobArtifactParts) (*GetCommittedVersionedBlobArtifactParts_Response, error)
	CommitMultipartVersionedBlobArtifact(context.Context, *CommitMultipartVersionedBlobArtifact) (*CommitMultipartVersionedBlobArtifact_Response, error)
}

// UnimplementedVersioningServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVersioningServiceServer struct {
}

func (*UnimplementedVersioningServiceServer) ListRepositories(ctx context.Context, req *ListRepositoriesRequest) (*ListRepositoriesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (*UnimplementedVersioningServiceServer) GetRepository(ctx context.Context, req *GetRepositoryRequest) (*GetRepositoryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) CreateRepository(ctx context.Context, req *SetRepository) (*SetRepository_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) UpdateRepository(ctx context.Context, req *SetRepository) (*SetRepository_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteRepository(ctx context.Context, req *DeleteRepositoryRequest) (*DeleteRepositoryRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommits(ctx context.Context, req *ListCommitsRequest) (*ListCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommit(ctx context.Context, req *GetCommitRequest) (*GetCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) CreateCommit(ctx context.Context, req *CreateCommitRequest) (*CreateCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteCommit(ctx context.Context, req *DeleteCommitRequest) (*DeleteCommitRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommit not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommitBlobs(ctx context.Context, req *ListCommitBlobsRequest) (*ListCommitBlobsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitBlobs not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommitExperimentRuns(ctx context.Context, req *ListCommitExperimentRunsRequest) (*ListCommitExperimentRunsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitExperimentRuns not implemented")
}
func (*UnimplementedVersioningServiceServer) ListBlobExperimentRuns(ctx context.Context, req *ListBlobExperimentRunsRequest) (*ListBlobExperimentRunsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlobExperimentRuns not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommitComponent(ctx context.Context, req *GetCommitComponentRequest) (*GetCommitComponentRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitComponent not implemented")
}
func (*UnimplementedVersioningServiceServer) ComputeRepositoryDiff(ctx context.Context, req *ComputeRepositoryDiffRequest) (*ComputeRepositoryDiffRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeRepositoryDiff not implemented")
}
func (*UnimplementedVersioningServiceServer) ListBranches(ctx context.Context, req *ListBranchesRequest) (*ListBranchesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (*UnimplementedVersioningServiceServer) GetBranch(ctx context.Context, req *GetBranchRequest) (*GetBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) SetBranch(ctx context.Context, req *SetBranchRequest) (*SetBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteBranch(ctx context.Context, req *DeleteBranchRequest) (*DeleteBranchRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (*UnimplementedVersioningServiceServer) ListCommitsLog(ctx context.Context, req *ListCommitsLogRequest) (*ListCommitsLogRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitsLog not implemented")
}
func (*UnimplementedVersioningServiceServer) MergeRepositoryCommits(ctx context.Context, req *MergeRepositoryCommitsRequest) (*MergeRepositoryCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeRepositoryCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) RevertRepositoryCommits(ctx context.Context, req *RevertRepositoryCommitsRequest) (*RevertRepositoryCommitsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertRepositoryCommits not implemented")
}
func (*UnimplementedVersioningServiceServer) ListTags(ctx context.Context, req *ListTagsRequest) (*ListTagsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (*UnimplementedVersioningServiceServer) GetTag(ctx context.Context, req *GetTagRequest) (*GetTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (*UnimplementedVersioningServiceServer) SetTag(ctx context.Context, req *SetTagRequest) (*SetTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTag not implemented")
}
func (*UnimplementedVersioningServiceServer) DeleteTag(ctx context.Context, req *DeleteTagRequest) (*DeleteTagRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedVersioningServiceServer) FindRepositories(ctx context.Context, req *FindRepositories) (*FindRepositories_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositories not implemented")
}
func (*UnimplementedVersioningServiceServer) FindRepositoriesBlobs(ctx context.Context, req *FindRepositoriesBlobs) (*FindRepositoriesBlobs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositoriesBlobs not implemented")
}
func (*UnimplementedVersioningServiceServer) GetUrlForBlobVersioned(ctx context.Context, req *GetUrlForBlobVersioned) (*GetUrlForBlobVersioned_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForBlobVersioned not implemented")
}
func (*UnimplementedVersioningServiceServer) CommitVersionedBlobArtifactPart(ctx context.Context, req *CommitVersionedBlobArtifactPart) (*CommitVersionedBlobArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitVersionedBlobArtifactPart not implemented")
}
func (*UnimplementedVersioningServiceServer) GetCommittedVersionedBlobArtifactParts(ctx context.Context, req *GetCommittedVersionedBlobArtifactParts) (*GetCommittedVersionedBlobArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedVersionedBlobArtifactParts not implemented")
}
func (*UnimplementedVersioningServiceServer) CommitMultipartVersionedBlobArtifact(ctx context.Context, req *CommitMultipartVersionedBlobArtifact) (*CommitMultipartVersionedBlobArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartVersionedBlobArtifact not implemented")
}

func RegisterVersioningServiceServer(s *grpc.Server, srv VersioningServiceServer) {
	s.RegisterService(&_VersioningService_serviceDesc, srv)
}

func _VersioningService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CreateRepository(ctx, req.(*SetRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).UpdateRepository(ctx, req.(*SetRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteRepository(ctx, req.(*DeleteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommits(ctx, req.(*ListCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommit(ctx, req.(*GetCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CreateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CreateCommit(ctx, req.(*CreateCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommitBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommitBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommitBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommitBlobs(ctx, req.(*ListCommitBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommitExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitExperimentRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommitExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommitExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommitExperimentRuns(ctx, req.(*ListCommitExperimentRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListBlobExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlobExperimentRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListBlobExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListBlobExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListBlobExperimentRuns(ctx, req.(*ListBlobExperimentRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommitComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommitComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommitComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommitComponent(ctx, req.(*GetCommitComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ComputeRepositoryDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRepositoryDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ComputeRepositoryDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ComputeRepositoryDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ComputeRepositoryDiff(ctx, req.(*ComputeRepositoryDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_SetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).SetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/SetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).SetBranch(ctx, req.(*SetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListCommitsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListCommitsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListCommitsLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListCommitsLog(ctx, req.(*ListCommitsLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_MergeRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRepositoryCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).MergeRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/MergeRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).MergeRepositoryCommits(ctx, req.(*MergeRepositoryCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_RevertRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertRepositoryCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).RevertRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/RevertRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).RevertRepositoryCommits(ctx, req.(*RevertRepositoryCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_SetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).SetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/SetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).SetTag(ctx, req.(*SetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_FindRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).FindRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/FindRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).FindRepositories(ctx, req.(*FindRepositories))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_FindRepositoriesBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositoriesBlobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).FindRepositoriesBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/FindRepositoriesBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).FindRepositoriesBlobs(ctx, req.(*FindRepositoriesBlobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetUrlForBlobVersioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForBlobVersioned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetUrlForBlobVersioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetUrlForBlobVersioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetUrlForBlobVersioned(ctx, req.(*GetUrlForBlobVersioned))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CommitVersionedBlobArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitVersionedBlobArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CommitVersionedBlobArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CommitVersionedBlobArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CommitVersionedBlobArtifactPart(ctx, req.(*CommitVersionedBlobArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_GetCommittedVersionedBlobArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedVersionedBlobArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).GetCommittedVersionedBlobArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/GetCommittedVersionedBlobArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).GetCommittedVersionedBlobArtifactParts(ctx, req.(*GetCommittedVersionedBlobArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersioningService_CommitMultipartVersionedBlobArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMultipartVersionedBlobArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersioningServiceServer).CommitMultipartVersionedBlobArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.versioning.VersioningService/CommitMultipartVersionedBlobArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersioningServiceServer).CommitMultipartVersionedBlobArtifact(ctx, req.(*CommitMultipartVersionedBlobArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersioningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.versioning.VersioningService",
	HandlerType: (*VersioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _VersioningService_ListRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _VersioningService_GetRepository_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _VersioningService_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _VersioningService_UpdateRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _VersioningService_DeleteRepository_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _VersioningService_ListCommits_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _VersioningService_GetCommit_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _VersioningService_CreateCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _VersioningService_DeleteCommit_Handler,
		},
		{
			MethodName: "ListCommitBlobs",
			Handler:    _VersioningService_ListCommitBlobs_Handler,
		},
		{
			MethodName: "ListCommitExperimentRuns",
			Handler:    _VersioningService_ListCommitExperimentRuns_Handler,
		},
		{
			MethodName: "ListBlobExperimentRuns",
			Handler:    _VersioningService_ListBlobExperimentRuns_Handler,
		},
		{
			MethodName: "GetCommitComponent",
			Handler:    _VersioningService_GetCommitComponent_Handler,
		},
		{
			MethodName: "ComputeRepositoryDiff",
			Handler:    _VersioningService_ComputeRepositoryDiff_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _VersioningService_ListBranches_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _VersioningService_GetBranch_Handler,
		},
		{
			MethodName: "SetBranch",
			Handler:    _VersioningService_SetBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _VersioningService_DeleteBranch_Handler,
		},
		{
			MethodName: "ListCommitsLog",
			Handler:    _VersioningService_ListCommitsLog_Handler,
		},
		{
			MethodName: "MergeRepositoryCommits",
			Handler:    _VersioningService_MergeRepositoryCommits_Handler,
		},
		{
			MethodName: "RevertRepositoryCommits",
			Handler:    _VersioningService_RevertRepositoryCommits_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _VersioningService_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _VersioningService_GetTag_Handler,
		},
		{
			MethodName: "SetTag",
			Handler:    _VersioningService_SetTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _VersioningService_DeleteTag_Handler,
		},
		{
			MethodName: "findRepositories",
			Handler:    _VersioningService_FindRepositories_Handler,
		},
		{
			MethodName: "findRepositoriesBlobs",
			Handler:    _VersioningService_FindRepositoriesBlobs_Handler,
		},
		{
			MethodName: "getUrlForBlobVersioned",
			Handler:    _VersioningService_GetUrlForBlobVersioned_Handler,
		},
		{
			MethodName: "commitVersionedBlobArtifactPart",
			Handler:    _VersioningService_CommitVersionedBlobArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedVersionedBlobArtifactParts",
			Handler:    _VersioningService_GetCommittedVersionedBlobArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartVersionedBlobArtifact",
			Handler:    _VersioningService_CommitMultipartVersionedBlobArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/versioning/VersioningService.proto",
}
