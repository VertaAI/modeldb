// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LineageServiceClient is the client API for LineageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LineageServiceClient interface {
	AddLineage(ctx context.Context, in *AddLineage, opts ...grpc.CallOption) (*AddLineage_Response, error)
	DeleteLineage(ctx context.Context, in *DeleteLineage, opts ...grpc.CallOption) (*DeleteLineage_Response, error)
	FindAllInputs(ctx context.Context, in *FindAllInputs, opts ...grpc.CallOption) (*FindAllInputs_Response, error)
	FindAllOutputs(ctx context.Context, in *FindAllOutputs, opts ...grpc.CallOption) (*FindAllOutputs_Response, error)
	FindAllInputsOutputs(ctx context.Context, in *FindAllInputsOutputs, opts ...grpc.CallOption) (*FindAllInputsOutputs_Response, error)
}

type lineageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLineageServiceClient(cc grpc.ClientConnInterface) LineageServiceClient {
	return &lineageServiceClient{cc}
}

func (c *lineageServiceClient) AddLineage(ctx context.Context, in *AddLineage, opts ...grpc.CallOption) (*AddLineage_Response, error) {
	out := new(AddLineage_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.LineageService/addLineage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineageServiceClient) DeleteLineage(ctx context.Context, in *DeleteLineage, opts ...grpc.CallOption) (*DeleteLineage_Response, error) {
	out := new(DeleteLineage_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.LineageService/deleteLineage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineageServiceClient) FindAllInputs(ctx context.Context, in *FindAllInputs, opts ...grpc.CallOption) (*FindAllInputs_Response, error) {
	out := new(FindAllInputs_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.LineageService/findAllInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineageServiceClient) FindAllOutputs(ctx context.Context, in *FindAllOutputs, opts ...grpc.CallOption) (*FindAllOutputs_Response, error) {
	out := new(FindAllOutputs_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.LineageService/findAllOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineageServiceClient) FindAllInputsOutputs(ctx context.Context, in *FindAllInputsOutputs, opts ...grpc.CallOption) (*FindAllInputsOutputs_Response, error) {
	out := new(FindAllInputsOutputs_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.LineageService/findAllInputsOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LineageServiceServer is the server API for LineageService service.
type LineageServiceServer interface {
	AddLineage(context.Context, *AddLineage) (*AddLineage_Response, error)
	DeleteLineage(context.Context, *DeleteLineage) (*DeleteLineage_Response, error)
	FindAllInputs(context.Context, *FindAllInputs) (*FindAllInputs_Response, error)
	FindAllOutputs(context.Context, *FindAllOutputs) (*FindAllOutputs_Response, error)
	FindAllInputsOutputs(context.Context, *FindAllInputsOutputs) (*FindAllInputsOutputs_Response, error)
}

// UnimplementedLineageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLineageServiceServer struct {
}

func (*UnimplementedLineageServiceServer) AddLineage(context.Context, *AddLineage) (*AddLineage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLineage not implemented")
}
func (*UnimplementedLineageServiceServer) DeleteLineage(context.Context, *DeleteLineage) (*DeleteLineage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLineage not implemented")
}
func (*UnimplementedLineageServiceServer) FindAllInputs(context.Context, *FindAllInputs) (*FindAllInputs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllInputs not implemented")
}
func (*UnimplementedLineageServiceServer) FindAllOutputs(context.Context, *FindAllOutputs) (*FindAllOutputs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllOutputs not implemented")
}
func (*UnimplementedLineageServiceServer) FindAllInputsOutputs(context.Context, *FindAllInputsOutputs) (*FindAllInputsOutputs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllInputsOutputs not implemented")
}

func RegisterLineageServiceServer(s *grpc.Server, srv LineageServiceServer) {
	s.RegisterService(&_LineageService_serviceDesc, srv)
}

func _LineageService_AddLineage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLineage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineageServiceServer).AddLineage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.LineageService/AddLineage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineageServiceServer).AddLineage(ctx, req.(*AddLineage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LineageService_DeleteLineage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLineage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineageServiceServer).DeleteLineage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.LineageService/DeleteLineage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineageServiceServer).DeleteLineage(ctx, req.(*DeleteLineage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LineageService_FindAllInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllInputs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineageServiceServer).FindAllInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.LineageService/FindAllInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineageServiceServer).FindAllInputs(ctx, req.(*FindAllInputs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LineageService_FindAllOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllOutputs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineageServiceServer).FindAllOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.LineageService/FindAllOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineageServiceServer).FindAllOutputs(ctx, req.(*FindAllOutputs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LineageService_FindAllInputsOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllInputsOutputs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineageServiceServer).FindAllInputsOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.LineageService/FindAllInputsOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineageServiceServer).FindAllInputsOutputs(ctx, req.(*FindAllInputsOutputs))
	}
	return interceptor(ctx, in, info, handler)
}

var _LineageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.LineageService",
	HandlerType: (*LineageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addLineage",
			Handler:    _LineageService_AddLineage_Handler,
		},
		{
			MethodName: "deleteLineage",
			Handler:    _LineageService_DeleteLineage_Handler,
		},
		{
			MethodName: "findAllInputs",
			Handler:    _LineageService_FindAllInputs_Handler,
		},
		{
			MethodName: "findAllOutputs",
			Handler:    _LineageService_FindAllOutputs_Handler,
		},
		{
			MethodName: "findAllInputsOutputs",
			Handler:    _LineageService_FindAllInputsOutputs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/Lineage.proto",
}
