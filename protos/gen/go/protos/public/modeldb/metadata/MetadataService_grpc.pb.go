// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: modeldb/metadata/MetadataService.proto

package metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsRequest_Response, error)
	GetLabelIds(ctx context.Context, in *GetLabelIdsRequest, opts ...grpc.CallOption) (*GetLabelIdsRequest_Response, error)
	AddLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsRequest_Response, error)
	UpdateLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsRequest_Response, error)
	DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, opts ...grpc.CallOption) (*DeleteLabelsRequest_Response, error)
	GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*GetPropertyRequest_Response, error)
	AddProperty(ctx context.Context, in *AddPropertyRequest, opts ...grpc.CallOption) (*AddPropertyRequest_Response, error)
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyRequest_Response, error)
	AddKeyValueProperties(ctx context.Context, in *AddKeyValuePropertiesRequest, opts ...grpc.CallOption) (*AddKeyValuePropertiesRequest_Response, error)
	GetKeyValueProperties(ctx context.Context, in *GetKeyValuePropertiesRequest, opts ...grpc.CallOption) (*GetKeyValuePropertiesRequest_Response, error)
	DeleteKeyValueProperties(ctx context.Context, in *DeleteKeyValuePropertiesRequest, opts ...grpc.CallOption) (*DeleteKeyValuePropertiesRequest_Response, error)
	GenerateRandomName(ctx context.Context, in *GenerateRandomNameRequest, opts ...grpc.CallOption) (*GenerateRandomNameRequest_Response, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsRequest_Response, error) {
	out := new(GetLabelsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/GetLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetLabelIds(ctx context.Context, in *GetLabelIdsRequest, opts ...grpc.CallOption) (*GetLabelIdsRequest_Response, error) {
	out := new(GetLabelIdsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/GetLabelIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) AddLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsRequest_Response, error) {
	out := new(AddLabelsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/AddLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsRequest_Response, error) {
	out := new(AddLabelsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/UpdateLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, opts ...grpc.CallOption) (*DeleteLabelsRequest_Response, error) {
	out := new(DeleteLabelsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/DeleteLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*GetPropertyRequest_Response, error) {
	out := new(GetPropertyRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/GetProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) AddProperty(ctx context.Context, in *AddPropertyRequest, opts ...grpc.CallOption) (*AddPropertyRequest_Response, error) {
	out := new(AddPropertyRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/AddProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyRequest_Response, error) {
	out := new(DeletePropertyRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/DeleteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) AddKeyValueProperties(ctx context.Context, in *AddKeyValuePropertiesRequest, opts ...grpc.CallOption) (*AddKeyValuePropertiesRequest_Response, error) {
	out := new(AddKeyValuePropertiesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/AddKeyValueProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetKeyValueProperties(ctx context.Context, in *GetKeyValuePropertiesRequest, opts ...grpc.CallOption) (*GetKeyValuePropertiesRequest_Response, error) {
	out := new(GetKeyValuePropertiesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/GetKeyValueProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteKeyValueProperties(ctx context.Context, in *DeleteKeyValuePropertiesRequest, opts ...grpc.CallOption) (*DeleteKeyValuePropertiesRequest_Response, error) {
	out := new(DeleteKeyValuePropertiesRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/DeleteKeyValueProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GenerateRandomName(ctx context.Context, in *GenerateRandomNameRequest, opts ...grpc.CallOption) (*GenerateRandomNameRequest_Response, error) {
	out := new(GenerateRandomNameRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.metadata.MetadataService/GenerateRandomName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility
type MetadataServiceServer interface {
	GetLabels(context.Context, *GetLabelsRequest) (*GetLabelsRequest_Response, error)
	GetLabelIds(context.Context, *GetLabelIdsRequest) (*GetLabelIdsRequest_Response, error)
	AddLabels(context.Context, *AddLabelsRequest) (*AddLabelsRequest_Response, error)
	UpdateLabels(context.Context, *AddLabelsRequest) (*AddLabelsRequest_Response, error)
	DeleteLabels(context.Context, *DeleteLabelsRequest) (*DeleteLabelsRequest_Response, error)
	GetProperty(context.Context, *GetPropertyRequest) (*GetPropertyRequest_Response, error)
	AddProperty(context.Context, *AddPropertyRequest) (*AddPropertyRequest_Response, error)
	DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyRequest_Response, error)
	AddKeyValueProperties(context.Context, *AddKeyValuePropertiesRequest) (*AddKeyValuePropertiesRequest_Response, error)
	GetKeyValueProperties(context.Context, *GetKeyValuePropertiesRequest) (*GetKeyValuePropertiesRequest_Response, error)
	DeleteKeyValueProperties(context.Context, *DeleteKeyValuePropertiesRequest) (*DeleteKeyValuePropertiesRequest_Response, error)
	GenerateRandomName(context.Context, *GenerateRandomNameRequest) (*GenerateRandomNameRequest_Response, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (UnimplementedMetadataServiceServer) GetLabels(context.Context, *GetLabelsRequest) (*GetLabelsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (UnimplementedMetadataServiceServer) GetLabelIds(context.Context, *GetLabelIdsRequest) (*GetLabelIdsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelIds not implemented")
}
func (UnimplementedMetadataServiceServer) AddLabels(context.Context, *AddLabelsRequest) (*AddLabelsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabels not implemented")
}
func (UnimplementedMetadataServiceServer) UpdateLabels(context.Context, *AddLabelsRequest) (*AddLabelsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabels not implemented")
}
func (UnimplementedMetadataServiceServer) DeleteLabels(context.Context, *DeleteLabelsRequest) (*DeleteLabelsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabels not implemented")
}
func (UnimplementedMetadataServiceServer) GetProperty(context.Context, *GetPropertyRequest) (*GetPropertyRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperty not implemented")
}
func (UnimplementedMetadataServiceServer) AddProperty(context.Context, *AddPropertyRequest) (*AddPropertyRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProperty not implemented")
}
func (UnimplementedMetadataServiceServer) DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
}
func (UnimplementedMetadataServiceServer) AddKeyValueProperties(context.Context, *AddKeyValuePropertiesRequest) (*AddKeyValuePropertiesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyValueProperties not implemented")
}
func (UnimplementedMetadataServiceServer) GetKeyValueProperties(context.Context, *GetKeyValuePropertiesRequest) (*GetKeyValuePropertiesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyValueProperties not implemented")
}
func (UnimplementedMetadataServiceServer) DeleteKeyValueProperties(context.Context, *DeleteKeyValuePropertiesRequest) (*DeleteKeyValuePropertiesRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyValueProperties not implemented")
}
func (UnimplementedMetadataServiceServer) GenerateRandomName(context.Context, *GenerateRandomNameRequest) (*GenerateRandomNameRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRandomName not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/GetLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetLabels(ctx, req.(*GetLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetLabelIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetLabelIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/GetLabelIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetLabelIds(ctx, req.(*GetLabelIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_AddLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).AddLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/AddLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).AddLabels(ctx, req.(*AddLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/UpdateLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateLabels(ctx, req.(*AddLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/DeleteLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteLabels(ctx, req.(*DeleteLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/GetProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetProperty(ctx, req.(*GetPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_AddProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).AddProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/AddProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).AddProperty(ctx, req.(*AddPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/DeleteProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteProperty(ctx, req.(*DeletePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_AddKeyValueProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyValuePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).AddKeyValueProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/AddKeyValueProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).AddKeyValueProperties(ctx, req.(*AddKeyValuePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetKeyValueProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyValuePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetKeyValueProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/GetKeyValueProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetKeyValueProperties(ctx, req.(*GetKeyValuePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteKeyValueProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyValuePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteKeyValueProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/DeleteKeyValueProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteKeyValueProperties(ctx, req.(*DeleteKeyValuePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GenerateRandomName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRandomNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GenerateRandomName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.metadata.MetadataService/GenerateRandomName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GenerateRandomName(ctx, req.(*GenerateRandomNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.metadata.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLabels",
			Handler:    _MetadataService_GetLabels_Handler,
		},
		{
			MethodName: "GetLabelIds",
			Handler:    _MetadataService_GetLabelIds_Handler,
		},
		{
			MethodName: "AddLabels",
			Handler:    _MetadataService_AddLabels_Handler,
		},
		{
			MethodName: "UpdateLabels",
			Handler:    _MetadataService_UpdateLabels_Handler,
		},
		{
			MethodName: "DeleteLabels",
			Handler:    _MetadataService_DeleteLabels_Handler,
		},
		{
			MethodName: "GetProperty",
			Handler:    _MetadataService_GetProperty_Handler,
		},
		{
			MethodName: "AddProperty",
			Handler:    _MetadataService_AddProperty_Handler,
		},
		{
			MethodName: "DeleteProperty",
			Handler:    _MetadataService_DeleteProperty_Handler,
		},
		{
			MethodName: "AddKeyValueProperties",
			Handler:    _MetadataService_AddKeyValueProperties_Handler,
		},
		{
			MethodName: "GetKeyValueProperties",
			Handler:    _MetadataService_GetKeyValueProperties_Handler,
		},
		{
			MethodName: "DeleteKeyValueProperties",
			Handler:    _MetadataService_DeleteKeyValueProperties_Handler,
		},
		{
			MethodName: "GenerateRandomName",
			Handler:    _MetadataService_GenerateRandomName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/metadata/MetadataService.proto",
}
