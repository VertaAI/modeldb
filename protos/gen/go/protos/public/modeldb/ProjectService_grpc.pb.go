// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: modeldb/ProjectService.proto

package modeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	CreateProject(ctx context.Context, in *CreateProject, opts ...grpc.CallOption) (*CreateProject_Response, error)
	GetProjects(ctx context.Context, in *GetProjects, opts ...grpc.CallOption) (*GetProjects_Response, error)
	GetProjectById(ctx context.Context, in *GetProjectById, opts ...grpc.CallOption) (*GetProjectById_Response, error)
	GetProjectByName(ctx context.Context, in *GetProjectByName, opts ...grpc.CallOption) (*GetProjectByName_Response, error)
	DeleteProject(ctx context.Context, in *DeleteProject, opts ...grpc.CallOption) (*DeleteProject_Response, error)
	UpdateProjectName(ctx context.Context, in *UpdateProjectName, opts ...grpc.CallOption) (*UpdateProjectName_Response, error)
	UpdateProjectDescription(ctx context.Context, in *UpdateProjectDescription, opts ...grpc.CallOption) (*UpdateProjectDescription_Response, error)
	AddProjectTags(ctx context.Context, in *AddProjectTags, opts ...grpc.CallOption) (*AddProjectTags_Response, error)
	GetProjectTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error)
	DeleteProjectTags(ctx context.Context, in *DeleteProjectTags, opts ...grpc.CallOption) (*DeleteProjectTags_Response, error)
	AddProjectTag(ctx context.Context, in *AddProjectTag, opts ...grpc.CallOption) (*AddProjectTag_Response, error)
	DeleteProjectTag(ctx context.Context, in *DeleteProjectTag, opts ...grpc.CallOption) (*DeleteProjectTag_Response, error)
	UpdateProjectAttributes(ctx context.Context, in *UpdateProjectAttributes, opts ...grpc.CallOption) (*UpdateProjectAttributes_Response, error)
	GetProjectAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error)
	AddProjectAttributes(ctx context.Context, in *AddProjectAttributes, opts ...grpc.CallOption) (*AddProjectAttributes_Response, error)
	DeleteProjectAttributes(ctx context.Context, in *DeleteProjectAttributes, opts ...grpc.CallOption) (*DeleteProjectAttributes_Response, error)
	// code version
	LogProjectCodeVersion(ctx context.Context, in *LogProjectCodeVersion, opts ...grpc.CallOption) (*LogProjectCodeVersion_Response, error)
	GetProjectCodeVersion(ctx context.Context, in *GetProjectCodeVersion, opts ...grpc.CallOption) (*GetProjectCodeVersion_Response, error)
	VerifyConnection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VerifyConnectionResponse, error)
	DeepCopyProject(ctx context.Context, in *DeepCopyProject, opts ...grpc.CallOption) (*DeepCopyProject_Response, error)
	GetSummary(ctx context.Context, in *GetSummary, opts ...grpc.CallOption) (*GetSummary_Response, error)
	SetProjectReadme(ctx context.Context, in *SetProjectReadme, opts ...grpc.CallOption) (*SetProjectReadme_Response, error)
	GetProjectReadme(ctx context.Context, in *GetProjectReadme, opts ...grpc.CallOption) (*GetProjectReadme_Response, error)
	SetProjectShortName(ctx context.Context, in *SetProjectShortName, opts ...grpc.CallOption) (*SetProjectShortName_Response, error)
	GetProjectShortName(ctx context.Context, in *GetProjectShortName, opts ...grpc.CallOption) (*GetProjectShortName_Response, error)
	GetProjectDatasetCount(ctx context.Context, in *GetProjectDatasetCount, opts ...grpc.CallOption) (*GetProjectDatasetCount_Response, error)
	// artifacts
	GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error)
	// queries
	FindProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*FindProjects_Response, error)
	// artifacts
	LogArtifacts(ctx context.Context, in *LogProjectArtifacts, opts ...grpc.CallOption) (*LogProjectArtifacts_Response, error)
	GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error)
	DeleteArtifact(ctx context.Context, in *DeleteProjectArtifact, opts ...grpc.CallOption) (*DeleteProjectArtifact_Response, error)
	DeleteProjects(ctx context.Context, in *DeleteProjects, opts ...grpc.CallOption) (*DeleteProjects_Response, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProject, opts ...grpc.CallOption) (*CreateProject_Response, error) {
	out := new(CreateProject_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/createProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjects(ctx context.Context, in *GetProjects, opts ...grpc.CallOption) (*GetProjects_Response, error) {
	out := new(GetProjects_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectById(ctx context.Context, in *GetProjectById, opts ...grpc.CallOption) (*GetProjectById_Response, error) {
	out := new(GetProjectById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectByName(ctx context.Context, in *GetProjectByName, opts ...grpc.CallOption) (*GetProjectByName_Response, error) {
	out := new(GetProjectByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteProject, opts ...grpc.CallOption) (*DeleteProject_Response, error) {
	out := new(DeleteProject_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/deleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectName(ctx context.Context, in *UpdateProjectName, opts ...grpc.CallOption) (*UpdateProjectName_Response, error) {
	out := new(UpdateProjectName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/updateProjectName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectDescription(ctx context.Context, in *UpdateProjectDescription, opts ...grpc.CallOption) (*UpdateProjectDescription_Response, error) {
	out := new(UpdateProjectDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/updateProjectDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddProjectTags(ctx context.Context, in *AddProjectTags, opts ...grpc.CallOption) (*AddProjectTags_Response, error) {
	out := new(AddProjectTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/addProjectTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error) {
	out := new(GetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProjectTags(ctx context.Context, in *DeleteProjectTags, opts ...grpc.CallOption) (*DeleteProjectTags_Response, error) {
	out := new(DeleteProjectTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/deleteProjectTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddProjectTag(ctx context.Context, in *AddProjectTag, opts ...grpc.CallOption) (*AddProjectTag_Response, error) {
	out := new(AddProjectTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/addProjectTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProjectTag(ctx context.Context, in *DeleteProjectTag, opts ...grpc.CallOption) (*DeleteProjectTag_Response, error) {
	out := new(DeleteProjectTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/deleteProjectTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectAttributes(ctx context.Context, in *UpdateProjectAttributes, opts ...grpc.CallOption) (*UpdateProjectAttributes_Response, error) {
	out := new(UpdateProjectAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/updateProjectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error) {
	out := new(GetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddProjectAttributes(ctx context.Context, in *AddProjectAttributes, opts ...grpc.CallOption) (*AddProjectAttributes_Response, error) {
	out := new(AddProjectAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/addProjectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProjectAttributes(ctx context.Context, in *DeleteProjectAttributes, opts ...grpc.CallOption) (*DeleteProjectAttributes_Response, error) {
	out := new(DeleteProjectAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/deleteProjectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) LogProjectCodeVersion(ctx context.Context, in *LogProjectCodeVersion, opts ...grpc.CallOption) (*LogProjectCodeVersion_Response, error) {
	out := new(LogProjectCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/logProjectCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectCodeVersion(ctx context.Context, in *GetProjectCodeVersion, opts ...grpc.CallOption) (*GetProjectCodeVersion_Response, error) {
	out := new(GetProjectCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) VerifyConnection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VerifyConnectionResponse, error) {
	out := new(VerifyConnectionResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/verifyConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeepCopyProject(ctx context.Context, in *DeepCopyProject, opts ...grpc.CallOption) (*DeepCopyProject_Response, error) {
	out := new(DeepCopyProject_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/deepCopyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetSummary(ctx context.Context, in *GetSummary, opts ...grpc.CallOption) (*GetSummary_Response, error) {
	out := new(GetSummary_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SetProjectReadme(ctx context.Context, in *SetProjectReadme, opts ...grpc.CallOption) (*SetProjectReadme_Response, error) {
	out := new(SetProjectReadme_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/setProjectReadme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectReadme(ctx context.Context, in *GetProjectReadme, opts ...grpc.CallOption) (*GetProjectReadme_Response, error) {
	out := new(GetProjectReadme_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectReadme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SetProjectShortName(ctx context.Context, in *SetProjectShortName, opts ...grpc.CallOption) (*SetProjectShortName_Response, error) {
	out := new(SetProjectShortName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/setProjectShortName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectShortName(ctx context.Context, in *GetProjectShortName, opts ...grpc.CallOption) (*GetProjectShortName_Response, error) {
	out := new(GetProjectShortName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectShortName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectDatasetCount(ctx context.Context, in *GetProjectDatasetCount, opts ...grpc.CallOption) (*GetProjectDatasetCount_Response, error) {
	out := new(GetProjectDatasetCount_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getProjectDatasetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error) {
	out := new(GetUrlForArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getUrlForArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*FindProjects_Response, error) {
	out := new(FindProjects_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/findProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) LogArtifacts(ctx context.Context, in *LogProjectArtifacts, opts ...grpc.CallOption) (*LogProjectArtifacts_Response, error) {
	out := new(LogProjectArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/logArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error) {
	out := new(GetArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/getArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteArtifact(ctx context.Context, in *DeleteProjectArtifact, opts ...grpc.CallOption) (*DeleteProjectArtifact_Response, error) {
	out := new(DeleteProjectArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/deleteArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProjects(ctx context.Context, in *DeleteProjects, opts ...grpc.CallOption) (*DeleteProjects_Response, error) {
	out := new(DeleteProjects_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ProjectService/deleteProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	CreateProject(context.Context, *CreateProject) (*CreateProject_Response, error)
	GetProjects(context.Context, *GetProjects) (*GetProjects_Response, error)
	GetProjectById(context.Context, *GetProjectById) (*GetProjectById_Response, error)
	GetProjectByName(context.Context, *GetProjectByName) (*GetProjectByName_Response, error)
	DeleteProject(context.Context, *DeleteProject) (*DeleteProject_Response, error)
	UpdateProjectName(context.Context, *UpdateProjectName) (*UpdateProjectName_Response, error)
	UpdateProjectDescription(context.Context, *UpdateProjectDescription) (*UpdateProjectDescription_Response, error)
	AddProjectTags(context.Context, *AddProjectTags) (*AddProjectTags_Response, error)
	GetProjectTags(context.Context, *GetTags) (*GetTags_Response, error)
	DeleteProjectTags(context.Context, *DeleteProjectTags) (*DeleteProjectTags_Response, error)
	AddProjectTag(context.Context, *AddProjectTag) (*AddProjectTag_Response, error)
	DeleteProjectTag(context.Context, *DeleteProjectTag) (*DeleteProjectTag_Response, error)
	UpdateProjectAttributes(context.Context, *UpdateProjectAttributes) (*UpdateProjectAttributes_Response, error)
	GetProjectAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error)
	AddProjectAttributes(context.Context, *AddProjectAttributes) (*AddProjectAttributes_Response, error)
	DeleteProjectAttributes(context.Context, *DeleteProjectAttributes) (*DeleteProjectAttributes_Response, error)
	// code version
	LogProjectCodeVersion(context.Context, *LogProjectCodeVersion) (*LogProjectCodeVersion_Response, error)
	GetProjectCodeVersion(context.Context, *GetProjectCodeVersion) (*GetProjectCodeVersion_Response, error)
	VerifyConnection(context.Context, *Empty) (*VerifyConnectionResponse, error)
	DeepCopyProject(context.Context, *DeepCopyProject) (*DeepCopyProject_Response, error)
	GetSummary(context.Context, *GetSummary) (*GetSummary_Response, error)
	SetProjectReadme(context.Context, *SetProjectReadme) (*SetProjectReadme_Response, error)
	GetProjectReadme(context.Context, *GetProjectReadme) (*GetProjectReadme_Response, error)
	SetProjectShortName(context.Context, *SetProjectShortName) (*SetProjectShortName_Response, error)
	GetProjectShortName(context.Context, *GetProjectShortName) (*GetProjectShortName_Response, error)
	GetProjectDatasetCount(context.Context, *GetProjectDatasetCount) (*GetProjectDatasetCount_Response, error)
	// artifacts
	GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error)
	// queries
	FindProjects(context.Context, *FindProjects) (*FindProjects_Response, error)
	// artifacts
	LogArtifacts(context.Context, *LogProjectArtifacts) (*LogProjectArtifacts_Response, error)
	GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error)
	DeleteArtifact(context.Context, *DeleteProjectArtifact) (*DeleteProjectArtifact_Response, error)
	DeleteProjects(context.Context, *DeleteProjects) (*DeleteProjects_Response, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProject) (*CreateProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) GetProjects(context.Context, *GetProjects) (*GetProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectById(context.Context, *GetProjectById) (*GetProjectById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectById not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectByName(context.Context, *GetProjectByName) (*GetProjectByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByName not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteProject) (*DeleteProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectName(context.Context, *UpdateProjectName) (*UpdateProjectName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectName not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectDescription(context.Context, *UpdateProjectDescription) (*UpdateProjectDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectDescription not implemented")
}
func (UnimplementedProjectServiceServer) AddProjectTags(context.Context, *AddProjectTags) (*AddProjectTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectTags not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectTags(context.Context, *GetTags) (*GetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTags not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProjectTags(context.Context, *DeleteProjectTags) (*DeleteProjectTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectTags not implemented")
}
func (UnimplementedProjectServiceServer) AddProjectTag(context.Context, *AddProjectTag) (*AddProjectTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectTag not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProjectTag(context.Context, *DeleteProjectTag) (*DeleteProjectTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectTag not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectAttributes(context.Context, *UpdateProjectAttributes) (*UpdateProjectAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectAttributes not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAttributes not implemented")
}
func (UnimplementedProjectServiceServer) AddProjectAttributes(context.Context, *AddProjectAttributes) (*AddProjectAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectAttributes not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProjectAttributes(context.Context, *DeleteProjectAttributes) (*DeleteProjectAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectAttributes not implemented")
}
func (UnimplementedProjectServiceServer) LogProjectCodeVersion(context.Context, *LogProjectCodeVersion) (*LogProjectCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogProjectCodeVersion not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectCodeVersion(context.Context, *GetProjectCodeVersion) (*GetProjectCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectCodeVersion not implemented")
}
func (UnimplementedProjectServiceServer) VerifyConnection(context.Context, *Empty) (*VerifyConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyConnection not implemented")
}
func (UnimplementedProjectServiceServer) DeepCopyProject(context.Context, *DeepCopyProject) (*DeepCopyProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeepCopyProject not implemented")
}
func (UnimplementedProjectServiceServer) GetSummary(context.Context, *GetSummary) (*GetSummary_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedProjectServiceServer) SetProjectReadme(context.Context, *SetProjectReadme) (*SetProjectReadme_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProjectReadme not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectReadme(context.Context, *GetProjectReadme) (*GetProjectReadme_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectReadme not implemented")
}
func (UnimplementedProjectServiceServer) SetProjectShortName(context.Context, *SetProjectShortName) (*SetProjectShortName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProjectShortName not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectShortName(context.Context, *GetProjectShortName) (*GetProjectShortName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectShortName not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectDatasetCount(context.Context, *GetProjectDatasetCount) (*GetProjectDatasetCount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDatasetCount not implemented")
}
func (UnimplementedProjectServiceServer) GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForArtifact not implemented")
}
func (UnimplementedProjectServiceServer) FindProjects(context.Context, *FindProjects) (*FindProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjects not implemented")
}
func (UnimplementedProjectServiceServer) LogArtifacts(context.Context, *LogProjectArtifacts) (*LogProjectArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogArtifacts not implemented")
}
func (UnimplementedProjectServiceServer) GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (UnimplementedProjectServiceServer) DeleteArtifact(context.Context, *DeleteProjectArtifact) (*DeleteProjectArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProjects(context.Context, *DeleteProjects) (*DeleteProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjects not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/createProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjects(ctx, req.(*GetProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectById(ctx, req.(*GetProjectById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectByName(ctx, req.(*GetProjectByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/deleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*DeleteProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/updateProjectName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectName(ctx, req.(*UpdateProjectName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/updateProjectDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectDescription(ctx, req.(*UpdateProjectDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddProjectTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddProjectTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/addProjectTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddProjectTags(ctx, req.(*AddProjectTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectTags(ctx, req.(*GetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProjectTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProjectTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/deleteProjectTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProjectTags(ctx, req.(*DeleteProjectTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddProjectTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddProjectTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/addProjectTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddProjectTag(ctx, req.(*AddProjectTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProjectTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProjectTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/deleteProjectTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProjectTag(ctx, req.(*DeleteProjectTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/updateProjectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectAttributes(ctx, req.(*UpdateProjectAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectAttributes(ctx, req.(*GetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddProjectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddProjectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/addProjectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddProjectAttributes(ctx, req.(*AddProjectAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProjectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProjectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/deleteProjectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProjectAttributes(ctx, req.(*DeleteProjectAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_LogProjectCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogProjectCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).LogProjectCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/logProjectCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).LogProjectCodeVersion(ctx, req.(*LogProjectCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectCodeVersion(ctx, req.(*GetProjectCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_VerifyConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).VerifyConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/verifyConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).VerifyConnection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeepCopyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepCopyProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeepCopyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/deepCopyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeepCopyProject(ctx, req.(*DeepCopyProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetSummary(ctx, req.(*GetSummary))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SetProjectReadme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProjectReadme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SetProjectReadme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/setProjectReadme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SetProjectReadme(ctx, req.(*SetProjectReadme))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectReadme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectReadme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectReadme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectReadme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectReadme(ctx, req.(*GetProjectReadme))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SetProjectShortName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProjectShortName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SetProjectShortName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/setProjectShortName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SetProjectShortName(ctx, req.(*SetProjectShortName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectShortName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectShortName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectShortName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectShortName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectShortName(ctx, req.(*GetProjectShortName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectDatasetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDatasetCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectDatasetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getProjectDatasetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectDatasetCount(ctx, req.(*GetProjectDatasetCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetUrlForArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetUrlForArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getUrlForArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetUrlForArtifact(ctx, req.(*GetUrlForArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/findProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjects(ctx, req.(*FindProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_LogArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogProjectArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).LogArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/logArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).LogArtifacts(ctx, req.(*LogProjectArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/getArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetArtifacts(ctx, req.(*GetArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/deleteArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteArtifact(ctx, req.(*DeleteProjectArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ProjectService/deleteProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProjects(ctx, req.(*DeleteProjects))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "getProjects",
			Handler:    _ProjectService_GetProjects_Handler,
		},
		{
			MethodName: "getProjectById",
			Handler:    _ProjectService_GetProjectById_Handler,
		},
		{
			MethodName: "getProjectByName",
			Handler:    _ProjectService_GetProjectByName_Handler,
		},
		{
			MethodName: "deleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
		{
			MethodName: "updateProjectName",
			Handler:    _ProjectService_UpdateProjectName_Handler,
		},
		{
			MethodName: "updateProjectDescription",
			Handler:    _ProjectService_UpdateProjectDescription_Handler,
		},
		{
			MethodName: "addProjectTags",
			Handler:    _ProjectService_AddProjectTags_Handler,
		},
		{
			MethodName: "getProjectTags",
			Handler:    _ProjectService_GetProjectTags_Handler,
		},
		{
			MethodName: "deleteProjectTags",
			Handler:    _ProjectService_DeleteProjectTags_Handler,
		},
		{
			MethodName: "addProjectTag",
			Handler:    _ProjectService_AddProjectTag_Handler,
		},
		{
			MethodName: "deleteProjectTag",
			Handler:    _ProjectService_DeleteProjectTag_Handler,
		},
		{
			MethodName: "updateProjectAttributes",
			Handler:    _ProjectService_UpdateProjectAttributes_Handler,
		},
		{
			MethodName: "getProjectAttributes",
			Handler:    _ProjectService_GetProjectAttributes_Handler,
		},
		{
			MethodName: "addProjectAttributes",
			Handler:    _ProjectService_AddProjectAttributes_Handler,
		},
		{
			MethodName: "deleteProjectAttributes",
			Handler:    _ProjectService_DeleteProjectAttributes_Handler,
		},
		{
			MethodName: "logProjectCodeVersion",
			Handler:    _ProjectService_LogProjectCodeVersion_Handler,
		},
		{
			MethodName: "getProjectCodeVersion",
			Handler:    _ProjectService_GetProjectCodeVersion_Handler,
		},
		{
			MethodName: "verifyConnection",
			Handler:    _ProjectService_VerifyConnection_Handler,
		},
		{
			MethodName: "deepCopyProject",
			Handler:    _ProjectService_DeepCopyProject_Handler,
		},
		{
			MethodName: "getSummary",
			Handler:    _ProjectService_GetSummary_Handler,
		},
		{
			MethodName: "setProjectReadme",
			Handler:    _ProjectService_SetProjectReadme_Handler,
		},
		{
			MethodName: "getProjectReadme",
			Handler:    _ProjectService_GetProjectReadme_Handler,
		},
		{
			MethodName: "setProjectShortName",
			Handler:    _ProjectService_SetProjectShortName_Handler,
		},
		{
			MethodName: "getProjectShortName",
			Handler:    _ProjectService_GetProjectShortName_Handler,
		},
		{
			MethodName: "getProjectDatasetCount",
			Handler:    _ProjectService_GetProjectDatasetCount_Handler,
		},
		{
			MethodName: "getUrlForArtifact",
			Handler:    _ProjectService_GetUrlForArtifact_Handler,
		},
		{
			MethodName: "findProjects",
			Handler:    _ProjectService_FindProjects_Handler,
		},
		{
			MethodName: "logArtifacts",
			Handler:    _ProjectService_LogArtifacts_Handler,
		},
		{
			MethodName: "getArtifacts",
			Handler:    _ProjectService_GetArtifacts_Handler,
		},
		{
			MethodName: "deleteArtifact",
			Handler:    _ProjectService_DeleteArtifact_Handler,
		},
		{
			MethodName: "deleteProjects",
			Handler:    _ProjectService_DeleteProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/ProjectService.proto",
}
