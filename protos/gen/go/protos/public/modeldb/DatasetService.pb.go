// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/DatasetService.proto

package modeldb

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DatasetTypeEnum_DatasetType int32

const (
	DatasetTypeEnum_RAW   DatasetTypeEnum_DatasetType = 0 // default
	DatasetTypeEnum_PATH  DatasetTypeEnum_DatasetType = 1
	DatasetTypeEnum_QUERY DatasetTypeEnum_DatasetType = 2
)

// Enum value maps for DatasetTypeEnum_DatasetType.
var (
	DatasetTypeEnum_DatasetType_name = map[int32]string{
		0: "RAW",
		1: "PATH",
		2: "QUERY",
	}
	DatasetTypeEnum_DatasetType_value = map[string]int32{
		"RAW":   0,
		"PATH":  1,
		"QUERY": 2,
	}
)

func (x DatasetTypeEnum_DatasetType) Enum() *DatasetTypeEnum_DatasetType {
	p := new(DatasetTypeEnum_DatasetType)
	*p = x
	return p
}

func (x DatasetTypeEnum_DatasetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetTypeEnum_DatasetType) Descriptor() protoreflect.EnumDescriptor {
	return file_modeldb_DatasetService_proto_enumTypes[0].Descriptor()
}

func (DatasetTypeEnum_DatasetType) Type() protoreflect.EnumType {
	return &file_modeldb_DatasetService_proto_enumTypes[0]
}

func (x DatasetTypeEnum_DatasetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetTypeEnum_DatasetType.Descriptor instead.
func (DatasetTypeEnum_DatasetType) EnumDescriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{1, 0}
}

type DatasetVisibilityEnum_DatasetVisibility int32

const (
	DatasetVisibilityEnum_PRIVATE           DatasetVisibilityEnum_DatasetVisibility = 0 // default
	DatasetVisibilityEnum_PUBLIC            DatasetVisibilityEnum_DatasetVisibility = 1
	DatasetVisibilityEnum_ORG_SCOPED_PUBLIC DatasetVisibilityEnum_DatasetVisibility = 2
)

// Enum value maps for DatasetVisibilityEnum_DatasetVisibility.
var (
	DatasetVisibilityEnum_DatasetVisibility_name = map[int32]string{
		0: "PRIVATE",
		1: "PUBLIC",
		2: "ORG_SCOPED_PUBLIC",
	}
	DatasetVisibilityEnum_DatasetVisibility_value = map[string]int32{
		"PRIVATE":           0,
		"PUBLIC":            1,
		"ORG_SCOPED_PUBLIC": 2,
	}
)

func (x DatasetVisibilityEnum_DatasetVisibility) Enum() *DatasetVisibilityEnum_DatasetVisibility {
	p := new(DatasetVisibilityEnum_DatasetVisibility)
	*p = x
	return p
}

func (x DatasetVisibilityEnum_DatasetVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetVisibilityEnum_DatasetVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_modeldb_DatasetService_proto_enumTypes[1].Descriptor()
}

func (DatasetVisibilityEnum_DatasetVisibility) Type() protoreflect.EnumType {
	return &file_modeldb_DatasetService_proto_enumTypes[1]
}

func (x DatasetVisibilityEnum_DatasetVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetVisibilityEnum_DatasetVisibility.Descriptor instead.
func (DatasetVisibilityEnum_DatasetVisibility) EnumDescriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{2, 0}
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //For backend reference
	Name              string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner             string                                  `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Description       string                                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Tags              []string                                `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	DatasetVisibility DatasetVisibilityEnum_DatasetVisibility `protobuf:"varint,6,opt,name=dataset_visibility,json=datasetVisibility,proto3,enum=ai.verta.modeldb.DatasetVisibilityEnum_DatasetVisibility" json:"dataset_visibility,omitempty"`
	DatasetType       DatasetTypeEnum_DatasetType             `protobuf:"varint,7,opt,name=dataset_type,json=datasetType,proto3,enum=ai.verta.modeldb.DatasetTypeEnum_DatasetType" json:"dataset_type,omitempty"`
	Attributes        []*common.KeyValue                      `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty"`
	TimeCreated       uint64                                  `protobuf:"varint,9,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeUpdated       uint64                                  `protobuf:"varint,10,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	WorkspaceId       string                                  `protobuf:"bytes,11,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	WorkspaceType     common.WorkspaceTypeEnum_WorkspaceType  `protobuf:"varint,12,opt,name=workspace_type,json=workspaceType,proto3,enum=ai.verta.common.WorkspaceTypeEnum_WorkspaceType" json:"workspace_type,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{0}
}

func (x *Dataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataset) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Dataset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Dataset) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataset) GetDatasetVisibility() DatasetVisibilityEnum_DatasetVisibility {
	if x != nil {
		return x.DatasetVisibility
	}
	return DatasetVisibilityEnum_PRIVATE
}

func (x *Dataset) GetDatasetType() DatasetTypeEnum_DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetTypeEnum_RAW
}

func (x *Dataset) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Dataset) GetTimeCreated() uint64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *Dataset) GetTimeUpdated() uint64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

func (x *Dataset) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *Dataset) GetWorkspaceType() common.WorkspaceTypeEnum_WorkspaceType {
	if x != nil {
		return x.WorkspaceType
	}
	return common.WorkspaceTypeEnum_UNKNOWN
}

type DatasetTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DatasetTypeEnum) Reset() {
	*x = DatasetTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetTypeEnum) ProtoMessage() {}

func (x *DatasetTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetTypeEnum.ProtoReflect.Descriptor instead.
func (*DatasetTypeEnum) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{1}
}

type DatasetVisibilityEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DatasetVisibilityEnum) Reset() {
	*x = DatasetVisibilityEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetVisibilityEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetVisibilityEnum) ProtoMessage() {}

func (x *DatasetVisibilityEnum) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetVisibilityEnum.ProtoReflect.Descriptor instead.
func (*DatasetVisibilityEnum) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{2}
}

type CreateDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tags              []string                                `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Attributes        []*common.KeyValue                      `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	DatasetVisibility DatasetVisibilityEnum_DatasetVisibility `protobuf:"varint,5,opt,name=dataset_visibility,json=datasetVisibility,proto3,enum=ai.verta.modeldb.DatasetVisibilityEnum_DatasetVisibility" json:"dataset_visibility,omitempty"`
	DatasetType       DatasetTypeEnum_DatasetType             `protobuf:"varint,6,opt,name=dataset_type,json=datasetType,proto3,enum=ai.verta.modeldb.DatasetTypeEnum_DatasetType" json:"dataset_type,omitempty"`
	WorkspaceName     string                                  `protobuf:"bytes,7,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	TimeCreated       uint64                                  `protobuf:"varint,8,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
}

func (x *CreateDataset) Reset() {
	*x = CreateDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataset) ProtoMessage() {}

func (x *CreateDataset) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataset.ProtoReflect.Descriptor instead.
func (*CreateDataset) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDataset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDataset) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateDataset) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateDataset) GetDatasetVisibility() DatasetVisibilityEnum_DatasetVisibility {
	if x != nil {
		return x.DatasetVisibility
	}
	return DatasetVisibilityEnum_PRIVATE
}

func (x *CreateDataset) GetDatasetType() DatasetTypeEnum_DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetTypeEnum_RAW
}

func (x *CreateDataset) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *CreateDataset) GetTimeCreated() uint64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

//getAllDataset
type GetAllDatasets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//For pagination
	PageNumber    int32  `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit     int32  `protobuf:"varint,2,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending     bool   `protobuf:"varint,3,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey       string `protobuf:"bytes,4,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	WorkspaceName string `protobuf:"bytes,7,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *GetAllDatasets) Reset() {
	*x = GetAllDatasets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDatasets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDatasets) ProtoMessage() {}

func (x *GetAllDatasets) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDatasets.ProtoReflect.Descriptor instead.
func (*GetAllDatasets) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllDatasets) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetAllDatasets) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *GetAllDatasets) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetAllDatasets) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *GetAllDatasets) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

//getDataset
type GetDatasetById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDatasetById) Reset() {
	*x = GetDatasetById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetById) ProtoMessage() {}

func (x *GetDatasetById) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetById.ProtoReflect.Descriptor instead.
func (*GetDatasetById) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{5}
}

func (x *GetDatasetById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//getDatasetByName
type GetDatasetByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceName string `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *GetDatasetByName) Reset() {
	*x = GetDatasetByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetByName) ProtoMessage() {}

func (x *GetDatasetByName) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetByName.ProtoReflect.Descriptor instead.
func (*GetDatasetByName) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{6}
}

func (x *GetDatasetByName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDatasetByName) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type DeleteDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDataset) Reset() {
	*x = DeleteDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataset) ProtoMessage() {}

func (x *DeleteDataset) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataset.ProtoReflect.Descriptor instead.
func (*DeleteDataset) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDatasets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteDatasets) Reset() {
	*x = DeleteDatasets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasets) ProtoMessage() {}

func (x *DeleteDatasets) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasets.ProtoReflect.Descriptor instead.
func (*DeleteDatasets) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDatasets) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type FindDatasets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetIds    []string                `protobuf:"bytes,1,rep,name=dataset_ids,json=datasetIds,proto3" json:"dataset_ids,omitempty"`
	Predicates    []*common.KeyValueQuery `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"`
	IdsOnly       bool                    `protobuf:"varint,3,opt,name=ids_only,json=idsOnly,proto3" json:"ids_only,omitempty"` // whether to return full experiment runs or ids only
	WorkspaceName string                  `protobuf:"bytes,8,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	//For pagination
	PageNumber int32  `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32  `protobuf:"varint,5,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending  bool   `protobuf:"varint,6,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string `protobuf:"bytes,7,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *FindDatasets) Reset() {
	*x = FindDatasets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDatasets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDatasets) ProtoMessage() {}

func (x *FindDatasets) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDatasets.ProtoReflect.Descriptor instead.
func (*FindDatasets) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{9}
}

func (x *FindDatasets) GetDatasetIds() []string {
	if x != nil {
		return x.DatasetIds
	}
	return nil
}

func (x *FindDatasets) GetPredicates() []*common.KeyValueQuery {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *FindDatasets) GetIdsOnly() bool {
	if x != nil {
		return x.IdsOnly
	}
	return false
}

func (x *FindDatasets) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *FindDatasets) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindDatasets) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *FindDatasets) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *FindDatasets) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type UpdateDatasetName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateDatasetName) Reset() {
	*x = UpdateDatasetName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetName) ProtoMessage() {}

func (x *UpdateDatasetName) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetName.ProtoReflect.Descriptor instead.
func (*UpdateDatasetName) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDatasetName) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDatasetName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateDatasetDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateDatasetDescription) Reset() {
	*x = UpdateDatasetDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetDescription) ProtoMessage() {}

func (x *UpdateDatasetDescription) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetDescription.ProtoReflect.Descriptor instead.
func (*UpdateDatasetDescription) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDatasetDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDatasetDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AddDatasetTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AddDatasetTags) Reset() {
	*x = AddDatasetTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetTags) ProtoMessage() {}

func (x *AddDatasetTags) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetTags.ProtoReflect.Descriptor instead.
func (*AddDatasetTags) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{12}
}

func (x *AddDatasetTags) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddDatasetTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DeleteDatasetTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags      []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	DeleteAll bool     `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteDatasetTags) Reset() {
	*x = DeleteDatasetTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetTags) ProtoMessage() {}

func (x *DeleteDatasetTags) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetTags.ProtoReflect.Descriptor instead.
func (*DeleteDatasetTags) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteDatasetTags) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDatasetTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeleteDatasetTags) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type AddDatasetAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes []*common.KeyValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *AddDatasetAttributes) Reset() {
	*x = AddDatasetAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetAttributes) ProtoMessage() {}

func (x *AddDatasetAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetAttributes.ProtoReflect.Descriptor instead.
func (*AddDatasetAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{14}
}

func (x *AddDatasetAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddDatasetAttributes) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type UpdateDatasetAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attribute *common.KeyValue `protobuf:"bytes,2,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *UpdateDatasetAttributes) Reset() {
	*x = UpdateDatasetAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetAttributes) ProtoMessage() {}

func (x *UpdateDatasetAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetAttributes.ProtoReflect.Descriptor instead.
func (*UpdateDatasetAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateDatasetAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDatasetAttributes) GetAttribute() *common.KeyValue {
	if x != nil {
		return x.Attribute
	}
	return nil
}

type DeleteDatasetAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributeKeys []string `protobuf:"bytes,2,rep,name=attribute_keys,json=attributeKeys,proto3" json:"attribute_keys,omitempty"`
	DeleteAll     bool     `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteDatasetAttributes) Reset() {
	*x = DeleteDatasetAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetAttributes) ProtoMessage() {}

func (x *DeleteDatasetAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetAttributes.ProtoReflect.Descriptor instead.
func (*DeleteDatasetAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteDatasetAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDatasetAttributes) GetAttributeKeys() []string {
	if x != nil {
		return x.AttributeKeys
	}
	return nil
}

func (x *DeleteDatasetAttributes) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type SetDatasetVisibilty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DatasetVisibility DatasetVisibilityEnum_DatasetVisibility `protobuf:"varint,2,opt,name=dataset_visibility,json=datasetVisibility,proto3,enum=ai.verta.modeldb.DatasetVisibilityEnum_DatasetVisibility" json:"dataset_visibility,omitempty"`
}

func (x *SetDatasetVisibilty) Reset() {
	*x = SetDatasetVisibilty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetVisibilty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetVisibilty) ProtoMessage() {}

func (x *SetDatasetVisibilty) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetVisibilty.ProtoReflect.Descriptor instead.
func (*SetDatasetVisibilty) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{17}
}

func (x *SetDatasetVisibilty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetDatasetVisibilty) GetDatasetVisibility() DatasetVisibilityEnum_DatasetVisibility {
	if x != nil {
		return x.DatasetVisibility
	}
	return DatasetVisibilityEnum_PRIVATE
}

type LastExperimentByDatasetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *LastExperimentByDatasetId) Reset() {
	*x = LastExperimentByDatasetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastExperimentByDatasetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastExperimentByDatasetId) ProtoMessage() {}

func (x *LastExperimentByDatasetId) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastExperimentByDatasetId.ProtoReflect.Descriptor instead.
func (*LastExperimentByDatasetId) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{18}
}

func (x *LastExperimentByDatasetId) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type GetExperimentRunByDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *GetExperimentRunByDataset) Reset() {
	*x = GetExperimentRunByDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentRunByDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentRunByDataset) ProtoMessage() {}

func (x *GetExperimentRunByDataset) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentRunByDataset.ProtoReflect.Descriptor instead.
func (*GetExperimentRunByDataset) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{19}
}

func (x *GetExperimentRunByDataset) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type SetDatasetWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceName string `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *SetDatasetWorkspace) Reset() {
	*x = SetDatasetWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetWorkspace) ProtoMessage() {}

func (x *SetDatasetWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetWorkspace.ProtoReflect.Descriptor instead.
func (*SetDatasetWorkspace) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{20}
}

func (x *SetDatasetWorkspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetDatasetWorkspace) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type CreateDataset_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *CreateDataset_Response) Reset() {
	*x = CreateDataset_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataset_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataset_Response) ProtoMessage() {}

func (x *CreateDataset_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataset_Response.ProtoReflect.Descriptor instead.
func (*CreateDataset_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CreateDataset_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type GetAllDatasets_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasets     []*Dataset `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
	TotalRecords uint64     `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetAllDatasets_Response) Reset() {
	*x = GetAllDatasets_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDatasets_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDatasets_Response) ProtoMessage() {}

func (x *GetAllDatasets_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDatasets_Response.ProtoReflect.Descriptor instead.
func (*GetAllDatasets_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetAllDatasets_Response) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *GetAllDatasets_Response) GetTotalRecords() uint64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetDatasetById_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *GetDatasetById_Response) Reset() {
	*x = GetDatasetById_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetById_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetById_Response) ProtoMessage() {}

func (x *GetDatasetById_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetById_Response.ProtoReflect.Descriptor instead.
func (*GetDatasetById_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetDatasetById_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type GetDatasetByName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetByUser  *Dataset   `protobuf:"bytes,1,opt,name=dataset_by_user,json=datasetByUser,proto3" json:"dataset_by_user,omitempty"`
	SharedDatasets []*Dataset `protobuf:"bytes,2,rep,name=shared_datasets,json=sharedDatasets,proto3" json:"shared_datasets,omitempty"` // because of collaboration, this might be multiple datasets w/same name
}

func (x *GetDatasetByName_Response) Reset() {
	*x = GetDatasetByName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetByName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetByName_Response) ProtoMessage() {}

func (x *GetDatasetByName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetByName_Response.ProtoReflect.Descriptor instead.
func (*GetDatasetByName_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetDatasetByName_Response) GetDatasetByUser() *Dataset {
	if x != nil {
		return x.DatasetByUser
	}
	return nil
}

func (x *GetDatasetByName_Response) GetSharedDatasets() []*Dataset {
	if x != nil {
		return x.SharedDatasets
	}
	return nil
}

type DeleteDataset_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteDataset_Response) Reset() {
	*x = DeleteDataset_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataset_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataset_Response) ProtoMessage() {}

func (x *DeleteDataset_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataset_Response.ProtoReflect.Descriptor instead.
func (*DeleteDataset_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{7, 0}
}

func (x *DeleteDataset_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DeleteDatasets_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteDatasets_Response) Reset() {
	*x = DeleteDatasets_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasets_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasets_Response) ProtoMessage() {}

func (x *DeleteDatasets_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasets_Response.ProtoReflect.Descriptor instead.
func (*DeleteDatasets_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DeleteDatasets_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type FindDatasets_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasets     []*Dataset `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
	TotalRecords int64      `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindDatasets_Response) Reset() {
	*x = FindDatasets_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDatasets_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDatasets_Response) ProtoMessage() {}

func (x *FindDatasets_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDatasets_Response.ProtoReflect.Descriptor instead.
func (*FindDatasets_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{9, 0}
}

func (x *FindDatasets_Response) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *FindDatasets_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type UpdateDatasetName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *UpdateDatasetName_Response) Reset() {
	*x = UpdateDatasetName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetName_Response) ProtoMessage() {}

func (x *UpdateDatasetName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetName_Response.ProtoReflect.Descriptor instead.
func (*UpdateDatasetName_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{10, 0}
}

func (x *UpdateDatasetName_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type UpdateDatasetDescription_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *UpdateDatasetDescription_Response) Reset() {
	*x = UpdateDatasetDescription_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetDescription_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetDescription_Response) ProtoMessage() {}

func (x *UpdateDatasetDescription_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetDescription_Response.ProtoReflect.Descriptor instead.
func (*UpdateDatasetDescription_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{11, 0}
}

func (x *UpdateDatasetDescription_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type AddDatasetTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *AddDatasetTags_Response) Reset() {
	*x = AddDatasetTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetTags_Response) ProtoMessage() {}

func (x *AddDatasetTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetTags_Response.ProtoReflect.Descriptor instead.
func (*AddDatasetTags_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AddDatasetTags_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type DeleteDatasetTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *DeleteDatasetTags_Response) Reset() {
	*x = DeleteDatasetTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetTags_Response) ProtoMessage() {}

func (x *DeleteDatasetTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetTags_Response.ProtoReflect.Descriptor instead.
func (*DeleteDatasetTags_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{13, 0}
}

func (x *DeleteDatasetTags_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type AddDatasetAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *AddDatasetAttributes_Response) Reset() {
	*x = AddDatasetAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetAttributes_Response) ProtoMessage() {}

func (x *AddDatasetAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetAttributes_Response.ProtoReflect.Descriptor instead.
func (*AddDatasetAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{14, 0}
}

func (x *AddDatasetAttributes_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type UpdateDatasetAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *UpdateDatasetAttributes_Response) Reset() {
	*x = UpdateDatasetAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetAttributes_Response) ProtoMessage() {}

func (x *UpdateDatasetAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetAttributes_Response.ProtoReflect.Descriptor instead.
func (*UpdateDatasetAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{15, 0}
}

func (x *UpdateDatasetAttributes_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type DeleteDatasetAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *DeleteDatasetAttributes_Response) Reset() {
	*x = DeleteDatasetAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetAttributes_Response) ProtoMessage() {}

func (x *DeleteDatasetAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetAttributes_Response.ProtoReflect.Descriptor instead.
func (*DeleteDatasetAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DeleteDatasetAttributes_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type SetDatasetVisibilty_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *SetDatasetVisibilty_Response) Reset() {
	*x = SetDatasetVisibilty_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetVisibilty_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetVisibilty_Response) ProtoMessage() {}

func (x *SetDatasetVisibilty_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetVisibilty_Response.ProtoReflect.Descriptor instead.
func (*SetDatasetVisibilty_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{17, 0}
}

func (x *SetDatasetVisibilty_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type LastExperimentByDatasetId_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *LastExperimentByDatasetId_Response) Reset() {
	*x = LastExperimentByDatasetId_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastExperimentByDatasetId_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastExperimentByDatasetId_Response) ProtoMessage() {}

func (x *LastExperimentByDatasetId_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastExperimentByDatasetId_Response.ProtoReflect.Descriptor instead.
func (*LastExperimentByDatasetId_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{18, 0}
}

func (x *LastExperimentByDatasetId_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type GetExperimentRunByDataset_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentRuns []*ExperimentRun `protobuf:"bytes,1,rep,name=experiment_runs,json=experimentRuns,proto3" json:"experiment_runs,omitempty"`
}

func (x *GetExperimentRunByDataset_Response) Reset() {
	*x = GetExperimentRunByDataset_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentRunByDataset_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentRunByDataset_Response) ProtoMessage() {}

func (x *GetExperimentRunByDataset_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentRunByDataset_Response.ProtoReflect.Descriptor instead.
func (*GetExperimentRunByDataset_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetExperimentRunByDataset_Response) GetExperimentRuns() []*ExperimentRun {
	if x != nil {
		return x.ExperimentRuns
	}
	return nil
}

type SetDatasetWorkspace_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *SetDatasetWorkspace_Response) Reset() {
	*x = SetDatasetWorkspace_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetWorkspace_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetWorkspace_Response) ProtoMessage() {}

func (x *SetDatasetWorkspace_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetWorkspace_Response.ProtoReflect.Descriptor instead.
func (*SetDatasetWorkspace_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetService_proto_rawDescGZIP(), []int{20, 0}
}

func (x *SetDatasetWorkspace_Response) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

var File_modeldb_DatasetService_proto protoreflect.FileDescriptor

var file_modeldb_DatasetService_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x04, 0x0a,
	0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x68, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x22, 0x2b, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x02, 0x22, 0x5c, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x43, 0x0a, 0x11, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x47, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x22,
	0xdb, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x50, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x3f, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x98, 0x02,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x66, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x91, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x22,
	0x43, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x03, 0x0a,
	0x0c, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x66, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x78, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x75, 0x0a, 0x0e, 0x41,
	0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x1a, 0x3f, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xa2, 0x01, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x68, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x3f, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x1a, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x32, 0x96, 0x16, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2b,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x0c, 0x66,
	0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x27, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a,
	0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x20,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x1a, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2f, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x1a,
	0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x14, 0x61,
	0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x2f, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41,
	0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x32, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x9a, 0x01, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x74, 0x79, 0x1a,
	0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a,
	0x1c, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x4c, 0x61,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x1a, 0x34, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x42, 0x42, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modeldb_DatasetService_proto_rawDescOnce sync.Once
	file_modeldb_DatasetService_proto_rawDescData = file_modeldb_DatasetService_proto_rawDesc
)

func file_modeldb_DatasetService_proto_rawDescGZIP() []byte {
	file_modeldb_DatasetService_proto_rawDescOnce.Do(func() {
		file_modeldb_DatasetService_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_DatasetService_proto_rawDescData)
	})
	return file_modeldb_DatasetService_proto_rawDescData
}

var file_modeldb_DatasetService_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_modeldb_DatasetService_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_modeldb_DatasetService_proto_goTypes = []interface{}{
	(DatasetTypeEnum_DatasetType)(0),             // 0: ai.verta.modeldb.DatasetTypeEnum.DatasetType
	(DatasetVisibilityEnum_DatasetVisibility)(0), // 1: ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	(*Dataset)(nil),                             // 2: ai.verta.modeldb.Dataset
	(*DatasetTypeEnum)(nil),                     // 3: ai.verta.modeldb.DatasetTypeEnum
	(*DatasetVisibilityEnum)(nil),               // 4: ai.verta.modeldb.DatasetVisibilityEnum
	(*CreateDataset)(nil),                       // 5: ai.verta.modeldb.CreateDataset
	(*GetAllDatasets)(nil),                      // 6: ai.verta.modeldb.GetAllDatasets
	(*GetDatasetById)(nil),                      // 7: ai.verta.modeldb.GetDatasetById
	(*GetDatasetByName)(nil),                    // 8: ai.verta.modeldb.GetDatasetByName
	(*DeleteDataset)(nil),                       // 9: ai.verta.modeldb.DeleteDataset
	(*DeleteDatasets)(nil),                      // 10: ai.verta.modeldb.DeleteDatasets
	(*FindDatasets)(nil),                        // 11: ai.verta.modeldb.FindDatasets
	(*UpdateDatasetName)(nil),                   // 12: ai.verta.modeldb.UpdateDatasetName
	(*UpdateDatasetDescription)(nil),            // 13: ai.verta.modeldb.UpdateDatasetDescription
	(*AddDatasetTags)(nil),                      // 14: ai.verta.modeldb.AddDatasetTags
	(*DeleteDatasetTags)(nil),                   // 15: ai.verta.modeldb.DeleteDatasetTags
	(*AddDatasetAttributes)(nil),                // 16: ai.verta.modeldb.AddDatasetAttributes
	(*UpdateDatasetAttributes)(nil),             // 17: ai.verta.modeldb.UpdateDatasetAttributes
	(*DeleteDatasetAttributes)(nil),             // 18: ai.verta.modeldb.DeleteDatasetAttributes
	(*SetDatasetVisibilty)(nil),                 // 19: ai.verta.modeldb.SetDatasetVisibilty
	(*LastExperimentByDatasetId)(nil),           // 20: ai.verta.modeldb.LastExperimentByDatasetId
	(*GetExperimentRunByDataset)(nil),           // 21: ai.verta.modeldb.GetExperimentRunByDataset
	(*SetDatasetWorkspace)(nil),                 // 22: ai.verta.modeldb.SetDatasetWorkspace
	(*CreateDataset_Response)(nil),              // 23: ai.verta.modeldb.CreateDataset.Response
	(*GetAllDatasets_Response)(nil),             // 24: ai.verta.modeldb.GetAllDatasets.Response
	(*GetDatasetById_Response)(nil),             // 25: ai.verta.modeldb.GetDatasetById.Response
	(*GetDatasetByName_Response)(nil),           // 26: ai.verta.modeldb.GetDatasetByName.Response
	(*DeleteDataset_Response)(nil),              // 27: ai.verta.modeldb.DeleteDataset.Response
	(*DeleteDatasets_Response)(nil),             // 28: ai.verta.modeldb.DeleteDatasets.Response
	(*FindDatasets_Response)(nil),               // 29: ai.verta.modeldb.FindDatasets.Response
	(*UpdateDatasetName_Response)(nil),          // 30: ai.verta.modeldb.UpdateDatasetName.Response
	(*UpdateDatasetDescription_Response)(nil),   // 31: ai.verta.modeldb.UpdateDatasetDescription.Response
	(*AddDatasetTags_Response)(nil),             // 32: ai.verta.modeldb.AddDatasetTags.Response
	(*DeleteDatasetTags_Response)(nil),          // 33: ai.verta.modeldb.DeleteDatasetTags.Response
	(*AddDatasetAttributes_Response)(nil),       // 34: ai.verta.modeldb.AddDatasetAttributes.Response
	(*UpdateDatasetAttributes_Response)(nil),    // 35: ai.verta.modeldb.UpdateDatasetAttributes.Response
	(*DeleteDatasetAttributes_Response)(nil),    // 36: ai.verta.modeldb.DeleteDatasetAttributes.Response
	(*SetDatasetVisibilty_Response)(nil),        // 37: ai.verta.modeldb.SetDatasetVisibilty.Response
	(*LastExperimentByDatasetId_Response)(nil),  // 38: ai.verta.modeldb.LastExperimentByDatasetId.Response
	(*GetExperimentRunByDataset_Response)(nil),  // 39: ai.verta.modeldb.GetExperimentRunByDataset.Response
	(*SetDatasetWorkspace_Response)(nil),        // 40: ai.verta.modeldb.SetDatasetWorkspace.Response
	(*common.KeyValue)(nil),                     // 41: ai.verta.common.KeyValue
	(common.WorkspaceTypeEnum_WorkspaceType)(0), // 42: ai.verta.common.WorkspaceTypeEnum.WorkspaceType
	(*common.KeyValueQuery)(nil),                // 43: ai.verta.common.KeyValueQuery
	(*Experiment)(nil),                          // 44: ai.verta.modeldb.Experiment
	(*ExperimentRun)(nil),                       // 45: ai.verta.modeldb.ExperimentRun
	(*GetTags)(nil),                             // 46: ai.verta.modeldb.GetTags
	(*GetTags_Response)(nil),                    // 47: ai.verta.modeldb.GetTags.Response
}
var file_modeldb_DatasetService_proto_depIdxs = []int32{
	1,  // 0: ai.verta.modeldb.Dataset.dataset_visibility:type_name -> ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	0,  // 1: ai.verta.modeldb.Dataset.dataset_type:type_name -> ai.verta.modeldb.DatasetTypeEnum.DatasetType
	41, // 2: ai.verta.modeldb.Dataset.attributes:type_name -> ai.verta.common.KeyValue
	42, // 3: ai.verta.modeldb.Dataset.workspace_type:type_name -> ai.verta.common.WorkspaceTypeEnum.WorkspaceType
	41, // 4: ai.verta.modeldb.CreateDataset.attributes:type_name -> ai.verta.common.KeyValue
	1,  // 5: ai.verta.modeldb.CreateDataset.dataset_visibility:type_name -> ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	0,  // 6: ai.verta.modeldb.CreateDataset.dataset_type:type_name -> ai.verta.modeldb.DatasetTypeEnum.DatasetType
	43, // 7: ai.verta.modeldb.FindDatasets.predicates:type_name -> ai.verta.common.KeyValueQuery
	41, // 8: ai.verta.modeldb.AddDatasetAttributes.attributes:type_name -> ai.verta.common.KeyValue
	41, // 9: ai.verta.modeldb.UpdateDatasetAttributes.attribute:type_name -> ai.verta.common.KeyValue
	1,  // 10: ai.verta.modeldb.SetDatasetVisibilty.dataset_visibility:type_name -> ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	2,  // 11: ai.verta.modeldb.CreateDataset.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 12: ai.verta.modeldb.GetAllDatasets.Response.datasets:type_name -> ai.verta.modeldb.Dataset
	2,  // 13: ai.verta.modeldb.GetDatasetById.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 14: ai.verta.modeldb.GetDatasetByName.Response.dataset_by_user:type_name -> ai.verta.modeldb.Dataset
	2,  // 15: ai.verta.modeldb.GetDatasetByName.Response.shared_datasets:type_name -> ai.verta.modeldb.Dataset
	2,  // 16: ai.verta.modeldb.FindDatasets.Response.datasets:type_name -> ai.verta.modeldb.Dataset
	2,  // 17: ai.verta.modeldb.UpdateDatasetName.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 18: ai.verta.modeldb.UpdateDatasetDescription.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 19: ai.verta.modeldb.AddDatasetTags.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 20: ai.verta.modeldb.DeleteDatasetTags.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 21: ai.verta.modeldb.AddDatasetAttributes.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 22: ai.verta.modeldb.UpdateDatasetAttributes.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 23: ai.verta.modeldb.DeleteDatasetAttributes.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	2,  // 24: ai.verta.modeldb.SetDatasetVisibilty.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	44, // 25: ai.verta.modeldb.LastExperimentByDatasetId.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	45, // 26: ai.verta.modeldb.GetExperimentRunByDataset.Response.experiment_runs:type_name -> ai.verta.modeldb.ExperimentRun
	2,  // 27: ai.verta.modeldb.SetDatasetWorkspace.Response.dataset:type_name -> ai.verta.modeldb.Dataset
	5,  // 28: ai.verta.modeldb.DatasetService.createDataset:input_type -> ai.verta.modeldb.CreateDataset
	6,  // 29: ai.verta.modeldb.DatasetService.getAllDatasets:input_type -> ai.verta.modeldb.GetAllDatasets
	7,  // 30: ai.verta.modeldb.DatasetService.getDatasetById:input_type -> ai.verta.modeldb.GetDatasetById
	8,  // 31: ai.verta.modeldb.DatasetService.getDatasetByName:input_type -> ai.verta.modeldb.GetDatasetByName
	9,  // 32: ai.verta.modeldb.DatasetService.deleteDataset:input_type -> ai.verta.modeldb.DeleteDataset
	10, // 33: ai.verta.modeldb.DatasetService.deleteDatasets:input_type -> ai.verta.modeldb.DeleteDatasets
	11, // 34: ai.verta.modeldb.DatasetService.findDatasets:input_type -> ai.verta.modeldb.FindDatasets
	12, // 35: ai.verta.modeldb.DatasetService.updateDatasetName:input_type -> ai.verta.modeldb.UpdateDatasetName
	13, // 36: ai.verta.modeldb.DatasetService.updateDatasetDescription:input_type -> ai.verta.modeldb.UpdateDatasetDescription
	14, // 37: ai.verta.modeldb.DatasetService.addDatasetTags:input_type -> ai.verta.modeldb.AddDatasetTags
	46, // 38: ai.verta.modeldb.DatasetService.getDatasetTags:input_type -> ai.verta.modeldb.GetTags
	15, // 39: ai.verta.modeldb.DatasetService.deleteDatasetTags:input_type -> ai.verta.modeldb.DeleteDatasetTags
	16, // 40: ai.verta.modeldb.DatasetService.addDatasetAttributes:input_type -> ai.verta.modeldb.AddDatasetAttributes
	17, // 41: ai.verta.modeldb.DatasetService.updateDatasetAttributes:input_type -> ai.verta.modeldb.UpdateDatasetAttributes
	18, // 42: ai.verta.modeldb.DatasetService.deleteDatasetAttributes:input_type -> ai.verta.modeldb.DeleteDatasetAttributes
	19, // 43: ai.verta.modeldb.DatasetService.setDatasetVisibility:input_type -> ai.verta.modeldb.SetDatasetVisibilty
	20, // 44: ai.verta.modeldb.DatasetService.getLastExperimentByDatasetId:input_type -> ai.verta.modeldb.LastExperimentByDatasetId
	21, // 45: ai.verta.modeldb.DatasetService.getExperimentRunByDataset:input_type -> ai.verta.modeldb.GetExperimentRunByDataset
	22, // 46: ai.verta.modeldb.DatasetService.setDatasetWorkspace:input_type -> ai.verta.modeldb.SetDatasetWorkspace
	23, // 47: ai.verta.modeldb.DatasetService.createDataset:output_type -> ai.verta.modeldb.CreateDataset.Response
	24, // 48: ai.verta.modeldb.DatasetService.getAllDatasets:output_type -> ai.verta.modeldb.GetAllDatasets.Response
	25, // 49: ai.verta.modeldb.DatasetService.getDatasetById:output_type -> ai.verta.modeldb.GetDatasetById.Response
	26, // 50: ai.verta.modeldb.DatasetService.getDatasetByName:output_type -> ai.verta.modeldb.GetDatasetByName.Response
	27, // 51: ai.verta.modeldb.DatasetService.deleteDataset:output_type -> ai.verta.modeldb.DeleteDataset.Response
	28, // 52: ai.verta.modeldb.DatasetService.deleteDatasets:output_type -> ai.verta.modeldb.DeleteDatasets.Response
	29, // 53: ai.verta.modeldb.DatasetService.findDatasets:output_type -> ai.verta.modeldb.FindDatasets.Response
	30, // 54: ai.verta.modeldb.DatasetService.updateDatasetName:output_type -> ai.verta.modeldb.UpdateDatasetName.Response
	31, // 55: ai.verta.modeldb.DatasetService.updateDatasetDescription:output_type -> ai.verta.modeldb.UpdateDatasetDescription.Response
	32, // 56: ai.verta.modeldb.DatasetService.addDatasetTags:output_type -> ai.verta.modeldb.AddDatasetTags.Response
	47, // 57: ai.verta.modeldb.DatasetService.getDatasetTags:output_type -> ai.verta.modeldb.GetTags.Response
	33, // 58: ai.verta.modeldb.DatasetService.deleteDatasetTags:output_type -> ai.verta.modeldb.DeleteDatasetTags.Response
	34, // 59: ai.verta.modeldb.DatasetService.addDatasetAttributes:output_type -> ai.verta.modeldb.AddDatasetAttributes.Response
	35, // 60: ai.verta.modeldb.DatasetService.updateDatasetAttributes:output_type -> ai.verta.modeldb.UpdateDatasetAttributes.Response
	36, // 61: ai.verta.modeldb.DatasetService.deleteDatasetAttributes:output_type -> ai.verta.modeldb.DeleteDatasetAttributes.Response
	37, // 62: ai.verta.modeldb.DatasetService.setDatasetVisibility:output_type -> ai.verta.modeldb.SetDatasetVisibilty.Response
	38, // 63: ai.verta.modeldb.DatasetService.getLastExperimentByDatasetId:output_type -> ai.verta.modeldb.LastExperimentByDatasetId.Response
	39, // 64: ai.verta.modeldb.DatasetService.getExperimentRunByDataset:output_type -> ai.verta.modeldb.GetExperimentRunByDataset.Response
	40, // 65: ai.verta.modeldb.DatasetService.setDatasetWorkspace:output_type -> ai.verta.modeldb.SetDatasetWorkspace.Response
	47, // [47:66] is the sub-list for method output_type
	28, // [28:47] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_modeldb_DatasetService_proto_init() }
func file_modeldb_DatasetService_proto_init() {
	if File_modeldb_DatasetService_proto != nil {
		return
	}
	file_modeldb_CommonService_proto_init()
	file_modeldb_ExperimentService_proto_init()
	file_modeldb_ExperimentRunService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_DatasetService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetVisibilityEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDatasets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDatasets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetVisibilty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastExperimentByDatasetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentRunByDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataset_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDatasets_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetById_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetByName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataset_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasets_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDatasets_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetDescription_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetVisibilty_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastExperimentByDatasetId_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentRunByDataset_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetWorkspace_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_DatasetService_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modeldb_DatasetService_proto_goTypes,
		DependencyIndexes: file_modeldb_DatasetService_proto_depIdxs,
		EnumInfos:         file_modeldb_DatasetService_proto_enumTypes,
		MessageInfos:      file_modeldb_DatasetService_proto_msgTypes,
	}.Build()
	File_modeldb_DatasetService_proto = out.File
	file_modeldb_DatasetService_proto_rawDesc = nil
	file_modeldb_DatasetService_proto_goTypes = nil
	file_modeldb_DatasetService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetServiceClient interface {
	CreateDataset(ctx context.Context, in *CreateDataset, opts ...grpc.CallOption) (*CreateDataset_Response, error)
	GetAllDatasets(ctx context.Context, in *GetAllDatasets, opts ...grpc.CallOption) (*GetAllDatasets_Response, error)
	GetDatasetById(ctx context.Context, in *GetDatasetById, opts ...grpc.CallOption) (*GetDatasetById_Response, error)
	GetDatasetByName(ctx context.Context, in *GetDatasetByName, opts ...grpc.CallOption) (*GetDatasetByName_Response, error)
	DeleteDataset(ctx context.Context, in *DeleteDataset, opts ...grpc.CallOption) (*DeleteDataset_Response, error)
	DeleteDatasets(ctx context.Context, in *DeleteDatasets, opts ...grpc.CallOption) (*DeleteDatasets_Response, error)
	// queries
	FindDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*FindDatasets_Response, error)
	UpdateDatasetName(ctx context.Context, in *UpdateDatasetName, opts ...grpc.CallOption) (*UpdateDatasetName_Response, error)
	UpdateDatasetDescription(ctx context.Context, in *UpdateDatasetDescription, opts ...grpc.CallOption) (*UpdateDatasetDescription_Response, error)
	AddDatasetTags(ctx context.Context, in *AddDatasetTags, opts ...grpc.CallOption) (*AddDatasetTags_Response, error)
	GetDatasetTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error)
	DeleteDatasetTags(ctx context.Context, in *DeleteDatasetTags, opts ...grpc.CallOption) (*DeleteDatasetTags_Response, error)
	AddDatasetAttributes(ctx context.Context, in *AddDatasetAttributes, opts ...grpc.CallOption) (*AddDatasetAttributes_Response, error)
	UpdateDatasetAttributes(ctx context.Context, in *UpdateDatasetAttributes, opts ...grpc.CallOption) (*UpdateDatasetAttributes_Response, error)
	DeleteDatasetAttributes(ctx context.Context, in *DeleteDatasetAttributes, opts ...grpc.CallOption) (*DeleteDatasetAttributes_Response, error)
	SetDatasetVisibility(ctx context.Context, in *SetDatasetVisibilty, opts ...grpc.CallOption) (*SetDatasetVisibilty_Response, error)
	GetLastExperimentByDatasetId(ctx context.Context, in *LastExperimentByDatasetId, opts ...grpc.CallOption) (*LastExperimentByDatasetId_Response, error)
	GetExperimentRunByDataset(ctx context.Context, in *GetExperimentRunByDataset, opts ...grpc.CallOption) (*GetExperimentRunByDataset_Response, error)
	SetDatasetWorkspace(ctx context.Context, in *SetDatasetWorkspace, opts ...grpc.CallOption) (*SetDatasetWorkspace_Response, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) CreateDataset(ctx context.Context, in *CreateDataset, opts ...grpc.CallOption) (*CreateDataset_Response, error) {
	out := new(CreateDataset_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/createDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetAllDatasets(ctx context.Context, in *GetAllDatasets, opts ...grpc.CallOption) (*GetAllDatasets_Response, error) {
	out := new(GetAllDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getAllDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetById(ctx context.Context, in *GetDatasetById, opts ...grpc.CallOption) (*GetDatasetById_Response, error) {
	out := new(GetDatasetById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getDatasetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetByName(ctx context.Context, in *GetDatasetByName, opts ...grpc.CallOption) (*GetDatasetByName_Response, error) {
	out := new(GetDatasetByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getDatasetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *DeleteDataset, opts ...grpc.CallOption) (*DeleteDataset_Response, error) {
	out := new(DeleteDataset_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasets(ctx context.Context, in *DeleteDatasets, opts ...grpc.CallOption) (*DeleteDatasets_Response, error) {
	out := new(DeleteDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) FindDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*FindDatasets_Response, error) {
	out := new(FindDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/findDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetName(ctx context.Context, in *UpdateDatasetName, opts ...grpc.CallOption) (*UpdateDatasetName_Response, error) {
	out := new(UpdateDatasetName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/updateDatasetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetDescription(ctx context.Context, in *UpdateDatasetDescription, opts ...grpc.CallOption) (*UpdateDatasetDescription_Response, error) {
	out := new(UpdateDatasetDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/updateDatasetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) AddDatasetTags(ctx context.Context, in *AddDatasetTags, opts ...grpc.CallOption) (*AddDatasetTags_Response, error) {
	out := new(AddDatasetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/addDatasetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error) {
	out := new(GetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getDatasetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasetTags(ctx context.Context, in *DeleteDatasetTags, opts ...grpc.CallOption) (*DeleteDatasetTags_Response, error) {
	out := new(DeleteDatasetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDatasetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) AddDatasetAttributes(ctx context.Context, in *AddDatasetAttributes, opts ...grpc.CallOption) (*AddDatasetAttributes_Response, error) {
	out := new(AddDatasetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/addDatasetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetAttributes(ctx context.Context, in *UpdateDatasetAttributes, opts ...grpc.CallOption) (*UpdateDatasetAttributes_Response, error) {
	out := new(UpdateDatasetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/updateDatasetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasetAttributes(ctx context.Context, in *DeleteDatasetAttributes, opts ...grpc.CallOption) (*DeleteDatasetAttributes_Response, error) {
	out := new(DeleteDatasetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDatasetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) SetDatasetVisibility(ctx context.Context, in *SetDatasetVisibilty, opts ...grpc.CallOption) (*SetDatasetVisibilty_Response, error) {
	out := new(SetDatasetVisibilty_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/setDatasetVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetLastExperimentByDatasetId(ctx context.Context, in *LastExperimentByDatasetId, opts ...grpc.CallOption) (*LastExperimentByDatasetId_Response, error) {
	out := new(LastExperimentByDatasetId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getLastExperimentByDatasetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetExperimentRunByDataset(ctx context.Context, in *GetExperimentRunByDataset, opts ...grpc.CallOption) (*GetExperimentRunByDataset_Response, error) {
	out := new(GetExperimentRunByDataset_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getExperimentRunByDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) SetDatasetWorkspace(ctx context.Context, in *SetDatasetWorkspace, opts ...grpc.CallOption) (*SetDatasetWorkspace_Response, error) {
	out := new(SetDatasetWorkspace_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/setDatasetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
type DatasetServiceServer interface {
	CreateDataset(context.Context, *CreateDataset) (*CreateDataset_Response, error)
	GetAllDatasets(context.Context, *GetAllDatasets) (*GetAllDatasets_Response, error)
	GetDatasetById(context.Context, *GetDatasetById) (*GetDatasetById_Response, error)
	GetDatasetByName(context.Context, *GetDatasetByName) (*GetDatasetByName_Response, error)
	DeleteDataset(context.Context, *DeleteDataset) (*DeleteDataset_Response, error)
	DeleteDatasets(context.Context, *DeleteDatasets) (*DeleteDatasets_Response, error)
	// queries
	FindDatasets(context.Context, *FindDatasets) (*FindDatasets_Response, error)
	UpdateDatasetName(context.Context, *UpdateDatasetName) (*UpdateDatasetName_Response, error)
	UpdateDatasetDescription(context.Context, *UpdateDatasetDescription) (*UpdateDatasetDescription_Response, error)
	AddDatasetTags(context.Context, *AddDatasetTags) (*AddDatasetTags_Response, error)
	GetDatasetTags(context.Context, *GetTags) (*GetTags_Response, error)
	DeleteDatasetTags(context.Context, *DeleteDatasetTags) (*DeleteDatasetTags_Response, error)
	AddDatasetAttributes(context.Context, *AddDatasetAttributes) (*AddDatasetAttributes_Response, error)
	UpdateDatasetAttributes(context.Context, *UpdateDatasetAttributes) (*UpdateDatasetAttributes_Response, error)
	DeleteDatasetAttributes(context.Context, *DeleteDatasetAttributes) (*DeleteDatasetAttributes_Response, error)
	SetDatasetVisibility(context.Context, *SetDatasetVisibilty) (*SetDatasetVisibilty_Response, error)
	GetLastExperimentByDatasetId(context.Context, *LastExperimentByDatasetId) (*LastExperimentByDatasetId_Response, error)
	GetExperimentRunByDataset(context.Context, *GetExperimentRunByDataset) (*GetExperimentRunByDataset_Response, error)
	SetDatasetWorkspace(context.Context, *SetDatasetWorkspace) (*SetDatasetWorkspace_Response, error)
}

// UnimplementedDatasetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (*UnimplementedDatasetServiceServer) CreateDataset(context.Context, *CreateDataset) (*CreateDataset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) GetAllDatasets(context.Context, *GetAllDatasets) (*GetAllDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDatasets not implemented")
}
func (*UnimplementedDatasetServiceServer) GetDatasetById(context.Context, *GetDatasetById) (*GetDatasetById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetById not implemented")
}
func (*UnimplementedDatasetServiceServer) GetDatasetByName(context.Context, *GetDatasetByName) (*GetDatasetByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetByName not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *DeleteDataset) (*DeleteDataset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDatasets(context.Context, *DeleteDatasets) (*DeleteDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasets not implemented")
}
func (*UnimplementedDatasetServiceServer) FindDatasets(context.Context, *FindDatasets) (*FindDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDatasets not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateDatasetName(context.Context, *UpdateDatasetName) (*UpdateDatasetName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetName not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateDatasetDescription(context.Context, *UpdateDatasetDescription) (*UpdateDatasetDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetDescription not implemented")
}
func (*UnimplementedDatasetServiceServer) AddDatasetTags(context.Context, *AddDatasetTags) (*AddDatasetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetTags not implemented")
}
func (*UnimplementedDatasetServiceServer) GetDatasetTags(context.Context, *GetTags) (*GetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetTags not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDatasetTags(context.Context, *DeleteDatasetTags) (*DeleteDatasetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetTags not implemented")
}
func (*UnimplementedDatasetServiceServer) AddDatasetAttributes(context.Context, *AddDatasetAttributes) (*AddDatasetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetAttributes not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateDatasetAttributes(context.Context, *UpdateDatasetAttributes) (*UpdateDatasetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetAttributes not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDatasetAttributes(context.Context, *DeleteDatasetAttributes) (*DeleteDatasetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetAttributes not implemented")
}
func (*UnimplementedDatasetServiceServer) SetDatasetVisibility(context.Context, *SetDatasetVisibilty) (*SetDatasetVisibilty_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDatasetVisibility not implemented")
}
func (*UnimplementedDatasetServiceServer) GetLastExperimentByDatasetId(context.Context, *LastExperimentByDatasetId) (*LastExperimentByDatasetId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastExperimentByDatasetId not implemented")
}
func (*UnimplementedDatasetServiceServer) GetExperimentRunByDataset(context.Context, *GetExperimentRunByDataset) (*GetExperimentRunByDataset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunByDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) SetDatasetWorkspace(context.Context, *SetDatasetWorkspace) (*SetDatasetWorkspace_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDatasetWorkspace not implemented")
}

func RegisterDatasetServiceServer(s *grpc.Server, srv DatasetServiceServer) {
	s.RegisterService(&_DatasetService_serviceDesc, srv)
}

func _DatasetService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateDataset(ctx, req.(*CreateDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetAllDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetAllDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/GetAllDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetAllDatasets(ctx, req.(*GetAllDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/GetDatasetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetById(ctx, req.(*GetDatasetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/GetDatasetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetByName(ctx, req.(*GetDatasetByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*DeleteDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/DeleteDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasets(ctx, req.(*DeleteDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_FindDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).FindDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/FindDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).FindDatasets(ctx, req.(*FindDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/UpdateDatasetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetName(ctx, req.(*UpdateDatasetName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/UpdateDatasetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetDescription(ctx, req.(*UpdateDatasetDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_AddDatasetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).AddDatasetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/AddDatasetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).AddDatasetTags(ctx, req.(*AddDatasetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/GetDatasetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetTags(ctx, req.(*GetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/DeleteDatasetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasetTags(ctx, req.(*DeleteDatasetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_AddDatasetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).AddDatasetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/AddDatasetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).AddDatasetAttributes(ctx, req.(*AddDatasetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/UpdateDatasetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetAttributes(ctx, req.(*UpdateDatasetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/DeleteDatasetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasetAttributes(ctx, req.(*DeleteDatasetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_SetDatasetVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDatasetVisibilty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).SetDatasetVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/SetDatasetVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).SetDatasetVisibility(ctx, req.(*SetDatasetVisibilty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetLastExperimentByDatasetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastExperimentByDatasetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetLastExperimentByDatasetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/GetLastExperimentByDatasetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetLastExperimentByDatasetId(ctx, req.(*LastExperimentByDatasetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetExperimentRunByDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunByDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetExperimentRunByDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/GetExperimentRunByDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetExperimentRunByDataset(ctx, req.(*GetExperimentRunByDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_SetDatasetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDatasetWorkspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).SetDatasetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/SetDatasetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).SetDatasetWorkspace(ctx, req.(*SetDatasetWorkspace))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDataset",
			Handler:    _DatasetService_CreateDataset_Handler,
		},
		{
			MethodName: "getAllDatasets",
			Handler:    _DatasetService_GetAllDatasets_Handler,
		},
		{
			MethodName: "getDatasetById",
			Handler:    _DatasetService_GetDatasetById_Handler,
		},
		{
			MethodName: "getDatasetByName",
			Handler:    _DatasetService_GetDatasetByName_Handler,
		},
		{
			MethodName: "deleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "deleteDatasets",
			Handler:    _DatasetService_DeleteDatasets_Handler,
		},
		{
			MethodName: "findDatasets",
			Handler:    _DatasetService_FindDatasets_Handler,
		},
		{
			MethodName: "updateDatasetName",
			Handler:    _DatasetService_UpdateDatasetName_Handler,
		},
		{
			MethodName: "updateDatasetDescription",
			Handler:    _DatasetService_UpdateDatasetDescription_Handler,
		},
		{
			MethodName: "addDatasetTags",
			Handler:    _DatasetService_AddDatasetTags_Handler,
		},
		{
			MethodName: "getDatasetTags",
			Handler:    _DatasetService_GetDatasetTags_Handler,
		},
		{
			MethodName: "deleteDatasetTags",
			Handler:    _DatasetService_DeleteDatasetTags_Handler,
		},
		{
			MethodName: "addDatasetAttributes",
			Handler:    _DatasetService_AddDatasetAttributes_Handler,
		},
		{
			MethodName: "updateDatasetAttributes",
			Handler:    _DatasetService_UpdateDatasetAttributes_Handler,
		},
		{
			MethodName: "deleteDatasetAttributes",
			Handler:    _DatasetService_DeleteDatasetAttributes_Handler,
		},
		{
			MethodName: "setDatasetVisibility",
			Handler:    _DatasetService_SetDatasetVisibility_Handler,
		},
		{
			MethodName: "getLastExperimentByDatasetId",
			Handler:    _DatasetService_GetLastExperimentByDatasetId_Handler,
		},
		{
			MethodName: "getExperimentRunByDataset",
			Handler:    _DatasetService_GetExperimentRunByDataset_Handler,
		},
		{
			MethodName: "setDatasetWorkspace",
			Handler:    _DatasetService_SetDatasetWorkspace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/DatasetService.proto",
}
