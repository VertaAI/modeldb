// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatasetVersionServiceClient is the client API for DatasetVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetVersionServiceClient interface {
	CreateDatasetVersion(ctx context.Context, in *CreateDatasetVersion, opts ...grpc.CallOption) (*CreateDatasetVersion_Response, error)
	GetAllDatasetVersionsByDatasetId(ctx context.Context, in *GetAllDatasetVersionsByDatasetId, opts ...grpc.CallOption) (*GetAllDatasetVersionsByDatasetId_Response, error)
	GetDatasetVersionById(ctx context.Context, in *GetDatasetVersionById, opts ...grpc.CallOption) (*GetDatasetVersionById_Response, error)
	DeleteDatasetVersion(ctx context.Context, in *DeleteDatasetVersion, opts ...grpc.CallOption) (*DeleteDatasetVersion_Response, error)
	DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersions, opts ...grpc.CallOption) (*DeleteDatasetVersions_Response, error)
	GetLatestDatasetVersionByDatasetId(ctx context.Context, in *GetLatestDatasetVersionByDatasetId, opts ...grpc.CallOption) (*GetLatestDatasetVersionByDatasetId_Response, error)
	// queries
	FindDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*FindDatasetVersions_Response, error)
	UpdateDatasetVersionDescription(ctx context.Context, in *UpdateDatasetVersionDescription, opts ...grpc.CallOption) (*UpdateDatasetVersionDescription_Response, error)
	AddDatasetVersionTags(ctx context.Context, in *AddDatasetVersionTags, opts ...grpc.CallOption) (*AddDatasetVersionTags_Response, error)
	DeleteDatasetVersionTags(ctx context.Context, in *DeleteDatasetVersionTags, opts ...grpc.CallOption) (*DeleteDatasetVersionTags_Response, error)
	AddDatasetVersionAttributes(ctx context.Context, in *AddDatasetVersionAttributes, opts ...grpc.CallOption) (*AddDatasetVersionAttributes_Response, error)
	UpdateDatasetVersionAttributes(ctx context.Context, in *UpdateDatasetVersionAttributes, opts ...grpc.CallOption) (*UpdateDatasetVersionAttributes_Response, error)
	GetDatasetVersionAttributes(ctx context.Context, in *GetDatasetVersionAttributes, opts ...grpc.CallOption) (*GetDatasetVersionAttributes_Response, error)
	DeleteDatasetVersionAttributes(ctx context.Context, in *DeleteDatasetVersionAttributes, opts ...grpc.CallOption) (*DeleteDatasetVersionAttributes_Response, error)
	GetUrlForDatasetBlobVersioned(ctx context.Context, in *GetUrlForDatasetBlobVersioned, opts ...grpc.CallOption) (*GetUrlForDatasetBlobVersioned_Response, error)
	CommitVersionedDatasetBlobArtifactPart(ctx context.Context, in *CommitVersionedDatasetBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedDatasetBlobArtifactPart_Response, error)
	GetCommittedVersionedDatasetBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedDatasetBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error)
	CommitMultipartVersionedDatasetBlobArtifact(ctx context.Context, in *CommitMultipartVersionedDatasetBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error)
}

type datasetVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetVersionServiceClient(cc grpc.ClientConnInterface) DatasetVersionServiceClient {
	return &datasetVersionServiceClient{cc}
}

func (c *datasetVersionServiceClient) CreateDatasetVersion(ctx context.Context, in *CreateDatasetVersion, opts ...grpc.CallOption) (*CreateDatasetVersion_Response, error) {
	out := new(CreateDatasetVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/createDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetAllDatasetVersionsByDatasetId(ctx context.Context, in *GetAllDatasetVersionsByDatasetId, opts ...grpc.CallOption) (*GetAllDatasetVersionsByDatasetId_Response, error) {
	out := new(GetAllDatasetVersionsByDatasetId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getAllDatasetVersionsByDatasetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetDatasetVersionById(ctx context.Context, in *GetDatasetVersionById, opts ...grpc.CallOption) (*GetDatasetVersionById_Response, error) {
	out := new(GetDatasetVersionById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getDatasetVersionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersion(ctx context.Context, in *DeleteDatasetVersion, opts ...grpc.CallOption) (*DeleteDatasetVersion_Response, error) {
	out := new(DeleteDatasetVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersions, opts ...grpc.CallOption) (*DeleteDatasetVersions_Response, error) {
	out := new(DeleteDatasetVersions_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetLatestDatasetVersionByDatasetId(ctx context.Context, in *GetLatestDatasetVersionByDatasetId, opts ...grpc.CallOption) (*GetLatestDatasetVersionByDatasetId_Response, error) {
	out := new(GetLatestDatasetVersionByDatasetId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getLatestDatasetVersionByDatasetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) FindDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*FindDatasetVersions_Response, error) {
	out := new(FindDatasetVersions_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/findDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) UpdateDatasetVersionDescription(ctx context.Context, in *UpdateDatasetVersionDescription, opts ...grpc.CallOption) (*UpdateDatasetVersionDescription_Response, error) {
	out := new(UpdateDatasetVersionDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/updateDatasetVersionDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) AddDatasetVersionTags(ctx context.Context, in *AddDatasetVersionTags, opts ...grpc.CallOption) (*AddDatasetVersionTags_Response, error) {
	out := new(AddDatasetVersionTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/addDatasetVersionTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersionTags(ctx context.Context, in *DeleteDatasetVersionTags, opts ...grpc.CallOption) (*DeleteDatasetVersionTags_Response, error) {
	out := new(DeleteDatasetVersionTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersionTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) AddDatasetVersionAttributes(ctx context.Context, in *AddDatasetVersionAttributes, opts ...grpc.CallOption) (*AddDatasetVersionAttributes_Response, error) {
	out := new(AddDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/addDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) UpdateDatasetVersionAttributes(ctx context.Context, in *UpdateDatasetVersionAttributes, opts ...grpc.CallOption) (*UpdateDatasetVersionAttributes_Response, error) {
	out := new(UpdateDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/updateDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetDatasetVersionAttributes(ctx context.Context, in *GetDatasetVersionAttributes, opts ...grpc.CallOption) (*GetDatasetVersionAttributes_Response, error) {
	out := new(GetDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersionAttributes(ctx context.Context, in *DeleteDatasetVersionAttributes, opts ...grpc.CallOption) (*DeleteDatasetVersionAttributes_Response, error) {
	out := new(DeleteDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetUrlForDatasetBlobVersioned(ctx context.Context, in *GetUrlForDatasetBlobVersioned, opts ...grpc.CallOption) (*GetUrlForDatasetBlobVersioned_Response, error) {
	out := new(GetUrlForDatasetBlobVersioned_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getUrlForDatasetBlobVersioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) CommitVersionedDatasetBlobArtifactPart(ctx context.Context, in *CommitVersionedDatasetBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedDatasetBlobArtifactPart_Response, error) {
	out := new(CommitVersionedDatasetBlobArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/commitVersionedDatasetBlobArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetCommittedVersionedDatasetBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedDatasetBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error) {
	out := new(GetCommittedVersionedDatasetBlobArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getCommittedVersionedDatasetBlobArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) CommitMultipartVersionedDatasetBlobArtifact(ctx context.Context, in *CommitMultipartVersionedDatasetBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error) {
	out := new(CommitMultipartVersionedDatasetBlobArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/commitMultipartVersionedDatasetBlobArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetVersionServiceServer is the server API for DatasetVersionService service.
type DatasetVersionServiceServer interface {
	CreateDatasetVersion(context.Context, *CreateDatasetVersion) (*CreateDatasetVersion_Response, error)
	GetAllDatasetVersionsByDatasetId(context.Context, *GetAllDatasetVersionsByDatasetId) (*GetAllDatasetVersionsByDatasetId_Response, error)
	GetDatasetVersionById(context.Context, *GetDatasetVersionById) (*GetDatasetVersionById_Response, error)
	DeleteDatasetVersion(context.Context, *DeleteDatasetVersion) (*DeleteDatasetVersion_Response, error)
	DeleteDatasetVersions(context.Context, *DeleteDatasetVersions) (*DeleteDatasetVersions_Response, error)
	GetLatestDatasetVersionByDatasetId(context.Context, *GetLatestDatasetVersionByDatasetId) (*GetLatestDatasetVersionByDatasetId_Response, error)
	// queries
	FindDatasetVersions(context.Context, *FindDatasetVersions) (*FindDatasetVersions_Response, error)
	UpdateDatasetVersionDescription(context.Context, *UpdateDatasetVersionDescription) (*UpdateDatasetVersionDescription_Response, error)
	AddDatasetVersionTags(context.Context, *AddDatasetVersionTags) (*AddDatasetVersionTags_Response, error)
	DeleteDatasetVersionTags(context.Context, *DeleteDatasetVersionTags) (*DeleteDatasetVersionTags_Response, error)
	AddDatasetVersionAttributes(context.Context, *AddDatasetVersionAttributes) (*AddDatasetVersionAttributes_Response, error)
	UpdateDatasetVersionAttributes(context.Context, *UpdateDatasetVersionAttributes) (*UpdateDatasetVersionAttributes_Response, error)
	GetDatasetVersionAttributes(context.Context, *GetDatasetVersionAttributes) (*GetDatasetVersionAttributes_Response, error)
	DeleteDatasetVersionAttributes(context.Context, *DeleteDatasetVersionAttributes) (*DeleteDatasetVersionAttributes_Response, error)
	GetUrlForDatasetBlobVersioned(context.Context, *GetUrlForDatasetBlobVersioned) (*GetUrlForDatasetBlobVersioned_Response, error)
	CommitVersionedDatasetBlobArtifactPart(context.Context, *CommitVersionedDatasetBlobArtifactPart) (*CommitVersionedDatasetBlobArtifactPart_Response, error)
	GetCommittedVersionedDatasetBlobArtifactParts(context.Context, *GetCommittedVersionedDatasetBlobArtifactParts) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error)
	CommitMultipartVersionedDatasetBlobArtifact(context.Context, *CommitMultipartVersionedDatasetBlobArtifact) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error)
}

// UnimplementedDatasetVersionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetVersionServiceServer struct {
}

func (*UnimplementedDatasetVersionServiceServer) CreateDatasetVersion(context.Context, *CreateDatasetVersion) (*CreateDatasetVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatasetVersion not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetAllDatasetVersionsByDatasetId(context.Context, *GetAllDatasetVersionsByDatasetId) (*GetAllDatasetVersionsByDatasetId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDatasetVersionsByDatasetId not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetDatasetVersionById(context.Context, *GetDatasetVersionById) (*GetDatasetVersionById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetVersionById not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersion(context.Context, *DeleteDatasetVersion) (*DeleteDatasetVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersion not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersions(context.Context, *DeleteDatasetVersions) (*DeleteDatasetVersions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersions not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetLatestDatasetVersionByDatasetId(context.Context, *GetLatestDatasetVersionByDatasetId) (*GetLatestDatasetVersionByDatasetId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestDatasetVersionByDatasetId not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) FindDatasetVersions(context.Context, *FindDatasetVersions) (*FindDatasetVersions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDatasetVersions not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) UpdateDatasetVersionDescription(context.Context, *UpdateDatasetVersionDescription) (*UpdateDatasetVersionDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetVersionDescription not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) AddDatasetVersionTags(context.Context, *AddDatasetVersionTags) (*AddDatasetVersionTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetVersionTags not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersionTags(context.Context, *DeleteDatasetVersionTags) (*DeleteDatasetVersionTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersionTags not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) AddDatasetVersionAttributes(context.Context, *AddDatasetVersionAttributes) (*AddDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) UpdateDatasetVersionAttributes(context.Context, *UpdateDatasetVersionAttributes) (*UpdateDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetDatasetVersionAttributes(context.Context, *GetDatasetVersionAttributes) (*GetDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersionAttributes(context.Context, *DeleteDatasetVersionAttributes) (*DeleteDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetUrlForDatasetBlobVersioned(context.Context, *GetUrlForDatasetBlobVersioned) (*GetUrlForDatasetBlobVersioned_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForDatasetBlobVersioned not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) CommitVersionedDatasetBlobArtifactPart(context.Context, *CommitVersionedDatasetBlobArtifactPart) (*CommitVersionedDatasetBlobArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitVersionedDatasetBlobArtifactPart not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetCommittedVersionedDatasetBlobArtifactParts(context.Context, *GetCommittedVersionedDatasetBlobArtifactParts) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedVersionedDatasetBlobArtifactParts not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) CommitMultipartVersionedDatasetBlobArtifact(context.Context, *CommitMultipartVersionedDatasetBlobArtifact) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartVersionedDatasetBlobArtifact not implemented")
}

func RegisterDatasetVersionServiceServer(s *grpc.Server, srv DatasetVersionServiceServer) {
	s.RegisterService(&_DatasetVersionService_serviceDesc, srv)
}

func _DatasetVersionService_CreateDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).CreateDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/CreateDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).CreateDatasetVersion(ctx, req.(*CreateDatasetVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetAllDatasetVersionsByDatasetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDatasetVersionsByDatasetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetAllDatasetVersionsByDatasetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetAllDatasetVersionsByDatasetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetAllDatasetVersionsByDatasetId(ctx, req.(*GetAllDatasetVersionsByDatasetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetDatasetVersionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetVersionById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetDatasetVersionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionById(ctx, req.(*GetDatasetVersionById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersion(ctx, req.(*DeleteDatasetVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersions(ctx, req.(*DeleteDatasetVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetLatestDatasetVersionByDatasetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestDatasetVersionByDatasetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetLatestDatasetVersionByDatasetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetLatestDatasetVersionByDatasetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetLatestDatasetVersionByDatasetId(ctx, req.(*GetLatestDatasetVersionByDatasetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_FindDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasetVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).FindDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/FindDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).FindDatasetVersions(ctx, req.(*FindDatasetVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_UpdateDatasetVersionDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetVersionDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/UpdateDatasetVersionDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionDescription(ctx, req.(*UpdateDatasetVersionDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_AddDatasetVersionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetVersionTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/AddDatasetVersionTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionTags(ctx, req.(*AddDatasetVersionTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersionTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersionTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionTags(ctx, req.(*DeleteDatasetVersionTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_AddDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/AddDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionAttributes(ctx, req.(*AddDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_UpdateDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/UpdateDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionAttributes(ctx, req.(*UpdateDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionAttributes(ctx, req.(*GetDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionAttributes(ctx, req.(*DeleteDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetUrlForDatasetBlobVersioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForDatasetBlobVersioned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetUrlForDatasetBlobVersioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetUrlForDatasetBlobVersioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetUrlForDatasetBlobVersioned(ctx, req.(*GetUrlForDatasetBlobVersioned))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_CommitVersionedDatasetBlobArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitVersionedDatasetBlobArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).CommitVersionedDatasetBlobArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/CommitVersionedDatasetBlobArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).CommitVersionedDatasetBlobArtifactPart(ctx, req.(*CommitVersionedDatasetBlobArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetCommittedVersionedDatasetBlobArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedVersionedDatasetBlobArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetCommittedVersionedDatasetBlobArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetCommittedVersionedDatasetBlobArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetCommittedVersionedDatasetBlobArtifactParts(ctx, req.(*GetCommittedVersionedDatasetBlobArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_CommitMultipartVersionedDatasetBlobArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMultipartVersionedDatasetBlobArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).CommitMultipartVersionedDatasetBlobArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/CommitMultipartVersionedDatasetBlobArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).CommitMultipartVersionedDatasetBlobArtifact(ctx, req.(*CommitMultipartVersionedDatasetBlobArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetVersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.DatasetVersionService",
	HandlerType: (*DatasetVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDatasetVersion",
			Handler:    _DatasetVersionService_CreateDatasetVersion_Handler,
		},
		{
			MethodName: "getAllDatasetVersionsByDatasetId",
			Handler:    _DatasetVersionService_GetAllDatasetVersionsByDatasetId_Handler,
		},
		{
			MethodName: "getDatasetVersionById",
			Handler:    _DatasetVersionService_GetDatasetVersionById_Handler,
		},
		{
			MethodName: "deleteDatasetVersion",
			Handler:    _DatasetVersionService_DeleteDatasetVersion_Handler,
		},
		{
			MethodName: "deleteDatasetVersions",
			Handler:    _DatasetVersionService_DeleteDatasetVersions_Handler,
		},
		{
			MethodName: "getLatestDatasetVersionByDatasetId",
			Handler:    _DatasetVersionService_GetLatestDatasetVersionByDatasetId_Handler,
		},
		{
			MethodName: "findDatasetVersions",
			Handler:    _DatasetVersionService_FindDatasetVersions_Handler,
		},
		{
			MethodName: "updateDatasetVersionDescription",
			Handler:    _DatasetVersionService_UpdateDatasetVersionDescription_Handler,
		},
		{
			MethodName: "addDatasetVersionTags",
			Handler:    _DatasetVersionService_AddDatasetVersionTags_Handler,
		},
		{
			MethodName: "deleteDatasetVersionTags",
			Handler:    _DatasetVersionService_DeleteDatasetVersionTags_Handler,
		},
		{
			MethodName: "addDatasetVersionAttributes",
			Handler:    _DatasetVersionService_AddDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "updateDatasetVersionAttributes",
			Handler:    _DatasetVersionService_UpdateDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "getDatasetVersionAttributes",
			Handler:    _DatasetVersionService_GetDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "deleteDatasetVersionAttributes",
			Handler:    _DatasetVersionService_DeleteDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "getUrlForDatasetBlobVersioned",
			Handler:    _DatasetVersionService_GetUrlForDatasetBlobVersioned_Handler,
		},
		{
			MethodName: "commitVersionedDatasetBlobArtifactPart",
			Handler:    _DatasetVersionService_CommitVersionedDatasetBlobArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedVersionedDatasetBlobArtifactParts",
			Handler:    _DatasetVersionService_GetCommittedVersionedDatasetBlobArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartVersionedDatasetBlobArtifact",
			Handler:    _DatasetVersionService_CommitMultipartVersionedDatasetBlobArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/DatasetVersionService.proto",
}
