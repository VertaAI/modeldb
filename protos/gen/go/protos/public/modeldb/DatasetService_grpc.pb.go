// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: modeldb/DatasetService.proto

package modeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetServiceClient interface {
	CreateDataset(ctx context.Context, in *CreateDataset, opts ...grpc.CallOption) (*CreateDataset_Response, error)
	GetAllDatasets(ctx context.Context, in *GetAllDatasets, opts ...grpc.CallOption) (*GetAllDatasets_Response, error)
	GetDatasetById(ctx context.Context, in *GetDatasetById, opts ...grpc.CallOption) (*GetDatasetById_Response, error)
	GetDatasetByName(ctx context.Context, in *GetDatasetByName, opts ...grpc.CallOption) (*GetDatasetByName_Response, error)
	DeleteDataset(ctx context.Context, in *DeleteDataset, opts ...grpc.CallOption) (*DeleteDataset_Response, error)
	DeleteDatasets(ctx context.Context, in *DeleteDatasets, opts ...grpc.CallOption) (*DeleteDatasets_Response, error)
	// queries
	FindDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*FindDatasets_Response, error)
	UpdateDatasetName(ctx context.Context, in *UpdateDatasetName, opts ...grpc.CallOption) (*UpdateDatasetName_Response, error)
	UpdateDatasetDescription(ctx context.Context, in *UpdateDatasetDescription, opts ...grpc.CallOption) (*UpdateDatasetDescription_Response, error)
	AddDatasetTags(ctx context.Context, in *AddDatasetTags, opts ...grpc.CallOption) (*AddDatasetTags_Response, error)
	GetDatasetTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error)
	DeleteDatasetTags(ctx context.Context, in *DeleteDatasetTags, opts ...grpc.CallOption) (*DeleteDatasetTags_Response, error)
	AddDatasetAttributes(ctx context.Context, in *AddDatasetAttributes, opts ...grpc.CallOption) (*AddDatasetAttributes_Response, error)
	UpdateDatasetAttributes(ctx context.Context, in *UpdateDatasetAttributes, opts ...grpc.CallOption) (*UpdateDatasetAttributes_Response, error)
	DeleteDatasetAttributes(ctx context.Context, in *DeleteDatasetAttributes, opts ...grpc.CallOption) (*DeleteDatasetAttributes_Response, error)
	GetLastExperimentByDatasetId(ctx context.Context, in *LastExperimentByDatasetId, opts ...grpc.CallOption) (*LastExperimentByDatasetId_Response, error)
	GetExperimentRunByDataset(ctx context.Context, in *GetExperimentRunByDataset, opts ...grpc.CallOption) (*GetExperimentRunByDataset_Response, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) CreateDataset(ctx context.Context, in *CreateDataset, opts ...grpc.CallOption) (*CreateDataset_Response, error) {
	out := new(CreateDataset_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/createDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetAllDatasets(ctx context.Context, in *GetAllDatasets, opts ...grpc.CallOption) (*GetAllDatasets_Response, error) {
	out := new(GetAllDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getAllDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetById(ctx context.Context, in *GetDatasetById, opts ...grpc.CallOption) (*GetDatasetById_Response, error) {
	out := new(GetDatasetById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getDatasetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetByName(ctx context.Context, in *GetDatasetByName, opts ...grpc.CallOption) (*GetDatasetByName_Response, error) {
	out := new(GetDatasetByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getDatasetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *DeleteDataset, opts ...grpc.CallOption) (*DeleteDataset_Response, error) {
	out := new(DeleteDataset_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasets(ctx context.Context, in *DeleteDatasets, opts ...grpc.CallOption) (*DeleteDatasets_Response, error) {
	out := new(DeleteDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) FindDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*FindDatasets_Response, error) {
	out := new(FindDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/findDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetName(ctx context.Context, in *UpdateDatasetName, opts ...grpc.CallOption) (*UpdateDatasetName_Response, error) {
	out := new(UpdateDatasetName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/updateDatasetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetDescription(ctx context.Context, in *UpdateDatasetDescription, opts ...grpc.CallOption) (*UpdateDatasetDescription_Response, error) {
	out := new(UpdateDatasetDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/updateDatasetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) AddDatasetTags(ctx context.Context, in *AddDatasetTags, opts ...grpc.CallOption) (*AddDatasetTags_Response, error) {
	out := new(AddDatasetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/addDatasetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error) {
	out := new(GetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getDatasetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasetTags(ctx context.Context, in *DeleteDatasetTags, opts ...grpc.CallOption) (*DeleteDatasetTags_Response, error) {
	out := new(DeleteDatasetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDatasetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) AddDatasetAttributes(ctx context.Context, in *AddDatasetAttributes, opts ...grpc.CallOption) (*AddDatasetAttributes_Response, error) {
	out := new(AddDatasetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/addDatasetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetAttributes(ctx context.Context, in *UpdateDatasetAttributes, opts ...grpc.CallOption) (*UpdateDatasetAttributes_Response, error) {
	out := new(UpdateDatasetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/updateDatasetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasetAttributes(ctx context.Context, in *DeleteDatasetAttributes, opts ...grpc.CallOption) (*DeleteDatasetAttributes_Response, error) {
	out := new(DeleteDatasetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/deleteDatasetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetLastExperimentByDatasetId(ctx context.Context, in *LastExperimentByDatasetId, opts ...grpc.CallOption) (*LastExperimentByDatasetId_Response, error) {
	out := new(LastExperimentByDatasetId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getLastExperimentByDatasetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetExperimentRunByDataset(ctx context.Context, in *GetExperimentRunByDataset, opts ...grpc.CallOption) (*GetExperimentRunByDataset_Response, error) {
	out := new(GetExperimentRunByDataset_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetService/getExperimentRunByDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
// All implementations must embed UnimplementedDatasetServiceServer
// for forward compatibility
type DatasetServiceServer interface {
	CreateDataset(context.Context, *CreateDataset) (*CreateDataset_Response, error)
	GetAllDatasets(context.Context, *GetAllDatasets) (*GetAllDatasets_Response, error)
	GetDatasetById(context.Context, *GetDatasetById) (*GetDatasetById_Response, error)
	GetDatasetByName(context.Context, *GetDatasetByName) (*GetDatasetByName_Response, error)
	DeleteDataset(context.Context, *DeleteDataset) (*DeleteDataset_Response, error)
	DeleteDatasets(context.Context, *DeleteDatasets) (*DeleteDatasets_Response, error)
	// queries
	FindDatasets(context.Context, *FindDatasets) (*FindDatasets_Response, error)
	UpdateDatasetName(context.Context, *UpdateDatasetName) (*UpdateDatasetName_Response, error)
	UpdateDatasetDescription(context.Context, *UpdateDatasetDescription) (*UpdateDatasetDescription_Response, error)
	AddDatasetTags(context.Context, *AddDatasetTags) (*AddDatasetTags_Response, error)
	GetDatasetTags(context.Context, *GetTags) (*GetTags_Response, error)
	DeleteDatasetTags(context.Context, *DeleteDatasetTags) (*DeleteDatasetTags_Response, error)
	AddDatasetAttributes(context.Context, *AddDatasetAttributes) (*AddDatasetAttributes_Response, error)
	UpdateDatasetAttributes(context.Context, *UpdateDatasetAttributes) (*UpdateDatasetAttributes_Response, error)
	DeleteDatasetAttributes(context.Context, *DeleteDatasetAttributes) (*DeleteDatasetAttributes_Response, error)
	GetLastExperimentByDatasetId(context.Context, *LastExperimentByDatasetId) (*LastExperimentByDatasetId_Response, error)
	GetExperimentRunByDataset(context.Context, *GetExperimentRunByDataset) (*GetExperimentRunByDataset_Response, error)
	mustEmbedUnimplementedDatasetServiceServer()
}

// UnimplementedDatasetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (UnimplementedDatasetServiceServer) CreateDataset(context.Context, *CreateDataset) (*CreateDataset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) GetAllDatasets(context.Context, *GetAllDatasets) (*GetAllDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDatasets not implemented")
}
func (UnimplementedDatasetServiceServer) GetDatasetById(context.Context, *GetDatasetById) (*GetDatasetById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetById not implemented")
}
func (UnimplementedDatasetServiceServer) GetDatasetByName(context.Context, *GetDatasetByName) (*GetDatasetByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetByName not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *DeleteDataset) (*DeleteDataset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDatasets(context.Context, *DeleteDatasets) (*DeleteDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasets not implemented")
}
func (UnimplementedDatasetServiceServer) FindDatasets(context.Context, *FindDatasets) (*FindDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDatasets not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDatasetName(context.Context, *UpdateDatasetName) (*UpdateDatasetName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetName not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDatasetDescription(context.Context, *UpdateDatasetDescription) (*UpdateDatasetDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetDescription not implemented")
}
func (UnimplementedDatasetServiceServer) AddDatasetTags(context.Context, *AddDatasetTags) (*AddDatasetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetTags not implemented")
}
func (UnimplementedDatasetServiceServer) GetDatasetTags(context.Context, *GetTags) (*GetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetTags not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDatasetTags(context.Context, *DeleteDatasetTags) (*DeleteDatasetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetTags not implemented")
}
func (UnimplementedDatasetServiceServer) AddDatasetAttributes(context.Context, *AddDatasetAttributes) (*AddDatasetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetAttributes not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDatasetAttributes(context.Context, *UpdateDatasetAttributes) (*UpdateDatasetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetAttributes not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDatasetAttributes(context.Context, *DeleteDatasetAttributes) (*DeleteDatasetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetAttributes not implemented")
}
func (UnimplementedDatasetServiceServer) GetLastExperimentByDatasetId(context.Context, *LastExperimentByDatasetId) (*LastExperimentByDatasetId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastExperimentByDatasetId not implemented")
}
func (UnimplementedDatasetServiceServer) GetExperimentRunByDataset(context.Context, *GetExperimentRunByDataset) (*GetExperimentRunByDataset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunByDataset not implemented")
}
func (UnimplementedDatasetServiceServer) mustEmbedUnimplementedDatasetServiceServer() {}

// UnsafeDatasetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetServiceServer will
// result in compilation errors.
type UnsafeDatasetServiceServer interface {
	mustEmbedUnimplementedDatasetServiceServer()
}

func RegisterDatasetServiceServer(s grpc.ServiceRegistrar, srv DatasetServiceServer) {
	s.RegisterService(&DatasetService_ServiceDesc, srv)
}

func _DatasetService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/createDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateDataset(ctx, req.(*CreateDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetAllDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetAllDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/getAllDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetAllDatasets(ctx, req.(*GetAllDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/getDatasetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetById(ctx, req.(*GetDatasetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/getDatasetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetByName(ctx, req.(*GetDatasetByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/deleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*DeleteDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/deleteDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasets(ctx, req.(*DeleteDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_FindDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).FindDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/findDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).FindDatasets(ctx, req.(*FindDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/updateDatasetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetName(ctx, req.(*UpdateDatasetName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/updateDatasetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetDescription(ctx, req.(*UpdateDatasetDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_AddDatasetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).AddDatasetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/addDatasetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).AddDatasetTags(ctx, req.(*AddDatasetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/getDatasetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetTags(ctx, req.(*GetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/deleteDatasetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasetTags(ctx, req.(*DeleteDatasetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_AddDatasetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).AddDatasetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/addDatasetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).AddDatasetAttributes(ctx, req.(*AddDatasetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/updateDatasetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetAttributes(ctx, req.(*UpdateDatasetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/deleteDatasetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasetAttributes(ctx, req.(*DeleteDatasetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetLastExperimentByDatasetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastExperimentByDatasetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetLastExperimentByDatasetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/getLastExperimentByDatasetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetLastExperimentByDatasetId(ctx, req.(*LastExperimentByDatasetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetExperimentRunByDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunByDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetExperimentRunByDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetService/getExperimentRunByDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetExperimentRunByDataset(ctx, req.(*GetExperimentRunByDataset))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetService_ServiceDesc is the grpc.ServiceDesc for DatasetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDataset",
			Handler:    _DatasetService_CreateDataset_Handler,
		},
		{
			MethodName: "getAllDatasets",
			Handler:    _DatasetService_GetAllDatasets_Handler,
		},
		{
			MethodName: "getDatasetById",
			Handler:    _DatasetService_GetDatasetById_Handler,
		},
		{
			MethodName: "getDatasetByName",
			Handler:    _DatasetService_GetDatasetByName_Handler,
		},
		{
			MethodName: "deleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "deleteDatasets",
			Handler:    _DatasetService_DeleteDatasets_Handler,
		},
		{
			MethodName: "findDatasets",
			Handler:    _DatasetService_FindDatasets_Handler,
		},
		{
			MethodName: "updateDatasetName",
			Handler:    _DatasetService_UpdateDatasetName_Handler,
		},
		{
			MethodName: "updateDatasetDescription",
			Handler:    _DatasetService_UpdateDatasetDescription_Handler,
		},
		{
			MethodName: "addDatasetTags",
			Handler:    _DatasetService_AddDatasetTags_Handler,
		},
		{
			MethodName: "getDatasetTags",
			Handler:    _DatasetService_GetDatasetTags_Handler,
		},
		{
			MethodName: "deleteDatasetTags",
			Handler:    _DatasetService_DeleteDatasetTags_Handler,
		},
		{
			MethodName: "addDatasetAttributes",
			Handler:    _DatasetService_AddDatasetAttributes_Handler,
		},
		{
			MethodName: "updateDatasetAttributes",
			Handler:    _DatasetService_UpdateDatasetAttributes_Handler,
		},
		{
			MethodName: "deleteDatasetAttributes",
			Handler:    _DatasetService_DeleteDatasetAttributes_Handler,
		},
		{
			MethodName: "getLastExperimentByDatasetId",
			Handler:    _DatasetService_GetLastExperimentByDatasetId_Handler,
		},
		{
			MethodName: "getExperimentRunByDataset",
			Handler:    _DatasetService_GetExperimentRunByDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/DatasetService.proto",
}
