// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/DatasetVersionService.proto

package modeldb

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	versioning "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb/versioning"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PathLocationTypeEnum_PathLocationType int32

const (
	PathLocationTypeEnum_LOCAL_FILE_SYSTEM   PathLocationTypeEnum_PathLocationType = 0 // default
	PathLocationTypeEnum_NETWORK_FILE_SYSTEM PathLocationTypeEnum_PathLocationType = 1
	PathLocationTypeEnum_HADOOP_FILE_SYSTEM  PathLocationTypeEnum_PathLocationType = 2
	PathLocationTypeEnum_S3_FILE_SYSTEM      PathLocationTypeEnum_PathLocationType = 3
)

// Enum value maps for PathLocationTypeEnum_PathLocationType.
var (
	PathLocationTypeEnum_PathLocationType_name = map[int32]string{
		0: "LOCAL_FILE_SYSTEM",
		1: "NETWORK_FILE_SYSTEM",
		2: "HADOOP_FILE_SYSTEM",
		3: "S3_FILE_SYSTEM",
	}
	PathLocationTypeEnum_PathLocationType_value = map[string]int32{
		"LOCAL_FILE_SYSTEM":   0,
		"NETWORK_FILE_SYSTEM": 1,
		"HADOOP_FILE_SYSTEM":  2,
		"S3_FILE_SYSTEM":      3,
	}
)

func (x PathLocationTypeEnum_PathLocationType) Enum() *PathLocationTypeEnum_PathLocationType {
	p := new(PathLocationTypeEnum_PathLocationType)
	*p = x
	return p
}

func (x PathLocationTypeEnum_PathLocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathLocationTypeEnum_PathLocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_modeldb_DatasetVersionService_proto_enumTypes[0].Descriptor()
}

func (PathLocationTypeEnum_PathLocationType) Type() protoreflect.EnumType {
	return &file_modeldb_DatasetVersionService_proto_enumTypes[0]
}

func (x PathLocationTypeEnum_PathLocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathLocationTypeEnum_PathLocationType.Descriptor instead.
func (PathLocationTypeEnum_PathLocationType) EnumDescriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{4, 0}
}

type DatasetVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //For backend reference
	ParentId                 string                                  `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DatasetId                string                                  `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	TimeLogged               uint64                                  `protobuf:"varint,4,opt,name=time_logged,json=timeLogged,proto3" json:"time_logged,omitempty"`
	Description              string                                  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Tags                     []string                                `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	DatasetVersionVisibility DatasetVisibilityEnum_DatasetVisibility `protobuf:"varint,7,opt,name=dataset_version_visibility,json=datasetVersionVisibility,proto3,enum=ai.verta.modeldb.DatasetVisibilityEnum_DatasetVisibility" json:"dataset_version_visibility,omitempty"`
	DatasetType              DatasetTypeEnum_DatasetType             `protobuf:"varint,8,opt,name=dataset_type,json=datasetType,proto3,enum=ai.verta.modeldb.DatasetTypeEnum_DatasetType" json:"dataset_type,omitempty"` // this acts as a quick check on which type of DataSetInfo to look at for more details.
	Attributes               []*common.KeyValue                      `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Owner                    string                                  `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	Version                  uint64                                  `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to DatasetVersionInfo:
	//	*DatasetVersion_RawDatasetVersionInfo
	//	*DatasetVersion_PathDatasetVersionInfo
	//	*DatasetVersion_QueryDatasetVersionInfo
	DatasetVersionInfo isDatasetVersion_DatasetVersionInfo `protobuf_oneof:"dataset_version_info"`
	TimeUpdated        uint64                              `protobuf:"varint,15,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	DatasetBlob        *versioning.DatasetBlob             `protobuf:"bytes,16,opt,name=dataset_blob,json=datasetBlob,proto3" json:"dataset_blob,omitempty"`
}

func (x *DatasetVersion) Reset() {
	*x = DatasetVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetVersion) ProtoMessage() {}

func (x *DatasetVersion) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetVersion.ProtoReflect.Descriptor instead.
func (*DatasetVersion) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DatasetVersion) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *DatasetVersion) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DatasetVersion) GetTimeLogged() uint64 {
	if x != nil {
		return x.TimeLogged
	}
	return 0
}

func (x *DatasetVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DatasetVersion) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DatasetVersion) GetDatasetVersionVisibility() DatasetVisibilityEnum_DatasetVisibility {
	if x != nil {
		return x.DatasetVersionVisibility
	}
	return DatasetVisibilityEnum_PRIVATE
}

func (x *DatasetVersion) GetDatasetType() DatasetTypeEnum_DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetTypeEnum_RAW
}

func (x *DatasetVersion) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DatasetVersion) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *DatasetVersion) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *DatasetVersion) GetDatasetVersionInfo() isDatasetVersion_DatasetVersionInfo {
	if m != nil {
		return m.DatasetVersionInfo
	}
	return nil
}

func (x *DatasetVersion) GetRawDatasetVersionInfo() *RawDatasetVersionInfo {
	if x, ok := x.GetDatasetVersionInfo().(*DatasetVersion_RawDatasetVersionInfo); ok {
		return x.RawDatasetVersionInfo
	}
	return nil
}

func (x *DatasetVersion) GetPathDatasetVersionInfo() *PathDatasetVersionInfo {
	if x, ok := x.GetDatasetVersionInfo().(*DatasetVersion_PathDatasetVersionInfo); ok {
		return x.PathDatasetVersionInfo
	}
	return nil
}

func (x *DatasetVersion) GetQueryDatasetVersionInfo() *QueryDatasetVersionInfo {
	if x, ok := x.GetDatasetVersionInfo().(*DatasetVersion_QueryDatasetVersionInfo); ok {
		return x.QueryDatasetVersionInfo
	}
	return nil
}

func (x *DatasetVersion) GetTimeUpdated() uint64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

func (x *DatasetVersion) GetDatasetBlob() *versioning.DatasetBlob {
	if x != nil {
		return x.DatasetBlob
	}
	return nil
}

type isDatasetVersion_DatasetVersionInfo interface {
	isDatasetVersion_DatasetVersionInfo()
}

type DatasetVersion_RawDatasetVersionInfo struct {
	RawDatasetVersionInfo *RawDatasetVersionInfo `protobuf:"bytes,12,opt,name=raw_dataset_version_info,json=rawDatasetVersionInfo,proto3,oneof"`
}

type DatasetVersion_PathDatasetVersionInfo struct {
	PathDatasetVersionInfo *PathDatasetVersionInfo `protobuf:"bytes,13,opt,name=path_dataset_version_info,json=pathDatasetVersionInfo,proto3,oneof"`
}

type DatasetVersion_QueryDatasetVersionInfo struct {
	QueryDatasetVersionInfo *QueryDatasetVersionInfo `protobuf:"bytes,14,opt,name=query_dataset_version_info,json=queryDatasetVersionInfo,proto3,oneof"`
}

func (*DatasetVersion_RawDatasetVersionInfo) isDatasetVersion_DatasetVersionInfo() {}

func (*DatasetVersion_PathDatasetVersionInfo) isDatasetVersion_DatasetVersionInfo() {}

func (*DatasetVersion_QueryDatasetVersionInfo) isDatasetVersion_DatasetVersionInfo() {}

type QueryDatasetVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query              string            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	QueryTemplate      string            `protobuf:"bytes,2,opt,name=query_template,json=queryTemplate,proto3" json:"query_template,omitempty"`
	QueryParameters    []*QueryParameter `protobuf:"bytes,3,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	DataSourceUri      string            `protobuf:"bytes,4,opt,name=data_source_uri,json=dataSourceUri,proto3" json:"data_source_uri,omitempty"`
	ExecutionTimestamp uint64            `protobuf:"varint,5,opt,name=execution_timestamp,json=executionTimestamp,proto3" json:"execution_timestamp,omitempty"`
	NumRecords         uint64            `protobuf:"varint,6,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
}

func (x *QueryDatasetVersionInfo) Reset() {
	*x = QueryDatasetVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDatasetVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDatasetVersionInfo) ProtoMessage() {}

func (x *QueryDatasetVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDatasetVersionInfo.ProtoReflect.Descriptor instead.
func (*QueryDatasetVersionInfo) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{1}
}

func (x *QueryDatasetVersionInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryDatasetVersionInfo) GetQueryTemplate() string {
	if x != nil {
		return x.QueryTemplate
	}
	return ""
}

func (x *QueryDatasetVersionInfo) GetQueryParameters() []*QueryParameter {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

func (x *QueryDatasetVersionInfo) GetDataSourceUri() string {
	if x != nil {
		return x.DataSourceUri
	}
	return ""
}

func (x *QueryDatasetVersionInfo) GetExecutionTimestamp() uint64 {
	if x != nil {
		return x.ExecutionTimestamp
	}
	return 0
}

func (x *QueryDatasetVersionInfo) GetNumRecords() uint64 {
	if x != nil {
		return x.NumRecords
	}
	return 0
}

type QueryParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterName string                         `protobuf:"bytes,1,opt,name=parameter_name,json=parameterName,proto3" json:"parameter_name,omitempty"`
	ParameterType common.ValueTypeEnum_ValueType `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,proto3,enum=ai.verta.common.ValueTypeEnum_ValueType" json:"parameter_type,omitempty"`
	Value         *_struct.Value                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QueryParameter) Reset() {
	*x = QueryParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameter) ProtoMessage() {}

func (x *QueryParameter) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameter.ProtoReflect.Descriptor instead.
func (*QueryParameter) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{2}
}

func (x *QueryParameter) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

func (x *QueryParameter) GetParameterType() common.ValueTypeEnum_ValueType {
	if x != nil {
		return x.ParameterType
	}
	return common.ValueTypeEnum_STRING
}

func (x *QueryParameter) GetValue() *_struct.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type RawDatasetVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size       uint64   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Features   []string `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	NumRecords uint64   `protobuf:"varint,3,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
	ObjectPath string   `protobuf:"bytes,4,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	Checksum   string   `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *RawDatasetVersionInfo) Reset() {
	*x = RawDatasetVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDatasetVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDatasetVersionInfo) ProtoMessage() {}

func (x *RawDatasetVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDatasetVersionInfo.ProtoReflect.Descriptor instead.
func (*RawDatasetVersionInfo) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{3}
}

func (x *RawDatasetVersionInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RawDatasetVersionInfo) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *RawDatasetVersionInfo) GetNumRecords() uint64 {
	if x != nil {
		return x.NumRecords
	}
	return 0
}

func (x *RawDatasetVersionInfo) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *RawDatasetVersionInfo) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

type PathLocationTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PathLocationTypeEnum) Reset() {
	*x = PathLocationTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathLocationTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathLocationTypeEnum) ProtoMessage() {}

func (x *PathLocationTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathLocationTypeEnum.ProtoReflect.Descriptor instead.
func (*PathLocationTypeEnum) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{4}
}

type PathDatasetVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationType     PathLocationTypeEnum_PathLocationType `protobuf:"varint,1,opt,name=location_type,json=locationType,proto3,enum=ai.verta.modeldb.PathLocationTypeEnum_PathLocationType" json:"location_type,omitempty"`
	Size             uint64                                `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	DatasetPartInfos []*DatasetPartInfo                    `protobuf:"bytes,3,rep,name=dataset_part_infos,json=datasetPartInfos,proto3" json:"dataset_part_infos,omitempty"`
	BasePath         string                                `protobuf:"bytes,4,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
}

func (x *PathDatasetVersionInfo) Reset() {
	*x = PathDatasetVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathDatasetVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathDatasetVersionInfo) ProtoMessage() {}

func (x *PathDatasetVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathDatasetVersionInfo.ProtoReflect.Descriptor instead.
func (*PathDatasetVersionInfo) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{5}
}

func (x *PathDatasetVersionInfo) GetLocationType() PathLocationTypeEnum_PathLocationType {
	if x != nil {
		return x.LocationType
	}
	return PathLocationTypeEnum_LOCAL_FILE_SYSTEM
}

func (x *PathDatasetVersionInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PathDatasetVersionInfo) GetDatasetPartInfos() []*DatasetPartInfo {
	if x != nil {
		return x.DatasetPartInfos
	}
	return nil
}

func (x *PathDatasetVersionInfo) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

type DatasetPartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                 string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Size                 uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Checksum             string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	LastModifiedAtSource uint64 `protobuf:"varint,4,opt,name=last_modified_at_source,json=lastModifiedAtSource,proto3" json:"last_modified_at_source,omitempty"`
}

func (x *DatasetPartInfo) Reset() {
	*x = DatasetPartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetPartInfo) ProtoMessage() {}

func (x *DatasetPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetPartInfo.ProtoReflect.Descriptor instead.
func (*DatasetPartInfo) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{6}
}

func (x *DatasetPartInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DatasetPartInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DatasetPartInfo) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *DatasetPartInfo) GetLastModifiedAtSource() uint64 {
	if x != nil {
		return x.LastModifiedAtSource
	}
	return 0
}

type CreateDatasetVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId                string                                  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	ParentId                 string                                  `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Description              string                                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Tags                     []string                                `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	DatasetVersionVisibility DatasetVisibilityEnum_DatasetVisibility `protobuf:"varint,6,opt,name=dataset_version_visibility,json=datasetVersionVisibility,proto3,enum=ai.verta.modeldb.DatasetVisibilityEnum_DatasetVisibility" json:"dataset_version_visibility,omitempty"`
	DatasetType              DatasetTypeEnum_DatasetType             `protobuf:"varint,7,opt,name=dataset_type,json=datasetType,proto3,enum=ai.verta.modeldb.DatasetTypeEnum_DatasetType" json:"dataset_type,omitempty"` // this acts as a quick check on which type of DataSetInfo to look at for more details.
	Attributes               []*common.KeyValue                      `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Version                  uint64                                  `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to DatasetVersionInfo:
	//	*CreateDatasetVersion_RawDatasetVersionInfo
	//	*CreateDatasetVersion_PathDatasetVersionInfo
	//	*CreateDatasetVersion_QueryDatasetVersionInfo
	DatasetVersionInfo isCreateDatasetVersion_DatasetVersionInfo `protobuf_oneof:"dataset_version_info"`
	TimeCreated        uint64                                    `protobuf:"varint,13,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	DatasetBlob        *versioning.DatasetBlob                   `protobuf:"bytes,14,opt,name=dataset_blob,json=datasetBlob,proto3" json:"dataset_blob,omitempty"`
}

func (x *CreateDatasetVersion) Reset() {
	*x = CreateDatasetVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatasetVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatasetVersion) ProtoMessage() {}

func (x *CreateDatasetVersion) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatasetVersion.ProtoReflect.Descriptor instead.
func (*CreateDatasetVersion) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDatasetVersion) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CreateDatasetVersion) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateDatasetVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDatasetVersion) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateDatasetVersion) GetDatasetVersionVisibility() DatasetVisibilityEnum_DatasetVisibility {
	if x != nil {
		return x.DatasetVersionVisibility
	}
	return DatasetVisibilityEnum_PRIVATE
}

func (x *CreateDatasetVersion) GetDatasetType() DatasetTypeEnum_DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetTypeEnum_RAW
}

func (x *CreateDatasetVersion) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateDatasetVersion) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *CreateDatasetVersion) GetDatasetVersionInfo() isCreateDatasetVersion_DatasetVersionInfo {
	if m != nil {
		return m.DatasetVersionInfo
	}
	return nil
}

func (x *CreateDatasetVersion) GetRawDatasetVersionInfo() *RawDatasetVersionInfo {
	if x, ok := x.GetDatasetVersionInfo().(*CreateDatasetVersion_RawDatasetVersionInfo); ok {
		return x.RawDatasetVersionInfo
	}
	return nil
}

func (x *CreateDatasetVersion) GetPathDatasetVersionInfo() *PathDatasetVersionInfo {
	if x, ok := x.GetDatasetVersionInfo().(*CreateDatasetVersion_PathDatasetVersionInfo); ok {
		return x.PathDatasetVersionInfo
	}
	return nil
}

func (x *CreateDatasetVersion) GetQueryDatasetVersionInfo() *QueryDatasetVersionInfo {
	if x, ok := x.GetDatasetVersionInfo().(*CreateDatasetVersion_QueryDatasetVersionInfo); ok {
		return x.QueryDatasetVersionInfo
	}
	return nil
}

func (x *CreateDatasetVersion) GetTimeCreated() uint64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *CreateDatasetVersion) GetDatasetBlob() *versioning.DatasetBlob {
	if x != nil {
		return x.DatasetBlob
	}
	return nil
}

type isCreateDatasetVersion_DatasetVersionInfo interface {
	isCreateDatasetVersion_DatasetVersionInfo()
}

type CreateDatasetVersion_RawDatasetVersionInfo struct {
	RawDatasetVersionInfo *RawDatasetVersionInfo `protobuf:"bytes,10,opt,name=raw_dataset_version_info,json=rawDatasetVersionInfo,proto3,oneof"`
}

type CreateDatasetVersion_PathDatasetVersionInfo struct {
	PathDatasetVersionInfo *PathDatasetVersionInfo `protobuf:"bytes,11,opt,name=path_dataset_version_info,json=pathDatasetVersionInfo,proto3,oneof"`
}

type CreateDatasetVersion_QueryDatasetVersionInfo struct {
	QueryDatasetVersionInfo *QueryDatasetVersionInfo `protobuf:"bytes,12,opt,name=query_dataset_version_info,json=queryDatasetVersionInfo,proto3,oneof"`
}

func (*CreateDatasetVersion_RawDatasetVersionInfo) isCreateDatasetVersion_DatasetVersionInfo() {}

func (*CreateDatasetVersion_PathDatasetVersionInfo) isCreateDatasetVersion_DatasetVersionInfo() {}

func (*CreateDatasetVersion_QueryDatasetVersionInfo) isCreateDatasetVersion_DatasetVersionInfo() {}

type GetAllDatasetVersionsByDatasetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	//For pagination
	PageNumber int32  `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32  `protobuf:"varint,7,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending  bool   `protobuf:"varint,9,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string `protobuf:"bytes,10,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *GetAllDatasetVersionsByDatasetId) Reset() {
	*x = GetAllDatasetVersionsByDatasetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDatasetVersionsByDatasetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDatasetVersionsByDatasetId) ProtoMessage() {}

func (x *GetAllDatasetVersionsByDatasetId) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDatasetVersionsByDatasetId.ProtoReflect.Descriptor instead.
func (*GetAllDatasetVersionsByDatasetId) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllDatasetVersionsByDatasetId) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetAllDatasetVersionsByDatasetId) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetAllDatasetVersionsByDatasetId) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *GetAllDatasetVersionsByDatasetId) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetAllDatasetVersionsByDatasetId) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type DeleteDatasetVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *DeleteDatasetVersion) Reset() {
	*x = DeleteDatasetVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersion) ProtoMessage() {}

func (x *DeleteDatasetVersion) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersion.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersion) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDatasetVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDatasetVersion) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type DeleteDatasetVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	DatasetId string   `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *DeleteDatasetVersions) Reset() {
	*x = DeleteDatasetVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersions) ProtoMessage() {}

func (x *DeleteDatasetVersions) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersions.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersions) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDatasetVersions) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteDatasetVersions) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type GetLatestDatasetVersionByDatasetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Ascending bool   `protobuf:"varint,9,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey   string `protobuf:"bytes,10,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *GetLatestDatasetVersionByDatasetId) Reset() {
	*x = GetLatestDatasetVersionByDatasetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestDatasetVersionByDatasetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDatasetVersionByDatasetId) ProtoMessage() {}

func (x *GetLatestDatasetVersionByDatasetId) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDatasetVersionByDatasetId.ProtoReflect.Descriptor instead.
func (*GetLatestDatasetVersionByDatasetId) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{11}
}

func (x *GetLatestDatasetVersionByDatasetId) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetLatestDatasetVersionByDatasetId) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetLatestDatasetVersionByDatasetId) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type FindDatasetVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId         string                  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetVersionIds []string                `protobuf:"bytes,2,rep,name=dataset_version_ids,json=datasetVersionIds,proto3" json:"dataset_version_ids,omitempty"`
	Predicates        []*common.KeyValueQuery `protobuf:"bytes,3,rep,name=predicates,proto3" json:"predicates,omitempty"`
	IdsOnly           bool                    `protobuf:"varint,4,opt,name=ids_only,json=idsOnly,proto3" json:"ids_only,omitempty"` // whether to return full experiment runs or ids only
	//For pagination
	PageNumber    int32  `protobuf:"varint,5,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit     int32  `protobuf:"varint,6,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending     bool   `protobuf:"varint,7,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey       string `protobuf:"bytes,8,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	WorkspaceName string `protobuf:"bytes,9,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *FindDatasetVersions) Reset() {
	*x = FindDatasetVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDatasetVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDatasetVersions) ProtoMessage() {}

func (x *FindDatasetVersions) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDatasetVersions.ProtoReflect.Descriptor instead.
func (*FindDatasetVersions) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{12}
}

func (x *FindDatasetVersions) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *FindDatasetVersions) GetDatasetVersionIds() []string {
	if x != nil {
		return x.DatasetVersionIds
	}
	return nil
}

func (x *FindDatasetVersions) GetPredicates() []*common.KeyValueQuery {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *FindDatasetVersions) GetIdsOnly() bool {
	if x != nil {
		return x.IdsOnly
	}
	return false
}

func (x *FindDatasetVersions) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindDatasetVersions) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *FindDatasetVersions) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *FindDatasetVersions) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *FindDatasetVersions) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type UpdateDatasetVersionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DatasetId   string `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *UpdateDatasetVersionDescription) Reset() {
	*x = UpdateDatasetVersionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetVersionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetVersionDescription) ProtoMessage() {}

func (x *UpdateDatasetVersionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetVersionDescription.ProtoReflect.Descriptor instead.
func (*UpdateDatasetVersionDescription) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateDatasetVersionDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDatasetVersionDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDatasetVersionDescription) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type AddDatasetVersionTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags      []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	DatasetId string   `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *AddDatasetVersionTags) Reset() {
	*x = AddDatasetVersionTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetVersionTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetVersionTags) ProtoMessage() {}

func (x *AddDatasetVersionTags) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetVersionTags.ProtoReflect.Descriptor instead.
func (*AddDatasetVersionTags) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{14}
}

func (x *AddDatasetVersionTags) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddDatasetVersionTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddDatasetVersionTags) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type DeleteDatasetVersionTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags      []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	DeleteAll bool     `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
	DatasetId string   `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *DeleteDatasetVersionTags) Reset() {
	*x = DeleteDatasetVersionTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersionTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersionTags) ProtoMessage() {}

func (x *DeleteDatasetVersionTags) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersionTags.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersionTags) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteDatasetVersionTags) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDatasetVersionTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeleteDatasetVersionTags) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteDatasetVersionTags) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type AddDatasetVersionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes []*common.KeyValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	DatasetId  string             `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *AddDatasetVersionAttributes) Reset() {
	*x = AddDatasetVersionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetVersionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetVersionAttributes) ProtoMessage() {}

func (x *AddDatasetVersionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetVersionAttributes.ProtoReflect.Descriptor instead.
func (*AddDatasetVersionAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{16}
}

func (x *AddDatasetVersionAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddDatasetVersionAttributes) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AddDatasetVersionAttributes) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type UpdateDatasetVersionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attribute *common.KeyValue `protobuf:"bytes,2,opt,name=attribute,proto3" json:"attribute,omitempty"`
	DatasetId string           `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *UpdateDatasetVersionAttributes) Reset() {
	*x = UpdateDatasetVersionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetVersionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetVersionAttributes) ProtoMessage() {}

func (x *UpdateDatasetVersionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetVersionAttributes.ProtoReflect.Descriptor instead.
func (*UpdateDatasetVersionAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDatasetVersionAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDatasetVersionAttributes) GetAttribute() *common.KeyValue {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *UpdateDatasetVersionAttributes) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type GetDatasetVersionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributeKeys []string `protobuf:"bytes,2,rep,name=attribute_keys,json=attributeKeys,proto3" json:"attribute_keys,omitempty"`
	GetAll        bool     `protobuf:"varint,3,opt,name=get_all,json=getAll,proto3" json:"get_all,omitempty"`
	DatasetId     string   `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *GetDatasetVersionAttributes) Reset() {
	*x = GetDatasetVersionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetVersionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetVersionAttributes) ProtoMessage() {}

func (x *GetDatasetVersionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetVersionAttributes.ProtoReflect.Descriptor instead.
func (*GetDatasetVersionAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{18}
}

func (x *GetDatasetVersionAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDatasetVersionAttributes) GetAttributeKeys() []string {
	if x != nil {
		return x.AttributeKeys
	}
	return nil
}

func (x *GetDatasetVersionAttributes) GetGetAll() bool {
	if x != nil {
		return x.GetAll
	}
	return false
}

func (x *GetDatasetVersionAttributes) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type DeleteDatasetVersionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributeKeys []string `protobuf:"bytes,2,rep,name=attribute_keys,json=attributeKeys,proto3" json:"attribute_keys,omitempty"`
	DeleteAll     bool     `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
	DatasetId     string   `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *DeleteDatasetVersionAttributes) Reset() {
	*x = DeleteDatasetVersionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersionAttributes) ProtoMessage() {}

func (x *DeleteDatasetVersionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersionAttributes.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersionAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteDatasetVersionAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDatasetVersionAttributes) GetAttributeKeys() []string {
	if x != nil {
		return x.AttributeKeys
	}
	return nil
}

func (x *DeleteDatasetVersionAttributes) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteDatasetVersionAttributes) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type SetDatasetVersionVisibilty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DatasetVersionVisibility DatasetVisibilityEnum_DatasetVisibility `protobuf:"varint,2,opt,name=dataset_version_visibility,json=datasetVersionVisibility,proto3,enum=ai.verta.modeldb.DatasetVisibilityEnum_DatasetVisibility" json:"dataset_version_visibility,omitempty"`
}

func (x *SetDatasetVersionVisibilty) Reset() {
	*x = SetDatasetVersionVisibilty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetVersionVisibilty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetVersionVisibilty) ProtoMessage() {}

func (x *SetDatasetVersionVisibilty) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetVersionVisibilty.ProtoReflect.Descriptor instead.
func (*SetDatasetVersionVisibilty) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{20}
}

func (x *SetDatasetVersionVisibilty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetDatasetVersionVisibilty) GetDatasetVersionVisibility() DatasetVisibilityEnum_DatasetVisibility {
	if x != nil {
		return x.DatasetVersionVisibility
	}
	return DatasetVisibilityEnum_PRIVATE
}

type GetUrlForDatasetBlobVersioned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId                    string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetVersionId             string `protobuf:"bytes,2,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	PathDatasetComponentBlobPath string `protobuf:"bytes,3,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	Method                       string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`                            //This is either GET or PUT
	PartNumber                   uint64 `protobuf:"varint,5,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"` // if 0, don’t do multipart
	WorkspaceName                string `protobuf:"bytes,6,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *GetUrlForDatasetBlobVersioned) Reset() {
	*x = GetUrlForDatasetBlobVersioned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUrlForDatasetBlobVersioned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUrlForDatasetBlobVersioned) ProtoMessage() {}

func (x *GetUrlForDatasetBlobVersioned) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUrlForDatasetBlobVersioned.ProtoReflect.Descriptor instead.
func (*GetUrlForDatasetBlobVersioned) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{21}
}

func (x *GetUrlForDatasetBlobVersioned) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetUrlForDatasetBlobVersioned) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *GetUrlForDatasetBlobVersioned) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

func (x *GetUrlForDatasetBlobVersioned) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *GetUrlForDatasetBlobVersioned) GetPartNumber() uint64 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *GetUrlForDatasetBlobVersioned) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type CommitVersionedDatasetBlobArtifactPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId                    string               `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetVersionId             string               `protobuf:"bytes,2,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	PathDatasetComponentBlobPath string               `protobuf:"bytes,3,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
	ArtifactPart                 *common.ArtifactPart `protobuf:"bytes,4,opt,name=artifact_part,json=artifactPart,proto3" json:"artifact_part,omitempty"`
}

func (x *CommitVersionedDatasetBlobArtifactPart) Reset() {
	*x = CommitVersionedDatasetBlobArtifactPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitVersionedDatasetBlobArtifactPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitVersionedDatasetBlobArtifactPart) ProtoMessage() {}

func (x *CommitVersionedDatasetBlobArtifactPart) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitVersionedDatasetBlobArtifactPart.ProtoReflect.Descriptor instead.
func (*CommitVersionedDatasetBlobArtifactPart) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{22}
}

func (x *CommitVersionedDatasetBlobArtifactPart) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CommitVersionedDatasetBlobArtifactPart) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *CommitVersionedDatasetBlobArtifactPart) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

func (x *CommitVersionedDatasetBlobArtifactPart) GetArtifactPart() *common.ArtifactPart {
	if x != nil {
		return x.ArtifactPart
	}
	return nil
}

type GetCommittedVersionedDatasetBlobArtifactParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId                    string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetVersionId             string `protobuf:"bytes,2,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	PathDatasetComponentBlobPath string `protobuf:"bytes,3,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts) Reset() {
	*x = GetCommittedVersionedDatasetBlobArtifactParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommittedVersionedDatasetBlobArtifactParts) ProtoMessage() {}

func (x *GetCommittedVersionedDatasetBlobArtifactParts) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommittedVersionedDatasetBlobArtifactParts.ProtoReflect.Descriptor instead.
func (*GetCommittedVersionedDatasetBlobArtifactParts) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{23}
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

type CommitMultipartVersionedDatasetBlobArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId                    string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetVersionId             string `protobuf:"bytes,2,opt,name=dataset_version_id,json=datasetVersionId,proto3" json:"dataset_version_id,omitempty"`
	PathDatasetComponentBlobPath string `protobuf:"bytes,3,opt,name=path_dataset_component_blob_path,json=pathDatasetComponentBlobPath,proto3" json:"path_dataset_component_blob_path,omitempty"`
}

func (x *CommitMultipartVersionedDatasetBlobArtifact) Reset() {
	*x = CommitMultipartVersionedDatasetBlobArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMultipartVersionedDatasetBlobArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMultipartVersionedDatasetBlobArtifact) ProtoMessage() {}

func (x *CommitMultipartVersionedDatasetBlobArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMultipartVersionedDatasetBlobArtifact.ProtoReflect.Descriptor instead.
func (*CommitMultipartVersionedDatasetBlobArtifact) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{24}
}

func (x *CommitMultipartVersionedDatasetBlobArtifact) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CommitMultipartVersionedDatasetBlobArtifact) GetDatasetVersionId() string {
	if x != nil {
		return x.DatasetVersionId
	}
	return ""
}

func (x *CommitMultipartVersionedDatasetBlobArtifact) GetPathDatasetComponentBlobPath() string {
	if x != nil {
		return x.PathDatasetComponentBlobPath
	}
	return ""
}

type GetDatasetVersionById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDatasetVersionById) Reset() {
	*x = GetDatasetVersionById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetVersionById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetVersionById) ProtoMessage() {}

func (x *GetDatasetVersionById) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetVersionById.ProtoReflect.Descriptor instead.
func (*GetDatasetVersionById) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{25}
}

func (x *GetDatasetVersionById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateDatasetVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *CreateDatasetVersion_Response) Reset() {
	*x = CreateDatasetVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatasetVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatasetVersion_Response) ProtoMessage() {}

func (x *CreateDatasetVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatasetVersion_Response.ProtoReflect.Descriptor instead.
func (*CreateDatasetVersion_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CreateDatasetVersion_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type GetAllDatasetVersionsByDatasetId_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersions []*DatasetVersion `protobuf:"bytes,1,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
	TotalRecords    uint64            `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetAllDatasetVersionsByDatasetId_Response) Reset() {
	*x = GetAllDatasetVersionsByDatasetId_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDatasetVersionsByDatasetId_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDatasetVersionsByDatasetId_Response) ProtoMessage() {}

func (x *GetAllDatasetVersionsByDatasetId_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDatasetVersionsByDatasetId_Response.ProtoReflect.Descriptor instead.
func (*GetAllDatasetVersionsByDatasetId_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetAllDatasetVersionsByDatasetId_Response) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

func (x *GetAllDatasetVersionsByDatasetId_Response) GetTotalRecords() uint64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type DeleteDatasetVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDatasetVersion_Response) Reset() {
	*x = DeleteDatasetVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersion_Response) ProtoMessage() {}

func (x *DeleteDatasetVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersion_Response.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersion_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{9, 0}
}

type DeleteDatasetVersions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDatasetVersions_Response) Reset() {
	*x = DeleteDatasetVersions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersions_Response) ProtoMessage() {}

func (x *DeleteDatasetVersions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersions_Response.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersions_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{10, 0}
}

type GetLatestDatasetVersionByDatasetId_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *GetLatestDatasetVersionByDatasetId_Response) Reset() {
	*x = GetLatestDatasetVersionByDatasetId_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestDatasetVersionByDatasetId_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDatasetVersionByDatasetId_Response) ProtoMessage() {}

func (x *GetLatestDatasetVersionByDatasetId_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDatasetVersionByDatasetId_Response.ProtoReflect.Descriptor instead.
func (*GetLatestDatasetVersionByDatasetId_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetLatestDatasetVersionByDatasetId_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type FindDatasetVersions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersions []*DatasetVersion `protobuf:"bytes,1,rep,name=dataset_versions,json=datasetVersions,proto3" json:"dataset_versions,omitempty"`
	TotalRecords    int64             `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindDatasetVersions_Response) Reset() {
	*x = FindDatasetVersions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDatasetVersions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDatasetVersions_Response) ProtoMessage() {}

func (x *FindDatasetVersions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDatasetVersions_Response.ProtoReflect.Descriptor instead.
func (*FindDatasetVersions_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{12, 0}
}

func (x *FindDatasetVersions_Response) GetDatasetVersions() []*DatasetVersion {
	if x != nil {
		return x.DatasetVersions
	}
	return nil
}

func (x *FindDatasetVersions_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type UpdateDatasetVersionDescription_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *UpdateDatasetVersionDescription_Response) Reset() {
	*x = UpdateDatasetVersionDescription_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetVersionDescription_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetVersionDescription_Response) ProtoMessage() {}

func (x *UpdateDatasetVersionDescription_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetVersionDescription_Response.ProtoReflect.Descriptor instead.
func (*UpdateDatasetVersionDescription_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{13, 0}
}

func (x *UpdateDatasetVersionDescription_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type AddDatasetVersionTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *AddDatasetVersionTags_Response) Reset() {
	*x = AddDatasetVersionTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetVersionTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetVersionTags_Response) ProtoMessage() {}

func (x *AddDatasetVersionTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetVersionTags_Response.ProtoReflect.Descriptor instead.
func (*AddDatasetVersionTags_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{14, 0}
}

func (x *AddDatasetVersionTags_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type DeleteDatasetVersionTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *DeleteDatasetVersionTags_Response) Reset() {
	*x = DeleteDatasetVersionTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersionTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersionTags_Response) ProtoMessage() {}

func (x *DeleteDatasetVersionTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersionTags_Response.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersionTags_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{15, 0}
}

func (x *DeleteDatasetVersionTags_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type AddDatasetVersionAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *AddDatasetVersionAttributes_Response) Reset() {
	*x = AddDatasetVersionAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatasetVersionAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatasetVersionAttributes_Response) ProtoMessage() {}

func (x *AddDatasetVersionAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatasetVersionAttributes_Response.ProtoReflect.Descriptor instead.
func (*AddDatasetVersionAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{16, 0}
}

func (x *AddDatasetVersionAttributes_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type UpdateDatasetVersionAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *UpdateDatasetVersionAttributes_Response) Reset() {
	*x = UpdateDatasetVersionAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetVersionAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetVersionAttributes_Response) ProtoMessage() {}

func (x *UpdateDatasetVersionAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetVersionAttributes_Response.ProtoReflect.Descriptor instead.
func (*UpdateDatasetVersionAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{17, 0}
}

func (x *UpdateDatasetVersionAttributes_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type GetDatasetVersionAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*common.KeyValue `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *GetDatasetVersionAttributes_Response) Reset() {
	*x = GetDatasetVersionAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetVersionAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetVersionAttributes_Response) ProtoMessage() {}

func (x *GetDatasetVersionAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetVersionAttributes_Response.ProtoReflect.Descriptor instead.
func (*GetDatasetVersionAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetDatasetVersionAttributes_Response) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DeleteDatasetVersionAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *DeleteDatasetVersionAttributes_Response) Reset() {
	*x = DeleteDatasetVersionAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetVersionAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetVersionAttributes_Response) ProtoMessage() {}

func (x *DeleteDatasetVersionAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetVersionAttributes_Response.ProtoReflect.Descriptor instead.
func (*DeleteDatasetVersionAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{19, 0}
}

func (x *DeleteDatasetVersionAttributes_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type SetDatasetVersionVisibilty_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *SetDatasetVersionVisibilty_Response) Reset() {
	*x = SetDatasetVersionVisibilty_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetVersionVisibilty_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetVersionVisibilty_Response) ProtoMessage() {}

func (x *SetDatasetVersionVisibilty_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetVersionVisibilty_Response.ProtoReflect.Descriptor instead.
func (*SetDatasetVersionVisibilty_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{20, 0}
}

func (x *SetDatasetVersionVisibilty_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

type GetUrlForDatasetBlobVersioned_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url               string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	MultipartUploadOk bool   `protobuf:"varint,3,opt,name=multipart_upload_ok,json=multipartUploadOk,proto3" json:"multipart_upload_ok,omitempty"` // for backcompat: new Client, old Backend
}

func (x *GetUrlForDatasetBlobVersioned_Response) Reset() {
	*x = GetUrlForDatasetBlobVersioned_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUrlForDatasetBlobVersioned_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUrlForDatasetBlobVersioned_Response) ProtoMessage() {}

func (x *GetUrlForDatasetBlobVersioned_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUrlForDatasetBlobVersioned_Response.ProtoReflect.Descriptor instead.
func (*GetUrlForDatasetBlobVersioned_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{21, 0}
}

func (x *GetUrlForDatasetBlobVersioned_Response) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetUrlForDatasetBlobVersioned_Response) GetMultipartUploadOk() bool {
	if x != nil {
		return x.MultipartUploadOk
	}
	return false
}

type CommitVersionedDatasetBlobArtifactPart_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitVersionedDatasetBlobArtifactPart_Response) Reset() {
	*x = CommitVersionedDatasetBlobArtifactPart_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitVersionedDatasetBlobArtifactPart_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitVersionedDatasetBlobArtifactPart_Response) ProtoMessage() {}

func (x *CommitVersionedDatasetBlobArtifactPart_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitVersionedDatasetBlobArtifactPart_Response.ProtoReflect.Descriptor instead.
func (*CommitVersionedDatasetBlobArtifactPart_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{22, 0}
}

type GetCommittedVersionedDatasetBlobArtifactParts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactParts []*common.ArtifactPart `protobuf:"bytes,1,rep,name=artifact_parts,json=artifactParts,proto3" json:"artifact_parts,omitempty"`
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts_Response) Reset() {
	*x = GetCommittedVersionedDatasetBlobArtifactParts_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommittedVersionedDatasetBlobArtifactParts_Response) ProtoMessage() {}

func (x *GetCommittedVersionedDatasetBlobArtifactParts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommittedVersionedDatasetBlobArtifactParts_Response.ProtoReflect.Descriptor instead.
func (*GetCommittedVersionedDatasetBlobArtifactParts_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{23, 0}
}

func (x *GetCommittedVersionedDatasetBlobArtifactParts_Response) GetArtifactParts() []*common.ArtifactPart {
	if x != nil {
		return x.ArtifactParts
	}
	return nil
}

type CommitMultipartVersionedDatasetBlobArtifact_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitMultipartVersionedDatasetBlobArtifact_Response) Reset() {
	*x = CommitMultipartVersionedDatasetBlobArtifact_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMultipartVersionedDatasetBlobArtifact_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMultipartVersionedDatasetBlobArtifact_Response) ProtoMessage() {}

func (x *CommitMultipartVersionedDatasetBlobArtifact_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMultipartVersionedDatasetBlobArtifact_Response.ProtoReflect.Descriptor instead.
func (*CommitMultipartVersionedDatasetBlobArtifact_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{24, 0}
}

type GetDatasetVersionById_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
}

func (x *GetDatasetVersionById_Response) Reset() {
	*x = GetDatasetVersionById_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_DatasetVersionService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetVersionById_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetVersionById_Response) ProtoMessage() {}

func (x *GetDatasetVersionById_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_DatasetVersionService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetVersionById_Response.ProtoReflect.Descriptor instead.
func (*GetDatasetVersionById_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_DatasetVersionService_proto_rawDescGZIP(), []int{25, 0}
}

func (x *GetDatasetVersionById_Response) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

var File_modeldb_DatasetVersionService_proto protoreflect.FileDescriptor

var file_modeldb_DatasetVersionService_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa6, 0x07, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x77, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x50,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x18, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x65, 0x0a, 0x19, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16,
	0x70, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x42, 0x16, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x50, 0x61,
	0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x22, 0x6e, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x41, 0x44, 0x4f, 0x4f, 0x50,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x33, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x10, 0x03, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x4f, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8c, 0x01,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xbc, 0x07, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x77, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x50, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x19, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x68, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x1a, 0x55, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb8, 0x02, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x7c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x0a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd3, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x55,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x03, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x7c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x55, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x55,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x1a, 0x55, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x1b,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x55, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x01, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x55, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd3,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x45, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x55, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x77, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x55, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x61, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4c, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6b, 0x22, 0x8d, 0x02, 0x0a, 0x26, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x0c, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x50,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x22, 0xce, 0x01, 0x0a, 0x2b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x55, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0xb0, 0x1f, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x14,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0xd1, 0x01, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x3b, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0xa4,
	0x01, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xd9, 0x01, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x3d, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0xa0, 0x01, 0x0a,
	0x13, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2e, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xd0, 0x01, 0x0a, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb4, 0x01,
	0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x2a, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc0, 0x01, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xcc, 0x01, 0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x39, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x39, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x32,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x74, 0x79, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x74,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x03, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x55, 0x72,
	0x6c, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x72, 0x6c, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x1a, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x84, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xfd, 0x01, 0x22, 0x86, 0x01,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x6f, 0x22, 0x6a, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c,
	0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xec, 0x01, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x1a,
	0x41, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3a, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x02, 0x0a, 0x2d, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x1a, 0x48, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x12, 0x80, 0x02, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x1a, 0x46, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44,
	0x22, 0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x3a, 0x01, 0x2a, 0x42, 0x42, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modeldb_DatasetVersionService_proto_rawDescOnce sync.Once
	file_modeldb_DatasetVersionService_proto_rawDescData = file_modeldb_DatasetVersionService_proto_rawDesc
)

func file_modeldb_DatasetVersionService_proto_rawDescGZIP() []byte {
	file_modeldb_DatasetVersionService_proto_rawDescOnce.Do(func() {
		file_modeldb_DatasetVersionService_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_DatasetVersionService_proto_rawDescData)
	})
	return file_modeldb_DatasetVersionService_proto_rawDescData
}

var file_modeldb_DatasetVersionService_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_modeldb_DatasetVersionService_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_modeldb_DatasetVersionService_proto_goTypes = []interface{}{
	(PathLocationTypeEnum_PathLocationType)(0),                     // 0: ai.verta.modeldb.PathLocationTypeEnum.PathLocationType
	(*DatasetVersion)(nil),                                         // 1: ai.verta.modeldb.DatasetVersion
	(*QueryDatasetVersionInfo)(nil),                                // 2: ai.verta.modeldb.QueryDatasetVersionInfo
	(*QueryParameter)(nil),                                         // 3: ai.verta.modeldb.QueryParameter
	(*RawDatasetVersionInfo)(nil),                                  // 4: ai.verta.modeldb.RawDatasetVersionInfo
	(*PathLocationTypeEnum)(nil),                                   // 5: ai.verta.modeldb.PathLocationTypeEnum
	(*PathDatasetVersionInfo)(nil),                                 // 6: ai.verta.modeldb.PathDatasetVersionInfo
	(*DatasetPartInfo)(nil),                                        // 7: ai.verta.modeldb.DatasetPartInfo
	(*CreateDatasetVersion)(nil),                                   // 8: ai.verta.modeldb.CreateDatasetVersion
	(*GetAllDatasetVersionsByDatasetId)(nil),                       // 9: ai.verta.modeldb.GetAllDatasetVersionsByDatasetId
	(*DeleteDatasetVersion)(nil),                                   // 10: ai.verta.modeldb.DeleteDatasetVersion
	(*DeleteDatasetVersions)(nil),                                  // 11: ai.verta.modeldb.DeleteDatasetVersions
	(*GetLatestDatasetVersionByDatasetId)(nil),                     // 12: ai.verta.modeldb.GetLatestDatasetVersionByDatasetId
	(*FindDatasetVersions)(nil),                                    // 13: ai.verta.modeldb.FindDatasetVersions
	(*UpdateDatasetVersionDescription)(nil),                        // 14: ai.verta.modeldb.UpdateDatasetVersionDescription
	(*AddDatasetVersionTags)(nil),                                  // 15: ai.verta.modeldb.AddDatasetVersionTags
	(*DeleteDatasetVersionTags)(nil),                               // 16: ai.verta.modeldb.DeleteDatasetVersionTags
	(*AddDatasetVersionAttributes)(nil),                            // 17: ai.verta.modeldb.AddDatasetVersionAttributes
	(*UpdateDatasetVersionAttributes)(nil),                         // 18: ai.verta.modeldb.UpdateDatasetVersionAttributes
	(*GetDatasetVersionAttributes)(nil),                            // 19: ai.verta.modeldb.GetDatasetVersionAttributes
	(*DeleteDatasetVersionAttributes)(nil),                         // 20: ai.verta.modeldb.DeleteDatasetVersionAttributes
	(*SetDatasetVersionVisibilty)(nil),                             // 21: ai.verta.modeldb.SetDatasetVersionVisibilty
	(*GetUrlForDatasetBlobVersioned)(nil),                          // 22: ai.verta.modeldb.GetUrlForDatasetBlobVersioned
	(*CommitVersionedDatasetBlobArtifactPart)(nil),                 // 23: ai.verta.modeldb.CommitVersionedDatasetBlobArtifactPart
	(*GetCommittedVersionedDatasetBlobArtifactParts)(nil),          // 24: ai.verta.modeldb.GetCommittedVersionedDatasetBlobArtifactParts
	(*CommitMultipartVersionedDatasetBlobArtifact)(nil),            // 25: ai.verta.modeldb.CommitMultipartVersionedDatasetBlobArtifact
	(*GetDatasetVersionById)(nil),                                  // 26: ai.verta.modeldb.GetDatasetVersionById
	(*CreateDatasetVersion_Response)(nil),                          // 27: ai.verta.modeldb.CreateDatasetVersion.Response
	(*GetAllDatasetVersionsByDatasetId_Response)(nil),              // 28: ai.verta.modeldb.GetAllDatasetVersionsByDatasetId.Response
	(*DeleteDatasetVersion_Response)(nil),                          // 29: ai.verta.modeldb.DeleteDatasetVersion.Response
	(*DeleteDatasetVersions_Response)(nil),                         // 30: ai.verta.modeldb.DeleteDatasetVersions.Response
	(*GetLatestDatasetVersionByDatasetId_Response)(nil),            // 31: ai.verta.modeldb.GetLatestDatasetVersionByDatasetId.Response
	(*FindDatasetVersions_Response)(nil),                           // 32: ai.verta.modeldb.FindDatasetVersions.Response
	(*UpdateDatasetVersionDescription_Response)(nil),               // 33: ai.verta.modeldb.UpdateDatasetVersionDescription.Response
	(*AddDatasetVersionTags_Response)(nil),                         // 34: ai.verta.modeldb.AddDatasetVersionTags.Response
	(*DeleteDatasetVersionTags_Response)(nil),                      // 35: ai.verta.modeldb.DeleteDatasetVersionTags.Response
	(*AddDatasetVersionAttributes_Response)(nil),                   // 36: ai.verta.modeldb.AddDatasetVersionAttributes.Response
	(*UpdateDatasetVersionAttributes_Response)(nil),                // 37: ai.verta.modeldb.UpdateDatasetVersionAttributes.Response
	(*GetDatasetVersionAttributes_Response)(nil),                   // 38: ai.verta.modeldb.GetDatasetVersionAttributes.Response
	(*DeleteDatasetVersionAttributes_Response)(nil),                // 39: ai.verta.modeldb.DeleteDatasetVersionAttributes.Response
	(*SetDatasetVersionVisibilty_Response)(nil),                    // 40: ai.verta.modeldb.SetDatasetVersionVisibilty.Response
	(*GetUrlForDatasetBlobVersioned_Response)(nil),                 // 41: ai.verta.modeldb.GetUrlForDatasetBlobVersioned.Response
	(*CommitVersionedDatasetBlobArtifactPart_Response)(nil),        // 42: ai.verta.modeldb.CommitVersionedDatasetBlobArtifactPart.Response
	(*GetCommittedVersionedDatasetBlobArtifactParts_Response)(nil), // 43: ai.verta.modeldb.GetCommittedVersionedDatasetBlobArtifactParts.Response
	(*CommitMultipartVersionedDatasetBlobArtifact_Response)(nil),   // 44: ai.verta.modeldb.CommitMultipartVersionedDatasetBlobArtifact.Response
	(*GetDatasetVersionById_Response)(nil),                         // 45: ai.verta.modeldb.GetDatasetVersionById.Response
	(DatasetVisibilityEnum_DatasetVisibility)(0),                   // 46: ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	(DatasetTypeEnum_DatasetType)(0),                               // 47: ai.verta.modeldb.DatasetTypeEnum.DatasetType
	(*common.KeyValue)(nil),                                        // 48: ai.verta.common.KeyValue
	(*versioning.DatasetBlob)(nil),                                 // 49: ai.verta.modeldb.versioning.DatasetBlob
	(common.ValueTypeEnum_ValueType)(0),                            // 50: ai.verta.common.ValueTypeEnum.ValueType
	(*_struct.Value)(nil),                                          // 51: google.protobuf.Value
	(*common.KeyValueQuery)(nil),                                   // 52: ai.verta.common.KeyValueQuery
	(*common.ArtifactPart)(nil),                                    // 53: ai.verta.common.ArtifactPart
}
var file_modeldb_DatasetVersionService_proto_depIdxs = []int32{
	46, // 0: ai.verta.modeldb.DatasetVersion.dataset_version_visibility:type_name -> ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	47, // 1: ai.verta.modeldb.DatasetVersion.dataset_type:type_name -> ai.verta.modeldb.DatasetTypeEnum.DatasetType
	48, // 2: ai.verta.modeldb.DatasetVersion.attributes:type_name -> ai.verta.common.KeyValue
	4,  // 3: ai.verta.modeldb.DatasetVersion.raw_dataset_version_info:type_name -> ai.verta.modeldb.RawDatasetVersionInfo
	6,  // 4: ai.verta.modeldb.DatasetVersion.path_dataset_version_info:type_name -> ai.verta.modeldb.PathDatasetVersionInfo
	2,  // 5: ai.verta.modeldb.DatasetVersion.query_dataset_version_info:type_name -> ai.verta.modeldb.QueryDatasetVersionInfo
	49, // 6: ai.verta.modeldb.DatasetVersion.dataset_blob:type_name -> ai.verta.modeldb.versioning.DatasetBlob
	3,  // 7: ai.verta.modeldb.QueryDatasetVersionInfo.query_parameters:type_name -> ai.verta.modeldb.QueryParameter
	50, // 8: ai.verta.modeldb.QueryParameter.parameter_type:type_name -> ai.verta.common.ValueTypeEnum.ValueType
	51, // 9: ai.verta.modeldb.QueryParameter.value:type_name -> google.protobuf.Value
	0,  // 10: ai.verta.modeldb.PathDatasetVersionInfo.location_type:type_name -> ai.verta.modeldb.PathLocationTypeEnum.PathLocationType
	7,  // 11: ai.verta.modeldb.PathDatasetVersionInfo.dataset_part_infos:type_name -> ai.verta.modeldb.DatasetPartInfo
	46, // 12: ai.verta.modeldb.CreateDatasetVersion.dataset_version_visibility:type_name -> ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	47, // 13: ai.verta.modeldb.CreateDatasetVersion.dataset_type:type_name -> ai.verta.modeldb.DatasetTypeEnum.DatasetType
	48, // 14: ai.verta.modeldb.CreateDatasetVersion.attributes:type_name -> ai.verta.common.KeyValue
	4,  // 15: ai.verta.modeldb.CreateDatasetVersion.raw_dataset_version_info:type_name -> ai.verta.modeldb.RawDatasetVersionInfo
	6,  // 16: ai.verta.modeldb.CreateDatasetVersion.path_dataset_version_info:type_name -> ai.verta.modeldb.PathDatasetVersionInfo
	2,  // 17: ai.verta.modeldb.CreateDatasetVersion.query_dataset_version_info:type_name -> ai.verta.modeldb.QueryDatasetVersionInfo
	49, // 18: ai.verta.modeldb.CreateDatasetVersion.dataset_blob:type_name -> ai.verta.modeldb.versioning.DatasetBlob
	52, // 19: ai.verta.modeldb.FindDatasetVersions.predicates:type_name -> ai.verta.common.KeyValueQuery
	48, // 20: ai.verta.modeldb.AddDatasetVersionAttributes.attributes:type_name -> ai.verta.common.KeyValue
	48, // 21: ai.verta.modeldb.UpdateDatasetVersionAttributes.attribute:type_name -> ai.verta.common.KeyValue
	46, // 22: ai.verta.modeldb.SetDatasetVersionVisibilty.dataset_version_visibility:type_name -> ai.verta.modeldb.DatasetVisibilityEnum.DatasetVisibility
	53, // 23: ai.verta.modeldb.CommitVersionedDatasetBlobArtifactPart.artifact_part:type_name -> ai.verta.common.ArtifactPart
	1,  // 24: ai.verta.modeldb.CreateDatasetVersion.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 25: ai.verta.modeldb.GetAllDatasetVersionsByDatasetId.Response.dataset_versions:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 26: ai.verta.modeldb.GetLatestDatasetVersionByDatasetId.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 27: ai.verta.modeldb.FindDatasetVersions.Response.dataset_versions:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 28: ai.verta.modeldb.UpdateDatasetVersionDescription.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 29: ai.verta.modeldb.AddDatasetVersionTags.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 30: ai.verta.modeldb.DeleteDatasetVersionTags.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 31: ai.verta.modeldb.AddDatasetVersionAttributes.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 32: ai.verta.modeldb.UpdateDatasetVersionAttributes.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	48, // 33: ai.verta.modeldb.GetDatasetVersionAttributes.Response.attributes:type_name -> ai.verta.common.KeyValue
	1,  // 34: ai.verta.modeldb.DeleteDatasetVersionAttributes.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	1,  // 35: ai.verta.modeldb.SetDatasetVersionVisibilty.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	53, // 36: ai.verta.modeldb.GetCommittedVersionedDatasetBlobArtifactParts.Response.artifact_parts:type_name -> ai.verta.common.ArtifactPart
	1,  // 37: ai.verta.modeldb.GetDatasetVersionById.Response.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	8,  // 38: ai.verta.modeldb.DatasetVersionService.createDatasetVersion:input_type -> ai.verta.modeldb.CreateDatasetVersion
	9,  // 39: ai.verta.modeldb.DatasetVersionService.getAllDatasetVersionsByDatasetId:input_type -> ai.verta.modeldb.GetAllDatasetVersionsByDatasetId
	26, // 40: ai.verta.modeldb.DatasetVersionService.getDatasetVersionById:input_type -> ai.verta.modeldb.GetDatasetVersionById
	10, // 41: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersion:input_type -> ai.verta.modeldb.DeleteDatasetVersion
	11, // 42: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersions:input_type -> ai.verta.modeldb.DeleteDatasetVersions
	12, // 43: ai.verta.modeldb.DatasetVersionService.getLatestDatasetVersionByDatasetId:input_type -> ai.verta.modeldb.GetLatestDatasetVersionByDatasetId
	13, // 44: ai.verta.modeldb.DatasetVersionService.findDatasetVersions:input_type -> ai.verta.modeldb.FindDatasetVersions
	14, // 45: ai.verta.modeldb.DatasetVersionService.updateDatasetVersionDescription:input_type -> ai.verta.modeldb.UpdateDatasetVersionDescription
	15, // 46: ai.verta.modeldb.DatasetVersionService.addDatasetVersionTags:input_type -> ai.verta.modeldb.AddDatasetVersionTags
	16, // 47: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersionTags:input_type -> ai.verta.modeldb.DeleteDatasetVersionTags
	17, // 48: ai.verta.modeldb.DatasetVersionService.addDatasetVersionAttributes:input_type -> ai.verta.modeldb.AddDatasetVersionAttributes
	18, // 49: ai.verta.modeldb.DatasetVersionService.updateDatasetVersionAttributes:input_type -> ai.verta.modeldb.UpdateDatasetVersionAttributes
	19, // 50: ai.verta.modeldb.DatasetVersionService.getDatasetVersionAttributes:input_type -> ai.verta.modeldb.GetDatasetVersionAttributes
	20, // 51: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersionAttributes:input_type -> ai.verta.modeldb.DeleteDatasetVersionAttributes
	21, // 52: ai.verta.modeldb.DatasetVersionService.setDatasetVersionVisibility:input_type -> ai.verta.modeldb.SetDatasetVersionVisibilty
	22, // 53: ai.verta.modeldb.DatasetVersionService.getUrlForDatasetBlobVersioned:input_type -> ai.verta.modeldb.GetUrlForDatasetBlobVersioned
	23, // 54: ai.verta.modeldb.DatasetVersionService.commitVersionedDatasetBlobArtifactPart:input_type -> ai.verta.modeldb.CommitVersionedDatasetBlobArtifactPart
	24, // 55: ai.verta.modeldb.DatasetVersionService.getCommittedVersionedDatasetBlobArtifactParts:input_type -> ai.verta.modeldb.GetCommittedVersionedDatasetBlobArtifactParts
	25, // 56: ai.verta.modeldb.DatasetVersionService.commitMultipartVersionedDatasetBlobArtifact:input_type -> ai.verta.modeldb.CommitMultipartVersionedDatasetBlobArtifact
	27, // 57: ai.verta.modeldb.DatasetVersionService.createDatasetVersion:output_type -> ai.verta.modeldb.CreateDatasetVersion.Response
	28, // 58: ai.verta.modeldb.DatasetVersionService.getAllDatasetVersionsByDatasetId:output_type -> ai.verta.modeldb.GetAllDatasetVersionsByDatasetId.Response
	45, // 59: ai.verta.modeldb.DatasetVersionService.getDatasetVersionById:output_type -> ai.verta.modeldb.GetDatasetVersionById.Response
	29, // 60: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersion:output_type -> ai.verta.modeldb.DeleteDatasetVersion.Response
	30, // 61: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersions:output_type -> ai.verta.modeldb.DeleteDatasetVersions.Response
	31, // 62: ai.verta.modeldb.DatasetVersionService.getLatestDatasetVersionByDatasetId:output_type -> ai.verta.modeldb.GetLatestDatasetVersionByDatasetId.Response
	32, // 63: ai.verta.modeldb.DatasetVersionService.findDatasetVersions:output_type -> ai.verta.modeldb.FindDatasetVersions.Response
	33, // 64: ai.verta.modeldb.DatasetVersionService.updateDatasetVersionDescription:output_type -> ai.verta.modeldb.UpdateDatasetVersionDescription.Response
	34, // 65: ai.verta.modeldb.DatasetVersionService.addDatasetVersionTags:output_type -> ai.verta.modeldb.AddDatasetVersionTags.Response
	35, // 66: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersionTags:output_type -> ai.verta.modeldb.DeleteDatasetVersionTags.Response
	36, // 67: ai.verta.modeldb.DatasetVersionService.addDatasetVersionAttributes:output_type -> ai.verta.modeldb.AddDatasetVersionAttributes.Response
	37, // 68: ai.verta.modeldb.DatasetVersionService.updateDatasetVersionAttributes:output_type -> ai.verta.modeldb.UpdateDatasetVersionAttributes.Response
	38, // 69: ai.verta.modeldb.DatasetVersionService.getDatasetVersionAttributes:output_type -> ai.verta.modeldb.GetDatasetVersionAttributes.Response
	39, // 70: ai.verta.modeldb.DatasetVersionService.deleteDatasetVersionAttributes:output_type -> ai.verta.modeldb.DeleteDatasetVersionAttributes.Response
	40, // 71: ai.verta.modeldb.DatasetVersionService.setDatasetVersionVisibility:output_type -> ai.verta.modeldb.SetDatasetVersionVisibilty.Response
	41, // 72: ai.verta.modeldb.DatasetVersionService.getUrlForDatasetBlobVersioned:output_type -> ai.verta.modeldb.GetUrlForDatasetBlobVersioned.Response
	42, // 73: ai.verta.modeldb.DatasetVersionService.commitVersionedDatasetBlobArtifactPart:output_type -> ai.verta.modeldb.CommitVersionedDatasetBlobArtifactPart.Response
	43, // 74: ai.verta.modeldb.DatasetVersionService.getCommittedVersionedDatasetBlobArtifactParts:output_type -> ai.verta.modeldb.GetCommittedVersionedDatasetBlobArtifactParts.Response
	44, // 75: ai.verta.modeldb.DatasetVersionService.commitMultipartVersionedDatasetBlobArtifact:output_type -> ai.verta.modeldb.CommitMultipartVersionedDatasetBlobArtifact.Response
	57, // [57:76] is the sub-list for method output_type
	38, // [38:57] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_modeldb_DatasetVersionService_proto_init() }
func file_modeldb_DatasetVersionService_proto_init() {
	if File_modeldb_DatasetVersionService_proto != nil {
		return
	}
	file_modeldb_DatasetService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_DatasetVersionService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDatasetVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDatasetVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathLocationTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathDatasetVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetPartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatasetVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDatasetVersionsByDatasetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestDatasetVersionByDatasetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDatasetVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetVersionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetVersionTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersionTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetVersionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetVersionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetVersionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetVersionVisibilty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUrlForDatasetBlobVersioned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitVersionedDatasetBlobArtifactPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommittedVersionedDatasetBlobArtifactParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMultipartVersionedDatasetBlobArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetVersionById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatasetVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDatasetVersionsByDatasetId_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestDatasetVersionByDatasetId_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDatasetVersions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetVersionDescription_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetVersionTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersionTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatasetVersionAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetVersionAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetVersionAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetVersionAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetVersionVisibilty_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUrlForDatasetBlobVersioned_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitVersionedDatasetBlobArtifactPart_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommittedVersionedDatasetBlobArtifactParts_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMultipartVersionedDatasetBlobArtifact_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_DatasetVersionService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetVersionById_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_modeldb_DatasetVersionService_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DatasetVersion_RawDatasetVersionInfo)(nil),
		(*DatasetVersion_PathDatasetVersionInfo)(nil),
		(*DatasetVersion_QueryDatasetVersionInfo)(nil),
	}
	file_modeldb_DatasetVersionService_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*CreateDatasetVersion_RawDatasetVersionInfo)(nil),
		(*CreateDatasetVersion_PathDatasetVersionInfo)(nil),
		(*CreateDatasetVersion_QueryDatasetVersionInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_DatasetVersionService_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modeldb_DatasetVersionService_proto_goTypes,
		DependencyIndexes: file_modeldb_DatasetVersionService_proto_depIdxs,
		EnumInfos:         file_modeldb_DatasetVersionService_proto_enumTypes,
		MessageInfos:      file_modeldb_DatasetVersionService_proto_msgTypes,
	}.Build()
	File_modeldb_DatasetVersionService_proto = out.File
	file_modeldb_DatasetVersionService_proto_rawDesc = nil
	file_modeldb_DatasetVersionService_proto_goTypes = nil
	file_modeldb_DatasetVersionService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatasetVersionServiceClient is the client API for DatasetVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetVersionServiceClient interface {
	CreateDatasetVersion(ctx context.Context, in *CreateDatasetVersion, opts ...grpc.CallOption) (*CreateDatasetVersion_Response, error)
	GetAllDatasetVersionsByDatasetId(ctx context.Context, in *GetAllDatasetVersionsByDatasetId, opts ...grpc.CallOption) (*GetAllDatasetVersionsByDatasetId_Response, error)
	GetDatasetVersionById(ctx context.Context, in *GetDatasetVersionById, opts ...grpc.CallOption) (*GetDatasetVersionById_Response, error)
	DeleteDatasetVersion(ctx context.Context, in *DeleteDatasetVersion, opts ...grpc.CallOption) (*DeleteDatasetVersion_Response, error)
	DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersions, opts ...grpc.CallOption) (*DeleteDatasetVersions_Response, error)
	GetLatestDatasetVersionByDatasetId(ctx context.Context, in *GetLatestDatasetVersionByDatasetId, opts ...grpc.CallOption) (*GetLatestDatasetVersionByDatasetId_Response, error)
	// queries
	FindDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*FindDatasetVersions_Response, error)
	UpdateDatasetVersionDescription(ctx context.Context, in *UpdateDatasetVersionDescription, opts ...grpc.CallOption) (*UpdateDatasetVersionDescription_Response, error)
	AddDatasetVersionTags(ctx context.Context, in *AddDatasetVersionTags, opts ...grpc.CallOption) (*AddDatasetVersionTags_Response, error)
	DeleteDatasetVersionTags(ctx context.Context, in *DeleteDatasetVersionTags, opts ...grpc.CallOption) (*DeleteDatasetVersionTags_Response, error)
	AddDatasetVersionAttributes(ctx context.Context, in *AddDatasetVersionAttributes, opts ...grpc.CallOption) (*AddDatasetVersionAttributes_Response, error)
	UpdateDatasetVersionAttributes(ctx context.Context, in *UpdateDatasetVersionAttributes, opts ...grpc.CallOption) (*UpdateDatasetVersionAttributes_Response, error)
	GetDatasetVersionAttributes(ctx context.Context, in *GetDatasetVersionAttributes, opts ...grpc.CallOption) (*GetDatasetVersionAttributes_Response, error)
	DeleteDatasetVersionAttributes(ctx context.Context, in *DeleteDatasetVersionAttributes, opts ...grpc.CallOption) (*DeleteDatasetVersionAttributes_Response, error)
	SetDatasetVersionVisibility(ctx context.Context, in *SetDatasetVersionVisibilty, opts ...grpc.CallOption) (*SetDatasetVersionVisibilty_Response, error)
	GetUrlForDatasetBlobVersioned(ctx context.Context, in *GetUrlForDatasetBlobVersioned, opts ...grpc.CallOption) (*GetUrlForDatasetBlobVersioned_Response, error)
	CommitVersionedDatasetBlobArtifactPart(ctx context.Context, in *CommitVersionedDatasetBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedDatasetBlobArtifactPart_Response, error)
	GetCommittedVersionedDatasetBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedDatasetBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error)
	CommitMultipartVersionedDatasetBlobArtifact(ctx context.Context, in *CommitMultipartVersionedDatasetBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error)
}

type datasetVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetVersionServiceClient(cc grpc.ClientConnInterface) DatasetVersionServiceClient {
	return &datasetVersionServiceClient{cc}
}

func (c *datasetVersionServiceClient) CreateDatasetVersion(ctx context.Context, in *CreateDatasetVersion, opts ...grpc.CallOption) (*CreateDatasetVersion_Response, error) {
	out := new(CreateDatasetVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/createDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetAllDatasetVersionsByDatasetId(ctx context.Context, in *GetAllDatasetVersionsByDatasetId, opts ...grpc.CallOption) (*GetAllDatasetVersionsByDatasetId_Response, error) {
	out := new(GetAllDatasetVersionsByDatasetId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getAllDatasetVersionsByDatasetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetDatasetVersionById(ctx context.Context, in *GetDatasetVersionById, opts ...grpc.CallOption) (*GetDatasetVersionById_Response, error) {
	out := new(GetDatasetVersionById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getDatasetVersionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersion(ctx context.Context, in *DeleteDatasetVersion, opts ...grpc.CallOption) (*DeleteDatasetVersion_Response, error) {
	out := new(DeleteDatasetVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersions(ctx context.Context, in *DeleteDatasetVersions, opts ...grpc.CallOption) (*DeleteDatasetVersions_Response, error) {
	out := new(DeleteDatasetVersions_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetLatestDatasetVersionByDatasetId(ctx context.Context, in *GetLatestDatasetVersionByDatasetId, opts ...grpc.CallOption) (*GetLatestDatasetVersionByDatasetId_Response, error) {
	out := new(GetLatestDatasetVersionByDatasetId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getLatestDatasetVersionByDatasetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) FindDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*FindDatasetVersions_Response, error) {
	out := new(FindDatasetVersions_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/findDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) UpdateDatasetVersionDescription(ctx context.Context, in *UpdateDatasetVersionDescription, opts ...grpc.CallOption) (*UpdateDatasetVersionDescription_Response, error) {
	out := new(UpdateDatasetVersionDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/updateDatasetVersionDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) AddDatasetVersionTags(ctx context.Context, in *AddDatasetVersionTags, opts ...grpc.CallOption) (*AddDatasetVersionTags_Response, error) {
	out := new(AddDatasetVersionTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/addDatasetVersionTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersionTags(ctx context.Context, in *DeleteDatasetVersionTags, opts ...grpc.CallOption) (*DeleteDatasetVersionTags_Response, error) {
	out := new(DeleteDatasetVersionTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersionTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) AddDatasetVersionAttributes(ctx context.Context, in *AddDatasetVersionAttributes, opts ...grpc.CallOption) (*AddDatasetVersionAttributes_Response, error) {
	out := new(AddDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/addDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) UpdateDatasetVersionAttributes(ctx context.Context, in *UpdateDatasetVersionAttributes, opts ...grpc.CallOption) (*UpdateDatasetVersionAttributes_Response, error) {
	out := new(UpdateDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/updateDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetDatasetVersionAttributes(ctx context.Context, in *GetDatasetVersionAttributes, opts ...grpc.CallOption) (*GetDatasetVersionAttributes_Response, error) {
	out := new(GetDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) DeleteDatasetVersionAttributes(ctx context.Context, in *DeleteDatasetVersionAttributes, opts ...grpc.CallOption) (*DeleteDatasetVersionAttributes_Response, error) {
	out := new(DeleteDatasetVersionAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/deleteDatasetVersionAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) SetDatasetVersionVisibility(ctx context.Context, in *SetDatasetVersionVisibilty, opts ...grpc.CallOption) (*SetDatasetVersionVisibilty_Response, error) {
	out := new(SetDatasetVersionVisibilty_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/setDatasetVersionVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetUrlForDatasetBlobVersioned(ctx context.Context, in *GetUrlForDatasetBlobVersioned, opts ...grpc.CallOption) (*GetUrlForDatasetBlobVersioned_Response, error) {
	out := new(GetUrlForDatasetBlobVersioned_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getUrlForDatasetBlobVersioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) CommitVersionedDatasetBlobArtifactPart(ctx context.Context, in *CommitVersionedDatasetBlobArtifactPart, opts ...grpc.CallOption) (*CommitVersionedDatasetBlobArtifactPart_Response, error) {
	out := new(CommitVersionedDatasetBlobArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/commitVersionedDatasetBlobArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) GetCommittedVersionedDatasetBlobArtifactParts(ctx context.Context, in *GetCommittedVersionedDatasetBlobArtifactParts, opts ...grpc.CallOption) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error) {
	out := new(GetCommittedVersionedDatasetBlobArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/getCommittedVersionedDatasetBlobArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetVersionServiceClient) CommitMultipartVersionedDatasetBlobArtifact(ctx context.Context, in *CommitMultipartVersionedDatasetBlobArtifact, opts ...grpc.CallOption) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error) {
	out := new(CommitMultipartVersionedDatasetBlobArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.DatasetVersionService/commitMultipartVersionedDatasetBlobArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetVersionServiceServer is the server API for DatasetVersionService service.
type DatasetVersionServiceServer interface {
	CreateDatasetVersion(context.Context, *CreateDatasetVersion) (*CreateDatasetVersion_Response, error)
	GetAllDatasetVersionsByDatasetId(context.Context, *GetAllDatasetVersionsByDatasetId) (*GetAllDatasetVersionsByDatasetId_Response, error)
	GetDatasetVersionById(context.Context, *GetDatasetVersionById) (*GetDatasetVersionById_Response, error)
	DeleteDatasetVersion(context.Context, *DeleteDatasetVersion) (*DeleteDatasetVersion_Response, error)
	DeleteDatasetVersions(context.Context, *DeleteDatasetVersions) (*DeleteDatasetVersions_Response, error)
	GetLatestDatasetVersionByDatasetId(context.Context, *GetLatestDatasetVersionByDatasetId) (*GetLatestDatasetVersionByDatasetId_Response, error)
	// queries
	FindDatasetVersions(context.Context, *FindDatasetVersions) (*FindDatasetVersions_Response, error)
	UpdateDatasetVersionDescription(context.Context, *UpdateDatasetVersionDescription) (*UpdateDatasetVersionDescription_Response, error)
	AddDatasetVersionTags(context.Context, *AddDatasetVersionTags) (*AddDatasetVersionTags_Response, error)
	DeleteDatasetVersionTags(context.Context, *DeleteDatasetVersionTags) (*DeleteDatasetVersionTags_Response, error)
	AddDatasetVersionAttributes(context.Context, *AddDatasetVersionAttributes) (*AddDatasetVersionAttributes_Response, error)
	UpdateDatasetVersionAttributes(context.Context, *UpdateDatasetVersionAttributes) (*UpdateDatasetVersionAttributes_Response, error)
	GetDatasetVersionAttributes(context.Context, *GetDatasetVersionAttributes) (*GetDatasetVersionAttributes_Response, error)
	DeleteDatasetVersionAttributes(context.Context, *DeleteDatasetVersionAttributes) (*DeleteDatasetVersionAttributes_Response, error)
	SetDatasetVersionVisibility(context.Context, *SetDatasetVersionVisibilty) (*SetDatasetVersionVisibilty_Response, error)
	GetUrlForDatasetBlobVersioned(context.Context, *GetUrlForDatasetBlobVersioned) (*GetUrlForDatasetBlobVersioned_Response, error)
	CommitVersionedDatasetBlobArtifactPart(context.Context, *CommitVersionedDatasetBlobArtifactPart) (*CommitVersionedDatasetBlobArtifactPart_Response, error)
	GetCommittedVersionedDatasetBlobArtifactParts(context.Context, *GetCommittedVersionedDatasetBlobArtifactParts) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error)
	CommitMultipartVersionedDatasetBlobArtifact(context.Context, *CommitMultipartVersionedDatasetBlobArtifact) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error)
}

// UnimplementedDatasetVersionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetVersionServiceServer struct {
}

func (*UnimplementedDatasetVersionServiceServer) CreateDatasetVersion(context.Context, *CreateDatasetVersion) (*CreateDatasetVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatasetVersion not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetAllDatasetVersionsByDatasetId(context.Context, *GetAllDatasetVersionsByDatasetId) (*GetAllDatasetVersionsByDatasetId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDatasetVersionsByDatasetId not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetDatasetVersionById(context.Context, *GetDatasetVersionById) (*GetDatasetVersionById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetVersionById not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersion(context.Context, *DeleteDatasetVersion) (*DeleteDatasetVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersion not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersions(context.Context, *DeleteDatasetVersions) (*DeleteDatasetVersions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersions not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetLatestDatasetVersionByDatasetId(context.Context, *GetLatestDatasetVersionByDatasetId) (*GetLatestDatasetVersionByDatasetId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestDatasetVersionByDatasetId not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) FindDatasetVersions(context.Context, *FindDatasetVersions) (*FindDatasetVersions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDatasetVersions not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) UpdateDatasetVersionDescription(context.Context, *UpdateDatasetVersionDescription) (*UpdateDatasetVersionDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetVersionDescription not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) AddDatasetVersionTags(context.Context, *AddDatasetVersionTags) (*AddDatasetVersionTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetVersionTags not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersionTags(context.Context, *DeleteDatasetVersionTags) (*DeleteDatasetVersionTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersionTags not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) AddDatasetVersionAttributes(context.Context, *AddDatasetVersionAttributes) (*AddDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) UpdateDatasetVersionAttributes(context.Context, *UpdateDatasetVersionAttributes) (*UpdateDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetDatasetVersionAttributes(context.Context, *GetDatasetVersionAttributes) (*GetDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) DeleteDatasetVersionAttributes(context.Context, *DeleteDatasetVersionAttributes) (*DeleteDatasetVersionAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersionAttributes not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) SetDatasetVersionVisibility(context.Context, *SetDatasetVersionVisibilty) (*SetDatasetVersionVisibilty_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDatasetVersionVisibility not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetUrlForDatasetBlobVersioned(context.Context, *GetUrlForDatasetBlobVersioned) (*GetUrlForDatasetBlobVersioned_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForDatasetBlobVersioned not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) CommitVersionedDatasetBlobArtifactPart(context.Context, *CommitVersionedDatasetBlobArtifactPart) (*CommitVersionedDatasetBlobArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitVersionedDatasetBlobArtifactPart not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) GetCommittedVersionedDatasetBlobArtifactParts(context.Context, *GetCommittedVersionedDatasetBlobArtifactParts) (*GetCommittedVersionedDatasetBlobArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedVersionedDatasetBlobArtifactParts not implemented")
}
func (*UnimplementedDatasetVersionServiceServer) CommitMultipartVersionedDatasetBlobArtifact(context.Context, *CommitMultipartVersionedDatasetBlobArtifact) (*CommitMultipartVersionedDatasetBlobArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartVersionedDatasetBlobArtifact not implemented")
}

func RegisterDatasetVersionServiceServer(s *grpc.Server, srv DatasetVersionServiceServer) {
	s.RegisterService(&_DatasetVersionService_serviceDesc, srv)
}

func _DatasetVersionService_CreateDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).CreateDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/CreateDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).CreateDatasetVersion(ctx, req.(*CreateDatasetVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetAllDatasetVersionsByDatasetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDatasetVersionsByDatasetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetAllDatasetVersionsByDatasetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetAllDatasetVersionsByDatasetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetAllDatasetVersionsByDatasetId(ctx, req.(*GetAllDatasetVersionsByDatasetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetDatasetVersionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetVersionById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetDatasetVersionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionById(ctx, req.(*GetDatasetVersionById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersion(ctx, req.(*DeleteDatasetVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersions(ctx, req.(*DeleteDatasetVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetLatestDatasetVersionByDatasetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestDatasetVersionByDatasetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetLatestDatasetVersionByDatasetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetLatestDatasetVersionByDatasetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetLatestDatasetVersionByDatasetId(ctx, req.(*GetLatestDatasetVersionByDatasetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_FindDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasetVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).FindDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/FindDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).FindDatasetVersions(ctx, req.(*FindDatasetVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_UpdateDatasetVersionDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetVersionDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/UpdateDatasetVersionDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionDescription(ctx, req.(*UpdateDatasetVersionDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_AddDatasetVersionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetVersionTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/AddDatasetVersionTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionTags(ctx, req.(*AddDatasetVersionTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersionTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersionTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionTags(ctx, req.(*DeleteDatasetVersionTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_AddDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/AddDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).AddDatasetVersionAttributes(ctx, req.(*AddDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_UpdateDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/UpdateDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).UpdateDatasetVersionAttributes(ctx, req.(*UpdateDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetDatasetVersionAttributes(ctx, req.(*GetDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_DeleteDatasetVersionAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetVersionAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/DeleteDatasetVersionAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).DeleteDatasetVersionAttributes(ctx, req.(*DeleteDatasetVersionAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_SetDatasetVersionVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDatasetVersionVisibilty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).SetDatasetVersionVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/SetDatasetVersionVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).SetDatasetVersionVisibility(ctx, req.(*SetDatasetVersionVisibilty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetUrlForDatasetBlobVersioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForDatasetBlobVersioned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetUrlForDatasetBlobVersioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetUrlForDatasetBlobVersioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetUrlForDatasetBlobVersioned(ctx, req.(*GetUrlForDatasetBlobVersioned))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_CommitVersionedDatasetBlobArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitVersionedDatasetBlobArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).CommitVersionedDatasetBlobArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/CommitVersionedDatasetBlobArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).CommitVersionedDatasetBlobArtifactPart(ctx, req.(*CommitVersionedDatasetBlobArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_GetCommittedVersionedDatasetBlobArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedVersionedDatasetBlobArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).GetCommittedVersionedDatasetBlobArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/GetCommittedVersionedDatasetBlobArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).GetCommittedVersionedDatasetBlobArtifactParts(ctx, req.(*GetCommittedVersionedDatasetBlobArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetVersionService_CommitMultipartVersionedDatasetBlobArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMultipartVersionedDatasetBlobArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetVersionServiceServer).CommitMultipartVersionedDatasetBlobArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.DatasetVersionService/CommitMultipartVersionedDatasetBlobArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetVersionServiceServer).CommitMultipartVersionedDatasetBlobArtifact(ctx, req.(*CommitMultipartVersionedDatasetBlobArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetVersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.DatasetVersionService",
	HandlerType: (*DatasetVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDatasetVersion",
			Handler:    _DatasetVersionService_CreateDatasetVersion_Handler,
		},
		{
			MethodName: "getAllDatasetVersionsByDatasetId",
			Handler:    _DatasetVersionService_GetAllDatasetVersionsByDatasetId_Handler,
		},
		{
			MethodName: "getDatasetVersionById",
			Handler:    _DatasetVersionService_GetDatasetVersionById_Handler,
		},
		{
			MethodName: "deleteDatasetVersion",
			Handler:    _DatasetVersionService_DeleteDatasetVersion_Handler,
		},
		{
			MethodName: "deleteDatasetVersions",
			Handler:    _DatasetVersionService_DeleteDatasetVersions_Handler,
		},
		{
			MethodName: "getLatestDatasetVersionByDatasetId",
			Handler:    _DatasetVersionService_GetLatestDatasetVersionByDatasetId_Handler,
		},
		{
			MethodName: "findDatasetVersions",
			Handler:    _DatasetVersionService_FindDatasetVersions_Handler,
		},
		{
			MethodName: "updateDatasetVersionDescription",
			Handler:    _DatasetVersionService_UpdateDatasetVersionDescription_Handler,
		},
		{
			MethodName: "addDatasetVersionTags",
			Handler:    _DatasetVersionService_AddDatasetVersionTags_Handler,
		},
		{
			MethodName: "deleteDatasetVersionTags",
			Handler:    _DatasetVersionService_DeleteDatasetVersionTags_Handler,
		},
		{
			MethodName: "addDatasetVersionAttributes",
			Handler:    _DatasetVersionService_AddDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "updateDatasetVersionAttributes",
			Handler:    _DatasetVersionService_UpdateDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "getDatasetVersionAttributes",
			Handler:    _DatasetVersionService_GetDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "deleteDatasetVersionAttributes",
			Handler:    _DatasetVersionService_DeleteDatasetVersionAttributes_Handler,
		},
		{
			MethodName: "setDatasetVersionVisibility",
			Handler:    _DatasetVersionService_SetDatasetVersionVisibility_Handler,
		},
		{
			MethodName: "getUrlForDatasetBlobVersioned",
			Handler:    _DatasetVersionService_GetUrlForDatasetBlobVersioned_Handler,
		},
		{
			MethodName: "commitVersionedDatasetBlobArtifactPart",
			Handler:    _DatasetVersionService_CommitVersionedDatasetBlobArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedVersionedDatasetBlobArtifactParts",
			Handler:    _DatasetVersionService_GetCommittedVersionedDatasetBlobArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartVersionedDatasetBlobArtifact",
			Handler:    _DatasetVersionService_CommitMultipartVersionedDatasetBlobArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/DatasetVersionService.proto",
}
