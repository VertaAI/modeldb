// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/ExperimentService.proto

package modeldb

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId           string             `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name                string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description         string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DateCreated         int64              `protobuf:"varint,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateUpdated         int64              `protobuf:"varint,6,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	Attributes          []*common.KeyValue `protobuf:"bytes,20,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Tags                []string           `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty"`
	Owner               string             `protobuf:"bytes,22,opt,name=owner,proto3" json:"owner,omitempty"`
	CodeVersionSnapshot *CodeVersion       `protobuf:"bytes,23,opt,name=code_version_snapshot,json=codeVersionSnapshot,proto3" json:"code_version_snapshot,omitempty"`
	Artifacts           []*common.Artifact `protobuf:"bytes,24,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{0}
}

func (x *Experiment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Experiment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Experiment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Experiment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Experiment) GetDateCreated() int64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *Experiment) GetDateUpdated() int64 {
	if x != nil {
		return x.DateUpdated
	}
	return 0
}

func (x *Experiment) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Experiment) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Experiment) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Experiment) GetCodeVersionSnapshot() *CodeVersion {
	if x != nil {
		return x.CodeVersionSnapshot
	}
	return nil
}

func (x *Experiment) GetArtifacts() []*common.Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type GetExperimentsInProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32  `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending  bool   `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *GetExperimentsInProject) Reset() {
	*x = GetExperimentsInProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentsInProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentsInProject) ProtoMessage() {}

func (x *GetExperimentsInProject) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentsInProject.ProtoReflect.Descriptor instead.
func (*GetExperimentsInProject) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{1}
}

func (x *GetExperimentsInProject) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetExperimentsInProject) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetExperimentsInProject) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *GetExperimentsInProject) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetExperimentsInProject) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type GetExperimentById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetExperimentById) Reset() {
	*x = GetExperimentById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentById) ProtoMessage() {}

func (x *GetExperimentById) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentById.ProtoReflect.Descriptor instead.
func (*GetExperimentById) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{2}
}

func (x *GetExperimentById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetExperimentByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetExperimentByName) Reset() {
	*x = GetExperimentByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentByName) ProtoMessage() {}

func (x *GetExperimentByName) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentByName.ProtoReflect.Descriptor instead.
func (*GetExperimentByName) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{3}
}

func (x *GetExperimentByName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetExperimentByName) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type CreateExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   string             `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DateCreated int64              `protobuf:"varint,4,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateUpdated int64              `protobuf:"varint,5,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	Attributes  []*common.KeyValue `protobuf:"bytes,20,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Tags        []string           `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty"`
	Artifacts   []*common.Artifact `protobuf:"bytes,22,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *CreateExperiment) Reset() {
	*x = CreateExperiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperiment) ProtoMessage() {}

func (x *CreateExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperiment.ProtoReflect.Descriptor instead.
func (*CreateExperiment) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{4}
}

func (x *CreateExperiment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateExperiment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateExperiment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateExperiment) GetDateCreated() int64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *CreateExperiment) GetDateUpdated() int64 {
	if x != nil {
		return x.DateUpdated
	}
	return 0
}

func (x *CreateExperiment) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateExperiment) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateExperiment) GetArtifacts() []*common.Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type DeleteExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteExperiment) Reset() {
	*x = DeleteExperiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperiment) ProtoMessage() {}

func (x *DeleteExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperiment.ProtoReflect.Descriptor instead.
func (*DeleteExperiment) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteExperiment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateExperimentNameOrDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateExperimentNameOrDescription) Reset() {
	*x = UpdateExperimentNameOrDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentNameOrDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentNameOrDescription) ProtoMessage() {}

func (x *UpdateExperimentNameOrDescription) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentNameOrDescription.ProtoReflect.Descriptor instead.
func (*UpdateExperimentNameOrDescription) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateExperimentNameOrDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateExperimentNameOrDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateExperimentNameOrDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateExperimentName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateExperimentName) Reset() {
	*x = UpdateExperimentName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentName) ProtoMessage() {}

func (x *UpdateExperimentName) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentName.ProtoReflect.Descriptor instead.
func (*UpdateExperimentName) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateExperimentName) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateExperimentName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateExperimentDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateExperimentDescription) Reset() {
	*x = UpdateExperimentDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentDescription) ProtoMessage() {}

func (x *UpdateExperimentDescription) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentDescription.ProtoReflect.Descriptor instead.
func (*UpdateExperimentDescription) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateExperimentDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateExperimentDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AddExperimentTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AddExperimentTags) Reset() {
	*x = AddExperimentTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExperimentTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExperimentTags) ProtoMessage() {}

func (x *AddExperimentTags) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExperimentTags.ProtoReflect.Descriptor instead.
func (*AddExperimentTags) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{9}
}

func (x *AddExperimentTags) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddExperimentTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DeleteExperimentTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tags      []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	DeleteAll bool     `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteExperimentTags) Reset() {
	*x = DeleteExperimentTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentTags) ProtoMessage() {}

func (x *DeleteExperimentTags) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentTags.ProtoReflect.Descriptor instead.
func (*DeleteExperimentTags) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteExperimentTags) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteExperimentTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeleteExperimentTags) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type AddExperimentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *AddExperimentTag) Reset() {
	*x = AddExperimentTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExperimentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExperimentTag) ProtoMessage() {}

func (x *AddExperimentTag) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExperimentTag.ProtoReflect.Descriptor instead.
func (*AddExperimentTag) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{11}
}

func (x *AddExperimentTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddExperimentTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type DeleteExperimentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *DeleteExperimentTag) Reset() {
	*x = DeleteExperimentTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentTag) ProtoMessage() {}

func (x *DeleteExperimentTag) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentTag.ProtoReflect.Descriptor instead.
func (*DeleteExperimentTag) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteExperimentTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteExperimentTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type AddExperimentAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes []*common.KeyValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *AddExperimentAttributes) Reset() {
	*x = AddExperimentAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExperimentAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExperimentAttributes) ProtoMessage() {}

func (x *AddExperimentAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExperimentAttributes.ProtoReflect.Descriptor instead.
func (*AddExperimentAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{13}
}

func (x *AddExperimentAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddExperimentAttributes) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DeleteExperimentAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributeKeys []string `protobuf:"bytes,2,rep,name=attribute_keys,json=attributeKeys,proto3" json:"attribute_keys,omitempty"`
	DeleteAll     bool     `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteExperimentAttributes) Reset() {
	*x = DeleteExperimentAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentAttributes) ProtoMessage() {}

func (x *DeleteExperimentAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentAttributes.ProtoReflect.Descriptor instead.
func (*DeleteExperimentAttributes) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteExperimentAttributes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteExperimentAttributes) GetAttributeKeys() []string {
	if x != nil {
		return x.AttributeKeys
	}
	return nil
}

func (x *DeleteExperimentAttributes) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

// code version
type LogExperimentCodeVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CodeVersion *CodeVersion `protobuf:"bytes,2,opt,name=code_version,json=codeVersion,proto3" json:"code_version,omitempty"`
}

func (x *LogExperimentCodeVersion) Reset() {
	*x = LogExperimentCodeVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogExperimentCodeVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogExperimentCodeVersion) ProtoMessage() {}

func (x *LogExperimentCodeVersion) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogExperimentCodeVersion.ProtoReflect.Descriptor instead.
func (*LogExperimentCodeVersion) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{15}
}

func (x *LogExperimentCodeVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogExperimentCodeVersion) GetCodeVersion() *CodeVersion {
	if x != nil {
		return x.CodeVersion
	}
	return nil
}

type GetExperimentCodeVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetExperimentCodeVersion) Reset() {
	*x = GetExperimentCodeVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentCodeVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentCodeVersion) ProtoMessage() {}

func (x *GetExperimentCodeVersion) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentCodeVersion.ProtoReflect.Descriptor instead.
func (*GetExperimentCodeVersion) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{16}
}

func (x *GetExperimentCodeVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindExperiments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     string                  `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ExperimentIds []string                `protobuf:"bytes,2,rep,name=experiment_ids,json=experimentIds,proto3" json:"experiment_ids,omitempty"`
	Predicates    []*common.KeyValueQuery `protobuf:"bytes,4,rep,name=predicates,proto3" json:"predicates,omitempty"`
	IdsOnly       bool                    `protobuf:"varint,5,opt,name=ids_only,json=idsOnly,proto3" json:"ids_only,omitempty"` // whether to return full experiment runs or ids only
	//For pagination
	PageNumber    int32  `protobuf:"varint,6,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit     int32  `protobuf:"varint,7,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending     bool   `protobuf:"varint,9,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey       string `protobuf:"bytes,10,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	WorkspaceName string `protobuf:"bytes,11,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *FindExperiments) Reset() {
	*x = FindExperiments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindExperiments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindExperiments) ProtoMessage() {}

func (x *FindExperiments) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindExperiments.ProtoReflect.Descriptor instead.
func (*FindExperiments) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{17}
}

func (x *FindExperiments) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FindExperiments) GetExperimentIds() []string {
	if x != nil {
		return x.ExperimentIds
	}
	return nil
}

func (x *FindExperiments) GetPredicates() []*common.KeyValueQuery {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *FindExperiments) GetIdsOnly() bool {
	if x != nil {
		return x.IdsOnly
	}
	return false
}

func (x *FindExperiments) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *FindExperiments) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *FindExperiments) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *FindExperiments) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *FindExperiments) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

// artifacts
type LogExperimentArtifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Artifacts []*common.Artifact `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *LogExperimentArtifacts) Reset() {
	*x = LogExperimentArtifacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogExperimentArtifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogExperimentArtifacts) ProtoMessage() {}

func (x *LogExperimentArtifacts) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogExperimentArtifacts.ProtoReflect.Descriptor instead.
func (*LogExperimentArtifacts) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{18}
}

func (x *LogExperimentArtifacts) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogExperimentArtifacts) GetArtifacts() []*common.Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type DeleteExperimentArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteExperimentArtifact) Reset() {
	*x = DeleteExperimentArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentArtifact) ProtoMessage() {}

func (x *DeleteExperimentArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentArtifact.ProtoReflect.Descriptor instead.
func (*DeleteExperimentArtifact) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteExperimentArtifact) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteExperimentArtifact) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DeleteExperiments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteExperiments) Reset() {
	*x = DeleteExperiments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperiments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperiments) ProtoMessage() {}

func (x *DeleteExperiments) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperiments.ProtoReflect.Descriptor instead.
func (*DeleteExperiments) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteExperiments) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetExperimentsInProject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiments  []*Experiment `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
	TotalRecords int64         `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetExperimentsInProject_Response) Reset() {
	*x = GetExperimentsInProject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentsInProject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentsInProject_Response) ProtoMessage() {}

func (x *GetExperimentsInProject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentsInProject_Response.ProtoReflect.Descriptor instead.
func (*GetExperimentsInProject_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetExperimentsInProject_Response) GetExperiments() []*Experiment {
	if x != nil {
		return x.Experiments
	}
	return nil
}

func (x *GetExperimentsInProject_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetExperimentById_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *GetExperimentById_Response) Reset() {
	*x = GetExperimentById_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentById_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentById_Response) ProtoMessage() {}

func (x *GetExperimentById_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentById_Response.ProtoReflect.Descriptor instead.
func (*GetExperimentById_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetExperimentById_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type GetExperimentByName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *GetExperimentByName_Response) Reset() {
	*x = GetExperimentByName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentByName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentByName_Response) ProtoMessage() {}

func (x *GetExperimentByName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentByName_Response.ProtoReflect.Descriptor instead.
func (*GetExperimentByName_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetExperimentByName_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type CreateExperiment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *CreateExperiment_Response) Reset() {
	*x = CreateExperiment_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperiment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperiment_Response) ProtoMessage() {}

func (x *CreateExperiment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperiment_Response.ProtoReflect.Descriptor instead.
func (*CreateExperiment_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CreateExperiment_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type DeleteExperiment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteExperiment_Response) Reset() {
	*x = DeleteExperiment_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperiment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperiment_Response) ProtoMessage() {}

func (x *DeleteExperiment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperiment_Response.ProtoReflect.Descriptor instead.
func (*DeleteExperiment_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DeleteExperiment_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type UpdateExperimentNameOrDescription_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *UpdateExperimentNameOrDescription_Response) Reset() {
	*x = UpdateExperimentNameOrDescription_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentNameOrDescription_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentNameOrDescription_Response) ProtoMessage() {}

func (x *UpdateExperimentNameOrDescription_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentNameOrDescription_Response.ProtoReflect.Descriptor instead.
func (*UpdateExperimentNameOrDescription_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdateExperimentNameOrDescription_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type UpdateExperimentName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *UpdateExperimentName_Response) Reset() {
	*x = UpdateExperimentName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentName_Response) ProtoMessage() {}

func (x *UpdateExperimentName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentName_Response.ProtoReflect.Descriptor instead.
func (*UpdateExperimentName_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UpdateExperimentName_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type UpdateExperimentDescription_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *UpdateExperimentDescription_Response) Reset() {
	*x = UpdateExperimentDescription_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentDescription_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentDescription_Response) ProtoMessage() {}

func (x *UpdateExperimentDescription_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentDescription_Response.ProtoReflect.Descriptor instead.
func (*UpdateExperimentDescription_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UpdateExperimentDescription_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type AddExperimentTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *AddExperimentTags_Response) Reset() {
	*x = AddExperimentTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExperimentTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExperimentTags_Response) ProtoMessage() {}

func (x *AddExperimentTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExperimentTags_Response.ProtoReflect.Descriptor instead.
func (*AddExperimentTags_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AddExperimentTags_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type DeleteExperimentTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *DeleteExperimentTags_Response) Reset() {
	*x = DeleteExperimentTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentTags_Response) ProtoMessage() {}

func (x *DeleteExperimentTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentTags_Response.ProtoReflect.Descriptor instead.
func (*DeleteExperimentTags_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{10, 0}
}

func (x *DeleteExperimentTags_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type AddExperimentTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *AddExperimentTag_Response) Reset() {
	*x = AddExperimentTag_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExperimentTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExperimentTag_Response) ProtoMessage() {}

func (x *AddExperimentTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExperimentTag_Response.ProtoReflect.Descriptor instead.
func (*AddExperimentTag_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{11, 0}
}

func (x *AddExperimentTag_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type DeleteExperimentTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *DeleteExperimentTag_Response) Reset() {
	*x = DeleteExperimentTag_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentTag_Response) ProtoMessage() {}

func (x *DeleteExperimentTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentTag_Response.ProtoReflect.Descriptor instead.
func (*DeleteExperimentTag_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{12, 0}
}

func (x *DeleteExperimentTag_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type AddExperimentAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *AddExperimentAttributes_Response) Reset() {
	*x = AddExperimentAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExperimentAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExperimentAttributes_Response) ProtoMessage() {}

func (x *AddExperimentAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExperimentAttributes_Response.ProtoReflect.Descriptor instead.
func (*AddExperimentAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{13, 0}
}

func (x *AddExperimentAttributes_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type DeleteExperimentAttributes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *DeleteExperimentAttributes_Response) Reset() {
	*x = DeleteExperimentAttributes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentAttributes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentAttributes_Response) ProtoMessage() {}

func (x *DeleteExperimentAttributes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentAttributes_Response.ProtoReflect.Descriptor instead.
func (*DeleteExperimentAttributes_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{14, 0}
}

func (x *DeleteExperimentAttributes_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type LogExperimentCodeVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *LogExperimentCodeVersion_Response) Reset() {
	*x = LogExperimentCodeVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogExperimentCodeVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogExperimentCodeVersion_Response) ProtoMessage() {}

func (x *LogExperimentCodeVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogExperimentCodeVersion_Response.ProtoReflect.Descriptor instead.
func (*LogExperimentCodeVersion_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{15, 0}
}

func (x *LogExperimentCodeVersion_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type GetExperimentCodeVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeVersion *CodeVersion `protobuf:"bytes,1,opt,name=code_version,json=codeVersion,proto3" json:"code_version,omitempty"`
}

func (x *GetExperimentCodeVersion_Response) Reset() {
	*x = GetExperimentCodeVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentCodeVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentCodeVersion_Response) ProtoMessage() {}

func (x *GetExperimentCodeVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentCodeVersion_Response.ProtoReflect.Descriptor instead.
func (*GetExperimentCodeVersion_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GetExperimentCodeVersion_Response) GetCodeVersion() *CodeVersion {
	if x != nil {
		return x.CodeVersion
	}
	return nil
}

type FindExperiments_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiments  []*Experiment `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
	TotalRecords int64         `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *FindExperiments_Response) Reset() {
	*x = FindExperiments_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindExperiments_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindExperiments_Response) ProtoMessage() {}

func (x *FindExperiments_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindExperiments_Response.ProtoReflect.Descriptor instead.
func (*FindExperiments_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{17, 0}
}

func (x *FindExperiments_Response) GetExperiments() []*Experiment {
	if x != nil {
		return x.Experiments
	}
	return nil
}

func (x *FindExperiments_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type LogExperimentArtifacts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *LogExperimentArtifacts_Response) Reset() {
	*x = LogExperimentArtifacts_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogExperimentArtifacts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogExperimentArtifacts_Response) ProtoMessage() {}

func (x *LogExperimentArtifacts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogExperimentArtifacts_Response.ProtoReflect.Descriptor instead.
func (*LogExperimentArtifacts_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{18, 0}
}

func (x *LogExperimentArtifacts_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type DeleteExperimentArtifact_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *DeleteExperimentArtifact_Response) Reset() {
	*x = DeleteExperimentArtifact_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentArtifact_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentArtifact_Response) ProtoMessage() {}

func (x *DeleteExperimentArtifact_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentArtifact_Response.ProtoReflect.Descriptor instead.
func (*DeleteExperimentArtifact_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{19, 0}
}

func (x *DeleteExperimentArtifact_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type DeleteExperiments_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteExperiments_Response) Reset() {
	*x = DeleteExperiments_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_ExperimentService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperiments_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperiments_Response) ProtoMessage() {}

func (x *DeleteExperiments_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_ExperimentService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperiments_Response.ProtoReflect.Descriptor instead.
func (*DeleteExperiments_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_ExperimentService_proto_rawDescGZIP(), []int{20, 0}
}

func (x *DeleteExperiments_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_modeldb_ExperimentService_proto protoreflect.FileDescriptor

var file_modeldb_ExperimentService_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x03, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x6f, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a,
	0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xff,
	0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x46, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x84,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x48, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x48, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7e, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xae, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0c,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x48,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x4c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xc3, 0x03, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x6f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x67,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x48, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x49, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xf9, 0x1e, 0x0a, 0x11, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8f, 0x01, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0xd3, 0x01, 0x0a, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xbb, 0x01, 0x0a, 0x1b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7c,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x22,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x9f, 0x01, 0x0a,
	0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x2f, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8f,
	0x01, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x3a, 0x01, 0x2a,
	0x12, 0x9b, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x1a,
	0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x81,
	0x01, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0xab, 0x01, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x94, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x28, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12,
	0x26, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xaf,
	0x01, 0x0a, 0x18, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0xac, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0xa8, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x98, 0x01,
	0x0a, 0x13, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2e, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x12, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46,
	0x6f, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x55,
	0x72, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x69, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x93,
	0x01, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x93, 0x01, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x2c, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x42, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_modeldb_ExperimentService_proto_rawDescOnce sync.Once
	file_modeldb_ExperimentService_proto_rawDescData = file_modeldb_ExperimentService_proto_rawDesc
)

func file_modeldb_ExperimentService_proto_rawDescGZIP() []byte {
	file_modeldb_ExperimentService_proto_rawDescOnce.Do(func() {
		file_modeldb_ExperimentService_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_ExperimentService_proto_rawDescData)
	})
	return file_modeldb_ExperimentService_proto_rawDescData
}

var file_modeldb_ExperimentService_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_modeldb_ExperimentService_proto_goTypes = []interface{}{
	(*Experiment)(nil),                                 // 0: ai.verta.modeldb.Experiment
	(*GetExperimentsInProject)(nil),                    // 1: ai.verta.modeldb.GetExperimentsInProject
	(*GetExperimentById)(nil),                          // 2: ai.verta.modeldb.GetExperimentById
	(*GetExperimentByName)(nil),                        // 3: ai.verta.modeldb.GetExperimentByName
	(*CreateExperiment)(nil),                           // 4: ai.verta.modeldb.CreateExperiment
	(*DeleteExperiment)(nil),                           // 5: ai.verta.modeldb.DeleteExperiment
	(*UpdateExperimentNameOrDescription)(nil),          // 6: ai.verta.modeldb.UpdateExperimentNameOrDescription
	(*UpdateExperimentName)(nil),                       // 7: ai.verta.modeldb.UpdateExperimentName
	(*UpdateExperimentDescription)(nil),                // 8: ai.verta.modeldb.UpdateExperimentDescription
	(*AddExperimentTags)(nil),                          // 9: ai.verta.modeldb.AddExperimentTags
	(*DeleteExperimentTags)(nil),                       // 10: ai.verta.modeldb.DeleteExperimentTags
	(*AddExperimentTag)(nil),                           // 11: ai.verta.modeldb.AddExperimentTag
	(*DeleteExperimentTag)(nil),                        // 12: ai.verta.modeldb.DeleteExperimentTag
	(*AddExperimentAttributes)(nil),                    // 13: ai.verta.modeldb.AddExperimentAttributes
	(*DeleteExperimentAttributes)(nil),                 // 14: ai.verta.modeldb.DeleteExperimentAttributes
	(*LogExperimentCodeVersion)(nil),                   // 15: ai.verta.modeldb.LogExperimentCodeVersion
	(*GetExperimentCodeVersion)(nil),                   // 16: ai.verta.modeldb.GetExperimentCodeVersion
	(*FindExperiments)(nil),                            // 17: ai.verta.modeldb.FindExperiments
	(*LogExperimentArtifacts)(nil),                     // 18: ai.verta.modeldb.LogExperimentArtifacts
	(*DeleteExperimentArtifact)(nil),                   // 19: ai.verta.modeldb.DeleteExperimentArtifact
	(*DeleteExperiments)(nil),                          // 20: ai.verta.modeldb.DeleteExperiments
	(*GetExperimentsInProject_Response)(nil),           // 21: ai.verta.modeldb.GetExperimentsInProject.Response
	(*GetExperimentById_Response)(nil),                 // 22: ai.verta.modeldb.GetExperimentById.Response
	(*GetExperimentByName_Response)(nil),               // 23: ai.verta.modeldb.GetExperimentByName.Response
	(*CreateExperiment_Response)(nil),                  // 24: ai.verta.modeldb.CreateExperiment.Response
	(*DeleteExperiment_Response)(nil),                  // 25: ai.verta.modeldb.DeleteExperiment.Response
	(*UpdateExperimentNameOrDescription_Response)(nil), // 26: ai.verta.modeldb.UpdateExperimentNameOrDescription.Response
	(*UpdateExperimentName_Response)(nil),              // 27: ai.verta.modeldb.UpdateExperimentName.Response
	(*UpdateExperimentDescription_Response)(nil),       // 28: ai.verta.modeldb.UpdateExperimentDescription.Response
	(*AddExperimentTags_Response)(nil),                 // 29: ai.verta.modeldb.AddExperimentTags.Response
	(*DeleteExperimentTags_Response)(nil),              // 30: ai.verta.modeldb.DeleteExperimentTags.Response
	(*AddExperimentTag_Response)(nil),                  // 31: ai.verta.modeldb.AddExperimentTag.Response
	(*DeleteExperimentTag_Response)(nil),               // 32: ai.verta.modeldb.DeleteExperimentTag.Response
	(*AddExperimentAttributes_Response)(nil),           // 33: ai.verta.modeldb.AddExperimentAttributes.Response
	(*DeleteExperimentAttributes_Response)(nil),        // 34: ai.verta.modeldb.DeleteExperimentAttributes.Response
	(*LogExperimentCodeVersion_Response)(nil),          // 35: ai.verta.modeldb.LogExperimentCodeVersion.Response
	(*GetExperimentCodeVersion_Response)(nil),          // 36: ai.verta.modeldb.GetExperimentCodeVersion.Response
	(*FindExperiments_Response)(nil),                   // 37: ai.verta.modeldb.FindExperiments.Response
	(*LogExperimentArtifacts_Response)(nil),            // 38: ai.verta.modeldb.LogExperimentArtifacts.Response
	(*DeleteExperimentArtifact_Response)(nil),          // 39: ai.verta.modeldb.DeleteExperimentArtifact.Response
	(*DeleteExperiments_Response)(nil),                 // 40: ai.verta.modeldb.DeleteExperiments.Response
	(*common.KeyValue)(nil),                            // 41: ai.verta.common.KeyValue
	(*CodeVersion)(nil),                                // 42: ai.verta.modeldb.CodeVersion
	(*common.Artifact)(nil),                            // 43: ai.verta.common.Artifact
	(*common.KeyValueQuery)(nil),                       // 44: ai.verta.common.KeyValueQuery
	(*GetTags)(nil),                                    // 45: ai.verta.modeldb.GetTags
	(*AddAttributes)(nil),                              // 46: ai.verta.modeldb.AddAttributes
	(*GetAttributes)(nil),                              // 47: ai.verta.modeldb.GetAttributes
	(*GetUrlForArtifact)(nil),                          // 48: ai.verta.modeldb.GetUrlForArtifact
	(*GetArtifacts)(nil),                               // 49: ai.verta.modeldb.GetArtifacts
	(*GetTags_Response)(nil),                           // 50: ai.verta.modeldb.GetTags.Response
	(*AddAttributes_Response)(nil),                     // 51: ai.verta.modeldb.AddAttributes.Response
	(*GetAttributes_Response)(nil),                     // 52: ai.verta.modeldb.GetAttributes.Response
	(*GetUrlForArtifact_Response)(nil),                 // 53: ai.verta.modeldb.GetUrlForArtifact.Response
	(*GetArtifacts_Response)(nil),                      // 54: ai.verta.modeldb.GetArtifacts.Response
}
var file_modeldb_ExperimentService_proto_depIdxs = []int32{
	41, // 0: ai.verta.modeldb.Experiment.attributes:type_name -> ai.verta.common.KeyValue
	42, // 1: ai.verta.modeldb.Experiment.code_version_snapshot:type_name -> ai.verta.modeldb.CodeVersion
	43, // 2: ai.verta.modeldb.Experiment.artifacts:type_name -> ai.verta.common.Artifact
	41, // 3: ai.verta.modeldb.CreateExperiment.attributes:type_name -> ai.verta.common.KeyValue
	43, // 4: ai.verta.modeldb.CreateExperiment.artifacts:type_name -> ai.verta.common.Artifact
	41, // 5: ai.verta.modeldb.AddExperimentAttributes.attributes:type_name -> ai.verta.common.KeyValue
	42, // 6: ai.verta.modeldb.LogExperimentCodeVersion.code_version:type_name -> ai.verta.modeldb.CodeVersion
	44, // 7: ai.verta.modeldb.FindExperiments.predicates:type_name -> ai.verta.common.KeyValueQuery
	43, // 8: ai.verta.modeldb.LogExperimentArtifacts.artifacts:type_name -> ai.verta.common.Artifact
	0,  // 9: ai.verta.modeldb.GetExperimentsInProject.Response.experiments:type_name -> ai.verta.modeldb.Experiment
	0,  // 10: ai.verta.modeldb.GetExperimentById.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 11: ai.verta.modeldb.GetExperimentByName.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 12: ai.verta.modeldb.CreateExperiment.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 13: ai.verta.modeldb.UpdateExperimentNameOrDescription.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 14: ai.verta.modeldb.UpdateExperimentName.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 15: ai.verta.modeldb.UpdateExperimentDescription.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 16: ai.verta.modeldb.AddExperimentTags.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 17: ai.verta.modeldb.DeleteExperimentTags.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 18: ai.verta.modeldb.AddExperimentTag.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 19: ai.verta.modeldb.DeleteExperimentTag.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 20: ai.verta.modeldb.AddExperimentAttributes.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 21: ai.verta.modeldb.DeleteExperimentAttributes.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 22: ai.verta.modeldb.LogExperimentCodeVersion.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	42, // 23: ai.verta.modeldb.GetExperimentCodeVersion.Response.code_version:type_name -> ai.verta.modeldb.CodeVersion
	0,  // 24: ai.verta.modeldb.FindExperiments.Response.experiments:type_name -> ai.verta.modeldb.Experiment
	0,  // 25: ai.verta.modeldb.LogExperimentArtifacts.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	0,  // 26: ai.verta.modeldb.DeleteExperimentArtifact.Response.experiment:type_name -> ai.verta.modeldb.Experiment
	4,  // 27: ai.verta.modeldb.ExperimentService.createExperiment:input_type -> ai.verta.modeldb.CreateExperiment
	6,  // 28: ai.verta.modeldb.ExperimentService.updateExperimentNameOrDescription:input_type -> ai.verta.modeldb.UpdateExperimentNameOrDescription
	7,  // 29: ai.verta.modeldb.ExperimentService.updateExperimentName:input_type -> ai.verta.modeldb.UpdateExperimentName
	8,  // 30: ai.verta.modeldb.ExperimentService.updateExperimentDescription:input_type -> ai.verta.modeldb.UpdateExperimentDescription
	9,  // 31: ai.verta.modeldb.ExperimentService.addExperimentTags:input_type -> ai.verta.modeldb.AddExperimentTags
	45, // 32: ai.verta.modeldb.ExperimentService.getExperimentTags:input_type -> ai.verta.modeldb.GetTags
	10, // 33: ai.verta.modeldb.ExperimentService.deleteExperimentTags:input_type -> ai.verta.modeldb.DeleteExperimentTags
	11, // 34: ai.verta.modeldb.ExperimentService.addExperimentTag:input_type -> ai.verta.modeldb.AddExperimentTag
	12, // 35: ai.verta.modeldb.ExperimentService.deleteExperimentTag:input_type -> ai.verta.modeldb.DeleteExperimentTag
	46, // 36: ai.verta.modeldb.ExperimentService.addAttribute:input_type -> ai.verta.modeldb.AddAttributes
	13, // 37: ai.verta.modeldb.ExperimentService.addExperimentAttributes:input_type -> ai.verta.modeldb.AddExperimentAttributes
	47, // 38: ai.verta.modeldb.ExperimentService.getExperimentAttributes:input_type -> ai.verta.modeldb.GetAttributes
	14, // 39: ai.verta.modeldb.ExperimentService.deleteExperimentAttributes:input_type -> ai.verta.modeldb.DeleteExperimentAttributes
	15, // 40: ai.verta.modeldb.ExperimentService.logExperimentCodeVersion:input_type -> ai.verta.modeldb.LogExperimentCodeVersion
	16, // 41: ai.verta.modeldb.ExperimentService.getExperimentCodeVersion:input_type -> ai.verta.modeldb.GetExperimentCodeVersion
	1,  // 42: ai.verta.modeldb.ExperimentService.getExperimentsInProject:input_type -> ai.verta.modeldb.GetExperimentsInProject
	2,  // 43: ai.verta.modeldb.ExperimentService.getExperimentById:input_type -> ai.verta.modeldb.GetExperimentById
	3,  // 44: ai.verta.modeldb.ExperimentService.getExperimentByName:input_type -> ai.verta.modeldb.GetExperimentByName
	5,  // 45: ai.verta.modeldb.ExperimentService.deleteExperiment:input_type -> ai.verta.modeldb.DeleteExperiment
	48, // 46: ai.verta.modeldb.ExperimentService.getUrlForArtifact:input_type -> ai.verta.modeldb.GetUrlForArtifact
	17, // 47: ai.verta.modeldb.ExperimentService.findExperiments:input_type -> ai.verta.modeldb.FindExperiments
	18, // 48: ai.verta.modeldb.ExperimentService.logArtifacts:input_type -> ai.verta.modeldb.LogExperimentArtifacts
	49, // 49: ai.verta.modeldb.ExperimentService.getArtifacts:input_type -> ai.verta.modeldb.GetArtifacts
	19, // 50: ai.verta.modeldb.ExperimentService.deleteArtifact:input_type -> ai.verta.modeldb.DeleteExperimentArtifact
	20, // 51: ai.verta.modeldb.ExperimentService.deleteExperiments:input_type -> ai.verta.modeldb.DeleteExperiments
	24, // 52: ai.verta.modeldb.ExperimentService.createExperiment:output_type -> ai.verta.modeldb.CreateExperiment.Response
	26, // 53: ai.verta.modeldb.ExperimentService.updateExperimentNameOrDescription:output_type -> ai.verta.modeldb.UpdateExperimentNameOrDescription.Response
	27, // 54: ai.verta.modeldb.ExperimentService.updateExperimentName:output_type -> ai.verta.modeldb.UpdateExperimentName.Response
	28, // 55: ai.verta.modeldb.ExperimentService.updateExperimentDescription:output_type -> ai.verta.modeldb.UpdateExperimentDescription.Response
	29, // 56: ai.verta.modeldb.ExperimentService.addExperimentTags:output_type -> ai.verta.modeldb.AddExperimentTags.Response
	50, // 57: ai.verta.modeldb.ExperimentService.getExperimentTags:output_type -> ai.verta.modeldb.GetTags.Response
	30, // 58: ai.verta.modeldb.ExperimentService.deleteExperimentTags:output_type -> ai.verta.modeldb.DeleteExperimentTags.Response
	31, // 59: ai.verta.modeldb.ExperimentService.addExperimentTag:output_type -> ai.verta.modeldb.AddExperimentTag.Response
	32, // 60: ai.verta.modeldb.ExperimentService.deleteExperimentTag:output_type -> ai.verta.modeldb.DeleteExperimentTag.Response
	51, // 61: ai.verta.modeldb.ExperimentService.addAttribute:output_type -> ai.verta.modeldb.AddAttributes.Response
	33, // 62: ai.verta.modeldb.ExperimentService.addExperimentAttributes:output_type -> ai.verta.modeldb.AddExperimentAttributes.Response
	52, // 63: ai.verta.modeldb.ExperimentService.getExperimentAttributes:output_type -> ai.verta.modeldb.GetAttributes.Response
	34, // 64: ai.verta.modeldb.ExperimentService.deleteExperimentAttributes:output_type -> ai.verta.modeldb.DeleteExperimentAttributes.Response
	35, // 65: ai.verta.modeldb.ExperimentService.logExperimentCodeVersion:output_type -> ai.verta.modeldb.LogExperimentCodeVersion.Response
	36, // 66: ai.verta.modeldb.ExperimentService.getExperimentCodeVersion:output_type -> ai.verta.modeldb.GetExperimentCodeVersion.Response
	21, // 67: ai.verta.modeldb.ExperimentService.getExperimentsInProject:output_type -> ai.verta.modeldb.GetExperimentsInProject.Response
	22, // 68: ai.verta.modeldb.ExperimentService.getExperimentById:output_type -> ai.verta.modeldb.GetExperimentById.Response
	23, // 69: ai.verta.modeldb.ExperimentService.getExperimentByName:output_type -> ai.verta.modeldb.GetExperimentByName.Response
	25, // 70: ai.verta.modeldb.ExperimentService.deleteExperiment:output_type -> ai.verta.modeldb.DeleteExperiment.Response
	53, // 71: ai.verta.modeldb.ExperimentService.getUrlForArtifact:output_type -> ai.verta.modeldb.GetUrlForArtifact.Response
	37, // 72: ai.verta.modeldb.ExperimentService.findExperiments:output_type -> ai.verta.modeldb.FindExperiments.Response
	38, // 73: ai.verta.modeldb.ExperimentService.logArtifacts:output_type -> ai.verta.modeldb.LogExperimentArtifacts.Response
	54, // 74: ai.verta.modeldb.ExperimentService.getArtifacts:output_type -> ai.verta.modeldb.GetArtifacts.Response
	39, // 75: ai.verta.modeldb.ExperimentService.deleteArtifact:output_type -> ai.verta.modeldb.DeleteExperimentArtifact.Response
	40, // 76: ai.verta.modeldb.ExperimentService.deleteExperiments:output_type -> ai.verta.modeldb.DeleteExperiments.Response
	52, // [52:77] is the sub-list for method output_type
	27, // [27:52] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_modeldb_ExperimentService_proto_init() }
func file_modeldb_ExperimentService_proto_init() {
	if File_modeldb_ExperimentService_proto != nil {
		return
	}
	file_modeldb_CommonService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_ExperimentService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentsInProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentNameOrDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExperimentTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExperimentTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExperimentAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogExperimentCodeVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentCodeVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindExperiments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogExperimentArtifacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperiments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentsInProject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentById_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentByName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperiment_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperiment_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentNameOrDescription_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentDescription_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExperimentTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExperimentTag_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentTag_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExperimentAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentAttributes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogExperimentCodeVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentCodeVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindExperiments_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogExperimentArtifacts_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentArtifact_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_ExperimentService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperiments_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_ExperimentService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modeldb_ExperimentService_proto_goTypes,
		DependencyIndexes: file_modeldb_ExperimentService_proto_depIdxs,
		MessageInfos:      file_modeldb_ExperimentService_proto_msgTypes,
	}.Build()
	File_modeldb_ExperimentService_proto = out.File
	file_modeldb_ExperimentService_proto_rawDesc = nil
	file_modeldb_ExperimentService_proto_goTypes = nil
	file_modeldb_ExperimentService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExperimentServiceClient is the client API for ExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExperimentServiceClient interface {
	CreateExperiment(ctx context.Context, in *CreateExperiment, opts ...grpc.CallOption) (*CreateExperiment_Response, error)
	UpdateExperimentNameOrDescription(ctx context.Context, in *UpdateExperimentNameOrDescription, opts ...grpc.CallOption) (*UpdateExperimentNameOrDescription_Response, error)
	UpdateExperimentName(ctx context.Context, in *UpdateExperimentName, opts ...grpc.CallOption) (*UpdateExperimentName_Response, error)
	UpdateExperimentDescription(ctx context.Context, in *UpdateExperimentDescription, opts ...grpc.CallOption) (*UpdateExperimentDescription_Response, error)
	AddExperimentTags(ctx context.Context, in *AddExperimentTags, opts ...grpc.CallOption) (*AddExperimentTags_Response, error)
	GetExperimentTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error)
	DeleteExperimentTags(ctx context.Context, in *DeleteExperimentTags, opts ...grpc.CallOption) (*DeleteExperimentTags_Response, error)
	AddExperimentTag(ctx context.Context, in *AddExperimentTag, opts ...grpc.CallOption) (*AddExperimentTag_Response, error)
	DeleteExperimentTag(ctx context.Context, in *DeleteExperimentTag, opts ...grpc.CallOption) (*DeleteExperimentTag_Response, error)
	AddAttribute(ctx context.Context, in *AddAttributes, opts ...grpc.CallOption) (*AddAttributes_Response, error)
	AddExperimentAttributes(ctx context.Context, in *AddExperimentAttributes, opts ...grpc.CallOption) (*AddExperimentAttributes_Response, error)
	GetExperimentAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error)
	DeleteExperimentAttributes(ctx context.Context, in *DeleteExperimentAttributes, opts ...grpc.CallOption) (*DeleteExperimentAttributes_Response, error)
	// code version
	LogExperimentCodeVersion(ctx context.Context, in *LogExperimentCodeVersion, opts ...grpc.CallOption) (*LogExperimentCodeVersion_Response, error)
	GetExperimentCodeVersion(ctx context.Context, in *GetExperimentCodeVersion, opts ...grpc.CallOption) (*GetExperimentCodeVersion_Response, error)
	GetExperimentsInProject(ctx context.Context, in *GetExperimentsInProject, opts ...grpc.CallOption) (*GetExperimentsInProject_Response, error)
	GetExperimentById(ctx context.Context, in *GetExperimentById, opts ...grpc.CallOption) (*GetExperimentById_Response, error)
	GetExperimentByName(ctx context.Context, in *GetExperimentByName, opts ...grpc.CallOption) (*GetExperimentByName_Response, error)
	DeleteExperiment(ctx context.Context, in *DeleteExperiment, opts ...grpc.CallOption) (*DeleteExperiment_Response, error)
	// artifacts
	GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error)
	// queries
	FindExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*FindExperiments_Response, error)
	// artifacts
	LogArtifacts(ctx context.Context, in *LogExperimentArtifacts, opts ...grpc.CallOption) (*LogExperimentArtifacts_Response, error)
	GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error)
	DeleteArtifact(ctx context.Context, in *DeleteExperimentArtifact, opts ...grpc.CallOption) (*DeleteExperimentArtifact_Response, error)
	DeleteExperiments(ctx context.Context, in *DeleteExperiments, opts ...grpc.CallOption) (*DeleteExperiments_Response, error)
}

type experimentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentServiceClient(cc grpc.ClientConnInterface) ExperimentServiceClient {
	return &experimentServiceClient{cc}
}

func (c *experimentServiceClient) CreateExperiment(ctx context.Context, in *CreateExperiment, opts ...grpc.CallOption) (*CreateExperiment_Response, error) {
	out := new(CreateExperiment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/createExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperimentNameOrDescription(ctx context.Context, in *UpdateExperimentNameOrDescription, opts ...grpc.CallOption) (*UpdateExperimentNameOrDescription_Response, error) {
	out := new(UpdateExperimentNameOrDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/updateExperimentNameOrDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperimentName(ctx context.Context, in *UpdateExperimentName, opts ...grpc.CallOption) (*UpdateExperimentName_Response, error) {
	out := new(UpdateExperimentName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/updateExperimentName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperimentDescription(ctx context.Context, in *UpdateExperimentDescription, opts ...grpc.CallOption) (*UpdateExperimentDescription_Response, error) {
	out := new(UpdateExperimentDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/updateExperimentDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddExperimentTags(ctx context.Context, in *AddExperimentTags, opts ...grpc.CallOption) (*AddExperimentTags_Response, error) {
	out := new(AddExperimentTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addExperimentTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error) {
	out := new(GetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperimentTags(ctx context.Context, in *DeleteExperimentTags, opts ...grpc.CallOption) (*DeleteExperimentTags_Response, error) {
	out := new(DeleteExperimentTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperimentTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddExperimentTag(ctx context.Context, in *AddExperimentTag, opts ...grpc.CallOption) (*AddExperimentTag_Response, error) {
	out := new(AddExperimentTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addExperimentTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperimentTag(ctx context.Context, in *DeleteExperimentTag, opts ...grpc.CallOption) (*DeleteExperimentTag_Response, error) {
	out := new(DeleteExperimentTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperimentTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddAttribute(ctx context.Context, in *AddAttributes, opts ...grpc.CallOption) (*AddAttributes_Response, error) {
	out := new(AddAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) AddExperimentAttributes(ctx context.Context, in *AddExperimentAttributes, opts ...grpc.CallOption) (*AddExperimentAttributes_Response, error) {
	out := new(AddExperimentAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/addExperimentAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error) {
	out := new(GetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperimentAttributes(ctx context.Context, in *DeleteExperimentAttributes, opts ...grpc.CallOption) (*DeleteExperimentAttributes_Response, error) {
	out := new(DeleteExperimentAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperimentAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) LogExperimentCodeVersion(ctx context.Context, in *LogExperimentCodeVersion, opts ...grpc.CallOption) (*LogExperimentCodeVersion_Response, error) {
	out := new(LogExperimentCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/logExperimentCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentCodeVersion(ctx context.Context, in *GetExperimentCodeVersion, opts ...grpc.CallOption) (*GetExperimentCodeVersion_Response, error) {
	out := new(GetExperimentCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentsInProject(ctx context.Context, in *GetExperimentsInProject, opts ...grpc.CallOption) (*GetExperimentsInProject_Response, error) {
	out := new(GetExperimentsInProject_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentsInProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentById(ctx context.Context, in *GetExperimentById, opts ...grpc.CallOption) (*GetExperimentById_Response, error) {
	out := new(GetExperimentById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentByName(ctx context.Context, in *GetExperimentByName, opts ...grpc.CallOption) (*GetExperimentByName_Response, error) {
	out := new(GetExperimentByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getExperimentByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiment(ctx context.Context, in *DeleteExperiment, opts ...grpc.CallOption) (*DeleteExperiment_Response, error) {
	out := new(DeleteExperiment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error) {
	out := new(GetUrlForArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getUrlForArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) FindExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*FindExperiments_Response, error) {
	out := new(FindExperiments_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/findExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) LogArtifacts(ctx context.Context, in *LogExperimentArtifacts, opts ...grpc.CallOption) (*LogExperimentArtifacts_Response, error) {
	out := new(LogExperimentArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/logArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error) {
	out := new(GetArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/getArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteArtifact(ctx context.Context, in *DeleteExperimentArtifact, opts ...grpc.CallOption) (*DeleteExperimentArtifact_Response, error) {
	out := new(DeleteExperimentArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiments(ctx context.Context, in *DeleteExperiments, opts ...grpc.CallOption) (*DeleteExperiments_Response, error) {
	out := new(DeleteExperiments_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentService/deleteExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentServiceServer is the server API for ExperimentService service.
type ExperimentServiceServer interface {
	CreateExperiment(context.Context, *CreateExperiment) (*CreateExperiment_Response, error)
	UpdateExperimentNameOrDescription(context.Context, *UpdateExperimentNameOrDescription) (*UpdateExperimentNameOrDescription_Response, error)
	UpdateExperimentName(context.Context, *UpdateExperimentName) (*UpdateExperimentName_Response, error)
	UpdateExperimentDescription(context.Context, *UpdateExperimentDescription) (*UpdateExperimentDescription_Response, error)
	AddExperimentTags(context.Context, *AddExperimentTags) (*AddExperimentTags_Response, error)
	GetExperimentTags(context.Context, *GetTags) (*GetTags_Response, error)
	DeleteExperimentTags(context.Context, *DeleteExperimentTags) (*DeleteExperimentTags_Response, error)
	AddExperimentTag(context.Context, *AddExperimentTag) (*AddExperimentTag_Response, error)
	DeleteExperimentTag(context.Context, *DeleteExperimentTag) (*DeleteExperimentTag_Response, error)
	AddAttribute(context.Context, *AddAttributes) (*AddAttributes_Response, error)
	AddExperimentAttributes(context.Context, *AddExperimentAttributes) (*AddExperimentAttributes_Response, error)
	GetExperimentAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error)
	DeleteExperimentAttributes(context.Context, *DeleteExperimentAttributes) (*DeleteExperimentAttributes_Response, error)
	// code version
	LogExperimentCodeVersion(context.Context, *LogExperimentCodeVersion) (*LogExperimentCodeVersion_Response, error)
	GetExperimentCodeVersion(context.Context, *GetExperimentCodeVersion) (*GetExperimentCodeVersion_Response, error)
	GetExperimentsInProject(context.Context, *GetExperimentsInProject) (*GetExperimentsInProject_Response, error)
	GetExperimentById(context.Context, *GetExperimentById) (*GetExperimentById_Response, error)
	GetExperimentByName(context.Context, *GetExperimentByName) (*GetExperimentByName_Response, error)
	DeleteExperiment(context.Context, *DeleteExperiment) (*DeleteExperiment_Response, error)
	// artifacts
	GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error)
	// queries
	FindExperiments(context.Context, *FindExperiments) (*FindExperiments_Response, error)
	// artifacts
	LogArtifacts(context.Context, *LogExperimentArtifacts) (*LogExperimentArtifacts_Response, error)
	GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error)
	DeleteArtifact(context.Context, *DeleteExperimentArtifact) (*DeleteExperimentArtifact_Response, error)
	DeleteExperiments(context.Context, *DeleteExperiments) (*DeleteExperiments_Response, error)
}

// UnimplementedExperimentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExperimentServiceServer struct {
}

func (*UnimplementedExperimentServiceServer) CreateExperiment(context.Context, *CreateExperiment) (*CreateExperiment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) UpdateExperimentNameOrDescription(context.Context, *UpdateExperimentNameOrDescription) (*UpdateExperimentNameOrDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentNameOrDescription not implemented")
}
func (*UnimplementedExperimentServiceServer) UpdateExperimentName(context.Context, *UpdateExperimentName) (*UpdateExperimentName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentName not implemented")
}
func (*UnimplementedExperimentServiceServer) UpdateExperimentDescription(context.Context, *UpdateExperimentDescription) (*UpdateExperimentDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentDescription not implemented")
}
func (*UnimplementedExperimentServiceServer) AddExperimentTags(context.Context, *AddExperimentTags) (*AddExperimentTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentTags not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentTags(context.Context, *GetTags) (*GetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentTags not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperimentTags(context.Context, *DeleteExperimentTags) (*DeleteExperimentTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentTags not implemented")
}
func (*UnimplementedExperimentServiceServer) AddExperimentTag(context.Context, *AddExperimentTag) (*AddExperimentTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentTag not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperimentTag(context.Context, *DeleteExperimentTag) (*DeleteExperimentTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentTag not implemented")
}
func (*UnimplementedExperimentServiceServer) AddAttribute(context.Context, *AddAttributes) (*AddAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttribute not implemented")
}
func (*UnimplementedExperimentServiceServer) AddExperimentAttributes(context.Context, *AddExperimentAttributes) (*AddExperimentAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentAttributes not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentAttributes not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperimentAttributes(context.Context, *DeleteExperimentAttributes) (*DeleteExperimentAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentAttributes not implemented")
}
func (*UnimplementedExperimentServiceServer) LogExperimentCodeVersion(context.Context, *LogExperimentCodeVersion) (*LogExperimentCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogExperimentCodeVersion not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentCodeVersion(context.Context, *GetExperimentCodeVersion) (*GetExperimentCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentCodeVersion not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentsInProject(context.Context, *GetExperimentsInProject) (*GetExperimentsInProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentsInProject not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentById(context.Context, *GetExperimentById) (*GetExperimentById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentById not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentByName(context.Context, *GetExperimentByName) (*GetExperimentByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentByName not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperiment(context.Context, *DeleteExperiment) (*DeleteExperiment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForArtifact not implemented")
}
func (*UnimplementedExperimentServiceServer) FindExperiments(context.Context, *FindExperiments) (*FindExperiments_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) LogArtifacts(context.Context, *LogExperimentArtifacts) (*LogExperimentArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogArtifacts not implemented")
}
func (*UnimplementedExperimentServiceServer) GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteArtifact(context.Context, *DeleteExperimentArtifact) (*DeleteExperimentArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperiments(context.Context, *DeleteExperiments) (*DeleteExperiments_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiments not implemented")
}

func RegisterExperimentServiceServer(s *grpc.Server, srv ExperimentServiceServer) {
	s.RegisterService(&_ExperimentService_serviceDesc, srv)
}

func _ExperimentService_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperiment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, req.(*CreateExperiment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperimentNameOrDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentNameOrDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperimentNameOrDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/UpdateExperimentNameOrDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperimentNameOrDescription(ctx, req.(*UpdateExperimentNameOrDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperimentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperimentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/UpdateExperimentName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperimentName(ctx, req.(*UpdateExperimentName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperimentDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperimentDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/UpdateExperimentDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperimentDescription(ctx, req.(*UpdateExperimentDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddExperimentTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddExperimentTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/AddExperimentTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddExperimentTags(ctx, req.(*AddExperimentTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetExperimentTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentTags(ctx, req.(*GetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperimentTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperimentTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/DeleteExperimentTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperimentTags(ctx, req.(*DeleteExperimentTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddExperimentTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddExperimentTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/AddExperimentTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddExperimentTag(ctx, req.(*AddExperimentTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperimentTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperimentTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/DeleteExperimentTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperimentTag(ctx, req.(*DeleteExperimentTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/AddAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddAttribute(ctx, req.(*AddAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_AddExperimentAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).AddExperimentAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/AddExperimentAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).AddExperimentAttributes(ctx, req.(*AddExperimentAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetExperimentAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentAttributes(ctx, req.(*GetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperimentAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperimentAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/DeleteExperimentAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperimentAttributes(ctx, req.(*DeleteExperimentAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_LogExperimentCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogExperimentCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).LogExperimentCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/LogExperimentCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).LogExperimentCodeVersion(ctx, req.(*LogExperimentCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetExperimentCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentCodeVersion(ctx, req.(*GetExperimentCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentsInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentsInProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentsInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetExperimentsInProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentsInProject(ctx, req.(*GetExperimentsInProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetExperimentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentById(ctx, req.(*GetExperimentById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetExperimentByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentByName(ctx, req.(*GetExperimentByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperiment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, req.(*DeleteExperiment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetUrlForArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetUrlForArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetUrlForArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetUrlForArtifact(ctx, req.(*GetUrlForArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_FindExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExperiments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).FindExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/FindExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).FindExperiments(ctx, req.(*FindExperiments))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_LogArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogExperimentArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).LogArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/LogArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).LogArtifacts(ctx, req.(*LogExperimentArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetArtifacts(ctx, req.(*GetArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/DeleteArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteArtifact(ctx, req.(*DeleteExperimentArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperiments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentService/DeleteExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, req.(*DeleteExperiments))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExperimentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.ExperimentService",
	HandlerType: (*ExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createExperiment",
			Handler:    _ExperimentService_CreateExperiment_Handler,
		},
		{
			MethodName: "updateExperimentNameOrDescription",
			Handler:    _ExperimentService_UpdateExperimentNameOrDescription_Handler,
		},
		{
			MethodName: "updateExperimentName",
			Handler:    _ExperimentService_UpdateExperimentName_Handler,
		},
		{
			MethodName: "updateExperimentDescription",
			Handler:    _ExperimentService_UpdateExperimentDescription_Handler,
		},
		{
			MethodName: "addExperimentTags",
			Handler:    _ExperimentService_AddExperimentTags_Handler,
		},
		{
			MethodName: "getExperimentTags",
			Handler:    _ExperimentService_GetExperimentTags_Handler,
		},
		{
			MethodName: "deleteExperimentTags",
			Handler:    _ExperimentService_DeleteExperimentTags_Handler,
		},
		{
			MethodName: "addExperimentTag",
			Handler:    _ExperimentService_AddExperimentTag_Handler,
		},
		{
			MethodName: "deleteExperimentTag",
			Handler:    _ExperimentService_DeleteExperimentTag_Handler,
		},
		{
			MethodName: "addAttribute",
			Handler:    _ExperimentService_AddAttribute_Handler,
		},
		{
			MethodName: "addExperimentAttributes",
			Handler:    _ExperimentService_AddExperimentAttributes_Handler,
		},
		{
			MethodName: "getExperimentAttributes",
			Handler:    _ExperimentService_GetExperimentAttributes_Handler,
		},
		{
			MethodName: "deleteExperimentAttributes",
			Handler:    _ExperimentService_DeleteExperimentAttributes_Handler,
		},
		{
			MethodName: "logExperimentCodeVersion",
			Handler:    _ExperimentService_LogExperimentCodeVersion_Handler,
		},
		{
			MethodName: "getExperimentCodeVersion",
			Handler:    _ExperimentService_GetExperimentCodeVersion_Handler,
		},
		{
			MethodName: "getExperimentsInProject",
			Handler:    _ExperimentService_GetExperimentsInProject_Handler,
		},
		{
			MethodName: "getExperimentById",
			Handler:    _ExperimentService_GetExperimentById_Handler,
		},
		{
			MethodName: "getExperimentByName",
			Handler:    _ExperimentService_GetExperimentByName_Handler,
		},
		{
			MethodName: "deleteExperiment",
			Handler:    _ExperimentService_DeleteExperiment_Handler,
		},
		{
			MethodName: "getUrlForArtifact",
			Handler:    _ExperimentService_GetUrlForArtifact_Handler,
		},
		{
			MethodName: "findExperiments",
			Handler:    _ExperimentService_FindExperiments_Handler,
		},
		{
			MethodName: "logArtifacts",
			Handler:    _ExperimentService_LogArtifacts_Handler,
		},
		{
			MethodName: "getArtifacts",
			Handler:    _ExperimentService_GetArtifacts_Handler,
		},
		{
			MethodName: "deleteArtifact",
			Handler:    _ExperimentService_DeleteArtifact_Handler,
		},
		{
			MethodName: "deleteExperiments",
			Handler:    _ExperimentService_DeleteExperiments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/ExperimentService.proto",
}
