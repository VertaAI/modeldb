// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExperimentRunServiceClient is the client API for ExperimentRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperimentRunServiceClient interface {
	CreateExperimentRun(ctx context.Context, in *CreateExperimentRun, opts ...grpc.CallOption) (*CreateExperimentRun_Response, error)
	DeleteExperimentRun(ctx context.Context, in *DeleteExperimentRun, opts ...grpc.CallOption) (*DeleteExperimentRun_Response, error)
	// basic queries
	GetExperimentRunsInProject(ctx context.Context, in *GetExperimentRunsInProject, opts ...grpc.CallOption) (*GetExperimentRunsInProject_Response, error)
	GetExperimentRunsInExperiment(ctx context.Context, in *GetExperimentRunsInExperiment, opts ...grpc.CallOption) (*GetExperimentRunsInExperiment_Response, error)
	GetExperimentRunById(ctx context.Context, in *GetExperimentRunById, opts ...grpc.CallOption) (*GetExperimentRunById_Response, error)
	GetExperimentRunByName(ctx context.Context, in *GetExperimentRunByName, opts ...grpc.CallOption) (*GetExperimentRunByName_Response, error)
	UpdateExperimentRunName(ctx context.Context, in *UpdateExperimentRunName, opts ...grpc.CallOption) (*UpdateExperimentRunName_Response, error)
	UpdateExperimentRunDescription(ctx context.Context, in *UpdateExperimentRunDescription, opts ...grpc.CallOption) (*UpdateExperimentRunDescription_Response, error)
	// tags
	AddExperimentRunTags(ctx context.Context, in *AddExperimentRunTags, opts ...grpc.CallOption) (*AddExperimentRunTags_Response, error)
	GetExperimentRunTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error)
	DeleteExperimentRunTags(ctx context.Context, in *DeleteExperimentRunTags, opts ...grpc.CallOption) (*DeleteExperimentRunTags_Response, error)
	// tag
	AddExperimentRunTag(ctx context.Context, in *AddExperimentRunTag, opts ...grpc.CallOption) (*AddExperimentRunTag_Response, error)
	DeleteExperimentRunTag(ctx context.Context, in *DeleteExperimentRunTag, opts ...grpc.CallOption) (*DeleteExperimentRunTag_Response, error)
	// observation
	LogObservation(ctx context.Context, in *LogObservation, opts ...grpc.CallOption) (*LogObservation_Response, error)
	// observations
	LogObservations(ctx context.Context, in *LogObservations, opts ...grpc.CallOption) (*LogObservations_Response, error)
	GetObservations(ctx context.Context, in *GetObservations, opts ...grpc.CallOption) (*GetObservations_Response, error)
	// metric
	LogMetric(ctx context.Context, in *LogMetric, opts ...grpc.CallOption) (*LogMetric_Response, error)
	// metrics
	LogMetrics(ctx context.Context, in *LogMetrics, opts ...grpc.CallOption) (*LogMetrics_Response, error)
	GetMetrics(ctx context.Context, in *GetMetrics, opts ...grpc.CallOption) (*GetMetrics_Response, error)
	// dataset
	LogDataset(ctx context.Context, in *LogDataset, opts ...grpc.CallOption) (*LogDataset_Response, error)
	// datasets
	LogDatasets(ctx context.Context, in *LogDatasets, opts ...grpc.CallOption) (*LogDatasets_Response, error)
	GetDatasets(ctx context.Context, in *GetDatasets, opts ...grpc.CallOption) (*GetDatasets_Response, error)
	// hyperparameter
	LogHyperparameter(ctx context.Context, in *LogHyperparameter, opts ...grpc.CallOption) (*LogHyperparameter_Response, error)
	// hyperparameters
	LogHyperparameters(ctx context.Context, in *LogHyperparameters, opts ...grpc.CallOption) (*LogHyperparameters_Response, error)
	GetHyperparameters(ctx context.Context, in *GetHyperparameters, opts ...grpc.CallOption) (*GetHyperparameters_Response, error)
	// attribute
	LogAttribute(ctx context.Context, in *LogAttribute, opts ...grpc.CallOption) (*LogAttribute_Response, error)
	// attributes
	LogAttributes(ctx context.Context, in *LogAttributes, opts ...grpc.CallOption) (*LogAttributes_Response, error)
	GetExperimentRunAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error)
	AddExperimentRunAttributes(ctx context.Context, in *AddExperimentRunAttributes, opts ...grpc.CallOption) (*AddExperimentRunAttributes_Response, error)
	DeleteExperimentRunAttributes(ctx context.Context, in *DeleteExperimentRunAttributes, opts ...grpc.CallOption) (*DeleteExperimentRunAttributes_Response, error)
	LogEnvironment(ctx context.Context, in *LogEnvironment, opts ...grpc.CallOption) (*LogEnvironment_Response, error)
	// code version
	LogExperimentRunCodeVersion(ctx context.Context, in *LogExperimentRunCodeVersion, opts ...grpc.CallOption) (*LogExperimentRunCodeVersion_Response, error)
	GetExperimentRunCodeVersion(ctx context.Context, in *GetExperimentRunCodeVersion, opts ...grpc.CallOption) (*GetExperimentRunCodeVersion_Response, error)
	// artifact
	LogArtifact(ctx context.Context, in *LogArtifact, opts ...grpc.CallOption) (*LogArtifact_Response, error)
	// artifacts
	LogArtifacts(ctx context.Context, in *LogArtifacts, opts ...grpc.CallOption) (*LogArtifacts_Response, error)
	GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error)
	DeleteArtifact(ctx context.Context, in *DeleteArtifact, opts ...grpc.CallOption) (*DeleteArtifact_Response, error)
	GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error)
	CommitArtifactPart(ctx context.Context, in *CommitArtifactPart, opts ...grpc.CallOption) (*CommitArtifactPart_Response, error)
	GetCommittedArtifactParts(ctx context.Context, in *GetCommittedArtifactParts, opts ...grpc.CallOption) (*GetCommittedArtifactParts_Response, error)
	CommitMultipartArtifact(ctx context.Context, in *CommitMultipartArtifact, opts ...grpc.CallOption) (*CommitMultipartArtifact_Response, error)
	// queries
	FindExperimentRuns(ctx context.Context, in *FindExperimentRuns, opts ...grpc.CallOption) (*FindExperimentRuns_Response, error)
	SortExperimentRuns(ctx context.Context, in *SortExperimentRuns, opts ...grpc.CallOption) (*SortExperimentRuns_Response, error)
	GetTopExperimentRuns(ctx context.Context, in *TopExperimentRunsSelector, opts ...grpc.CallOption) (*TopExperimentRunsSelector_Response, error)
	// jobs
	LogJobId(ctx context.Context, in *LogJobId, opts ...grpc.CallOption) (*LogJobId_Response, error)
	GetJobId(ctx context.Context, in *GetJobId, opts ...grpc.CallOption) (*GetJobId_Response, error)
	GetChildrenExperimentRuns(ctx context.Context, in *GetChildrenExperimentRuns, opts ...grpc.CallOption) (*GetChildrenExperimentRuns_Response, error)
	SetParentExperimentRunId(ctx context.Context, in *SetParentExperimentRunId, opts ...grpc.CallOption) (*SetParentExperimentRunId_Response, error)
	GetExperimentRunsByDatasetVersionId(ctx context.Context, in *GetExperimentRunsByDatasetVersionId, opts ...grpc.CallOption) (*GetExperimentRunsByDatasetVersionId_Response, error)
	DeleteExperimentRuns(ctx context.Context, in *DeleteExperimentRuns, opts ...grpc.CallOption) (*DeleteExperimentRuns_Response, error)
	LogVersionedInput(ctx context.Context, in *LogVersionedInput, opts ...grpc.CallOption) (*LogVersionedInput_Response, error)
	GetVersionedInputs(ctx context.Context, in *GetVersionedInput, opts ...grpc.CallOption) (*GetVersionedInput_Response, error)
	// Getting ExperimentRuns linked to a commit
	ListCommitExperimentRuns(ctx context.Context, in *ListCommitExperimentRunsRequest, opts ...grpc.CallOption) (*ListCommitExperimentRunsRequest_Response, error)
	// Getting ExperimentRuns linked to a blob
	ListBlobExperimentRuns(ctx context.Context, in *ListBlobExperimentRunsRequest, opts ...grpc.CallOption) (*ListBlobExperimentRunsRequest_Response, error)
	DeleteObservations(ctx context.Context, in *DeleteObservations, opts ...grpc.CallOption) (*DeleteObservations_Response, error)
	DeleteMetrics(ctx context.Context, in *DeleteMetrics, opts ...grpc.CallOption) (*DeleteMetrics_Response, error)
	DeleteHyperparameters(ctx context.Context, in *DeleteHyperparameters, opts ...grpc.CallOption) (*DeleteHyperparameters_Response, error)
	CloneExperimentRun(ctx context.Context, in *CloneExperimentRun, opts ...grpc.CallOption) (*CloneExperimentRun_Response, error)
}

type experimentRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentRunServiceClient(cc grpc.ClientConnInterface) ExperimentRunServiceClient {
	return &experimentRunServiceClient{cc}
}

func (c *experimentRunServiceClient) CreateExperimentRun(ctx context.Context, in *CreateExperimentRun, opts ...grpc.CallOption) (*CreateExperimentRun_Response, error) {
	out := new(CreateExperimentRun_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/createExperimentRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteExperimentRun(ctx context.Context, in *DeleteExperimentRun, opts ...grpc.CallOption) (*DeleteExperimentRun_Response, error) {
	out := new(DeleteExperimentRun_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteExperimentRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunsInProject(ctx context.Context, in *GetExperimentRunsInProject, opts ...grpc.CallOption) (*GetExperimentRunsInProject_Response, error) {
	out := new(GetExperimentRunsInProject_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunsInProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunsInExperiment(ctx context.Context, in *GetExperimentRunsInExperiment, opts ...grpc.CallOption) (*GetExperimentRunsInExperiment_Response, error) {
	out := new(GetExperimentRunsInExperiment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunsInExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunById(ctx context.Context, in *GetExperimentRunById, opts ...grpc.CallOption) (*GetExperimentRunById_Response, error) {
	out := new(GetExperimentRunById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunByName(ctx context.Context, in *GetExperimentRunByName, opts ...grpc.CallOption) (*GetExperimentRunByName_Response, error) {
	out := new(GetExperimentRunByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) UpdateExperimentRunName(ctx context.Context, in *UpdateExperimentRunName, opts ...grpc.CallOption) (*UpdateExperimentRunName_Response, error) {
	out := new(UpdateExperimentRunName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/updateExperimentRunName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) UpdateExperimentRunDescription(ctx context.Context, in *UpdateExperimentRunDescription, opts ...grpc.CallOption) (*UpdateExperimentRunDescription_Response, error) {
	out := new(UpdateExperimentRunDescription_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/updateExperimentRunDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) AddExperimentRunTags(ctx context.Context, in *AddExperimentRunTags, opts ...grpc.CallOption) (*AddExperimentRunTags_Response, error) {
	out := new(AddExperimentRunTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/addExperimentRunTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunTags(ctx context.Context, in *GetTags, opts ...grpc.CallOption) (*GetTags_Response, error) {
	out := new(GetTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteExperimentRunTags(ctx context.Context, in *DeleteExperimentRunTags, opts ...grpc.CallOption) (*DeleteExperimentRunTags_Response, error) {
	out := new(DeleteExperimentRunTags_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteExperimentRunTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) AddExperimentRunTag(ctx context.Context, in *AddExperimentRunTag, opts ...grpc.CallOption) (*AddExperimentRunTag_Response, error) {
	out := new(AddExperimentRunTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/addExperimentRunTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteExperimentRunTag(ctx context.Context, in *DeleteExperimentRunTag, opts ...grpc.CallOption) (*DeleteExperimentRunTag_Response, error) {
	out := new(DeleteExperimentRunTag_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteExperimentRunTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogObservation(ctx context.Context, in *LogObservation, opts ...grpc.CallOption) (*LogObservation_Response, error) {
	out := new(LogObservation_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logObservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogObservations(ctx context.Context, in *LogObservations, opts ...grpc.CallOption) (*LogObservations_Response, error) {
	out := new(LogObservations_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logObservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetObservations(ctx context.Context, in *GetObservations, opts ...grpc.CallOption) (*GetObservations_Response, error) {
	out := new(GetObservations_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getObservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogMetric(ctx context.Context, in *LogMetric, opts ...grpc.CallOption) (*LogMetric_Response, error) {
	out := new(LogMetric_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogMetrics(ctx context.Context, in *LogMetrics, opts ...grpc.CallOption) (*LogMetrics_Response, error) {
	out := new(LogMetrics_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetMetrics(ctx context.Context, in *GetMetrics, opts ...grpc.CallOption) (*GetMetrics_Response, error) {
	out := new(GetMetrics_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogDataset(ctx context.Context, in *LogDataset, opts ...grpc.CallOption) (*LogDataset_Response, error) {
	out := new(LogDataset_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogDatasets(ctx context.Context, in *LogDatasets, opts ...grpc.CallOption) (*LogDatasets_Response, error) {
	out := new(LogDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetDatasets(ctx context.Context, in *GetDatasets, opts ...grpc.CallOption) (*GetDatasets_Response, error) {
	out := new(GetDatasets_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogHyperparameter(ctx context.Context, in *LogHyperparameter, opts ...grpc.CallOption) (*LogHyperparameter_Response, error) {
	out := new(LogHyperparameter_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logHyperparameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogHyperparameters(ctx context.Context, in *LogHyperparameters, opts ...grpc.CallOption) (*LogHyperparameters_Response, error) {
	out := new(LogHyperparameters_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logHyperparameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetHyperparameters(ctx context.Context, in *GetHyperparameters, opts ...grpc.CallOption) (*GetHyperparameters_Response, error) {
	out := new(GetHyperparameters_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getHyperparameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogAttribute(ctx context.Context, in *LogAttribute, opts ...grpc.CallOption) (*LogAttribute_Response, error) {
	out := new(LogAttribute_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogAttributes(ctx context.Context, in *LogAttributes, opts ...grpc.CallOption) (*LogAttributes_Response, error) {
	out := new(LogAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunAttributes(ctx context.Context, in *GetAttributes, opts ...grpc.CallOption) (*GetAttributes_Response, error) {
	out := new(GetAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) AddExperimentRunAttributes(ctx context.Context, in *AddExperimentRunAttributes, opts ...grpc.CallOption) (*AddExperimentRunAttributes_Response, error) {
	out := new(AddExperimentRunAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/addExperimentRunAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteExperimentRunAttributes(ctx context.Context, in *DeleteExperimentRunAttributes, opts ...grpc.CallOption) (*DeleteExperimentRunAttributes_Response, error) {
	out := new(DeleteExperimentRunAttributes_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteExperimentRunAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogEnvironment(ctx context.Context, in *LogEnvironment, opts ...grpc.CallOption) (*LogEnvironment_Response, error) {
	out := new(LogEnvironment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogExperimentRunCodeVersion(ctx context.Context, in *LogExperimentRunCodeVersion, opts ...grpc.CallOption) (*LogExperimentRunCodeVersion_Response, error) {
	out := new(LogExperimentRunCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logExperimentRunCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunCodeVersion(ctx context.Context, in *GetExperimentRunCodeVersion, opts ...grpc.CallOption) (*GetExperimentRunCodeVersion_Response, error) {
	out := new(GetExperimentRunCodeVersion_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunCodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogArtifact(ctx context.Context, in *LogArtifact, opts ...grpc.CallOption) (*LogArtifact_Response, error) {
	out := new(LogArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogArtifacts(ctx context.Context, in *LogArtifacts, opts ...grpc.CallOption) (*LogArtifacts_Response, error) {
	out := new(LogArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetArtifacts(ctx context.Context, in *GetArtifacts, opts ...grpc.CallOption) (*GetArtifacts_Response, error) {
	out := new(GetArtifacts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteArtifact(ctx context.Context, in *DeleteArtifact, opts ...grpc.CallOption) (*DeleteArtifact_Response, error) {
	out := new(DeleteArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetUrlForArtifact(ctx context.Context, in *GetUrlForArtifact, opts ...grpc.CallOption) (*GetUrlForArtifact_Response, error) {
	out := new(GetUrlForArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getUrlForArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) CommitArtifactPart(ctx context.Context, in *CommitArtifactPart, opts ...grpc.CallOption) (*CommitArtifactPart_Response, error) {
	out := new(CommitArtifactPart_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/commitArtifactPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetCommittedArtifactParts(ctx context.Context, in *GetCommittedArtifactParts, opts ...grpc.CallOption) (*GetCommittedArtifactParts_Response, error) {
	out := new(GetCommittedArtifactParts_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getCommittedArtifactParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) CommitMultipartArtifact(ctx context.Context, in *CommitMultipartArtifact, opts ...grpc.CallOption) (*CommitMultipartArtifact_Response, error) {
	out := new(CommitMultipartArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/commitMultipartArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) FindExperimentRuns(ctx context.Context, in *FindExperimentRuns, opts ...grpc.CallOption) (*FindExperimentRuns_Response, error) {
	out := new(FindExperimentRuns_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/findExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) SortExperimentRuns(ctx context.Context, in *SortExperimentRuns, opts ...grpc.CallOption) (*SortExperimentRuns_Response, error) {
	out := new(SortExperimentRuns_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/sortExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetTopExperimentRuns(ctx context.Context, in *TopExperimentRunsSelector, opts ...grpc.CallOption) (*TopExperimentRunsSelector_Response, error) {
	out := new(TopExperimentRunsSelector_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getTopExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogJobId(ctx context.Context, in *LogJobId, opts ...grpc.CallOption) (*LogJobId_Response, error) {
	out := new(LogJobId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logJobId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetJobId(ctx context.Context, in *GetJobId, opts ...grpc.CallOption) (*GetJobId_Response, error) {
	out := new(GetJobId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getJobId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetChildrenExperimentRuns(ctx context.Context, in *GetChildrenExperimentRuns, opts ...grpc.CallOption) (*GetChildrenExperimentRuns_Response, error) {
	out := new(GetChildrenExperimentRuns_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getChildrenExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) SetParentExperimentRunId(ctx context.Context, in *SetParentExperimentRunId, opts ...grpc.CallOption) (*SetParentExperimentRunId_Response, error) {
	out := new(SetParentExperimentRunId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/setParentExperimentRunId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetExperimentRunsByDatasetVersionId(ctx context.Context, in *GetExperimentRunsByDatasetVersionId, opts ...grpc.CallOption) (*GetExperimentRunsByDatasetVersionId_Response, error) {
	out := new(GetExperimentRunsByDatasetVersionId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getExperimentRunsByDatasetVersionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteExperimentRuns(ctx context.Context, in *DeleteExperimentRuns, opts ...grpc.CallOption) (*DeleteExperimentRuns_Response, error) {
	out := new(DeleteExperimentRuns_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) LogVersionedInput(ctx context.Context, in *LogVersionedInput, opts ...grpc.CallOption) (*LogVersionedInput_Response, error) {
	out := new(LogVersionedInput_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/logVersionedInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) GetVersionedInputs(ctx context.Context, in *GetVersionedInput, opts ...grpc.CallOption) (*GetVersionedInput_Response, error) {
	out := new(GetVersionedInput_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/getVersionedInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) ListCommitExperimentRuns(ctx context.Context, in *ListCommitExperimentRunsRequest, opts ...grpc.CallOption) (*ListCommitExperimentRunsRequest_Response, error) {
	out := new(ListCommitExperimentRunsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/ListCommitExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) ListBlobExperimentRuns(ctx context.Context, in *ListBlobExperimentRunsRequest, opts ...grpc.CallOption) (*ListBlobExperimentRunsRequest_Response, error) {
	out := new(ListBlobExperimentRunsRequest_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/ListBlobExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteObservations(ctx context.Context, in *DeleteObservations, opts ...grpc.CallOption) (*DeleteObservations_Response, error) {
	out := new(DeleteObservations_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteObservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteMetrics(ctx context.Context, in *DeleteMetrics, opts ...grpc.CallOption) (*DeleteMetrics_Response, error) {
	out := new(DeleteMetrics_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) DeleteHyperparameters(ctx context.Context, in *DeleteHyperparameters, opts ...grpc.CallOption) (*DeleteHyperparameters_Response, error) {
	out := new(DeleteHyperparameters_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/deleteHyperparameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentRunServiceClient) CloneExperimentRun(ctx context.Context, in *CloneExperimentRun, opts ...grpc.CallOption) (*CloneExperimentRun_Response, error) {
	out := new(CloneExperimentRun_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.ExperimentRunService/cloneExperimentRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentRunServiceServer is the server API for ExperimentRunService service.
type ExperimentRunServiceServer interface {
	CreateExperimentRun(context.Context, *CreateExperimentRun) (*CreateExperimentRun_Response, error)
	DeleteExperimentRun(context.Context, *DeleteExperimentRun) (*DeleteExperimentRun_Response, error)
	// basic queries
	GetExperimentRunsInProject(context.Context, *GetExperimentRunsInProject) (*GetExperimentRunsInProject_Response, error)
	GetExperimentRunsInExperiment(context.Context, *GetExperimentRunsInExperiment) (*GetExperimentRunsInExperiment_Response, error)
	GetExperimentRunById(context.Context, *GetExperimentRunById) (*GetExperimentRunById_Response, error)
	GetExperimentRunByName(context.Context, *GetExperimentRunByName) (*GetExperimentRunByName_Response, error)
	UpdateExperimentRunName(context.Context, *UpdateExperimentRunName) (*UpdateExperimentRunName_Response, error)
	UpdateExperimentRunDescription(context.Context, *UpdateExperimentRunDescription) (*UpdateExperimentRunDescription_Response, error)
	// tags
	AddExperimentRunTags(context.Context, *AddExperimentRunTags) (*AddExperimentRunTags_Response, error)
	GetExperimentRunTags(context.Context, *GetTags) (*GetTags_Response, error)
	DeleteExperimentRunTags(context.Context, *DeleteExperimentRunTags) (*DeleteExperimentRunTags_Response, error)
	// tag
	AddExperimentRunTag(context.Context, *AddExperimentRunTag) (*AddExperimentRunTag_Response, error)
	DeleteExperimentRunTag(context.Context, *DeleteExperimentRunTag) (*DeleteExperimentRunTag_Response, error)
	// observation
	LogObservation(context.Context, *LogObservation) (*LogObservation_Response, error)
	// observations
	LogObservations(context.Context, *LogObservations) (*LogObservations_Response, error)
	GetObservations(context.Context, *GetObservations) (*GetObservations_Response, error)
	// metric
	LogMetric(context.Context, *LogMetric) (*LogMetric_Response, error)
	// metrics
	LogMetrics(context.Context, *LogMetrics) (*LogMetrics_Response, error)
	GetMetrics(context.Context, *GetMetrics) (*GetMetrics_Response, error)
	// dataset
	LogDataset(context.Context, *LogDataset) (*LogDataset_Response, error)
	// datasets
	LogDatasets(context.Context, *LogDatasets) (*LogDatasets_Response, error)
	GetDatasets(context.Context, *GetDatasets) (*GetDatasets_Response, error)
	// hyperparameter
	LogHyperparameter(context.Context, *LogHyperparameter) (*LogHyperparameter_Response, error)
	// hyperparameters
	LogHyperparameters(context.Context, *LogHyperparameters) (*LogHyperparameters_Response, error)
	GetHyperparameters(context.Context, *GetHyperparameters) (*GetHyperparameters_Response, error)
	// attribute
	LogAttribute(context.Context, *LogAttribute) (*LogAttribute_Response, error)
	// attributes
	LogAttributes(context.Context, *LogAttributes) (*LogAttributes_Response, error)
	GetExperimentRunAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error)
	AddExperimentRunAttributes(context.Context, *AddExperimentRunAttributes) (*AddExperimentRunAttributes_Response, error)
	DeleteExperimentRunAttributes(context.Context, *DeleteExperimentRunAttributes) (*DeleteExperimentRunAttributes_Response, error)
	LogEnvironment(context.Context, *LogEnvironment) (*LogEnvironment_Response, error)
	// code version
	LogExperimentRunCodeVersion(context.Context, *LogExperimentRunCodeVersion) (*LogExperimentRunCodeVersion_Response, error)
	GetExperimentRunCodeVersion(context.Context, *GetExperimentRunCodeVersion) (*GetExperimentRunCodeVersion_Response, error)
	// artifact
	LogArtifact(context.Context, *LogArtifact) (*LogArtifact_Response, error)
	// artifacts
	LogArtifacts(context.Context, *LogArtifacts) (*LogArtifacts_Response, error)
	GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error)
	DeleteArtifact(context.Context, *DeleteArtifact) (*DeleteArtifact_Response, error)
	GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error)
	CommitArtifactPart(context.Context, *CommitArtifactPart) (*CommitArtifactPart_Response, error)
	GetCommittedArtifactParts(context.Context, *GetCommittedArtifactParts) (*GetCommittedArtifactParts_Response, error)
	CommitMultipartArtifact(context.Context, *CommitMultipartArtifact) (*CommitMultipartArtifact_Response, error)
	// queries
	FindExperimentRuns(context.Context, *FindExperimentRuns) (*FindExperimentRuns_Response, error)
	SortExperimentRuns(context.Context, *SortExperimentRuns) (*SortExperimentRuns_Response, error)
	GetTopExperimentRuns(context.Context, *TopExperimentRunsSelector) (*TopExperimentRunsSelector_Response, error)
	// jobs
	LogJobId(context.Context, *LogJobId) (*LogJobId_Response, error)
	GetJobId(context.Context, *GetJobId) (*GetJobId_Response, error)
	GetChildrenExperimentRuns(context.Context, *GetChildrenExperimentRuns) (*GetChildrenExperimentRuns_Response, error)
	SetParentExperimentRunId(context.Context, *SetParentExperimentRunId) (*SetParentExperimentRunId_Response, error)
	GetExperimentRunsByDatasetVersionId(context.Context, *GetExperimentRunsByDatasetVersionId) (*GetExperimentRunsByDatasetVersionId_Response, error)
	DeleteExperimentRuns(context.Context, *DeleteExperimentRuns) (*DeleteExperimentRuns_Response, error)
	LogVersionedInput(context.Context, *LogVersionedInput) (*LogVersionedInput_Response, error)
	GetVersionedInputs(context.Context, *GetVersionedInput) (*GetVersionedInput_Response, error)
	// Getting ExperimentRuns linked to a commit
	ListCommitExperimentRuns(context.Context, *ListCommitExperimentRunsRequest) (*ListCommitExperimentRunsRequest_Response, error)
	// Getting ExperimentRuns linked to a blob
	ListBlobExperimentRuns(context.Context, *ListBlobExperimentRunsRequest) (*ListBlobExperimentRunsRequest_Response, error)
	DeleteObservations(context.Context, *DeleteObservations) (*DeleteObservations_Response, error)
	DeleteMetrics(context.Context, *DeleteMetrics) (*DeleteMetrics_Response, error)
	DeleteHyperparameters(context.Context, *DeleteHyperparameters) (*DeleteHyperparameters_Response, error)
	CloneExperimentRun(context.Context, *CloneExperimentRun) (*CloneExperimentRun_Response, error)
}

// UnimplementedExperimentRunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExperimentRunServiceServer struct {
}

func (*UnimplementedExperimentRunServiceServer) CreateExperimentRun(context.Context, *CreateExperimentRun) (*CreateExperimentRun_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentRun not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteExperimentRun(context.Context, *DeleteExperimentRun) (*DeleteExperimentRun_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentRun not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunsInProject(context.Context, *GetExperimentRunsInProject) (*GetExperimentRunsInProject_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunsInProject not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunsInExperiment(context.Context, *GetExperimentRunsInExperiment) (*GetExperimentRunsInExperiment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunsInExperiment not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunById(context.Context, *GetExperimentRunById) (*GetExperimentRunById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunById not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunByName(context.Context, *GetExperimentRunByName) (*GetExperimentRunByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunByName not implemented")
}
func (*UnimplementedExperimentRunServiceServer) UpdateExperimentRunName(context.Context, *UpdateExperimentRunName) (*UpdateExperimentRunName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentRunName not implemented")
}
func (*UnimplementedExperimentRunServiceServer) UpdateExperimentRunDescription(context.Context, *UpdateExperimentRunDescription) (*UpdateExperimentRunDescription_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentRunDescription not implemented")
}
func (*UnimplementedExperimentRunServiceServer) AddExperimentRunTags(context.Context, *AddExperimentRunTags) (*AddExperimentRunTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentRunTags not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunTags(context.Context, *GetTags) (*GetTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunTags not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteExperimentRunTags(context.Context, *DeleteExperimentRunTags) (*DeleteExperimentRunTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentRunTags not implemented")
}
func (*UnimplementedExperimentRunServiceServer) AddExperimentRunTag(context.Context, *AddExperimentRunTag) (*AddExperimentRunTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentRunTag not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteExperimentRunTag(context.Context, *DeleteExperimentRunTag) (*DeleteExperimentRunTag_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentRunTag not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogObservation(context.Context, *LogObservation) (*LogObservation_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogObservation not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogObservations(context.Context, *LogObservations) (*LogObservations_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogObservations not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetObservations(context.Context, *GetObservations) (*GetObservations_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObservations not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogMetric(context.Context, *LogMetric) (*LogMetric_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogMetric not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogMetrics(context.Context, *LogMetrics) (*LogMetrics_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogMetrics not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetMetrics(context.Context, *GetMetrics) (*GetMetrics_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogDataset(context.Context, *LogDataset) (*LogDataset_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogDataset not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogDatasets(context.Context, *LogDatasets) (*LogDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogDatasets not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetDatasets(context.Context, *GetDatasets) (*GetDatasets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasets not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogHyperparameter(context.Context, *LogHyperparameter) (*LogHyperparameter_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogHyperparameter not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogHyperparameters(context.Context, *LogHyperparameters) (*LogHyperparameters_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogHyperparameters not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetHyperparameters(context.Context, *GetHyperparameters) (*GetHyperparameters_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyperparameters not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogAttribute(context.Context, *LogAttribute) (*LogAttribute_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAttribute not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogAttributes(context.Context, *LogAttributes) (*LogAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAttributes not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunAttributes(context.Context, *GetAttributes) (*GetAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunAttributes not implemented")
}
func (*UnimplementedExperimentRunServiceServer) AddExperimentRunAttributes(context.Context, *AddExperimentRunAttributes) (*AddExperimentRunAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentRunAttributes not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteExperimentRunAttributes(context.Context, *DeleteExperimentRunAttributes) (*DeleteExperimentRunAttributes_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentRunAttributes not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogEnvironment(context.Context, *LogEnvironment) (*LogEnvironment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEnvironment not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogExperimentRunCodeVersion(context.Context, *LogExperimentRunCodeVersion) (*LogExperimentRunCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogExperimentRunCodeVersion not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunCodeVersion(context.Context, *GetExperimentRunCodeVersion) (*GetExperimentRunCodeVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunCodeVersion not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogArtifact(context.Context, *LogArtifact) (*LogArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogArtifact not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogArtifacts(context.Context, *LogArtifacts) (*LogArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogArtifacts not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetArtifacts(context.Context, *GetArtifacts) (*GetArtifacts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteArtifact(context.Context, *DeleteArtifact) (*DeleteArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetUrlForArtifact(context.Context, *GetUrlForArtifact) (*GetUrlForArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlForArtifact not implemented")
}
func (*UnimplementedExperimentRunServiceServer) CommitArtifactPart(context.Context, *CommitArtifactPart) (*CommitArtifactPart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitArtifactPart not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetCommittedArtifactParts(context.Context, *GetCommittedArtifactParts) (*GetCommittedArtifactParts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittedArtifactParts not implemented")
}
func (*UnimplementedExperimentRunServiceServer) CommitMultipartArtifact(context.Context, *CommitMultipartArtifact) (*CommitMultipartArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMultipartArtifact not implemented")
}
func (*UnimplementedExperimentRunServiceServer) FindExperimentRuns(context.Context, *FindExperimentRuns) (*FindExperimentRuns_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExperimentRuns not implemented")
}
func (*UnimplementedExperimentRunServiceServer) SortExperimentRuns(context.Context, *SortExperimentRuns) (*SortExperimentRuns_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortExperimentRuns not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetTopExperimentRuns(context.Context, *TopExperimentRunsSelector) (*TopExperimentRunsSelector_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopExperimentRuns not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogJobId(context.Context, *LogJobId) (*LogJobId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogJobId not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetJobId(context.Context, *GetJobId) (*GetJobId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobId not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetChildrenExperimentRuns(context.Context, *GetChildrenExperimentRuns) (*GetChildrenExperimentRuns_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildrenExperimentRuns not implemented")
}
func (*UnimplementedExperimentRunServiceServer) SetParentExperimentRunId(context.Context, *SetParentExperimentRunId) (*SetParentExperimentRunId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParentExperimentRunId not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetExperimentRunsByDatasetVersionId(context.Context, *GetExperimentRunsByDatasetVersionId) (*GetExperimentRunsByDatasetVersionId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunsByDatasetVersionId not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteExperimentRuns(context.Context, *DeleteExperimentRuns) (*DeleteExperimentRuns_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentRuns not implemented")
}
func (*UnimplementedExperimentRunServiceServer) LogVersionedInput(context.Context, *LogVersionedInput) (*LogVersionedInput_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogVersionedInput not implemented")
}
func (*UnimplementedExperimentRunServiceServer) GetVersionedInputs(context.Context, *GetVersionedInput) (*GetVersionedInput_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionedInputs not implemented")
}
func (*UnimplementedExperimentRunServiceServer) ListCommitExperimentRuns(context.Context, *ListCommitExperimentRunsRequest) (*ListCommitExperimentRunsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommitExperimentRuns not implemented")
}
func (*UnimplementedExperimentRunServiceServer) ListBlobExperimentRuns(context.Context, *ListBlobExperimentRunsRequest) (*ListBlobExperimentRunsRequest_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlobExperimentRuns not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteObservations(context.Context, *DeleteObservations) (*DeleteObservations_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObservations not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteMetrics(context.Context, *DeleteMetrics) (*DeleteMetrics_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetrics not implemented")
}
func (*UnimplementedExperimentRunServiceServer) DeleteHyperparameters(context.Context, *DeleteHyperparameters) (*DeleteHyperparameters_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHyperparameters not implemented")
}
func (*UnimplementedExperimentRunServiceServer) CloneExperimentRun(context.Context, *CloneExperimentRun) (*CloneExperimentRun_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneExperimentRun not implemented")
}

func RegisterExperimentRunServiceServer(s *grpc.Server, srv ExperimentRunServiceServer) {
	s.RegisterService(&_ExperimentRunService_serviceDesc, srv)
}

func _ExperimentRunService_CreateExperimentRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).CreateExperimentRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/CreateExperimentRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).CreateExperimentRun(ctx, req.(*CreateExperimentRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteExperimentRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteExperimentRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRun(ctx, req.(*DeleteExperimentRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunsInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunsInProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunsInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunsInProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunsInProject(ctx, req.(*GetExperimentRunsInProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunsInExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunsInExperiment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunsInExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunsInExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunsInExperiment(ctx, req.(*GetExperimentRunsInExperiment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunById(ctx, req.(*GetExperimentRunById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunByName(ctx, req.(*GetExperimentRunByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_UpdateExperimentRunName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentRunName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).UpdateExperimentRunName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/UpdateExperimentRunName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).UpdateExperimentRunName(ctx, req.(*UpdateExperimentRunName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_UpdateExperimentRunDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentRunDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).UpdateExperimentRunDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/UpdateExperimentRunDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).UpdateExperimentRunDescription(ctx, req.(*UpdateExperimentRunDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_AddExperimentRunTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentRunTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).AddExperimentRunTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/AddExperimentRunTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).AddExperimentRunTags(ctx, req.(*AddExperimentRunTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunTags(ctx, req.(*GetTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteExperimentRunTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRunTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRunTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteExperimentRunTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRunTags(ctx, req.(*DeleteExperimentRunTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_AddExperimentRunTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentRunTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).AddExperimentRunTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/AddExperimentRunTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).AddExperimentRunTag(ctx, req.(*AddExperimentRunTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteExperimentRunTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRunTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRunTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteExperimentRunTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRunTag(ctx, req.(*DeleteExperimentRunTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogObservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogObservation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogObservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogObservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogObservation(ctx, req.(*LogObservation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogObservations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogObservations(ctx, req.(*LogObservations))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetObservations(ctx, req.(*GetObservations))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogMetric(ctx, req.(*LogMetric))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogMetrics(ctx, req.(*LogMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetMetrics(ctx, req.(*GetMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogDataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogDataset(ctx, req.(*LogDataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogDatasets(ctx, req.(*LogDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetDatasets(ctx, req.(*GetDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogHyperparameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogHyperparameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogHyperparameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogHyperparameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogHyperparameter(ctx, req.(*LogHyperparameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogHyperparameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogHyperparameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogHyperparameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogHyperparameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogHyperparameters(ctx, req.(*LogHyperparameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetHyperparameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHyperparameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetHyperparameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetHyperparameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetHyperparameters(ctx, req.(*GetHyperparameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogAttribute(ctx, req.(*LogAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogAttributes(ctx, req.(*LogAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunAttributes(ctx, req.(*GetAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_AddExperimentRunAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExperimentRunAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).AddExperimentRunAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/AddExperimentRunAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).AddExperimentRunAttributes(ctx, req.(*AddExperimentRunAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteExperimentRunAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRunAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRunAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteExperimentRunAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRunAttributes(ctx, req.(*DeleteExperimentRunAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogEnvironment(ctx, req.(*LogEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogExperimentRunCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogExperimentRunCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogExperimentRunCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogExperimentRunCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogExperimentRunCodeVersion(ctx, req.(*LogExperimentRunCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunCodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunCodeVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunCodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunCodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunCodeVersion(ctx, req.(*GetExperimentRunCodeVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogArtifact(ctx, req.(*LogArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogArtifacts(ctx, req.(*LogArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetArtifacts(ctx, req.(*GetArtifacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteArtifact(ctx, req.(*DeleteArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetUrlForArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlForArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetUrlForArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetUrlForArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetUrlForArtifact(ctx, req.(*GetUrlForArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_CommitArtifactPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitArtifactPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).CommitArtifactPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/CommitArtifactPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).CommitArtifactPart(ctx, req.(*CommitArtifactPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetCommittedArtifactParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommittedArtifactParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetCommittedArtifactParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetCommittedArtifactParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetCommittedArtifactParts(ctx, req.(*GetCommittedArtifactParts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_CommitMultipartArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMultipartArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).CommitMultipartArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/CommitMultipartArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).CommitMultipartArtifact(ctx, req.(*CommitMultipartArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_FindExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).FindExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/FindExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).FindExperimentRuns(ctx, req.(*FindExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_SortExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).SortExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/SortExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).SortExperimentRuns(ctx, req.(*SortExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetTopExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopExperimentRunsSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetTopExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetTopExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetTopExperimentRuns(ctx, req.(*TopExperimentRunsSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogJobId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogJobId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogJobId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogJobId(ctx, req.(*LogJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetJobId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetJobId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetJobId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetJobId(ctx, req.(*GetJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetChildrenExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildrenExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetChildrenExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetChildrenExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetChildrenExperimentRuns(ctx, req.(*GetChildrenExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_SetParentExperimentRunId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParentExperimentRunId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).SetParentExperimentRunId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/SetParentExperimentRunId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).SetParentExperimentRunId(ctx, req.(*SetParentExperimentRunId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetExperimentRunsByDatasetVersionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRunsByDatasetVersionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetExperimentRunsByDatasetVersionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetExperimentRunsByDatasetVersionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetExperimentRunsByDatasetVersionId(ctx, req.(*GetExperimentRunsByDatasetVersionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteExperimentRuns(ctx, req.(*DeleteExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_LogVersionedInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogVersionedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).LogVersionedInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/LogVersionedInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).LogVersionedInput(ctx, req.(*LogVersionedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_GetVersionedInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).GetVersionedInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/GetVersionedInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).GetVersionedInputs(ctx, req.(*GetVersionedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_ListCommitExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitExperimentRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).ListCommitExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/ListCommitExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).ListCommitExperimentRuns(ctx, req.(*ListCommitExperimentRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_ListBlobExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlobExperimentRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).ListBlobExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/ListBlobExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).ListBlobExperimentRuns(ctx, req.(*ListBlobExperimentRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObservations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteObservations(ctx, req.(*DeleteObservations))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteMetrics(ctx, req.(*DeleteMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_DeleteHyperparameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHyperparameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).DeleteHyperparameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/DeleteHyperparameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).DeleteHyperparameters(ctx, req.(*DeleteHyperparameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentRunService_CloneExperimentRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneExperimentRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentRunServiceServer).CloneExperimentRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.ExperimentRunService/CloneExperimentRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentRunServiceServer).CloneExperimentRun(ctx, req.(*CloneExperimentRun))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExperimentRunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.ExperimentRunService",
	HandlerType: (*ExperimentRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createExperimentRun",
			Handler:    _ExperimentRunService_CreateExperimentRun_Handler,
		},
		{
			MethodName: "deleteExperimentRun",
			Handler:    _ExperimentRunService_DeleteExperimentRun_Handler,
		},
		{
			MethodName: "getExperimentRunsInProject",
			Handler:    _ExperimentRunService_GetExperimentRunsInProject_Handler,
		},
		{
			MethodName: "getExperimentRunsInExperiment",
			Handler:    _ExperimentRunService_GetExperimentRunsInExperiment_Handler,
		},
		{
			MethodName: "getExperimentRunById",
			Handler:    _ExperimentRunService_GetExperimentRunById_Handler,
		},
		{
			MethodName: "getExperimentRunByName",
			Handler:    _ExperimentRunService_GetExperimentRunByName_Handler,
		},
		{
			MethodName: "updateExperimentRunName",
			Handler:    _ExperimentRunService_UpdateExperimentRunName_Handler,
		},
		{
			MethodName: "updateExperimentRunDescription",
			Handler:    _ExperimentRunService_UpdateExperimentRunDescription_Handler,
		},
		{
			MethodName: "addExperimentRunTags",
			Handler:    _ExperimentRunService_AddExperimentRunTags_Handler,
		},
		{
			MethodName: "getExperimentRunTags",
			Handler:    _ExperimentRunService_GetExperimentRunTags_Handler,
		},
		{
			MethodName: "deleteExperimentRunTags",
			Handler:    _ExperimentRunService_DeleteExperimentRunTags_Handler,
		},
		{
			MethodName: "addExperimentRunTag",
			Handler:    _ExperimentRunService_AddExperimentRunTag_Handler,
		},
		{
			MethodName: "deleteExperimentRunTag",
			Handler:    _ExperimentRunService_DeleteExperimentRunTag_Handler,
		},
		{
			MethodName: "logObservation",
			Handler:    _ExperimentRunService_LogObservation_Handler,
		},
		{
			MethodName: "logObservations",
			Handler:    _ExperimentRunService_LogObservations_Handler,
		},
		{
			MethodName: "getObservations",
			Handler:    _ExperimentRunService_GetObservations_Handler,
		},
		{
			MethodName: "logMetric",
			Handler:    _ExperimentRunService_LogMetric_Handler,
		},
		{
			MethodName: "logMetrics",
			Handler:    _ExperimentRunService_LogMetrics_Handler,
		},
		{
			MethodName: "getMetrics",
			Handler:    _ExperimentRunService_GetMetrics_Handler,
		},
		{
			MethodName: "logDataset",
			Handler:    _ExperimentRunService_LogDataset_Handler,
		},
		{
			MethodName: "logDatasets",
			Handler:    _ExperimentRunService_LogDatasets_Handler,
		},
		{
			MethodName: "getDatasets",
			Handler:    _ExperimentRunService_GetDatasets_Handler,
		},
		{
			MethodName: "logHyperparameter",
			Handler:    _ExperimentRunService_LogHyperparameter_Handler,
		},
		{
			MethodName: "logHyperparameters",
			Handler:    _ExperimentRunService_LogHyperparameters_Handler,
		},
		{
			MethodName: "getHyperparameters",
			Handler:    _ExperimentRunService_GetHyperparameters_Handler,
		},
		{
			MethodName: "logAttribute",
			Handler:    _ExperimentRunService_LogAttribute_Handler,
		},
		{
			MethodName: "logAttributes",
			Handler:    _ExperimentRunService_LogAttributes_Handler,
		},
		{
			MethodName: "getExperimentRunAttributes",
			Handler:    _ExperimentRunService_GetExperimentRunAttributes_Handler,
		},
		{
			MethodName: "addExperimentRunAttributes",
			Handler:    _ExperimentRunService_AddExperimentRunAttributes_Handler,
		},
		{
			MethodName: "deleteExperimentRunAttributes",
			Handler:    _ExperimentRunService_DeleteExperimentRunAttributes_Handler,
		},
		{
			MethodName: "logEnvironment",
			Handler:    _ExperimentRunService_LogEnvironment_Handler,
		},
		{
			MethodName: "logExperimentRunCodeVersion",
			Handler:    _ExperimentRunService_LogExperimentRunCodeVersion_Handler,
		},
		{
			MethodName: "getExperimentRunCodeVersion",
			Handler:    _ExperimentRunService_GetExperimentRunCodeVersion_Handler,
		},
		{
			MethodName: "logArtifact",
			Handler:    _ExperimentRunService_LogArtifact_Handler,
		},
		{
			MethodName: "logArtifacts",
			Handler:    _ExperimentRunService_LogArtifacts_Handler,
		},
		{
			MethodName: "getArtifacts",
			Handler:    _ExperimentRunService_GetArtifacts_Handler,
		},
		{
			MethodName: "deleteArtifact",
			Handler:    _ExperimentRunService_DeleteArtifact_Handler,
		},
		{
			MethodName: "getUrlForArtifact",
			Handler:    _ExperimentRunService_GetUrlForArtifact_Handler,
		},
		{
			MethodName: "commitArtifactPart",
			Handler:    _ExperimentRunService_CommitArtifactPart_Handler,
		},
		{
			MethodName: "getCommittedArtifactParts",
			Handler:    _ExperimentRunService_GetCommittedArtifactParts_Handler,
		},
		{
			MethodName: "commitMultipartArtifact",
			Handler:    _ExperimentRunService_CommitMultipartArtifact_Handler,
		},
		{
			MethodName: "findExperimentRuns",
			Handler:    _ExperimentRunService_FindExperimentRuns_Handler,
		},
		{
			MethodName: "sortExperimentRuns",
			Handler:    _ExperimentRunService_SortExperimentRuns_Handler,
		},
		{
			MethodName: "getTopExperimentRuns",
			Handler:    _ExperimentRunService_GetTopExperimentRuns_Handler,
		},
		{
			MethodName: "logJobId",
			Handler:    _ExperimentRunService_LogJobId_Handler,
		},
		{
			MethodName: "getJobId",
			Handler:    _ExperimentRunService_GetJobId_Handler,
		},
		{
			MethodName: "getChildrenExperimentRuns",
			Handler:    _ExperimentRunService_GetChildrenExperimentRuns_Handler,
		},
		{
			MethodName: "setParentExperimentRunId",
			Handler:    _ExperimentRunService_SetParentExperimentRunId_Handler,
		},
		{
			MethodName: "getExperimentRunsByDatasetVersionId",
			Handler:    _ExperimentRunService_GetExperimentRunsByDatasetVersionId_Handler,
		},
		{
			MethodName: "deleteExperimentRuns",
			Handler:    _ExperimentRunService_DeleteExperimentRuns_Handler,
		},
		{
			MethodName: "logVersionedInput",
			Handler:    _ExperimentRunService_LogVersionedInput_Handler,
		},
		{
			MethodName: "getVersionedInputs",
			Handler:    _ExperimentRunService_GetVersionedInputs_Handler,
		},
		{
			MethodName: "ListCommitExperimentRuns",
			Handler:    _ExperimentRunService_ListCommitExperimentRuns_Handler,
		},
		{
			MethodName: "ListBlobExperimentRuns",
			Handler:    _ExperimentRunService_ListBlobExperimentRuns_Handler,
		},
		{
			MethodName: "deleteObservations",
			Handler:    _ExperimentRunService_DeleteObservations_Handler,
		},
		{
			MethodName: "deleteMetrics",
			Handler:    _ExperimentRunService_DeleteMetrics_Handler,
		},
		{
			MethodName: "deleteHyperparameters",
			Handler:    _ExperimentRunService_DeleteHyperparameters_Handler,
		},
		{
			MethodName: "cloneExperimentRun",
			Handler:    _ExperimentRunService_CloneExperimentRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/ExperimentRunService.proto",
}
