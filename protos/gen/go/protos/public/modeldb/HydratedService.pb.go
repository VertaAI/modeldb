// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/public/modeldb/HydratedService.proto

package modeldb

import (
	context "context"
	fmt "fmt"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	uac "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
//   Hydrated Entity Data
type GetHydratedProjects struct {
	PageNumber           int32    `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit            int32    `protobuf:"varint,2,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending            bool     `protobuf:"varint,3,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey              string   `protobuf:"bytes,4,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	WorkspaceName        string   `protobuf:"bytes,5,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHydratedProjects) Reset()         { *m = GetHydratedProjects{} }
func (m *GetHydratedProjects) String() string { return proto.CompactTextString(m) }
func (*GetHydratedProjects) ProtoMessage()    {}
func (*GetHydratedProjects) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{0}
}

func (m *GetHydratedProjects) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedProjects.Unmarshal(m, b)
}
func (m *GetHydratedProjects) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedProjects.Marshal(b, m, deterministic)
}
func (m *GetHydratedProjects) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedProjects.Merge(m, src)
}
func (m *GetHydratedProjects) XXX_Size() int {
	return xxx_messageInfo_GetHydratedProjects.Size(m)
}
func (m *GetHydratedProjects) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedProjects.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedProjects proto.InternalMessageInfo

func (m *GetHydratedProjects) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *GetHydratedProjects) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

func (m *GetHydratedProjects) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

func (m *GetHydratedProjects) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

func (m *GetHydratedProjects) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

type GetHydratedProjects_Response struct {
	HydratedProjects     []*HydratedProject `protobuf:"bytes,1,rep,name=hydrated_projects,json=hydratedProjects,proto3" json:"hydrated_projects,omitempty"`
	TotalRecords         int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetHydratedProjects_Response) Reset()         { *m = GetHydratedProjects_Response{} }
func (m *GetHydratedProjects_Response) String() string { return proto.CompactTextString(m) }
func (*GetHydratedProjects_Response) ProtoMessage()    {}
func (*GetHydratedProjects_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{0, 0}
}

func (m *GetHydratedProjects_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedProjects_Response.Unmarshal(m, b)
}
func (m *GetHydratedProjects_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedProjects_Response.Marshal(b, m, deterministic)
}
func (m *GetHydratedProjects_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedProjects_Response.Merge(m, src)
}
func (m *GetHydratedProjects_Response) XXX_Size() int {
	return xxx_messageInfo_GetHydratedProjects_Response.Size(m)
}
func (m *GetHydratedProjects_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedProjects_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedProjects_Response proto.InternalMessageInfo

func (m *GetHydratedProjects_Response) GetHydratedProjects() []*HydratedProject {
	if m != nil {
		return m.HydratedProjects
	}
	return nil
}

func (m *GetHydratedProjects_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type CollaboratorUserInfo struct {
	// Types that are valid to be assigned to Collaborator:
	//	*CollaboratorUserInfo_CollaboratorUserInfo
	//	*CollaboratorUserInfo_CollaboratorOrganization
	//	*CollaboratorUserInfo_CollaboratorTeam
	Collaborator         isCollaboratorUserInfo_Collaborator          `protobuf_oneof:"collaborator"`
	CollaboratorType     common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,2,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	CanDeploy            common.TernaryEnum_Ternary                   `protobuf:"varint,8,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	EntityType           uac.EntitiesEnum_EntitiesTypes               `protobuf:"varint,9,opt,name=entity_type,json=entityType,proto3,enum=ai.verta.uac.EntitiesEnum_EntitiesTypes" json:"entity_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *CollaboratorUserInfo) Reset()         { *m = CollaboratorUserInfo{} }
func (m *CollaboratorUserInfo) String() string { return proto.CompactTextString(m) }
func (*CollaboratorUserInfo) ProtoMessage()    {}
func (*CollaboratorUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{1}
}

func (m *CollaboratorUserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollaboratorUserInfo.Unmarshal(m, b)
}
func (m *CollaboratorUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollaboratorUserInfo.Marshal(b, m, deterministic)
}
func (m *CollaboratorUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollaboratorUserInfo.Merge(m, src)
}
func (m *CollaboratorUserInfo) XXX_Size() int {
	return xxx_messageInfo_CollaboratorUserInfo.Size(m)
}
func (m *CollaboratorUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CollaboratorUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CollaboratorUserInfo proto.InternalMessageInfo

type isCollaboratorUserInfo_Collaborator interface {
	isCollaboratorUserInfo_Collaborator()
}

type CollaboratorUserInfo_CollaboratorUserInfo struct {
	CollaboratorUserInfo *uac.UserInfo `protobuf:"bytes,1,opt,name=collaborator_user_info,json=collaboratorUserInfo,proto3,oneof"`
}

type CollaboratorUserInfo_CollaboratorOrganization struct {
	CollaboratorOrganization *uac.Organization `protobuf:"bytes,3,opt,name=collaborator_organization,json=collaboratorOrganization,proto3,oneof"`
}

type CollaboratorUserInfo_CollaboratorTeam struct {
	CollaboratorTeam *uac.Team `protobuf:"bytes,4,opt,name=collaborator_team,json=collaboratorTeam,proto3,oneof"`
}

func (*CollaboratorUserInfo_CollaboratorUserInfo) isCollaboratorUserInfo_Collaborator() {}

func (*CollaboratorUserInfo_CollaboratorOrganization) isCollaboratorUserInfo_Collaborator() {}

func (*CollaboratorUserInfo_CollaboratorTeam) isCollaboratorUserInfo_Collaborator() {}

func (m *CollaboratorUserInfo) GetCollaborator() isCollaboratorUserInfo_Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (m *CollaboratorUserInfo) GetCollaboratorUserInfo() *uac.UserInfo {
	if x, ok := m.GetCollaborator().(*CollaboratorUserInfo_CollaboratorUserInfo); ok {
		return x.CollaboratorUserInfo
	}
	return nil
}

func (m *CollaboratorUserInfo) GetCollaboratorOrganization() *uac.Organization {
	if x, ok := m.GetCollaborator().(*CollaboratorUserInfo_CollaboratorOrganization); ok {
		return x.CollaboratorOrganization
	}
	return nil
}

func (m *CollaboratorUserInfo) GetCollaboratorTeam() *uac.Team {
	if x, ok := m.GetCollaborator().(*CollaboratorUserInfo_CollaboratorTeam); ok {
		return x.CollaboratorTeam
	}
	return nil
}

func (m *CollaboratorUserInfo) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if m != nil {
		return m.CollaboratorType
	}
	return common.CollaboratorTypeEnum_READ_ONLY
}

func (m *CollaboratorUserInfo) GetCanDeploy() common.TernaryEnum_Ternary {
	if m != nil {
		return m.CanDeploy
	}
	return common.TernaryEnum_UNKNOWN
}

func (m *CollaboratorUserInfo) GetEntityType() uac.EntitiesEnum_EntitiesTypes {
	if m != nil {
		return m.EntityType
	}
	return uac.EntitiesEnum_UNKNOWN
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CollaboratorUserInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CollaboratorUserInfo_CollaboratorUserInfo)(nil),
		(*CollaboratorUserInfo_CollaboratorOrganization)(nil),
		(*CollaboratorUserInfo_CollaboratorTeam)(nil),
	}
}

type HydratedProject struct {
	Project               *Project                `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	CollaboratorUserInfos []*CollaboratorUserInfo `protobuf:"bytes,2,rep,name=collaborator_user_infos,json=collaboratorUserInfos,proto3" json:"collaborator_user_infos,omitempty"`
	OwnerUserInfo         *uac.UserInfo           `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions        []*uac.Action           `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                `json:"-"`
	XXX_unrecognized      []byte                  `json:"-"`
	XXX_sizecache         int32                   `json:"-"`
}

func (m *HydratedProject) Reset()         { *m = HydratedProject{} }
func (m *HydratedProject) String() string { return proto.CompactTextString(m) }
func (*HydratedProject) ProtoMessage()    {}
func (*HydratedProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{2}
}

func (m *HydratedProject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HydratedProject.Unmarshal(m, b)
}
func (m *HydratedProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HydratedProject.Marshal(b, m, deterministic)
}
func (m *HydratedProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HydratedProject.Merge(m, src)
}
func (m *HydratedProject) XXX_Size() int {
	return xxx_messageInfo_HydratedProject.Size(m)
}
func (m *HydratedProject) XXX_DiscardUnknown() {
	xxx_messageInfo_HydratedProject.DiscardUnknown(m)
}

var xxx_messageInfo_HydratedProject proto.InternalMessageInfo

func (m *HydratedProject) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *HydratedProject) GetCollaboratorUserInfos() []*CollaboratorUserInfo {
	if m != nil {
		return m.CollaboratorUserInfos
	}
	return nil
}

func (m *HydratedProject) GetOwnerUserInfo() *uac.UserInfo {
	if m != nil {
		return m.OwnerUserInfo
	}
	return nil
}

func (m *HydratedProject) GetAllowedActions() []*uac.Action {
	if m != nil {
		return m.AllowedActions
	}
	return nil
}

type GetHydratedProjectById struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHydratedProjectById) Reset()         { *m = GetHydratedProjectById{} }
func (m *GetHydratedProjectById) String() string { return proto.CompactTextString(m) }
func (*GetHydratedProjectById) ProtoMessage()    {}
func (*GetHydratedProjectById) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{3}
}

func (m *GetHydratedProjectById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedProjectById.Unmarshal(m, b)
}
func (m *GetHydratedProjectById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedProjectById.Marshal(b, m, deterministic)
}
func (m *GetHydratedProjectById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedProjectById.Merge(m, src)
}
func (m *GetHydratedProjectById) XXX_Size() int {
	return xxx_messageInfo_GetHydratedProjectById.Size(m)
}
func (m *GetHydratedProjectById) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedProjectById.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedProjectById proto.InternalMessageInfo

func (m *GetHydratedProjectById) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetHydratedProjectById_Response struct {
	HydratedProject      *HydratedProject `protobuf:"bytes,1,opt,name=hydrated_project,json=hydratedProject,proto3" json:"hydrated_project,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetHydratedProjectById_Response) Reset()         { *m = GetHydratedProjectById_Response{} }
func (m *GetHydratedProjectById_Response) String() string { return proto.CompactTextString(m) }
func (*GetHydratedProjectById_Response) ProtoMessage()    {}
func (*GetHydratedProjectById_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{3, 0}
}

func (m *GetHydratedProjectById_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedProjectById_Response.Unmarshal(m, b)
}
func (m *GetHydratedProjectById_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedProjectById_Response.Marshal(b, m, deterministic)
}
func (m *GetHydratedProjectById_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedProjectById_Response.Merge(m, src)
}
func (m *GetHydratedProjectById_Response) XXX_Size() int {
	return xxx_messageInfo_GetHydratedProjectById_Response.Size(m)
}
func (m *GetHydratedProjectById_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedProjectById_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedProjectById_Response proto.InternalMessageInfo

func (m *GetHydratedProjectById_Response) GetHydratedProject() *HydratedProject {
	if m != nil {
		return m.HydratedProject
	}
	return nil
}

type HydratedExperiment struct {
	Experiment           *Experiment   `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
	OwnerUserInfo        *uac.UserInfo `protobuf:"bytes,2,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions       []*uac.Action `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HydratedExperiment) Reset()         { *m = HydratedExperiment{} }
func (m *HydratedExperiment) String() string { return proto.CompactTextString(m) }
func (*HydratedExperiment) ProtoMessage()    {}
func (*HydratedExperiment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{4}
}

func (m *HydratedExperiment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HydratedExperiment.Unmarshal(m, b)
}
func (m *HydratedExperiment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HydratedExperiment.Marshal(b, m, deterministic)
}
func (m *HydratedExperiment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HydratedExperiment.Merge(m, src)
}
func (m *HydratedExperiment) XXX_Size() int {
	return xxx_messageInfo_HydratedExperiment.Size(m)
}
func (m *HydratedExperiment) XXX_DiscardUnknown() {
	xxx_messageInfo_HydratedExperiment.DiscardUnknown(m)
}

var xxx_messageInfo_HydratedExperiment proto.InternalMessageInfo

func (m *HydratedExperiment) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *HydratedExperiment) GetOwnerUserInfo() *uac.UserInfo {
	if m != nil {
		return m.OwnerUserInfo
	}
	return nil
}

func (m *HydratedExperiment) GetAllowedActions() []*uac.Action {
	if m != nil {
		return m.AllowedActions
	}
	return nil
}

type GetHydratedExperimentsByProjectId struct {
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber           int32    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit            int32    `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending            bool     `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey              string   `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHydratedExperimentsByProjectId) Reset()         { *m = GetHydratedExperimentsByProjectId{} }
func (m *GetHydratedExperimentsByProjectId) String() string { return proto.CompactTextString(m) }
func (*GetHydratedExperimentsByProjectId) ProtoMessage()    {}
func (*GetHydratedExperimentsByProjectId) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{5}
}

func (m *GetHydratedExperimentsByProjectId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedExperimentsByProjectId.Unmarshal(m, b)
}
func (m *GetHydratedExperimentsByProjectId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedExperimentsByProjectId.Marshal(b, m, deterministic)
}
func (m *GetHydratedExperimentsByProjectId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedExperimentsByProjectId.Merge(m, src)
}
func (m *GetHydratedExperimentsByProjectId) XXX_Size() int {
	return xxx_messageInfo_GetHydratedExperimentsByProjectId.Size(m)
}
func (m *GetHydratedExperimentsByProjectId) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedExperimentsByProjectId.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedExperimentsByProjectId proto.InternalMessageInfo

func (m *GetHydratedExperimentsByProjectId) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetHydratedExperimentsByProjectId) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *GetHydratedExperimentsByProjectId) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

func (m *GetHydratedExperimentsByProjectId) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

func (m *GetHydratedExperimentsByProjectId) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

type GetHydratedExperimentsByProjectId_Response struct {
	HydratedExperiments  []*HydratedExperiment `protobuf:"bytes,1,rep,name=hydrated_experiments,json=hydratedExperiments,proto3" json:"hydrated_experiments,omitempty"`
	TotalRecords         int64                 `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetHydratedExperimentsByProjectId_Response) Reset() {
	*m = GetHydratedExperimentsByProjectId_Response{}
}
func (m *GetHydratedExperimentsByProjectId_Response) String() string {
	return proto.CompactTextString(m)
}
func (*GetHydratedExperimentsByProjectId_Response) ProtoMessage() {}
func (*GetHydratedExperimentsByProjectId_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{5, 0}
}

func (m *GetHydratedExperimentsByProjectId_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedExperimentsByProjectId_Response.Unmarshal(m, b)
}
func (m *GetHydratedExperimentsByProjectId_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedExperimentsByProjectId_Response.Marshal(b, m, deterministic)
}
func (m *GetHydratedExperimentsByProjectId_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedExperimentsByProjectId_Response.Merge(m, src)
}
func (m *GetHydratedExperimentsByProjectId_Response) XXX_Size() int {
	return xxx_messageInfo_GetHydratedExperimentsByProjectId_Response.Size(m)
}
func (m *GetHydratedExperimentsByProjectId_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedExperimentsByProjectId_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedExperimentsByProjectId_Response proto.InternalMessageInfo

func (m *GetHydratedExperimentsByProjectId_Response) GetHydratedExperiments() []*HydratedExperiment {
	if m != nil {
		return m.HydratedExperiments
	}
	return nil
}

func (m *GetHydratedExperimentsByProjectId_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type HydratedExperimentRun struct {
	ExperimentRun        *ExperimentRun `protobuf:"bytes,1,opt,name=experiment_run,json=experimentRun,proto3" json:"experiment_run,omitempty"`
	Comments             []*Comment     `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	OwnerUserInfo        *uac.UserInfo  `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	Experiment           *Experiment    `protobuf:"bytes,4,opt,name=experiment,proto3" json:"experiment,omitempty"`
	AllowedActions       []*uac.Action  `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HydratedExperimentRun) Reset()         { *m = HydratedExperimentRun{} }
func (m *HydratedExperimentRun) String() string { return proto.CompactTextString(m) }
func (*HydratedExperimentRun) ProtoMessage()    {}
func (*HydratedExperimentRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{6}
}

func (m *HydratedExperimentRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HydratedExperimentRun.Unmarshal(m, b)
}
func (m *HydratedExperimentRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HydratedExperimentRun.Marshal(b, m, deterministic)
}
func (m *HydratedExperimentRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HydratedExperimentRun.Merge(m, src)
}
func (m *HydratedExperimentRun) XXX_Size() int {
	return xxx_messageInfo_HydratedExperimentRun.Size(m)
}
func (m *HydratedExperimentRun) XXX_DiscardUnknown() {
	xxx_messageInfo_HydratedExperimentRun.DiscardUnknown(m)
}

var xxx_messageInfo_HydratedExperimentRun proto.InternalMessageInfo

func (m *HydratedExperimentRun) GetExperimentRun() *ExperimentRun {
	if m != nil {
		return m.ExperimentRun
	}
	return nil
}

func (m *HydratedExperimentRun) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *HydratedExperimentRun) GetOwnerUserInfo() *uac.UserInfo {
	if m != nil {
		return m.OwnerUserInfo
	}
	return nil
}

func (m *HydratedExperimentRun) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *HydratedExperimentRun) GetAllowedActions() []*uac.Action {
	if m != nil {
		return m.AllowedActions
	}
	return nil
}

type GetHydratedExperimentRunsByProjectId struct {
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber           int32    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit            int32    `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending            bool     `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey              string   `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHydratedExperimentRunsByProjectId) Reset()         { *m = GetHydratedExperimentRunsByProjectId{} }
func (m *GetHydratedExperimentRunsByProjectId) String() string { return proto.CompactTextString(m) }
func (*GetHydratedExperimentRunsByProjectId) ProtoMessage()    {}
func (*GetHydratedExperimentRunsByProjectId) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{7}
}

func (m *GetHydratedExperimentRunsByProjectId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedExperimentRunsByProjectId.Unmarshal(m, b)
}
func (m *GetHydratedExperimentRunsByProjectId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedExperimentRunsByProjectId.Marshal(b, m, deterministic)
}
func (m *GetHydratedExperimentRunsByProjectId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedExperimentRunsByProjectId.Merge(m, src)
}
func (m *GetHydratedExperimentRunsByProjectId) XXX_Size() int {
	return xxx_messageInfo_GetHydratedExperimentRunsByProjectId.Size(m)
}
func (m *GetHydratedExperimentRunsByProjectId) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedExperimentRunsByProjectId.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedExperimentRunsByProjectId proto.InternalMessageInfo

func (m *GetHydratedExperimentRunsByProjectId) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetHydratedExperimentRunsByProjectId) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *GetHydratedExperimentRunsByProjectId) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

func (m *GetHydratedExperimentRunsByProjectId) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

func (m *GetHydratedExperimentRunsByProjectId) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

type GetHydratedExperimentRunsByProjectId_Response struct {
	HydratedExperimentRuns []*HydratedExperimentRun `protobuf:"bytes,1,rep,name=hydrated_experiment_runs,json=hydratedExperimentRuns,proto3" json:"hydrated_experiment_runs,omitempty"`
	TotalRecords           int64                    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *GetHydratedExperimentRunsByProjectId_Response) Reset() {
	*m = GetHydratedExperimentRunsByProjectId_Response{}
}
func (m *GetHydratedExperimentRunsByProjectId_Response) String() string {
	return proto.CompactTextString(m)
}
func (*GetHydratedExperimentRunsByProjectId_Response) ProtoMessage() {}
func (*GetHydratedExperimentRunsByProjectId_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{7, 0}
}

func (m *GetHydratedExperimentRunsByProjectId_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedExperimentRunsByProjectId_Response.Unmarshal(m, b)
}
func (m *GetHydratedExperimentRunsByProjectId_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedExperimentRunsByProjectId_Response.Marshal(b, m, deterministic)
}
func (m *GetHydratedExperimentRunsByProjectId_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedExperimentRunsByProjectId_Response.Merge(m, src)
}
func (m *GetHydratedExperimentRunsByProjectId_Response) XXX_Size() int {
	return xxx_messageInfo_GetHydratedExperimentRunsByProjectId_Response.Size(m)
}
func (m *GetHydratedExperimentRunsByProjectId_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedExperimentRunsByProjectId_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedExperimentRunsByProjectId_Response proto.InternalMessageInfo

func (m *GetHydratedExperimentRunsByProjectId_Response) GetHydratedExperimentRuns() []*HydratedExperimentRun {
	if m != nil {
		return m.HydratedExperimentRuns
	}
	return nil
}

func (m *GetHydratedExperimentRunsByProjectId_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type GetHydratedExperimentRunById struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHydratedExperimentRunById) Reset()         { *m = GetHydratedExperimentRunById{} }
func (m *GetHydratedExperimentRunById) String() string { return proto.CompactTextString(m) }
func (*GetHydratedExperimentRunById) ProtoMessage()    {}
func (*GetHydratedExperimentRunById) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{8}
}

func (m *GetHydratedExperimentRunById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedExperimentRunById.Unmarshal(m, b)
}
func (m *GetHydratedExperimentRunById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedExperimentRunById.Marshal(b, m, deterministic)
}
func (m *GetHydratedExperimentRunById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedExperimentRunById.Merge(m, src)
}
func (m *GetHydratedExperimentRunById) XXX_Size() int {
	return xxx_messageInfo_GetHydratedExperimentRunById.Size(m)
}
func (m *GetHydratedExperimentRunById) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedExperimentRunById.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedExperimentRunById proto.InternalMessageInfo

func (m *GetHydratedExperimentRunById) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetHydratedExperimentRunById_Response struct {
	HydratedExperimentRun *HydratedExperimentRun `protobuf:"bytes,1,opt,name=hydrated_experiment_run,json=hydratedExperimentRun,proto3" json:"hydrated_experiment_run,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *GetHydratedExperimentRunById_Response) Reset()         { *m = GetHydratedExperimentRunById_Response{} }
func (m *GetHydratedExperimentRunById_Response) String() string { return proto.CompactTextString(m) }
func (*GetHydratedExperimentRunById_Response) ProtoMessage()    {}
func (*GetHydratedExperimentRunById_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{8, 0}
}

func (m *GetHydratedExperimentRunById_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedExperimentRunById_Response.Unmarshal(m, b)
}
func (m *GetHydratedExperimentRunById_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedExperimentRunById_Response.Marshal(b, m, deterministic)
}
func (m *GetHydratedExperimentRunById_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedExperimentRunById_Response.Merge(m, src)
}
func (m *GetHydratedExperimentRunById_Response) XXX_Size() int {
	return xxx_messageInfo_GetHydratedExperimentRunById_Response.Size(m)
}
func (m *GetHydratedExperimentRunById_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedExperimentRunById_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedExperimentRunById_Response proto.InternalMessageInfo

func (m *GetHydratedExperimentRunById_Response) GetHydratedExperimentRun() *HydratedExperimentRun {
	if m != nil {
		return m.HydratedExperimentRun
	}
	return nil
}

type AdvancedQueryExperimentRunsResponse struct {
	HydratedExperimentRuns []*HydratedExperimentRun `protobuf:"bytes,1,rep,name=hydrated_experiment_runs,json=hydratedExperimentRuns,proto3" json:"hydrated_experiment_runs,omitempty"`
	TotalRecords           int64                    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *AdvancedQueryExperimentRunsResponse) Reset()         { *m = AdvancedQueryExperimentRunsResponse{} }
func (m *AdvancedQueryExperimentRunsResponse) String() string { return proto.CompactTextString(m) }
func (*AdvancedQueryExperimentRunsResponse) ProtoMessage()    {}
func (*AdvancedQueryExperimentRunsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{9}
}

func (m *AdvancedQueryExperimentRunsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvancedQueryExperimentRunsResponse.Unmarshal(m, b)
}
func (m *AdvancedQueryExperimentRunsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvancedQueryExperimentRunsResponse.Marshal(b, m, deterministic)
}
func (m *AdvancedQueryExperimentRunsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedQueryExperimentRunsResponse.Merge(m, src)
}
func (m *AdvancedQueryExperimentRunsResponse) XXX_Size() int {
	return xxx_messageInfo_AdvancedQueryExperimentRunsResponse.Size(m)
}
func (m *AdvancedQueryExperimentRunsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedQueryExperimentRunsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedQueryExperimentRunsResponse proto.InternalMessageInfo

func (m *AdvancedQueryExperimentRunsResponse) GetHydratedExperimentRuns() []*HydratedExperimentRun {
	if m != nil {
		return m.HydratedExperimentRuns
	}
	return nil
}

func (m *AdvancedQueryExperimentRunsResponse) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type AdvancedQueryExperimentsResponse struct {
	HydratedExperiments  []*HydratedExperiment `protobuf:"bytes,1,rep,name=hydrated_experiments,json=hydratedExperiments,proto3" json:"hydrated_experiments,omitempty"`
	TotalRecords         int64                 `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AdvancedQueryExperimentsResponse) Reset()         { *m = AdvancedQueryExperimentsResponse{} }
func (m *AdvancedQueryExperimentsResponse) String() string { return proto.CompactTextString(m) }
func (*AdvancedQueryExperimentsResponse) ProtoMessage()    {}
func (*AdvancedQueryExperimentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{10}
}

func (m *AdvancedQueryExperimentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvancedQueryExperimentsResponse.Unmarshal(m, b)
}
func (m *AdvancedQueryExperimentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvancedQueryExperimentsResponse.Marshal(b, m, deterministic)
}
func (m *AdvancedQueryExperimentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedQueryExperimentsResponse.Merge(m, src)
}
func (m *AdvancedQueryExperimentsResponse) XXX_Size() int {
	return xxx_messageInfo_AdvancedQueryExperimentsResponse.Size(m)
}
func (m *AdvancedQueryExperimentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedQueryExperimentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedQueryExperimentsResponse proto.InternalMessageInfo

func (m *AdvancedQueryExperimentsResponse) GetHydratedExperiments() []*HydratedExperiment {
	if m != nil {
		return m.HydratedExperiments
	}
	return nil
}

func (m *AdvancedQueryExperimentsResponse) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type FindHydratedProjectsByUser struct {
	FindProjects *FindProjects `protobuf:"bytes,1,opt,name=find_projects,json=findProjects,proto3" json:"find_projects,omitempty"`
	// Types that are valid to be assigned to HostUserDetails:
	//	*FindHydratedProjectsByUser_Email
	//	*FindHydratedProjectsByUser_Username
	//	*FindHydratedProjectsByUser_VertaId
	HostUserDetails      isFindHydratedProjectsByUser_HostUserDetails `protobuf_oneof:"host_user_details"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *FindHydratedProjectsByUser) Reset()         { *m = FindHydratedProjectsByUser{} }
func (m *FindHydratedProjectsByUser) String() string { return proto.CompactTextString(m) }
func (*FindHydratedProjectsByUser) ProtoMessage()    {}
func (*FindHydratedProjectsByUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{11}
}

func (m *FindHydratedProjectsByUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindHydratedProjectsByUser.Unmarshal(m, b)
}
func (m *FindHydratedProjectsByUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindHydratedProjectsByUser.Marshal(b, m, deterministic)
}
func (m *FindHydratedProjectsByUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindHydratedProjectsByUser.Merge(m, src)
}
func (m *FindHydratedProjectsByUser) XXX_Size() int {
	return xxx_messageInfo_FindHydratedProjectsByUser.Size(m)
}
func (m *FindHydratedProjectsByUser) XXX_DiscardUnknown() {
	xxx_messageInfo_FindHydratedProjectsByUser.DiscardUnknown(m)
}

var xxx_messageInfo_FindHydratedProjectsByUser proto.InternalMessageInfo

func (m *FindHydratedProjectsByUser) GetFindProjects() *FindProjects {
	if m != nil {
		return m.FindProjects
	}
	return nil
}

type isFindHydratedProjectsByUser_HostUserDetails interface {
	isFindHydratedProjectsByUser_HostUserDetails()
}

type FindHydratedProjectsByUser_Email struct {
	Email string `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type FindHydratedProjectsByUser_Username struct {
	Username string `protobuf:"bytes,3,opt,name=username,proto3,oneof"`
}

type FindHydratedProjectsByUser_VertaId struct {
	VertaId string `protobuf:"bytes,4,opt,name=verta_id,json=vertaId,proto3,oneof"`
}

func (*FindHydratedProjectsByUser_Email) isFindHydratedProjectsByUser_HostUserDetails() {}

func (*FindHydratedProjectsByUser_Username) isFindHydratedProjectsByUser_HostUserDetails() {}

func (*FindHydratedProjectsByUser_VertaId) isFindHydratedProjectsByUser_HostUserDetails() {}

func (m *FindHydratedProjectsByUser) GetHostUserDetails() isFindHydratedProjectsByUser_HostUserDetails {
	if m != nil {
		return m.HostUserDetails
	}
	return nil
}

func (m *FindHydratedProjectsByUser) GetEmail() string {
	if x, ok := m.GetHostUserDetails().(*FindHydratedProjectsByUser_Email); ok {
		return x.Email
	}
	return ""
}

// Deprecated: Do not use.
func (m *FindHydratedProjectsByUser) GetUsername() string {
	if x, ok := m.GetHostUserDetails().(*FindHydratedProjectsByUser_Username); ok {
		return x.Username
	}
	return ""
}

func (m *FindHydratedProjectsByUser) GetVertaId() string {
	if x, ok := m.GetHostUserDetails().(*FindHydratedProjectsByUser_VertaId); ok {
		return x.VertaId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FindHydratedProjectsByUser) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FindHydratedProjectsByUser_Email)(nil),
		(*FindHydratedProjectsByUser_Username)(nil),
		(*FindHydratedProjectsByUser_VertaId)(nil),
	}
}

type FindHydratedProjectsByOrganization struct {
	FindProjects *FindProjects `protobuf:"bytes,1,opt,name=find_projects,json=findProjects,proto3" json:"find_projects,omitempty"`
	// Types that are valid to be assigned to HostOrganization:
	//	*FindHydratedProjectsByOrganization_Name
	//	*FindHydratedProjectsByOrganization_Id
	HostOrganization     isFindHydratedProjectsByOrganization_HostOrganization `protobuf_oneof:"host_organization"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *FindHydratedProjectsByOrganization) Reset()         { *m = FindHydratedProjectsByOrganization{} }
func (m *FindHydratedProjectsByOrganization) String() string { return proto.CompactTextString(m) }
func (*FindHydratedProjectsByOrganization) ProtoMessage()    {}
func (*FindHydratedProjectsByOrganization) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{12}
}

func (m *FindHydratedProjectsByOrganization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindHydratedProjectsByOrganization.Unmarshal(m, b)
}
func (m *FindHydratedProjectsByOrganization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindHydratedProjectsByOrganization.Marshal(b, m, deterministic)
}
func (m *FindHydratedProjectsByOrganization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindHydratedProjectsByOrganization.Merge(m, src)
}
func (m *FindHydratedProjectsByOrganization) XXX_Size() int {
	return xxx_messageInfo_FindHydratedProjectsByOrganization.Size(m)
}
func (m *FindHydratedProjectsByOrganization) XXX_DiscardUnknown() {
	xxx_messageInfo_FindHydratedProjectsByOrganization.DiscardUnknown(m)
}

var xxx_messageInfo_FindHydratedProjectsByOrganization proto.InternalMessageInfo

func (m *FindHydratedProjectsByOrganization) GetFindProjects() *FindProjects {
	if m != nil {
		return m.FindProjects
	}
	return nil
}

type isFindHydratedProjectsByOrganization_HostOrganization interface {
	isFindHydratedProjectsByOrganization_HostOrganization()
}

type FindHydratedProjectsByOrganization_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedProjectsByOrganization_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedProjectsByOrganization_Name) isFindHydratedProjectsByOrganization_HostOrganization() {
}

func (*FindHydratedProjectsByOrganization_Id) isFindHydratedProjectsByOrganization_HostOrganization() {
}

func (m *FindHydratedProjectsByOrganization) GetHostOrganization() isFindHydratedProjectsByOrganization_HostOrganization {
	if m != nil {
		return m.HostOrganization
	}
	return nil
}

func (m *FindHydratedProjectsByOrganization) GetName() string {
	if x, ok := m.GetHostOrganization().(*FindHydratedProjectsByOrganization_Name); ok {
		return x.Name
	}
	return ""
}

func (m *FindHydratedProjectsByOrganization) GetId() string {
	if x, ok := m.GetHostOrganization().(*FindHydratedProjectsByOrganization_Id); ok {
		return x.Id
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FindHydratedProjectsByOrganization) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FindHydratedProjectsByOrganization_Name)(nil),
		(*FindHydratedProjectsByOrganization_Id)(nil),
	}
}

type FindHydratedProjectsByTeam struct {
	FindProjects *FindProjects `protobuf:"bytes,1,opt,name=find_projects,json=findProjects,proto3" json:"find_projects,omitempty"`
	OrgId        string        `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Types that are valid to be assigned to HostTeam:
	//	*FindHydratedProjectsByTeam_Name
	//	*FindHydratedProjectsByTeam_Id
	HostTeam             isFindHydratedProjectsByTeam_HostTeam `protobuf_oneof:"host_team"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *FindHydratedProjectsByTeam) Reset()         { *m = FindHydratedProjectsByTeam{} }
func (m *FindHydratedProjectsByTeam) String() string { return proto.CompactTextString(m) }
func (*FindHydratedProjectsByTeam) ProtoMessage()    {}
func (*FindHydratedProjectsByTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{13}
}

func (m *FindHydratedProjectsByTeam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindHydratedProjectsByTeam.Unmarshal(m, b)
}
func (m *FindHydratedProjectsByTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindHydratedProjectsByTeam.Marshal(b, m, deterministic)
}
func (m *FindHydratedProjectsByTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindHydratedProjectsByTeam.Merge(m, src)
}
func (m *FindHydratedProjectsByTeam) XXX_Size() int {
	return xxx_messageInfo_FindHydratedProjectsByTeam.Size(m)
}
func (m *FindHydratedProjectsByTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_FindHydratedProjectsByTeam.DiscardUnknown(m)
}

var xxx_messageInfo_FindHydratedProjectsByTeam proto.InternalMessageInfo

func (m *FindHydratedProjectsByTeam) GetFindProjects() *FindProjects {
	if m != nil {
		return m.FindProjects
	}
	return nil
}

func (m *FindHydratedProjectsByTeam) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type isFindHydratedProjectsByTeam_HostTeam interface {
	isFindHydratedProjectsByTeam_HostTeam()
}

type FindHydratedProjectsByTeam_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedProjectsByTeam_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedProjectsByTeam_Name) isFindHydratedProjectsByTeam_HostTeam() {}

func (*FindHydratedProjectsByTeam_Id) isFindHydratedProjectsByTeam_HostTeam() {}

func (m *FindHydratedProjectsByTeam) GetHostTeam() isFindHydratedProjectsByTeam_HostTeam {
	if m != nil {
		return m.HostTeam
	}
	return nil
}

func (m *FindHydratedProjectsByTeam) GetName() string {
	if x, ok := m.GetHostTeam().(*FindHydratedProjectsByTeam_Name); ok {
		return x.Name
	}
	return ""
}

func (m *FindHydratedProjectsByTeam) GetId() string {
	if x, ok := m.GetHostTeam().(*FindHydratedProjectsByTeam_Id); ok {
		return x.Id
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FindHydratedProjectsByTeam) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FindHydratedProjectsByTeam_Name)(nil),
		(*FindHydratedProjectsByTeam_Id)(nil),
	}
}

type FindHydratedDatasetsByOrganization struct {
	FindDatasets *FindDatasets `protobuf:"bytes,1,opt,name=find_datasets,json=findDatasets,proto3" json:"find_datasets,omitempty"`
	// Types that are valid to be assigned to HostOrganization:
	//	*FindHydratedDatasetsByOrganization_Name
	//	*FindHydratedDatasetsByOrganization_Id
	HostOrganization     isFindHydratedDatasetsByOrganization_HostOrganization `protobuf_oneof:"host_organization"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *FindHydratedDatasetsByOrganization) Reset()         { *m = FindHydratedDatasetsByOrganization{} }
func (m *FindHydratedDatasetsByOrganization) String() string { return proto.CompactTextString(m) }
func (*FindHydratedDatasetsByOrganization) ProtoMessage()    {}
func (*FindHydratedDatasetsByOrganization) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{14}
}

func (m *FindHydratedDatasetsByOrganization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindHydratedDatasetsByOrganization.Unmarshal(m, b)
}
func (m *FindHydratedDatasetsByOrganization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindHydratedDatasetsByOrganization.Marshal(b, m, deterministic)
}
func (m *FindHydratedDatasetsByOrganization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindHydratedDatasetsByOrganization.Merge(m, src)
}
func (m *FindHydratedDatasetsByOrganization) XXX_Size() int {
	return xxx_messageInfo_FindHydratedDatasetsByOrganization.Size(m)
}
func (m *FindHydratedDatasetsByOrganization) XXX_DiscardUnknown() {
	xxx_messageInfo_FindHydratedDatasetsByOrganization.DiscardUnknown(m)
}

var xxx_messageInfo_FindHydratedDatasetsByOrganization proto.InternalMessageInfo

func (m *FindHydratedDatasetsByOrganization) GetFindDatasets() *FindDatasets {
	if m != nil {
		return m.FindDatasets
	}
	return nil
}

type isFindHydratedDatasetsByOrganization_HostOrganization interface {
	isFindHydratedDatasetsByOrganization_HostOrganization()
}

type FindHydratedDatasetsByOrganization_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedDatasetsByOrganization_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedDatasetsByOrganization_Name) isFindHydratedDatasetsByOrganization_HostOrganization() {
}

func (*FindHydratedDatasetsByOrganization_Id) isFindHydratedDatasetsByOrganization_HostOrganization() {
}

func (m *FindHydratedDatasetsByOrganization) GetHostOrganization() isFindHydratedDatasetsByOrganization_HostOrganization {
	if m != nil {
		return m.HostOrganization
	}
	return nil
}

func (m *FindHydratedDatasetsByOrganization) GetName() string {
	if x, ok := m.GetHostOrganization().(*FindHydratedDatasetsByOrganization_Name); ok {
		return x.Name
	}
	return ""
}

func (m *FindHydratedDatasetsByOrganization) GetId() string {
	if x, ok := m.GetHostOrganization().(*FindHydratedDatasetsByOrganization_Id); ok {
		return x.Id
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FindHydratedDatasetsByOrganization) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FindHydratedDatasetsByOrganization_Name)(nil),
		(*FindHydratedDatasetsByOrganization_Id)(nil),
	}
}

type FindHydratedDatasetsByTeam struct {
	FindDatasets *FindDatasets `protobuf:"bytes,1,opt,name=find_datasets,json=findDatasets,proto3" json:"find_datasets,omitempty"`
	OrgId        string        `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Types that are valid to be assigned to HostTeam:
	//	*FindHydratedDatasetsByTeam_Name
	//	*FindHydratedDatasetsByTeam_Id
	HostTeam             isFindHydratedDatasetsByTeam_HostTeam `protobuf_oneof:"host_team"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *FindHydratedDatasetsByTeam) Reset()         { *m = FindHydratedDatasetsByTeam{} }
func (m *FindHydratedDatasetsByTeam) String() string { return proto.CompactTextString(m) }
func (*FindHydratedDatasetsByTeam) ProtoMessage()    {}
func (*FindHydratedDatasetsByTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{15}
}

func (m *FindHydratedDatasetsByTeam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindHydratedDatasetsByTeam.Unmarshal(m, b)
}
func (m *FindHydratedDatasetsByTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindHydratedDatasetsByTeam.Marshal(b, m, deterministic)
}
func (m *FindHydratedDatasetsByTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindHydratedDatasetsByTeam.Merge(m, src)
}
func (m *FindHydratedDatasetsByTeam) XXX_Size() int {
	return xxx_messageInfo_FindHydratedDatasetsByTeam.Size(m)
}
func (m *FindHydratedDatasetsByTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_FindHydratedDatasetsByTeam.DiscardUnknown(m)
}

var xxx_messageInfo_FindHydratedDatasetsByTeam proto.InternalMessageInfo

func (m *FindHydratedDatasetsByTeam) GetFindDatasets() *FindDatasets {
	if m != nil {
		return m.FindDatasets
	}
	return nil
}

func (m *FindHydratedDatasetsByTeam) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type isFindHydratedDatasetsByTeam_HostTeam interface {
	isFindHydratedDatasetsByTeam_HostTeam()
}

type FindHydratedDatasetsByTeam_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedDatasetsByTeam_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedDatasetsByTeam_Name) isFindHydratedDatasetsByTeam_HostTeam() {}

func (*FindHydratedDatasetsByTeam_Id) isFindHydratedDatasetsByTeam_HostTeam() {}

func (m *FindHydratedDatasetsByTeam) GetHostTeam() isFindHydratedDatasetsByTeam_HostTeam {
	if m != nil {
		return m.HostTeam
	}
	return nil
}

func (m *FindHydratedDatasetsByTeam) GetName() string {
	if x, ok := m.GetHostTeam().(*FindHydratedDatasetsByTeam_Name); ok {
		return x.Name
	}
	return ""
}

func (m *FindHydratedDatasetsByTeam) GetId() string {
	if x, ok := m.GetHostTeam().(*FindHydratedDatasetsByTeam_Id); ok {
		return x.Id
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FindHydratedDatasetsByTeam) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FindHydratedDatasetsByTeam_Name)(nil),
		(*FindHydratedDatasetsByTeam_Id)(nil),
	}
}

type AdvancedQueryProjectsResponse struct {
	HydratedProjects     []*HydratedProject `protobuf:"bytes,1,rep,name=hydrated_projects,json=hydratedProjects,proto3" json:"hydrated_projects,omitempty"`
	TotalRecords         int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdvancedQueryProjectsResponse) Reset()         { *m = AdvancedQueryProjectsResponse{} }
func (m *AdvancedQueryProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*AdvancedQueryProjectsResponse) ProtoMessage()    {}
func (*AdvancedQueryProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{16}
}

func (m *AdvancedQueryProjectsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvancedQueryProjectsResponse.Unmarshal(m, b)
}
func (m *AdvancedQueryProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvancedQueryProjectsResponse.Marshal(b, m, deterministic)
}
func (m *AdvancedQueryProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedQueryProjectsResponse.Merge(m, src)
}
func (m *AdvancedQueryProjectsResponse) XXX_Size() int {
	return xxx_messageInfo_AdvancedQueryProjectsResponse.Size(m)
}
func (m *AdvancedQueryProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedQueryProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedQueryProjectsResponse proto.InternalMessageInfo

func (m *AdvancedQueryProjectsResponse) GetHydratedProjects() []*HydratedProject {
	if m != nil {
		return m.HydratedProjects
	}
	return nil
}

func (m *AdvancedQueryProjectsResponse) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type HydratedDataset struct {
	Dataset               *Dataset                `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	CollaboratorUserInfos []*CollaboratorUserInfo `protobuf:"bytes,2,rep,name=collaborator_user_infos,json=collaboratorUserInfos,proto3" json:"collaborator_user_infos,omitempty"`
	OwnerUserInfo         *uac.UserInfo           `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions        []*uac.Action           `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                `json:"-"`
	XXX_unrecognized      []byte                  `json:"-"`
	XXX_sizecache         int32                   `json:"-"`
}

func (m *HydratedDataset) Reset()         { *m = HydratedDataset{} }
func (m *HydratedDataset) String() string { return proto.CompactTextString(m) }
func (*HydratedDataset) ProtoMessage()    {}
func (*HydratedDataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{17}
}

func (m *HydratedDataset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HydratedDataset.Unmarshal(m, b)
}
func (m *HydratedDataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HydratedDataset.Marshal(b, m, deterministic)
}
func (m *HydratedDataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HydratedDataset.Merge(m, src)
}
func (m *HydratedDataset) XXX_Size() int {
	return xxx_messageInfo_HydratedDataset.Size(m)
}
func (m *HydratedDataset) XXX_DiscardUnknown() {
	xxx_messageInfo_HydratedDataset.DiscardUnknown(m)
}

var xxx_messageInfo_HydratedDataset proto.InternalMessageInfo

func (m *HydratedDataset) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

func (m *HydratedDataset) GetCollaboratorUserInfos() []*CollaboratorUserInfo {
	if m != nil {
		return m.CollaboratorUserInfos
	}
	return nil
}

func (m *HydratedDataset) GetOwnerUserInfo() *uac.UserInfo {
	if m != nil {
		return m.OwnerUserInfo
	}
	return nil
}

func (m *HydratedDataset) GetAllowedActions() []*uac.Action {
	if m != nil {
		return m.AllowedActions
	}
	return nil
}

type AdvancedQueryDatasetsResponse struct {
	HydratedDatasets     []*HydratedDataset `protobuf:"bytes,1,rep,name=hydrated_datasets,json=hydratedDatasets,proto3" json:"hydrated_datasets,omitempty"`
	TotalRecords         int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdvancedQueryDatasetsResponse) Reset()         { *m = AdvancedQueryDatasetsResponse{} }
func (m *AdvancedQueryDatasetsResponse) String() string { return proto.CompactTextString(m) }
func (*AdvancedQueryDatasetsResponse) ProtoMessage()    {}
func (*AdvancedQueryDatasetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{18}
}

func (m *AdvancedQueryDatasetsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvancedQueryDatasetsResponse.Unmarshal(m, b)
}
func (m *AdvancedQueryDatasetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvancedQueryDatasetsResponse.Marshal(b, m, deterministic)
}
func (m *AdvancedQueryDatasetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedQueryDatasetsResponse.Merge(m, src)
}
func (m *AdvancedQueryDatasetsResponse) XXX_Size() int {
	return xxx_messageInfo_AdvancedQueryDatasetsResponse.Size(m)
}
func (m *AdvancedQueryDatasetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedQueryDatasetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedQueryDatasetsResponse proto.InternalMessageInfo

func (m *AdvancedQueryDatasetsResponse) GetHydratedDatasets() []*HydratedDataset {
	if m != nil {
		return m.HydratedDatasets
	}
	return nil
}

func (m *AdvancedQueryDatasetsResponse) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

type HydratedDatasetVersion struct {
	DatasetVersion       *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
	OwnerUserInfo        *uac.UserInfo   `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions       []*uac.Action   `protobuf:"bytes,4,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HydratedDatasetVersion) Reset()         { *m = HydratedDatasetVersion{} }
func (m *HydratedDatasetVersion) String() string { return proto.CompactTextString(m) }
func (*HydratedDatasetVersion) ProtoMessage()    {}
func (*HydratedDatasetVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{19}
}

func (m *HydratedDatasetVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HydratedDatasetVersion.Unmarshal(m, b)
}
func (m *HydratedDatasetVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HydratedDatasetVersion.Marshal(b, m, deterministic)
}
func (m *HydratedDatasetVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HydratedDatasetVersion.Merge(m, src)
}
func (m *HydratedDatasetVersion) XXX_Size() int {
	return xxx_messageInfo_HydratedDatasetVersion.Size(m)
}
func (m *HydratedDatasetVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_HydratedDatasetVersion.DiscardUnknown(m)
}

var xxx_messageInfo_HydratedDatasetVersion proto.InternalMessageInfo

func (m *HydratedDatasetVersion) GetDatasetVersion() *DatasetVersion {
	if m != nil {
		return m.DatasetVersion
	}
	return nil
}

func (m *HydratedDatasetVersion) GetOwnerUserInfo() *uac.UserInfo {
	if m != nil {
		return m.OwnerUserInfo
	}
	return nil
}

func (m *HydratedDatasetVersion) GetAllowedActions() []*uac.Action {
	if m != nil {
		return m.AllowedActions
	}
	return nil
}

type AdvancedQueryDatasetVersionsResponse struct {
	HydratedDatasetVersions []*HydratedDatasetVersion `protobuf:"bytes,1,rep,name=hydrated_dataset_versions,json=hydratedDatasetVersions,proto3" json:"hydrated_dataset_versions,omitempty"`
	TotalRecords            int64                     `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                  `json:"-"`
	XXX_unrecognized        []byte                    `json:"-"`
	XXX_sizecache           int32                     `json:"-"`
}

func (m *AdvancedQueryDatasetVersionsResponse) Reset()         { *m = AdvancedQueryDatasetVersionsResponse{} }
func (m *AdvancedQueryDatasetVersionsResponse) String() string { return proto.CompactTextString(m) }
func (*AdvancedQueryDatasetVersionsResponse) ProtoMessage()    {}
func (*AdvancedQueryDatasetVersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{20}
}

func (m *AdvancedQueryDatasetVersionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvancedQueryDatasetVersionsResponse.Unmarshal(m, b)
}
func (m *AdvancedQueryDatasetVersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvancedQueryDatasetVersionsResponse.Marshal(b, m, deterministic)
}
func (m *AdvancedQueryDatasetVersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedQueryDatasetVersionsResponse.Merge(m, src)
}
func (m *AdvancedQueryDatasetVersionsResponse) XXX_Size() int {
	return xxx_messageInfo_AdvancedQueryDatasetVersionsResponse.Size(m)
}
func (m *AdvancedQueryDatasetVersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedQueryDatasetVersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedQueryDatasetVersionsResponse proto.InternalMessageInfo

func (m *AdvancedQueryDatasetVersionsResponse) GetHydratedDatasetVersions() []*HydratedDatasetVersion {
	if m != nil {
		return m.HydratedDatasetVersions
	}
	return nil
}

func (m *AdvancedQueryDatasetVersionsResponse) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

//getDatasetByName
type GetHydratedDatasetByName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceName        string   `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHydratedDatasetByName) Reset()         { *m = GetHydratedDatasetByName{} }
func (m *GetHydratedDatasetByName) String() string { return proto.CompactTextString(m) }
func (*GetHydratedDatasetByName) ProtoMessage()    {}
func (*GetHydratedDatasetByName) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{21}
}

func (m *GetHydratedDatasetByName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedDatasetByName.Unmarshal(m, b)
}
func (m *GetHydratedDatasetByName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedDatasetByName.Marshal(b, m, deterministic)
}
func (m *GetHydratedDatasetByName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedDatasetByName.Merge(m, src)
}
func (m *GetHydratedDatasetByName) XXX_Size() int {
	return xxx_messageInfo_GetHydratedDatasetByName.Size(m)
}
func (m *GetHydratedDatasetByName) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedDatasetByName.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedDatasetByName proto.InternalMessageInfo

func (m *GetHydratedDatasetByName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetHydratedDatasetByName) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

type GetHydratedDatasetByName_Response struct {
	HydratedDatasetByUser  *HydratedDataset   `protobuf:"bytes,1,opt,name=hydrated_dataset_by_user,json=hydratedDatasetByUser,proto3" json:"hydrated_dataset_by_user,omitempty"`
	SharedHydratedDatasets []*HydratedDataset `protobuf:"bytes,2,rep,name=shared_hydrated_datasets,json=sharedHydratedDatasets,proto3" json:"shared_hydrated_datasets,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}           `json:"-"`
	XXX_unrecognized       []byte             `json:"-"`
	XXX_sizecache          int32              `json:"-"`
}

func (m *GetHydratedDatasetByName_Response) Reset()         { *m = GetHydratedDatasetByName_Response{} }
func (m *GetHydratedDatasetByName_Response) String() string { return proto.CompactTextString(m) }
func (*GetHydratedDatasetByName_Response) ProtoMessage()    {}
func (*GetHydratedDatasetByName_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{21, 0}
}

func (m *GetHydratedDatasetByName_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedDatasetByName_Response.Unmarshal(m, b)
}
func (m *GetHydratedDatasetByName_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedDatasetByName_Response.Marshal(b, m, deterministic)
}
func (m *GetHydratedDatasetByName_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedDatasetByName_Response.Merge(m, src)
}
func (m *GetHydratedDatasetByName_Response) XXX_Size() int {
	return xxx_messageInfo_GetHydratedDatasetByName_Response.Size(m)
}
func (m *GetHydratedDatasetByName_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedDatasetByName_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedDatasetByName_Response proto.InternalMessageInfo

func (m *GetHydratedDatasetByName_Response) GetHydratedDatasetByUser() *HydratedDataset {
	if m != nil {
		return m.HydratedDatasetByUser
	}
	return nil
}

func (m *GetHydratedDatasetByName_Response) GetSharedHydratedDatasets() []*HydratedDataset {
	if m != nil {
		return m.SharedHydratedDatasets
	}
	return nil
}

type GetHydratedDatasetsByProjectId struct {
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber           int32    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit            int32    `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending            bool     `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey              string   `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHydratedDatasetsByProjectId) Reset()         { *m = GetHydratedDatasetsByProjectId{} }
func (m *GetHydratedDatasetsByProjectId) String() string { return proto.CompactTextString(m) }
func (*GetHydratedDatasetsByProjectId) ProtoMessage()    {}
func (*GetHydratedDatasetsByProjectId) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{22}
}

func (m *GetHydratedDatasetsByProjectId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedDatasetsByProjectId.Unmarshal(m, b)
}
func (m *GetHydratedDatasetsByProjectId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedDatasetsByProjectId.Marshal(b, m, deterministic)
}
func (m *GetHydratedDatasetsByProjectId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedDatasetsByProjectId.Merge(m, src)
}
func (m *GetHydratedDatasetsByProjectId) XXX_Size() int {
	return xxx_messageInfo_GetHydratedDatasetsByProjectId.Size(m)
}
func (m *GetHydratedDatasetsByProjectId) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedDatasetsByProjectId.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedDatasetsByProjectId proto.InternalMessageInfo

func (m *GetHydratedDatasetsByProjectId) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetHydratedDatasetsByProjectId) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *GetHydratedDatasetsByProjectId) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

func (m *GetHydratedDatasetsByProjectId) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

func (m *GetHydratedDatasetsByProjectId) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

type GetHydratedDatasetsByProjectId_Response struct {
	HydratedDatasets     []*HydratedDataset `protobuf:"bytes,1,rep,name=hydrated_datasets,json=hydratedDatasets,proto3" json:"hydrated_datasets,omitempty"`
	TotalRecords         int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetHydratedDatasetsByProjectId_Response) Reset() {
	*m = GetHydratedDatasetsByProjectId_Response{}
}
func (m *GetHydratedDatasetsByProjectId_Response) String() string { return proto.CompactTextString(m) }
func (*GetHydratedDatasetsByProjectId_Response) ProtoMessage()    {}
func (*GetHydratedDatasetsByProjectId_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc6dab4fe591a62c, []int{22, 0}
}

func (m *GetHydratedDatasetsByProjectId_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHydratedDatasetsByProjectId_Response.Unmarshal(m, b)
}
func (m *GetHydratedDatasetsByProjectId_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHydratedDatasetsByProjectId_Response.Marshal(b, m, deterministic)
}
func (m *GetHydratedDatasetsByProjectId_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHydratedDatasetsByProjectId_Response.Merge(m, src)
}
func (m *GetHydratedDatasetsByProjectId_Response) XXX_Size() int {
	return xxx_messageInfo_GetHydratedDatasetsByProjectId_Response.Size(m)
}
func (m *GetHydratedDatasetsByProjectId_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHydratedDatasetsByProjectId_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetHydratedDatasetsByProjectId_Response proto.InternalMessageInfo

func (m *GetHydratedDatasetsByProjectId_Response) GetHydratedDatasets() []*HydratedDataset {
	if m != nil {
		return m.HydratedDatasets
	}
	return nil
}

func (m *GetHydratedDatasetsByProjectId_Response) GetTotalRecords() int64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

func init() {
	proto.RegisterType((*GetHydratedProjects)(nil), "ai.verta.modeldb.GetHydratedProjects")
	proto.RegisterType((*GetHydratedProjects_Response)(nil), "ai.verta.modeldb.GetHydratedProjects.Response")
	proto.RegisterType((*CollaboratorUserInfo)(nil), "ai.verta.modeldb.CollaboratorUserInfo")
	proto.RegisterType((*HydratedProject)(nil), "ai.verta.modeldb.HydratedProject")
	proto.RegisterType((*GetHydratedProjectById)(nil), "ai.verta.modeldb.GetHydratedProjectById")
	proto.RegisterType((*GetHydratedProjectById_Response)(nil), "ai.verta.modeldb.GetHydratedProjectById.Response")
	proto.RegisterType((*HydratedExperiment)(nil), "ai.verta.modeldb.HydratedExperiment")
	proto.RegisterType((*GetHydratedExperimentsByProjectId)(nil), "ai.verta.modeldb.GetHydratedExperimentsByProjectId")
	proto.RegisterType((*GetHydratedExperimentsByProjectId_Response)(nil), "ai.verta.modeldb.GetHydratedExperimentsByProjectId.Response")
	proto.RegisterType((*HydratedExperimentRun)(nil), "ai.verta.modeldb.HydratedExperimentRun")
	proto.RegisterType((*GetHydratedExperimentRunsByProjectId)(nil), "ai.verta.modeldb.GetHydratedExperimentRunsByProjectId")
	proto.RegisterType((*GetHydratedExperimentRunsByProjectId_Response)(nil), "ai.verta.modeldb.GetHydratedExperimentRunsByProjectId.Response")
	proto.RegisterType((*GetHydratedExperimentRunById)(nil), "ai.verta.modeldb.GetHydratedExperimentRunById")
	proto.RegisterType((*GetHydratedExperimentRunById_Response)(nil), "ai.verta.modeldb.GetHydratedExperimentRunById.Response")
	proto.RegisterType((*AdvancedQueryExperimentRunsResponse)(nil), "ai.verta.modeldb.AdvancedQueryExperimentRunsResponse")
	proto.RegisterType((*AdvancedQueryExperimentsResponse)(nil), "ai.verta.modeldb.AdvancedQueryExperimentsResponse")
	proto.RegisterType((*FindHydratedProjectsByUser)(nil), "ai.verta.modeldb.FindHydratedProjectsByUser")
	proto.RegisterType((*FindHydratedProjectsByOrganization)(nil), "ai.verta.modeldb.FindHydratedProjectsByOrganization")
	proto.RegisterType((*FindHydratedProjectsByTeam)(nil), "ai.verta.modeldb.FindHydratedProjectsByTeam")
	proto.RegisterType((*FindHydratedDatasetsByOrganization)(nil), "ai.verta.modeldb.FindHydratedDatasetsByOrganization")
	proto.RegisterType((*FindHydratedDatasetsByTeam)(nil), "ai.verta.modeldb.FindHydratedDatasetsByTeam")
	proto.RegisterType((*AdvancedQueryProjectsResponse)(nil), "ai.verta.modeldb.AdvancedQueryProjectsResponse")
	proto.RegisterType((*HydratedDataset)(nil), "ai.verta.modeldb.HydratedDataset")
	proto.RegisterType((*AdvancedQueryDatasetsResponse)(nil), "ai.verta.modeldb.AdvancedQueryDatasetsResponse")
	proto.RegisterType((*HydratedDatasetVersion)(nil), "ai.verta.modeldb.HydratedDatasetVersion")
	proto.RegisterType((*AdvancedQueryDatasetVersionsResponse)(nil), "ai.verta.modeldb.AdvancedQueryDatasetVersionsResponse")
	proto.RegisterType((*GetHydratedDatasetByName)(nil), "ai.verta.modeldb.GetHydratedDatasetByName")
	proto.RegisterType((*GetHydratedDatasetByName_Response)(nil), "ai.verta.modeldb.GetHydratedDatasetByName.Response")
	proto.RegisterType((*GetHydratedDatasetsByProjectId)(nil), "ai.verta.modeldb.GetHydratedDatasetsByProjectId")
	proto.RegisterType((*GetHydratedDatasetsByProjectId_Response)(nil), "ai.verta.modeldb.GetHydratedDatasetsByProjectId.Response")
}

func init() {
	proto.RegisterFile("protos/public/modeldb/HydratedService.proto", fileDescriptor_bc6dab4fe591a62c)
}

var fileDescriptor_bc6dab4fe591a62c = []byte{
	// 2044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcf, 0x6f, 0xdc, 0xc6,
	0xf5, 0x17, 0x29, 0x29, 0xd6, 0x3e, 0x59, 0x3f, 0x3c, 0x96, 0xe4, 0x15, 0xa3, 0xd8, 0x32, 0x2d,
	0x27, 0x1b, 0x59, 0xde, 0xb5, 0x56, 0xb1, 0xf3, 0xfd, 0xa6, 0xa9, 0x0b, 0xad, 0xe2, 0x54, 0x8b,
	0x06, 0x6a, 0x4a, 0x2b, 0x69, 0x9b, 0x02, 0x5d, 0x50, 0xe4, 0x88, 0xcb, 0x7a, 0x97, 0xb3, 0x20,
	0xb9, 0x72, 0xb7, 0x97, 0x02, 0x39, 0xb5, 0xd7, 0xb6, 0x97, 0xb6, 0x97, 0x5e, 0xec, 0x5b, 0x0b,
	0x04, 0xfd, 0x01, 0xe4, 0xd2, 0x4b, 0x81, 0x5c, 0x8a, 0x1e, 0x5a, 0xdf, 0x7a, 0x2c, 0xfa, 0x87,
	0x14, 0x9c, 0x25, 0x97, 0x1c, 0x72, 0xc8, 0x1d, 0xd9, 0x52, 0x9a, 0xf4, 0xe6, 0x99, 0xfd, 0xcc,
	0xe3, 0xe7, 0xbd, 0xf7, 0x99, 0xe7, 0x37, 0x0f, 0x82, 0x5b, 0x3d, 0x97, 0xf8, 0xc4, 0xab, 0xf5,
	0xfa, 0x47, 0x1d, 0xdb, 0xa8, 0x75, 0x89, 0x89, 0x3b, 0xe6, 0x51, 0x6d, 0x7f, 0x60, 0xba, 0xba,
	0x8f, 0xcd, 0x87, 0xd8, 0x3d, 0xb1, 0x0d, 0x5c, 0xa5, 0x28, 0xb4, 0xa8, 0xdb, 0xd5, 0x13, 0xec,
	0xfa, 0x7a, 0x35, 0xc4, 0x29, 0x6b, 0x16, 0x21, 0x56, 0x07, 0xd7, 0xf4, 0x9e, 0x5d, 0xd3, 0x1d,
	0x87, 0xf8, 0xba, 0x6f, 0x13, 0xc7, 0x1b, 0xe2, 0x15, 0x95, 0x35, 0xde, 0xd7, 0x8d, 0xda, 0x07,
	0xbb, 0x7b, 0x8c, 0x4d, 0x65, 0x23, 0x8b, 0xf9, 0xa6, 0x6b, 0xe9, 0x8e, 0xfd, 0x23, 0x6a, 0x2a,
	0x44, 0xad, 0x65, 0x51, 0x87, 0x58, 0xef, 0xe6, 0xdb, 0xd8, 0x23, 0x9d, 0x8e, 0x7e, 0x44, 0x5c,
	0xdd, 0x27, 0x6e, 0x88, 0xba, 0xc1, 0x77, 0x75, 0x8f, 0x74, 0xbb, 0xd8, 0xf1, 0x43, 0xd0, 0x26,
	0x1f, 0xf4, 0xbe, 0x4b, 0x7e, 0x80, 0x0d, 0x9f, 0xa5, 0x7e, 0x9b, 0x8f, 0x7d, 0xf0, 0xc3, 0x1e,
	0x76, 0xed, 0xc0, 0x26, 0x0b, 0xbf, 0x33, 0x0e, 0xae, 0xf5, 0x1d, 0xf6, 0x44, 0x0e, 0x99, 0x77,
	0x74, 0x5f, 0xf7, 0x70, 0xca, 0xfa, 0x76, 0x21, 0xf6, 0x43, 0xec, 0x7a, 0x36, 0x49, 0x99, 0xbf,
	0x91, 0x0d, 0x9b, 0x46, 0x3a, 0x98, 0x05, 0x55, 0x58, 0x90, 0x41, 0xba, 0x5d, 0xe2, 0xd0, 0xa0,
	0xa5, 0xcc, 0xa9, 0x7f, 0x92, 0xe1, 0xf2, 0xd7, 0xb1, 0x1f, 0x49, 0x27, 0x0c, 0x99, 0x87, 0xae,
	0xc1, 0x6c, 0x4f, 0xb7, 0x70, 0xcb, 0xe9, 0x77, 0x8f, 0xb0, 0x5b, 0x96, 0xd6, 0xa5, 0xca, 0xb4,
	0x06, 0xc1, 0xd6, 0x01, 0xdd, 0x41, 0xaf, 0x00, 0x5d, 0xb5, 0x3a, 0x76, 0xd7, 0xf6, 0xcb, 0x32,
	0xfd, 0xbd, 0x14, 0xec, 0xbc, 0x17, 0x6c, 0xa0, 0x35, 0x28, 0xe9, 0x9e, 0x81, 0x1d, 0xd3, 0x76,
	0xac, 0xf2, 0xe4, 0xba, 0x54, 0x99, 0xd1, 0xe2, 0x0d, 0xb4, 0x0a, 0x33, 0x1e, 0x71, 0xfd, 0xd6,
	0x23, 0x3c, 0x28, 0x4f, 0xad, 0x4b, 0x95, 0x92, 0x76, 0x21, 0x58, 0x7f, 0x03, 0x0f, 0xd0, 0x4d,
	0x98, 0x7f, 0x4c, 0xdc, 0x47, 0x5e, 0x4f, 0x37, 0x70, 0xcb, 0xd1, 0xbb, 0xb8, 0x3c, 0x4d, 0x01,
	0x73, 0xa3, 0xdd, 0x03, 0xbd, 0x8b, 0x95, 0x1f, 0xc3, 0x8c, 0x86, 0xbd, 0x1e, 0x71, 0x3c, 0x8c,
	0x0e, 0xe0, 0x52, 0x3b, 0xe4, 0xdf, 0xea, 0x85, 0x0e, 0x94, 0xa5, 0xf5, 0xc9, 0xca, 0x6c, 0xfd,
	0x7a, 0x35, 0xad, 0xfe, 0x6a, 0xca, 0x55, 0x6d, 0xb1, 0x9d, 0xf6, 0xfd, 0x06, 0xcc, 0xf9, 0xc4,
	0xd7, 0x3b, 0x2d, 0x17, 0x1b, 0xc4, 0x35, 0x3d, 0xea, 0xdd, 0xa4, 0x76, 0x91, 0x6e, 0x6a, 0xc3,
	0x3d, 0xf5, 0xa7, 0x53, 0xb0, 0x94, 0xd4, 0xeb, 0x07, 0x1e, 0x76, 0x9b, 0xce, 0x31, 0x41, 0x07,
	0xb0, 0x62, 0x24, 0xf6, 0x5b, 0x7d, 0x0f, 0xbb, 0x2d, 0xdb, 0x39, 0x26, 0x34, 0x88, 0xb3, 0xf5,
	0x95, 0x98, 0x52, 0x5f, 0x37, 0xaa, 0xd1, 0xb9, 0xfd, 0x09, 0x6d, 0xc9, 0xe0, 0xd9, 0xfb, 0x2e,
	0xac, 0x32, 0xf6, 0x48, 0xe2, 0xa2, 0xd1, 0xc8, 0xce, 0xd6, 0x15, 0xd6, 0x64, 0xf2, 0x2a, 0xee,
	0x4f, 0x68, 0xe5, 0xe4, 0xf1, 0xe4, 0x6f, 0x68, 0x17, 0x2e, 0x31, 0xa6, 0x7d, 0xac, 0x77, 0x69,
	0x3e, 0x66, 0xeb, 0x88, 0x35, 0x19, 0xdc, 0xdb, 0xfd, 0x09, 0x6d, 0x31, 0x09, 0x0f, 0xf6, 0x90,
	0x91, 0x36, 0x31, 0xe8, 0x61, 0x1a, 0xaf, 0xf9, 0xfa, 0xbd, 0xd8, 0xc4, 0x50, 0x80, 0xd5, 0x64,
	0xbc, 0x0e, 0x07, 0x3d, 0xfc, 0xc0, 0xe9, 0x77, 0x33, 0x9b, 0xa9, 0x8f, 0x0c, 0x7a, 0x18, 0xed,
	0x01, 0x18, 0xba, 0xd3, 0x32, 0x71, 0xaf, 0x43, 0x06, 0xe5, 0x19, 0x6a, 0x7d, 0x23, 0x63, 0xfd,
	0x10, 0xbb, 0x8e, 0xee, 0x0e, 0xa8, 0xd1, 0xf0, 0xdf, 0x5a, 0xc9, 0xd0, 0x9d, 0x77, 0xe8, 0x31,
	0xd4, 0x84, 0x59, 0xec, 0xf8, 0xb6, 0x3f, 0x18, 0x72, 0x2c, 0x51, 0x2b, 0x15, 0xd6, 0xcd, 0x07,
	0x01, 0xc0, 0xc6, 0x1e, 0xb5, 0x11, 0x2d, 0x02, 0x0a, 0x9e, 0x06, 0xc3, 0xc3, 0xc1, 0xa2, 0x31,
	0x0f, 0x17, 0x93, 0x1c, 0xd5, 0x27, 0x32, 0x2c, 0xa4, 0x64, 0x85, 0x76, 0xe0, 0x42, 0xa8, 0xc5,
	0x30, 0xef, 0xab, 0x59, 0x29, 0x46, 0x12, 0x8c, 0x90, 0xe8, 0xfb, 0x70, 0x85, 0xaf, 0x9d, 0x40,
	0x83, 0x81, 0x9e, 0x5f, 0xcd, 0x1a, 0xe1, 0x89, 0x50, 0x5b, 0xe6, 0x49, 0xc9, 0x43, 0xf7, 0x61,
	0x81, 0x3c, 0x76, 0x70, 0x52, 0x94, 0x93, 0x45, 0xa2, 0xd4, 0xe6, 0x28, 0x7c, 0xa4, 0xc5, 0xaf,
	0xc2, 0x82, 0xde, 0xe9, 0x90, 0xc7, 0xd8, 0x6c, 0xe9, 0x06, 0xfd, 0x4f, 0xa3, 0x3c, 0x4d, 0x79,
	0x2d, 0xb1, 0xe7, 0x77, 0xe9, 0x8f, 0xda, 0x7c, 0x08, 0x1e, 0x2e, 0x3d, 0xf5, 0x63, 0x09, 0x56,
	0xb2, 0xc5, 0xa6, 0x31, 0x68, 0x9a, 0x68, 0x1e, 0x64, 0xdb, 0xa4, 0x91, 0x2a, 0x69, 0xb2, 0x6d,
	0x2a, 0xdf, 0x49, 0xdc, 0xef, 0xf7, 0x60, 0x31, 0x7d, 0xbf, 0xc3, 0x98, 0x0a, 0x5c, 0xef, 0x85,
	0xd4, 0xf5, 0x56, 0xff, 0x2e, 0x01, 0x8a, 0x40, 0x71, 0x19, 0x47, 0x6f, 0x03, 0xe0, 0xd1, 0x2a,
	0x34, 0xbf, 0x96, 0x35, 0x9f, 0x28, 0xfc, 0x09, 0x3c, 0x2f, 0xb0, 0xf2, 0xe7, 0x18, 0xd8, 0xcf,
	0x64, 0xb8, 0x9e, 0x08, 0x6c, 0x4c, 0xd2, 0x6b, 0x0c, 0x42, 0xbf, 0x9b, 0x26, 0x2d, 0xd9, 0xc3,
	0x45, 0x6b, 0x14, 0xeb, 0x52, 0x6f, 0xf4, 0x73, 0xaa, 0xe4, 0xcb, 0x63, 0x4a, 0xfe, 0x64, 0x61,
	0xc9, 0x9f, 0x2a, 0x2a, 0xf9, 0xd3, 0x4c, 0xc9, 0x57, 0x7e, 0x22, 0x25, 0x92, 0xfd, 0x6d, 0x58,
	0x1a, 0x25, 0x3b, 0x0e, 0x70, 0x54, 0xcf, 0x37, 0xf2, 0x13, 0x9e, 0xc8, 0xcc, 0xe5, 0x76, 0x36,
	0x10, 0x62, 0x55, 0xfd, 0x99, 0x0c, 0xcb, 0x1c, 0x83, 0x7d, 0x07, 0xbd, 0x0b, 0xf3, 0x31, 0x9d,
	0x96, 0xdb, 0x77, 0x42, 0x8d, 0x5c, 0x2b, 0xd4, 0x48, 0xdf, 0xd1, 0xe6, 0x30, 0x63, 0xe7, 0x2e,
	0xcc, 0x18, 0xc3, 0xe6, 0x25, 0xba, 0xd3, 0xab, 0xbc, 0x3b, 0x4d, 0x11, 0xda, 0x08, 0xfa, 0xc2,
	0x37, 0x97, 0x95, 0xf7, 0xd4, 0x29, 0xe5, 0xfd, 0x82, 0xf2, 0x7c, 0x26, 0xc3, 0x06, 0x57, 0x9e,
	0x5a, 0xdf, 0xf9, 0x52, 0x28, 0xf4, 0x67, 0x49, 0x85, 0xea, 0x50, 0xe6, 0x28, 0x34, 0x90, 0x44,
	0xa4, 0xd2, 0xd7, 0x84, 0x54, 0xda, 0x77, 0xb4, 0x95, 0x36, 0x37, 0x24, 0x62, 0x5a, 0xfd, 0xb5,
	0x04, 0x6b, 0x79, 0x51, 0xe5, 0xd6, 0xd4, 0x47, 0x09, 0x27, 0x5a, 0x70, 0x25, 0xc7, 0x89, 0x50,
	0xd7, 0xc2, 0x3e, 0x2c, 0x73, 0x7d, 0x50, 0x7f, 0x2b, 0xc1, 0x8d, 0x5d, 0xf3, 0x44, 0x77, 0x0c,
	0x6c, 0x7e, 0xab, 0x8f, 0xdd, 0x01, 0xeb, 0xe2, 0x17, 0x2e, 0x9a, 0xbf, 0x91, 0x60, 0x3d, 0x87,
	0xaf, 0xf7, 0x05, 0x29, 0x4e, 0x7f, 0x93, 0x40, 0x79, 0xd7, 0x76, 0xcc, 0x74, 0xb3, 0xde, 0x18,
	0x04, 0xd7, 0x1c, 0xed, 0xc1, 0xdc, 0xb1, 0xed, 0x30, 0x2d, 0x70, 0x90, 0xc8, 0xab, 0x59, 0x56,
	0x81, 0x91, 0xe8, 0xb0, 0x76, 0xf1, 0x38, 0xb1, 0x42, 0x2b, 0x30, 0x8d, 0xbb, 0xba, 0xdd, 0xa1,
	0x04, 0x4a, 0xfb, 0x13, 0xda, 0x70, 0x89, 0xd6, 0x61, 0x26, 0xa8, 0x3c, 0xb4, 0x21, 0x0f, 0xee,
	0x55, 0xa9, 0x21, 0x97, 0xa5, 0xfd, 0x09, 0x6d, 0xb4, 0x8b, 0x5e, 0x86, 0x19, 0xfa, 0x95, 0xe0,
	0xe6, 0x4e, 0x85, 0x87, 0x2f, 0xd0, 0x9d, 0xa6, 0xd9, 0xb8, 0x0c, 0x97, 0xda, 0xc4, 0xf3, 0x87,
	0xd5, 0xcb, 0xc4, 0xbe, 0x6e, 0x77, 0x3c, 0xf5, 0xa9, 0x04, 0x2a, 0xdf, 0x1f, 0xa6, 0x4b, 0x3d,
	0x13, 0xbf, 0x96, 0x60, 0x2a, 0xe6, 0xbe, 0x3f, 0xa1, 0xd1, 0x15, 0x5a, 0xa4, 0x37, 0x24, 0x62,
	0x2b, 0xdb, 0x31, 0xd1, 0x64, 0x97, 0x1d, 0x68, 0x39, 0x27, 0xf0, 0xb4, 0x07, 0x3e, 0x13, 0x82,
	0xcb, 0xf0, 0x12, 0x71, 0xad, 0x20, 0x78, 0x34, 0xf2, 0xda, 0x34, 0x71, 0xad, 0xa6, 0x29, 0xcc,
	0x7b, 0x16, 0x4a, 0x94, 0x77, 0xd0, 0xc2, 0x67, 0x02, 0x1b, 0xbe, 0x27, 0xf3, 0x02, 0x6b, 0x86,
	0x3f, 0x17, 0xf3, 0x8e, 0x8c, 0x0c, 0x79, 0x47, 0xab, 0xb3, 0x0d, 0x6c, 0x4c, 0x94, 0x09, 0xec,
	0x0b, 0x11, 0x3c, 0xcb, 0xc0, 0xfe, 0x42, 0x82, 0x57, 0x98, 0x22, 0x31, 0x4a, 0xe6, 0x7f, 0xf5,
	0x2d, 0x9a, 0x7c, 0x7f, 0x84, 0x7e, 0x07, 0xef, 0x8f, 0x30, 0x6c, 0xf9, 0xef, 0x8f, 0x10, 0xab,
	0x45, 0xc8, 0xff, 0xf5, 0xf7, 0x47, 0x26, 0x7d, 0x23, 0xc9, 0xf0, 0xd2, 0x97, 0x50, 0xdd, 0x98,
	0xf4, 0x45, 0x71, 0x1c, 0xa5, 0x6f, 0x24, 0x3e, 0xa1, 0xf4, 0xfd, 0x4b, 0x82, 0x95, 0x94, 0xa9,
	0x70, 0xf4, 0x83, 0x9a, 0xb0, 0x10, 0xd2, 0x68, 0x9d, 0x0c, 0xb7, 0xc2, 0x6c, 0xae, 0xe7, 0x66,
	0x33, 0x3c, 0xaa, 0xcd, 0x9b, 0xac, 0xa9, 0x73, 0x88, 0xfd, 0xd4, 0x29, 0x62, 0xff, 0x89, 0x04,
	0x1b, 0xbc, 0xd8, 0x87, 0xf4, 0xe2, 0x14, 0x98, 0xb0, 0x9a, 0x4e, 0x41, 0xe4, 0x7b, 0x94, 0x8a,
	0xca, 0xd8, 0x54, 0x44, 0x41, 0xb8, 0xd2, 0xe6, 0xee, 0x8b, 0x76, 0x58, 0x32, 0x94, 0x13, 0x1d,
	0x56, 0x68, 0xa3, 0x31, 0x38, 0x08, 0x4a, 0x05, 0x0a, 0x0b, 0xc8, 0xb0, 0xbf, 0x1a, 0x96, 0x8f,
	0xec, 0xf0, 0x4a, 0xe6, 0x0d, 0xaf, 0xfe, 0x92, 0x6c, 0x27, 0x3f, 0x4a, 0x34, 0x40, 0x91, 0xbf,
	0x47, 0x03, 0x9a, 0xa5, 0xf1, 0xaf, 0xdc, 0x48, 0x79, 0xcb, 0xed, 0x34, 0x47, 0xda, 0x12, 0x7c,
	0x0f, 0xca, 0x5e, 0x5b, 0x77, 0xb1, 0xd9, 0xca, 0xaa, 0x5a, 0x16, 0x55, 0xf5, 0xca, 0xd0, 0x44,
	0xba, 0x46, 0xab, 0x9f, 0xca, 0x70, 0x35, 0x1b, 0x9d, 0x2f, 0x45, 0x3f, 0x9f, 0x37, 0x3d, 0xfc,
	0xbc, 0xae, 0x7c, 0xfd, 0x0f, 0xd7, 0xe2, 0x8a, 0x1d, 0x0e, 0x64, 0xd1, 0xaf, 0x24, 0xb8, 0x6c,
	0x71, 0x46, 0xb1, 0x37, 0xb3, 0x2c, 0x38, 0x13, 0x5b, 0xa5, 0x2a, 0x04, 0xab, 0x46, 0x7e, 0xab,
	0x5b, 0x1f, 0x3f, 0xfb, 0xf7, 0xcf, 0xe5, 0x57, 0xd1, 0x46, 0xed, 0x64, 0xbb, 0x96, 0xf4, 0xa2,
	0xc6, 0x23, 0xf1, 0x54, 0x82, 0xd5, 0xe4, 0x3e, 0x1d, 0x2c, 0x9f, 0x37, 0xc5, 0x3a, 0xa5, 0xb8,
	0x85, 0x36, 0x0b, 0x29, 0xb2, 0x54, 0x9e, 0x4a, 0xb0, 0x62, 0xf1, 0x67, 0x4c, 0x15, 0x91, 0xcf,
	0x07, 0x48, 0x65, 0x5b, 0x14, 0x19, 0x73, 0xad, 0x51, 0xae, 0xaf, 0xa3, 0xd7, 0x04, 0xc2, 0x49,
	0xd9, 0xfc, 0x43, 0x82, 0xeb, 0xd6, 0xd8, 0x99, 0xcd, 0x4e, 0x21, 0x13, 0xfe, 0x21, 0xe5, 0xed,
	0xe7, 0x38, 0x14, 0x7b, 0xf2, 0x16, 0xf5, 0xe4, 0x0d, 0x54, 0x2f, 0xf2, 0x24, 0x87, 0xee, 0x3f,
	0x25, 0x50, 0xad, 0xbc, 0x97, 0x7e, 0xd3, 0x89, 0x86, 0xa3, 0xf7, 0x04, 0x09, 0xa6, 0xe6, 0x03,
	0xca, 0xd7, 0x9e, 0xef, 0x5c, 0xec, 0xdb, 0x57, 0xa8, 0x6f, 0x77, 0xd1, 0x8e, 0x98, 0x6f, 0x2c,
	0xeb, 0x3f, 0x4b, 0xb0, 0x66, 0x15, 0x3d, 0xb8, 0xab, 0xe2, 0xf4, 0xa8, 0xcc, 0xde, 0x3c, 0x1d,
	0x3e, 0x76, 0xe3, 0x2e, 0x75, 0xa3, 0x86, 0x6e, 0x0b, 0xbb, 0x41, 0xf9, 0x7d, 0x22, 0x81, 0x72,
	0x9c, 0x68, 0xb7, 0x53, 0xef, 0xe4, 0x0d, 0x7e, 0x5f, 0xcd, 0xa2, 0x94, 0xbb, 0x59, 0x94, 0xc0,
	0x3b, 0x5f, 0xbd, 0x47, 0x29, 0xdf, 0x51, 0x6f, 0x65, 0x28, 0xe7, 0x33, 0x7a, 0x4b, 0xda, 0x44,
	0xbf, 0x93, 0x40, 0x09, 0xca, 0xb6, 0x38, 0xe7, 0x87, 0xc4, 0xf5, 0xcf, 0x86, 0xf3, 0x0e, 0xe5,
	0x7c, 0x1b, 0x65, 0x39, 0x17, 0x30, 0xfa, 0x74, 0xa8, 0x92, 0x43, 0xd2, 0xcb, 0x01, 0xdc, 0xca,
	0x92, 0x39, 0x24, 0x3d, 0x16, 0xf4, 0x10, 0x77, 0xb0, 0xe1, 0x13, 0xf7, 0x79, 0x99, 0x17, 0x0a,
	0x24, 0x9f, 0xda, 0x13, 0x09, 0xae, 0xf0, 0xd3, 0xe1, 0xa1, 0xeb, 0xe3, 0xd4, 0xe1, 0x29, 0x75,
	0x61, 0xb2, 0x99, 0x18, 0xab, 0x15, 0x41, 0x5d, 0x50, 0x51, 0xfc, 0x52, 0x82, 0xa5, 0x63, 0xce,
	0x83, 0x1c, 0x8d, 0x79, 0x73, 0x2b, 0xb5, 0x31, 0x0c, 0xd3, 0xef, 0x39, 0xf5, 0x0e, 0xa5, 0xb7,
	0xa9, 0xde, 0x2c, 0xa4, 0x17, 0x1d, 0x0b, 0xb8, 0x3d, 0x49, 0x5d, 0xb2, 0xd4, 0xff, 0x4f, 0x67,
	0xce, 0x50, 0xec, 0x62, 0xb1, 0x2c, 0x02, 0x9e, 0xbf, 0x4f, 0xf3, 0x64, 0xa7, 0x49, 0x5b, 0x7c,
	0x9e, 0x7c, 0xf4, 0xb9, 0xb1, 0x66, 0xbe, 0x12, 0xb0, 0xfe, 0xab, 0x04, 0xea, 0xf1, 0xf8, 0x99,
	0xd1, 0x1b, 0xa2, 0xec, 0x93, 0xa7, 0x4e, 0xef, 0xc5, 0x7d, 0xea, 0xc5, 0xff, 0xa9, 0x3b, 0x82,
	0x5e, 0x24, 0xbf, 0x56, 0x9c, 0x03, 0x3a, 0xff, 0x10, 0xce, 0x41, 0x80, 0x3e, 0xff, 0x1c, 0x04,
	0x5f, 0xe1, 0xe5, 0x20, 0x67, 0xbc, 0x34, 0x26, 0x07, 0xfc, 0x53, 0x63, 0xbd, 0x48, 0x3f, 0xd9,
	0x05, 0x73, 0xc0, 0xff, 0x1a, 0x2f, 0x07, 0xa9, 0x19, 0xd4, 0x96, 0xa8, 0x17, 0x42, 0x39, 0xc8,
	0xb0, 0x17, 0xcb, 0x01, 0xfb, 0x15, 0x5e, 0x05, 0x1c, 0x3d, 0x3f, 0xc6, 0x0c, 0xc7, 0x4e, 0xcf,
	0x50, 0xac, 0x02, 0x46, 0xc7, 0xf2, 0x2b, 0xe0, 0xf9, 0x31, 0x3c, 0x4d, 0x05, 0x4c, 0xf2, 0xfc,
	0xa3, 0x04, 0x2f, 0x73, 0x7c, 0x18, 0xcd, 0x08, 0x6e, 0x16, 0x12, 0x8d, 0x60, 0xca, 0x3d, 0x31,
	0xbe, 0xe9, 0x41, 0x87, 0xfa, 0x26, 0xa5, 0xbd, 0xad, 0x6e, 0x89, 0x04, 0x36, 0x3a, 0x1d, 0xb6,
	0x44, 0x65, 0x2b, 0x6f, 0x2c, 0xb1, 0x59, 0xd8, 0x53, 0x32, 0x58, 0x65, 0x47, 0x1c, 0x1b, 0xf7,
	0x9e, 0xdb, 0x94, 0xf6, 0x2d, 0xf4, 0x7a, 0x51, 0xef, 0xc9, 0x72, 0xfa, 0x4c, 0x82, 0xab, 0x56,
	0xf1, 0xa4, 0xe0, 0x8e, 0x08, 0x15, 0xe6, 0x2d, 0xf0, 0xff, 0xa7, 0x3d, 0x51, 0x4d, 0x47, 0x1e,
	0xd5, 0x04, 0x5c, 0x48, 0x5a, 0x68, 0x34, 0xde, 0x97, 0x3e, 0xba, 0x6f, 0xd9, 0x7e, 0xbb, 0x7f,
	0x54, 0x35, 0x48, 0xb7, 0xf6, 0x61, 0xf0, 0xf9, 0xdd, 0xe6, 0xe8, 0x0f, 0xb7, 0xc2, 0x3f, 0xbb,
	0xb2, 0xb0, 0x53, 0xb3, 0x48, 0x8d, 0xfb, 0xc7, 0x5d, 0x47, 0x2f, 0xd1, 0xed, 0x9d, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x19, 0xbf, 0x01, 0x86, 0xc5, 0x27, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HydratedServiceClient is the client API for HydratedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HydratedServiceClient interface {
	GetHydratedProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error)
	GetHydratedPublicProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error)
	GetHydratedProjectById(ctx context.Context, in *GetHydratedProjectById, opts ...grpc.CallOption) (*GetHydratedProjectById_Response, error)
	GetHydratedExperimentsByProjectId(ctx context.Context, in *GetHydratedExperimentsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentsByProjectId_Response, error)
	GetHydratedExperimentRunsInProject(ctx context.Context, in *GetHydratedExperimentRunsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentRunsByProjectId_Response, error)
	GetHydratedExperimentRunById(ctx context.Context, in *GetHydratedExperimentRunById, opts ...grpc.CallOption) (*GetHydratedExperimentRunById_Response, error)
	// queries
	FindHydratedExperimentRuns(ctx context.Context, in *FindExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error)
	SortHydratedExperimentRuns(ctx context.Context, in *SortExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error)
	GetTopHydratedExperimentRuns(ctx context.Context, in *TopExperimentRunsSelector, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error)
	// queries
	FindHydratedExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*AdvancedQueryExperimentsResponse, error)
	// queries
	FindHydratedProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedPublicProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByUser(ctx context.Context, in *FindHydratedProjectsByUser, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByOrganization(ctx context.Context, in *FindHydratedProjectsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByTeam(ctx context.Context, in *FindHydratedProjectsByTeam, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedDatasetsByOrganization(ctx context.Context, in *FindHydratedDatasetsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetsByTeam(ctx context.Context, in *FindHydratedDatasetsByTeam, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedPublicDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*AdvancedQueryDatasetVersionsResponse, error)
	GetHydratedDatasetByName(ctx context.Context, in *GetHydratedDatasetByName, opts ...grpc.CallOption) (*GetHydratedDatasetByName_Response, error)
	GetHydratedDatasetsByProjectId(ctx context.Context, in *GetHydratedDatasetsByProjectId, opts ...grpc.CallOption) (*GetHydratedDatasetsByProjectId_Response, error)
}

type hydratedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHydratedServiceClient(cc grpc.ClientConnInterface) HydratedServiceClient {
	return &hydratedServiceClient{cc}
}

func (c *hydratedServiceClient) GetHydratedProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error) {
	out := new(GetHydratedProjects_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedPublicProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error) {
	out := new(GetHydratedProjects_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedPublicProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedProjectById(ctx context.Context, in *GetHydratedProjectById, opts ...grpc.CallOption) (*GetHydratedProjectById_Response, error) {
	out := new(GetHydratedProjectById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedExperimentsByProjectId(ctx context.Context, in *GetHydratedExperimentsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentsByProjectId_Response, error) {
	out := new(GetHydratedExperimentsByProjectId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedExperimentsByProjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedExperimentRunsInProject(ctx context.Context, in *GetHydratedExperimentRunsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentRunsByProjectId_Response, error) {
	out := new(GetHydratedExperimentRunsByProjectId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedExperimentRunsInProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedExperimentRunById(ctx context.Context, in *GetHydratedExperimentRunById, opts ...grpc.CallOption) (*GetHydratedExperimentRunById_Response, error) {
	out := new(GetHydratedExperimentRunById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedExperimentRunById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedExperimentRuns(ctx context.Context, in *FindExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error) {
	out := new(AdvancedQueryExperimentRunsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) SortHydratedExperimentRuns(ctx context.Context, in *SortExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error) {
	out := new(AdvancedQueryExperimentRunsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/sortHydratedExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetTopHydratedExperimentRuns(ctx context.Context, in *TopExperimentRunsSelector, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error) {
	out := new(AdvancedQueryExperimentRunsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getTopHydratedExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*AdvancedQueryExperimentsResponse, error) {
	out := new(AdvancedQueryExperimentsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedPublicProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedPublicProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjectsByUser(ctx context.Context, in *FindHydratedProjectsByUser, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjectsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjectsByOrganization(ctx context.Context, in *FindHydratedProjectsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjectsByOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjectsByTeam(ctx context.Context, in *FindHydratedProjectsByTeam, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjectsByTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasetsByOrganization(ctx context.Context, in *FindHydratedDatasetsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasetsByOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasetsByTeam(ctx context.Context, in *FindHydratedDatasetsByTeam, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasetsByTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedPublicDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedPublicDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*AdvancedQueryDatasetVersionsResponse, error) {
	out := new(AdvancedQueryDatasetVersionsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedDatasetByName(ctx context.Context, in *GetHydratedDatasetByName, opts ...grpc.CallOption) (*GetHydratedDatasetByName_Response, error) {
	out := new(GetHydratedDatasetByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedDatasetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedDatasetsByProjectId(ctx context.Context, in *GetHydratedDatasetsByProjectId, opts ...grpc.CallOption) (*GetHydratedDatasetsByProjectId_Response, error) {
	out := new(GetHydratedDatasetsByProjectId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedDatasetsByProjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HydratedServiceServer is the server API for HydratedService service.
type HydratedServiceServer interface {
	GetHydratedProjects(context.Context, *GetHydratedProjects) (*GetHydratedProjects_Response, error)
	GetHydratedPublicProjects(context.Context, *GetHydratedProjects) (*GetHydratedProjects_Response, error)
	GetHydratedProjectById(context.Context, *GetHydratedProjectById) (*GetHydratedProjectById_Response, error)
	GetHydratedExperimentsByProjectId(context.Context, *GetHydratedExperimentsByProjectId) (*GetHydratedExperimentsByProjectId_Response, error)
	GetHydratedExperimentRunsInProject(context.Context, *GetHydratedExperimentRunsByProjectId) (*GetHydratedExperimentRunsByProjectId_Response, error)
	GetHydratedExperimentRunById(context.Context, *GetHydratedExperimentRunById) (*GetHydratedExperimentRunById_Response, error)
	// queries
	FindHydratedExperimentRuns(context.Context, *FindExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error)
	SortHydratedExperimentRuns(context.Context, *SortExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error)
	GetTopHydratedExperimentRuns(context.Context, *TopExperimentRunsSelector) (*AdvancedQueryExperimentRunsResponse, error)
	// queries
	FindHydratedExperiments(context.Context, *FindExperiments) (*AdvancedQueryExperimentsResponse, error)
	// queries
	FindHydratedProjects(context.Context, *FindProjects) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedPublicProjects(context.Context, *FindProjects) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByUser(context.Context, *FindHydratedProjectsByUser) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByOrganization(context.Context, *FindHydratedProjectsByOrganization) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByTeam(context.Context, *FindHydratedProjectsByTeam) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedDatasetsByOrganization(context.Context, *FindHydratedDatasetsByOrganization) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetsByTeam(context.Context, *FindHydratedDatasetsByTeam) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasets(context.Context, *FindDatasets) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedPublicDatasets(context.Context, *FindDatasets) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetVersions(context.Context, *FindDatasetVersions) (*AdvancedQueryDatasetVersionsResponse, error)
	GetHydratedDatasetByName(context.Context, *GetHydratedDatasetByName) (*GetHydratedDatasetByName_Response, error)
	GetHydratedDatasetsByProjectId(context.Context, *GetHydratedDatasetsByProjectId) (*GetHydratedDatasetsByProjectId_Response, error)
}

// UnimplementedHydratedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHydratedServiceServer struct {
}

func (*UnimplementedHydratedServiceServer) GetHydratedProjects(ctx context.Context, req *GetHydratedProjects) (*GetHydratedProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedPublicProjects(ctx context.Context, req *GetHydratedProjects) (*GetHydratedProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedPublicProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedProjectById(ctx context.Context, req *GetHydratedProjectById) (*GetHydratedProjectById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedProjectById not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedExperimentsByProjectId(ctx context.Context, req *GetHydratedExperimentsByProjectId) (*GetHydratedExperimentsByProjectId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedExperimentsByProjectId not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedExperimentRunsInProject(ctx context.Context, req *GetHydratedExperimentRunsByProjectId) (*GetHydratedExperimentRunsByProjectId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedExperimentRunsInProject not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedExperimentRunById(ctx context.Context, req *GetHydratedExperimentRunById) (*GetHydratedExperimentRunById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedExperimentRunById not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedExperimentRuns(ctx context.Context, req *FindExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedExperimentRuns not implemented")
}
func (*UnimplementedHydratedServiceServer) SortHydratedExperimentRuns(ctx context.Context, req *SortExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortHydratedExperimentRuns not implemented")
}
func (*UnimplementedHydratedServiceServer) GetTopHydratedExperimentRuns(ctx context.Context, req *TopExperimentRunsSelector) (*AdvancedQueryExperimentRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopHydratedExperimentRuns not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedExperiments(ctx context.Context, req *FindExperiments) (*AdvancedQueryExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedExperiments not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjects(ctx context.Context, req *FindProjects) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedPublicProjects(ctx context.Context, req *FindProjects) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedPublicProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjectsByUser(ctx context.Context, req *FindHydratedProjectsByUser) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjectsByUser not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjectsByOrganization(ctx context.Context, req *FindHydratedProjectsByOrganization) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjectsByOrganization not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjectsByTeam(ctx context.Context, req *FindHydratedProjectsByTeam) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjectsByTeam not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasetsByOrganization(ctx context.Context, req *FindHydratedDatasetsByOrganization) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasetsByOrganization not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasetsByTeam(ctx context.Context, req *FindHydratedDatasetsByTeam) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasetsByTeam not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasets(ctx context.Context, req *FindDatasets) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasets not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedPublicDatasets(ctx context.Context, req *FindDatasets) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedPublicDatasets not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasetVersions(ctx context.Context, req *FindDatasetVersions) (*AdvancedQueryDatasetVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasetVersions not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedDatasetByName(ctx context.Context, req *GetHydratedDatasetByName) (*GetHydratedDatasetByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedDatasetByName not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedDatasetsByProjectId(ctx context.Context, req *GetHydratedDatasetsByProjectId) (*GetHydratedDatasetsByProjectId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedDatasetsByProjectId not implemented")
}

func RegisterHydratedServiceServer(s *grpc.Server, srv HydratedServiceServer) {
	s.RegisterService(&_HydratedService_serviceDesc, srv)
}

func _HydratedService_GetHydratedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedProjects(ctx, req.(*GetHydratedProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedPublicProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedPublicProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedPublicProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedPublicProjects(ctx, req.(*GetHydratedProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedProjectById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedProjectById(ctx, req.(*GetHydratedProjectById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedExperimentsByProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedExperimentsByProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedExperimentsByProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedExperimentsByProjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedExperimentsByProjectId(ctx, req.(*GetHydratedExperimentsByProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedExperimentRunsInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedExperimentRunsByProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunsInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedExperimentRunsInProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunsInProject(ctx, req.(*GetHydratedExperimentRunsByProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedExperimentRunById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedExperimentRunById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedExperimentRunById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunById(ctx, req.(*GetHydratedExperimentRunById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedExperimentRuns(ctx, req.(*FindExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_SortHydratedExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).SortHydratedExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/SortHydratedExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).SortHydratedExperimentRuns(ctx, req.(*SortExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetTopHydratedExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopExperimentRunsSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetTopHydratedExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetTopHydratedExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetTopHydratedExperimentRuns(ctx, req.(*TopExperimentRunsSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExperiments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedExperiments(ctx, req.(*FindExperiments))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjects(ctx, req.(*FindProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedPublicProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedPublicProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedPublicProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedPublicProjects(ctx, req.(*FindProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjectsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedProjectsByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjectsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjectsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjectsByUser(ctx, req.(*FindHydratedProjectsByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjectsByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedProjectsByOrganization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjectsByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjectsByOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjectsByOrganization(ctx, req.(*FindHydratedProjectsByOrganization))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjectsByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedProjectsByTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjectsByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjectsByTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjectsByTeam(ctx, req.(*FindHydratedProjectsByTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasetsByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedDatasetsByOrganization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasetsByOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByOrganization(ctx, req.(*FindHydratedDatasetsByOrganization))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasetsByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedDatasetsByTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasetsByTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByTeam(ctx, req.(*FindHydratedDatasetsByTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasets(ctx, req.(*FindDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedPublicDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedPublicDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedPublicDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedPublicDatasets(ctx, req.(*FindDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasetVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasetVersions(ctx, req.(*FindDatasetVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedDatasetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedDatasetByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedDatasetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedDatasetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedDatasetByName(ctx, req.(*GetHydratedDatasetByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedDatasetsByProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedDatasetsByProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedDatasetsByProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedDatasetsByProjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedDatasetsByProjectId(ctx, req.(*GetHydratedDatasetsByProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

var _HydratedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.HydratedService",
	HandlerType: (*HydratedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getHydratedProjects",
			Handler:    _HydratedService_GetHydratedProjects_Handler,
		},
		{
			MethodName: "getHydratedPublicProjects",
			Handler:    _HydratedService_GetHydratedPublicProjects_Handler,
		},
		{
			MethodName: "getHydratedProjectById",
			Handler:    _HydratedService_GetHydratedProjectById_Handler,
		},
		{
			MethodName: "getHydratedExperimentsByProjectId",
			Handler:    _HydratedService_GetHydratedExperimentsByProjectId_Handler,
		},
		{
			MethodName: "getHydratedExperimentRunsInProject",
			Handler:    _HydratedService_GetHydratedExperimentRunsInProject_Handler,
		},
		{
			MethodName: "getHydratedExperimentRunById",
			Handler:    _HydratedService_GetHydratedExperimentRunById_Handler,
		},
		{
			MethodName: "findHydratedExperimentRuns",
			Handler:    _HydratedService_FindHydratedExperimentRuns_Handler,
		},
		{
			MethodName: "sortHydratedExperimentRuns",
			Handler:    _HydratedService_SortHydratedExperimentRuns_Handler,
		},
		{
			MethodName: "getTopHydratedExperimentRuns",
			Handler:    _HydratedService_GetTopHydratedExperimentRuns_Handler,
		},
		{
			MethodName: "findHydratedExperiments",
			Handler:    _HydratedService_FindHydratedExperiments_Handler,
		},
		{
			MethodName: "findHydratedProjects",
			Handler:    _HydratedService_FindHydratedProjects_Handler,
		},
		{
			MethodName: "findHydratedPublicProjects",
			Handler:    _HydratedService_FindHydratedPublicProjects_Handler,
		},
		{
			MethodName: "findHydratedProjectsByUser",
			Handler:    _HydratedService_FindHydratedProjectsByUser_Handler,
		},
		{
			MethodName: "findHydratedProjectsByOrganization",
			Handler:    _HydratedService_FindHydratedProjectsByOrganization_Handler,
		},
		{
			MethodName: "findHydratedProjectsByTeam",
			Handler:    _HydratedService_FindHydratedProjectsByTeam_Handler,
		},
		{
			MethodName: "findHydratedDatasetsByOrganization",
			Handler:    _HydratedService_FindHydratedDatasetsByOrganization_Handler,
		},
		{
			MethodName: "findHydratedDatasetsByTeam",
			Handler:    _HydratedService_FindHydratedDatasetsByTeam_Handler,
		},
		{
			MethodName: "findHydratedDatasets",
			Handler:    _HydratedService_FindHydratedDatasets_Handler,
		},
		{
			MethodName: "findHydratedPublicDatasets",
			Handler:    _HydratedService_FindHydratedPublicDatasets_Handler,
		},
		{
			MethodName: "findHydratedDatasetVersions",
			Handler:    _HydratedService_FindHydratedDatasetVersions_Handler,
		},
		{
			MethodName: "getHydratedDatasetByName",
			Handler:    _HydratedService_GetHydratedDatasetByName_Handler,
		},
		{
			MethodName: "getHydratedDatasetsByProjectId",
			Handler:    _HydratedService_GetHydratedDatasetsByProjectId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/public/modeldb/HydratedService.proto",
}
