// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: modeldb/HydratedService.proto

package modeldb

import (
	context "context"
	common "github.com/VertaAI/modeldb/protos/gen/go/protos/public/common"
	uac "github.com/VertaAI/modeldb/protos/gen/go/protos/public/uac"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
//   Hydrated Entity Data
type GetHydratedProjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber    int32  `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit     int32  `protobuf:"varint,2,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending     bool   `protobuf:"varint,3,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey       string `protobuf:"bytes,4,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	WorkspaceName string `protobuf:"bytes,5,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *GetHydratedProjects) Reset() {
	*x = GetHydratedProjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedProjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedProjects) ProtoMessage() {}

func (x *GetHydratedProjects) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedProjects.ProtoReflect.Descriptor instead.
func (*GetHydratedProjects) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{0}
}

func (x *GetHydratedProjects) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetHydratedProjects) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *GetHydratedProjects) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetHydratedProjects) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *GetHydratedProjects) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type CollaboratorUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Collaborator:
	//	*CollaboratorUserInfo_CollaboratorUserInfo
	//	*CollaboratorUserInfo_CollaboratorOrganization
	//	*CollaboratorUserInfo_CollaboratorTeam
	Collaborator     isCollaboratorUserInfo_Collaborator          `protobuf_oneof:"collaborator"`
	CollaboratorType common.CollaboratorTypeEnum_CollaboratorType `protobuf:"varint,2,opt,name=collaborator_type,json=collaboratorType,proto3,enum=ai.verta.common.CollaboratorTypeEnum_CollaboratorType" json:"collaborator_type,omitempty"`
	CanDeploy        common.TernaryEnum_Ternary                   `protobuf:"varint,8,opt,name=can_deploy,json=canDeploy,proto3,enum=ai.verta.common.TernaryEnum_Ternary" json:"can_deploy,omitempty"`
	EntityType       common.EntitiesEnum_EntitiesTypes            `protobuf:"varint,9,opt,name=entity_type,json=entityType,proto3,enum=ai.verta.common.EntitiesEnum_EntitiesTypes" json:"entity_type,omitempty"`
}

func (x *CollaboratorUserInfo) Reset() {
	*x = CollaboratorUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaboratorUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaboratorUserInfo) ProtoMessage() {}

func (x *CollaboratorUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaboratorUserInfo.ProtoReflect.Descriptor instead.
func (*CollaboratorUserInfo) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{1}
}

func (m *CollaboratorUserInfo) GetCollaborator() isCollaboratorUserInfo_Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (x *CollaboratorUserInfo) GetCollaboratorUserInfo() *uac.UserInfo {
	if x, ok := x.GetCollaborator().(*CollaboratorUserInfo_CollaboratorUserInfo); ok {
		return x.CollaboratorUserInfo
	}
	return nil
}

func (x *CollaboratorUserInfo) GetCollaboratorOrganization() *uac.Organization {
	if x, ok := x.GetCollaborator().(*CollaboratorUserInfo_CollaboratorOrganization); ok {
		return x.CollaboratorOrganization
	}
	return nil
}

func (x *CollaboratorUserInfo) GetCollaboratorTeam() *uac.Team {
	if x, ok := x.GetCollaborator().(*CollaboratorUserInfo_CollaboratorTeam); ok {
		return x.CollaboratorTeam
	}
	return nil
}

func (x *CollaboratorUserInfo) GetCollaboratorType() common.CollaboratorTypeEnum_CollaboratorType {
	if x != nil {
		return x.CollaboratorType
	}
	return common.CollaboratorTypeEnum_READ_ONLY
}

func (x *CollaboratorUserInfo) GetCanDeploy() common.TernaryEnum_Ternary {
	if x != nil {
		return x.CanDeploy
	}
	return common.TernaryEnum_UNKNOWN
}

func (x *CollaboratorUserInfo) GetEntityType() common.EntitiesEnum_EntitiesTypes {
	if x != nil {
		return x.EntityType
	}
	return common.EntitiesEnum_UNKNOWN
}

type isCollaboratorUserInfo_Collaborator interface {
	isCollaboratorUserInfo_Collaborator()
}

type CollaboratorUserInfo_CollaboratorUserInfo struct {
	CollaboratorUserInfo *uac.UserInfo `protobuf:"bytes,1,opt,name=collaborator_user_info,json=collaboratorUserInfo,proto3,oneof"`
}

type CollaboratorUserInfo_CollaboratorOrganization struct {
	CollaboratorOrganization *uac.Organization `protobuf:"bytes,3,opt,name=collaborator_organization,json=collaboratorOrganization,proto3,oneof"`
}

type CollaboratorUserInfo_CollaboratorTeam struct {
	CollaboratorTeam *uac.Team `protobuf:"bytes,4,opt,name=collaborator_team,json=collaboratorTeam,proto3,oneof"`
}

func (*CollaboratorUserInfo_CollaboratorUserInfo) isCollaboratorUserInfo_Collaborator() {}

func (*CollaboratorUserInfo_CollaboratorOrganization) isCollaboratorUserInfo_Collaborator() {}

func (*CollaboratorUserInfo_CollaboratorTeam) isCollaboratorUserInfo_Collaborator() {}

type HydratedProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project               *Project                `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	CollaboratorUserInfos []*CollaboratorUserInfo `protobuf:"bytes,2,rep,name=collaborator_user_infos,json=collaboratorUserInfos,proto3" json:"collaborator_user_infos,omitempty"`
	OwnerUserInfo         *uac.UserInfo           `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions        []*uac.Action           `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
}

func (x *HydratedProject) Reset() {
	*x = HydratedProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HydratedProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedProject) ProtoMessage() {}

func (x *HydratedProject) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedProject.ProtoReflect.Descriptor instead.
func (*HydratedProject) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{2}
}

func (x *HydratedProject) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *HydratedProject) GetCollaboratorUserInfos() []*CollaboratorUserInfo {
	if x != nil {
		return x.CollaboratorUserInfos
	}
	return nil
}

func (x *HydratedProject) GetOwnerUserInfo() *uac.UserInfo {
	if x != nil {
		return x.OwnerUserInfo
	}
	return nil
}

func (x *HydratedProject) GetAllowedActions() []*uac.Action {
	if x != nil {
		return x.AllowedActions
	}
	return nil
}

type GetHydratedProjectById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetHydratedProjectById) Reset() {
	*x = GetHydratedProjectById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedProjectById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedProjectById) ProtoMessage() {}

func (x *GetHydratedProjectById) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedProjectById.ProtoReflect.Descriptor instead.
func (*GetHydratedProjectById) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{3}
}

func (x *GetHydratedProjectById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HydratedExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment     *Experiment   `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
	OwnerUserInfo  *uac.UserInfo `protobuf:"bytes,2,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions []*uac.Action `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
}

func (x *HydratedExperiment) Reset() {
	*x = HydratedExperiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HydratedExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedExperiment) ProtoMessage() {}

func (x *HydratedExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedExperiment.ProtoReflect.Descriptor instead.
func (*HydratedExperiment) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{4}
}

func (x *HydratedExperiment) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

func (x *HydratedExperiment) GetOwnerUserInfo() *uac.UserInfo {
	if x != nil {
		return x.OwnerUserInfo
	}
	return nil
}

func (x *HydratedExperiment) GetAllowedActions() []*uac.Action {
	if x != nil {
		return x.AllowedActions
	}
	return nil
}

type GetHydratedExperimentsByProjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32  `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending  bool   `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *GetHydratedExperimentsByProjectId) Reset() {
	*x = GetHydratedExperimentsByProjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedExperimentsByProjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedExperimentsByProjectId) ProtoMessage() {}

func (x *GetHydratedExperimentsByProjectId) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedExperimentsByProjectId.ProtoReflect.Descriptor instead.
func (*GetHydratedExperimentsByProjectId) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{5}
}

func (x *GetHydratedExperimentsByProjectId) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetHydratedExperimentsByProjectId) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetHydratedExperimentsByProjectId) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *GetHydratedExperimentsByProjectId) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetHydratedExperimentsByProjectId) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type HydratedExperimentRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentRun  *ExperimentRun `protobuf:"bytes,1,opt,name=experiment_run,json=experimentRun,proto3" json:"experiment_run,omitempty"`
	Comments       []*Comment     `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	OwnerUserInfo  *uac.UserInfo  `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	Experiment     *Experiment    `protobuf:"bytes,4,opt,name=experiment,proto3" json:"experiment,omitempty"`
	AllowedActions []*uac.Action  `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
}

func (x *HydratedExperimentRun) Reset() {
	*x = HydratedExperimentRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HydratedExperimentRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedExperimentRun) ProtoMessage() {}

func (x *HydratedExperimentRun) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedExperimentRun.ProtoReflect.Descriptor instead.
func (*HydratedExperimentRun) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{6}
}

func (x *HydratedExperimentRun) GetExperimentRun() *ExperimentRun {
	if x != nil {
		return x.ExperimentRun
	}
	return nil
}

func (x *HydratedExperimentRun) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *HydratedExperimentRun) GetOwnerUserInfo() *uac.UserInfo {
	if x != nil {
		return x.OwnerUserInfo
	}
	return nil
}

func (x *HydratedExperimentRun) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

func (x *HydratedExperimentRun) GetAllowedActions() []*uac.Action {
	if x != nil {
		return x.AllowedActions
	}
	return nil
}

type GetHydratedExperimentRunsByProjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32  `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending  bool   `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *GetHydratedExperimentRunsByProjectId) Reset() {
	*x = GetHydratedExperimentRunsByProjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedExperimentRunsByProjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedExperimentRunsByProjectId) ProtoMessage() {}

func (x *GetHydratedExperimentRunsByProjectId) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedExperimentRunsByProjectId.ProtoReflect.Descriptor instead.
func (*GetHydratedExperimentRunsByProjectId) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{7}
}

func (x *GetHydratedExperimentRunsByProjectId) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetHydratedExperimentRunsByProjectId) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetHydratedExperimentRunsByProjectId) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *GetHydratedExperimentRunsByProjectId) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetHydratedExperimentRunsByProjectId) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type GetHydratedExperimentRunById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetHydratedExperimentRunById) Reset() {
	*x = GetHydratedExperimentRunById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedExperimentRunById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedExperimentRunById) ProtoMessage() {}

func (x *GetHydratedExperimentRunById) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedExperimentRunById.ProtoReflect.Descriptor instead.
func (*GetHydratedExperimentRunById) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{8}
}

func (x *GetHydratedExperimentRunById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdvancedQueryExperimentRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedExperimentRuns []*HydratedExperimentRun `protobuf:"bytes,1,rep,name=hydrated_experiment_runs,json=hydratedExperimentRuns,proto3" json:"hydrated_experiment_runs,omitempty"`
	TotalRecords           int64                    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *AdvancedQueryExperimentRunsResponse) Reset() {
	*x = AdvancedQueryExperimentRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedQueryExperimentRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedQueryExperimentRunsResponse) ProtoMessage() {}

func (x *AdvancedQueryExperimentRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedQueryExperimentRunsResponse.ProtoReflect.Descriptor instead.
func (*AdvancedQueryExperimentRunsResponse) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{9}
}

func (x *AdvancedQueryExperimentRunsResponse) GetHydratedExperimentRuns() []*HydratedExperimentRun {
	if x != nil {
		return x.HydratedExperimentRuns
	}
	return nil
}

func (x *AdvancedQueryExperimentRunsResponse) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type AdvancedQueryExperimentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedExperiments []*HydratedExperiment `protobuf:"bytes,1,rep,name=hydrated_experiments,json=hydratedExperiments,proto3" json:"hydrated_experiments,omitempty"`
	TotalRecords        int64                 `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *AdvancedQueryExperimentsResponse) Reset() {
	*x = AdvancedQueryExperimentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedQueryExperimentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedQueryExperimentsResponse) ProtoMessage() {}

func (x *AdvancedQueryExperimentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedQueryExperimentsResponse.ProtoReflect.Descriptor instead.
func (*AdvancedQueryExperimentsResponse) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{10}
}

func (x *AdvancedQueryExperimentsResponse) GetHydratedExperiments() []*HydratedExperiment {
	if x != nil {
		return x.HydratedExperiments
	}
	return nil
}

func (x *AdvancedQueryExperimentsResponse) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type FindHydratedProjectsByUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindProjects *FindProjects `protobuf:"bytes,1,opt,name=find_projects,json=findProjects,proto3" json:"find_projects,omitempty"`
	// Types that are assignable to HostUserDetails:
	//	*FindHydratedProjectsByUser_Email
	//	*FindHydratedProjectsByUser_Username
	//	*FindHydratedProjectsByUser_VertaId
	HostUserDetails isFindHydratedProjectsByUser_HostUserDetails `protobuf_oneof:"host_user_details"`
}

func (x *FindHydratedProjectsByUser) Reset() {
	*x = FindHydratedProjectsByUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHydratedProjectsByUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHydratedProjectsByUser) ProtoMessage() {}

func (x *FindHydratedProjectsByUser) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHydratedProjectsByUser.ProtoReflect.Descriptor instead.
func (*FindHydratedProjectsByUser) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{11}
}

func (x *FindHydratedProjectsByUser) GetFindProjects() *FindProjects {
	if x != nil {
		return x.FindProjects
	}
	return nil
}

func (m *FindHydratedProjectsByUser) GetHostUserDetails() isFindHydratedProjectsByUser_HostUserDetails {
	if m != nil {
		return m.HostUserDetails
	}
	return nil
}

func (x *FindHydratedProjectsByUser) GetEmail() string {
	if x, ok := x.GetHostUserDetails().(*FindHydratedProjectsByUser_Email); ok {
		return x.Email
	}
	return ""
}

// Deprecated: Do not use.
func (x *FindHydratedProjectsByUser) GetUsername() string {
	if x, ok := x.GetHostUserDetails().(*FindHydratedProjectsByUser_Username); ok {
		return x.Username
	}
	return ""
}

func (x *FindHydratedProjectsByUser) GetVertaId() string {
	if x, ok := x.GetHostUserDetails().(*FindHydratedProjectsByUser_VertaId); ok {
		return x.VertaId
	}
	return ""
}

type isFindHydratedProjectsByUser_HostUserDetails interface {
	isFindHydratedProjectsByUser_HostUserDetails()
}

type FindHydratedProjectsByUser_Email struct {
	Email string `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type FindHydratedProjectsByUser_Username struct {
	// Deprecated: Do not use.
	Username string `protobuf:"bytes,3,opt,name=username,proto3,oneof"`
}

type FindHydratedProjectsByUser_VertaId struct {
	VertaId string `protobuf:"bytes,4,opt,name=verta_id,json=vertaId,proto3,oneof"`
}

func (*FindHydratedProjectsByUser_Email) isFindHydratedProjectsByUser_HostUserDetails() {}

func (*FindHydratedProjectsByUser_Username) isFindHydratedProjectsByUser_HostUserDetails() {}

func (*FindHydratedProjectsByUser_VertaId) isFindHydratedProjectsByUser_HostUserDetails() {}

type FindHydratedProjectsByOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindProjects *FindProjects `protobuf:"bytes,1,opt,name=find_projects,json=findProjects,proto3" json:"find_projects,omitempty"`
	// Types that are assignable to HostOrganization:
	//	*FindHydratedProjectsByOrganization_Name
	//	*FindHydratedProjectsByOrganization_Id
	HostOrganization isFindHydratedProjectsByOrganization_HostOrganization `protobuf_oneof:"host_organization"`
}

func (x *FindHydratedProjectsByOrganization) Reset() {
	*x = FindHydratedProjectsByOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHydratedProjectsByOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHydratedProjectsByOrganization) ProtoMessage() {}

func (x *FindHydratedProjectsByOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHydratedProjectsByOrganization.ProtoReflect.Descriptor instead.
func (*FindHydratedProjectsByOrganization) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{12}
}

func (x *FindHydratedProjectsByOrganization) GetFindProjects() *FindProjects {
	if x != nil {
		return x.FindProjects
	}
	return nil
}

func (m *FindHydratedProjectsByOrganization) GetHostOrganization() isFindHydratedProjectsByOrganization_HostOrganization {
	if m != nil {
		return m.HostOrganization
	}
	return nil
}

func (x *FindHydratedProjectsByOrganization) GetName() string {
	if x, ok := x.GetHostOrganization().(*FindHydratedProjectsByOrganization_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FindHydratedProjectsByOrganization) GetId() string {
	if x, ok := x.GetHostOrganization().(*FindHydratedProjectsByOrganization_Id); ok {
		return x.Id
	}
	return ""
}

type isFindHydratedProjectsByOrganization_HostOrganization interface {
	isFindHydratedProjectsByOrganization_HostOrganization()
}

type FindHydratedProjectsByOrganization_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedProjectsByOrganization_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedProjectsByOrganization_Name) isFindHydratedProjectsByOrganization_HostOrganization() {
}

func (*FindHydratedProjectsByOrganization_Id) isFindHydratedProjectsByOrganization_HostOrganization() {
}

type FindHydratedProjectsByTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindProjects *FindProjects `protobuf:"bytes,1,opt,name=find_projects,json=findProjects,proto3" json:"find_projects,omitempty"`
	OrgId        string        `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"` // necessary if host_team is name
	// Types that are assignable to HostTeam:
	//	*FindHydratedProjectsByTeam_Name
	//	*FindHydratedProjectsByTeam_Id
	HostTeam isFindHydratedProjectsByTeam_HostTeam `protobuf_oneof:"host_team"`
}

func (x *FindHydratedProjectsByTeam) Reset() {
	*x = FindHydratedProjectsByTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHydratedProjectsByTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHydratedProjectsByTeam) ProtoMessage() {}

func (x *FindHydratedProjectsByTeam) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHydratedProjectsByTeam.ProtoReflect.Descriptor instead.
func (*FindHydratedProjectsByTeam) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{13}
}

func (x *FindHydratedProjectsByTeam) GetFindProjects() *FindProjects {
	if x != nil {
		return x.FindProjects
	}
	return nil
}

func (x *FindHydratedProjectsByTeam) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (m *FindHydratedProjectsByTeam) GetHostTeam() isFindHydratedProjectsByTeam_HostTeam {
	if m != nil {
		return m.HostTeam
	}
	return nil
}

func (x *FindHydratedProjectsByTeam) GetName() string {
	if x, ok := x.GetHostTeam().(*FindHydratedProjectsByTeam_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FindHydratedProjectsByTeam) GetId() string {
	if x, ok := x.GetHostTeam().(*FindHydratedProjectsByTeam_Id); ok {
		return x.Id
	}
	return ""
}

type isFindHydratedProjectsByTeam_HostTeam interface {
	isFindHydratedProjectsByTeam_HostTeam()
}

type FindHydratedProjectsByTeam_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedProjectsByTeam_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedProjectsByTeam_Name) isFindHydratedProjectsByTeam_HostTeam() {}

func (*FindHydratedProjectsByTeam_Id) isFindHydratedProjectsByTeam_HostTeam() {}

type FindHydratedDatasetsByOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindDatasets *FindDatasets `protobuf:"bytes,1,opt,name=find_datasets,json=findDatasets,proto3" json:"find_datasets,omitempty"`
	// Types that are assignable to HostOrganization:
	//	*FindHydratedDatasetsByOrganization_Name
	//	*FindHydratedDatasetsByOrganization_Id
	HostOrganization isFindHydratedDatasetsByOrganization_HostOrganization `protobuf_oneof:"host_organization"`
}

func (x *FindHydratedDatasetsByOrganization) Reset() {
	*x = FindHydratedDatasetsByOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHydratedDatasetsByOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHydratedDatasetsByOrganization) ProtoMessage() {}

func (x *FindHydratedDatasetsByOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHydratedDatasetsByOrganization.ProtoReflect.Descriptor instead.
func (*FindHydratedDatasetsByOrganization) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{14}
}

func (x *FindHydratedDatasetsByOrganization) GetFindDatasets() *FindDatasets {
	if x != nil {
		return x.FindDatasets
	}
	return nil
}

func (m *FindHydratedDatasetsByOrganization) GetHostOrganization() isFindHydratedDatasetsByOrganization_HostOrganization {
	if m != nil {
		return m.HostOrganization
	}
	return nil
}

func (x *FindHydratedDatasetsByOrganization) GetName() string {
	if x, ok := x.GetHostOrganization().(*FindHydratedDatasetsByOrganization_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FindHydratedDatasetsByOrganization) GetId() string {
	if x, ok := x.GetHostOrganization().(*FindHydratedDatasetsByOrganization_Id); ok {
		return x.Id
	}
	return ""
}

type isFindHydratedDatasetsByOrganization_HostOrganization interface {
	isFindHydratedDatasetsByOrganization_HostOrganization()
}

type FindHydratedDatasetsByOrganization_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedDatasetsByOrganization_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedDatasetsByOrganization_Name) isFindHydratedDatasetsByOrganization_HostOrganization() {
}

func (*FindHydratedDatasetsByOrganization_Id) isFindHydratedDatasetsByOrganization_HostOrganization() {
}

type FindHydratedDatasetsByTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindDatasets *FindDatasets `protobuf:"bytes,1,opt,name=find_datasets,json=findDatasets,proto3" json:"find_datasets,omitempty"`
	OrgId        string        `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Types that are assignable to HostTeam:
	//	*FindHydratedDatasetsByTeam_Name
	//	*FindHydratedDatasetsByTeam_Id
	HostTeam isFindHydratedDatasetsByTeam_HostTeam `protobuf_oneof:"host_team"`
}

func (x *FindHydratedDatasetsByTeam) Reset() {
	*x = FindHydratedDatasetsByTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHydratedDatasetsByTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHydratedDatasetsByTeam) ProtoMessage() {}

func (x *FindHydratedDatasetsByTeam) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHydratedDatasetsByTeam.ProtoReflect.Descriptor instead.
func (*FindHydratedDatasetsByTeam) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{15}
}

func (x *FindHydratedDatasetsByTeam) GetFindDatasets() *FindDatasets {
	if x != nil {
		return x.FindDatasets
	}
	return nil
}

func (x *FindHydratedDatasetsByTeam) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (m *FindHydratedDatasetsByTeam) GetHostTeam() isFindHydratedDatasetsByTeam_HostTeam {
	if m != nil {
		return m.HostTeam
	}
	return nil
}

func (x *FindHydratedDatasetsByTeam) GetName() string {
	if x, ok := x.GetHostTeam().(*FindHydratedDatasetsByTeam_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FindHydratedDatasetsByTeam) GetId() string {
	if x, ok := x.GetHostTeam().(*FindHydratedDatasetsByTeam_Id); ok {
		return x.Id
	}
	return ""
}

type isFindHydratedDatasetsByTeam_HostTeam interface {
	isFindHydratedDatasetsByTeam_HostTeam()
}

type FindHydratedDatasetsByTeam_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type FindHydratedDatasetsByTeam_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

func (*FindHydratedDatasetsByTeam_Name) isFindHydratedDatasetsByTeam_HostTeam() {}

func (*FindHydratedDatasetsByTeam_Id) isFindHydratedDatasetsByTeam_HostTeam() {}

type AdvancedQueryProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedProjects []*HydratedProject `protobuf:"bytes,1,rep,name=hydrated_projects,json=hydratedProjects,proto3" json:"hydrated_projects,omitempty"`
	TotalRecords     int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *AdvancedQueryProjectsResponse) Reset() {
	*x = AdvancedQueryProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedQueryProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedQueryProjectsResponse) ProtoMessage() {}

func (x *AdvancedQueryProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedQueryProjectsResponse.ProtoReflect.Descriptor instead.
func (*AdvancedQueryProjectsResponse) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{16}
}

func (x *AdvancedQueryProjectsResponse) GetHydratedProjects() []*HydratedProject {
	if x != nil {
		return x.HydratedProjects
	}
	return nil
}

func (x *AdvancedQueryProjectsResponse) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type HydratedDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset               *Dataset                `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	CollaboratorUserInfos []*CollaboratorUserInfo `protobuf:"bytes,2,rep,name=collaborator_user_infos,json=collaboratorUserInfos,proto3" json:"collaborator_user_infos,omitempty"`
	OwnerUserInfo         *uac.UserInfo           `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions        []*uac.Action           `protobuf:"bytes,5,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
}

func (x *HydratedDataset) Reset() {
	*x = HydratedDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HydratedDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedDataset) ProtoMessage() {}

func (x *HydratedDataset) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedDataset.ProtoReflect.Descriptor instead.
func (*HydratedDataset) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{17}
}

func (x *HydratedDataset) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *HydratedDataset) GetCollaboratorUserInfos() []*CollaboratorUserInfo {
	if x != nil {
		return x.CollaboratorUserInfos
	}
	return nil
}

func (x *HydratedDataset) GetOwnerUserInfo() *uac.UserInfo {
	if x != nil {
		return x.OwnerUserInfo
	}
	return nil
}

func (x *HydratedDataset) GetAllowedActions() []*uac.Action {
	if x != nil {
		return x.AllowedActions
	}
	return nil
}

type AdvancedQueryDatasetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedDatasets []*HydratedDataset `protobuf:"bytes,1,rep,name=hydrated_datasets,json=hydratedDatasets,proto3" json:"hydrated_datasets,omitempty"`
	TotalRecords     int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *AdvancedQueryDatasetsResponse) Reset() {
	*x = AdvancedQueryDatasetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedQueryDatasetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedQueryDatasetsResponse) ProtoMessage() {}

func (x *AdvancedQueryDatasetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedQueryDatasetsResponse.ProtoReflect.Descriptor instead.
func (*AdvancedQueryDatasetsResponse) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{18}
}

func (x *AdvancedQueryDatasetsResponse) GetHydratedDatasets() []*HydratedDataset {
	if x != nil {
		return x.HydratedDatasets
	}
	return nil
}

func (x *AdvancedQueryDatasetsResponse) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type HydratedDatasetVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetVersion *DatasetVersion `protobuf:"bytes,1,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
	OwnerUserInfo  *uac.UserInfo   `protobuf:"bytes,3,opt,name=owner_user_info,json=ownerUserInfo,proto3" json:"owner_user_info,omitempty"`
	AllowedActions []*uac.Action   `protobuf:"bytes,4,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
}

func (x *HydratedDatasetVersion) Reset() {
	*x = HydratedDatasetVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HydratedDatasetVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedDatasetVersion) ProtoMessage() {}

func (x *HydratedDatasetVersion) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedDatasetVersion.ProtoReflect.Descriptor instead.
func (*HydratedDatasetVersion) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{19}
}

func (x *HydratedDatasetVersion) GetDatasetVersion() *DatasetVersion {
	if x != nil {
		return x.DatasetVersion
	}
	return nil
}

func (x *HydratedDatasetVersion) GetOwnerUserInfo() *uac.UserInfo {
	if x != nil {
		return x.OwnerUserInfo
	}
	return nil
}

func (x *HydratedDatasetVersion) GetAllowedActions() []*uac.Action {
	if x != nil {
		return x.AllowedActions
	}
	return nil
}

type AdvancedQueryDatasetVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedDatasetVersions []*HydratedDatasetVersion `protobuf:"bytes,1,rep,name=hydrated_dataset_versions,json=hydratedDatasetVersions,proto3" json:"hydrated_dataset_versions,omitempty"`
	TotalRecords            int64                     `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *AdvancedQueryDatasetVersionsResponse) Reset() {
	*x = AdvancedQueryDatasetVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedQueryDatasetVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedQueryDatasetVersionsResponse) ProtoMessage() {}

func (x *AdvancedQueryDatasetVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedQueryDatasetVersionsResponse.ProtoReflect.Descriptor instead.
func (*AdvancedQueryDatasetVersionsResponse) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{20}
}

func (x *AdvancedQueryDatasetVersionsResponse) GetHydratedDatasetVersions() []*HydratedDatasetVersion {
	if x != nil {
		return x.HydratedDatasetVersions
	}
	return nil
}

func (x *AdvancedQueryDatasetVersionsResponse) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

//getDatasetByName
type GetHydratedDatasetByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WorkspaceName string `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *GetHydratedDatasetByName) Reset() {
	*x = GetHydratedDatasetByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedDatasetByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedDatasetByName) ProtoMessage() {}

func (x *GetHydratedDatasetByName) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedDatasetByName.ProtoReflect.Descriptor instead.
func (*GetHydratedDatasetByName) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{21}
}

func (x *GetHydratedDatasetByName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetHydratedDatasetByName) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type GetHydratedDatasetsByProjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageLimit  int32  `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
	Ascending  bool   `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	SortKey    string `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *GetHydratedDatasetsByProjectId) Reset() {
	*x = GetHydratedDatasetsByProjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedDatasetsByProjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedDatasetsByProjectId) ProtoMessage() {}

func (x *GetHydratedDatasetsByProjectId) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedDatasetsByProjectId.ProtoReflect.Descriptor instead.
func (*GetHydratedDatasetsByProjectId) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{22}
}

func (x *GetHydratedDatasetsByProjectId) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetHydratedDatasetsByProjectId) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetHydratedDatasetsByProjectId) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *GetHydratedDatasetsByProjectId) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetHydratedDatasetsByProjectId) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type GetHydratedProjects_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedProjects []*HydratedProject `protobuf:"bytes,1,rep,name=hydrated_projects,json=hydratedProjects,proto3" json:"hydrated_projects,omitempty"`
	TotalRecords     int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetHydratedProjects_Response) Reset() {
	*x = GetHydratedProjects_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedProjects_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedProjects_Response) ProtoMessage() {}

func (x *GetHydratedProjects_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedProjects_Response.ProtoReflect.Descriptor instead.
func (*GetHydratedProjects_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetHydratedProjects_Response) GetHydratedProjects() []*HydratedProject {
	if x != nil {
		return x.HydratedProjects
	}
	return nil
}

func (x *GetHydratedProjects_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetHydratedProjectById_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedProject *HydratedProject `protobuf:"bytes,1,opt,name=hydrated_project,json=hydratedProject,proto3" json:"hydrated_project,omitempty"`
}

func (x *GetHydratedProjectById_Response) Reset() {
	*x = GetHydratedProjectById_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedProjectById_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedProjectById_Response) ProtoMessage() {}

func (x *GetHydratedProjectById_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedProjectById_Response.ProtoReflect.Descriptor instead.
func (*GetHydratedProjectById_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetHydratedProjectById_Response) GetHydratedProject() *HydratedProject {
	if x != nil {
		return x.HydratedProject
	}
	return nil
}

type GetHydratedExperimentsByProjectId_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedExperiments []*HydratedExperiment `protobuf:"bytes,1,rep,name=hydrated_experiments,json=hydratedExperiments,proto3" json:"hydrated_experiments,omitempty"`
	TotalRecords        int64                 `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetHydratedExperimentsByProjectId_Response) Reset() {
	*x = GetHydratedExperimentsByProjectId_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedExperimentsByProjectId_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedExperimentsByProjectId_Response) ProtoMessage() {}

func (x *GetHydratedExperimentsByProjectId_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedExperimentsByProjectId_Response.ProtoReflect.Descriptor instead.
func (*GetHydratedExperimentsByProjectId_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetHydratedExperimentsByProjectId_Response) GetHydratedExperiments() []*HydratedExperiment {
	if x != nil {
		return x.HydratedExperiments
	}
	return nil
}

func (x *GetHydratedExperimentsByProjectId_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetHydratedExperimentRunsByProjectId_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedExperimentRuns []*HydratedExperimentRun `protobuf:"bytes,1,rep,name=hydrated_experiment_runs,json=hydratedExperimentRuns,proto3" json:"hydrated_experiment_runs,omitempty"`
	TotalRecords           int64                    `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetHydratedExperimentRunsByProjectId_Response) Reset() {
	*x = GetHydratedExperimentRunsByProjectId_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedExperimentRunsByProjectId_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedExperimentRunsByProjectId_Response) ProtoMessage() {}

func (x *GetHydratedExperimentRunsByProjectId_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedExperimentRunsByProjectId_Response.ProtoReflect.Descriptor instead.
func (*GetHydratedExperimentRunsByProjectId_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetHydratedExperimentRunsByProjectId_Response) GetHydratedExperimentRuns() []*HydratedExperimentRun {
	if x != nil {
		return x.HydratedExperimentRuns
	}
	return nil
}

func (x *GetHydratedExperimentRunsByProjectId_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

type GetHydratedExperimentRunById_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedExperimentRun *HydratedExperimentRun `protobuf:"bytes,1,opt,name=hydrated_experiment_run,json=hydratedExperimentRun,proto3" json:"hydrated_experiment_run,omitempty"`
}

func (x *GetHydratedExperimentRunById_Response) Reset() {
	*x = GetHydratedExperimentRunById_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedExperimentRunById_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedExperimentRunById_Response) ProtoMessage() {}

func (x *GetHydratedExperimentRunById_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedExperimentRunById_Response.ProtoReflect.Descriptor instead.
func (*GetHydratedExperimentRunById_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetHydratedExperimentRunById_Response) GetHydratedExperimentRun() *HydratedExperimentRun {
	if x != nil {
		return x.HydratedExperimentRun
	}
	return nil
}

type GetHydratedDatasetByName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedDatasetByUser  *HydratedDataset   `protobuf:"bytes,1,opt,name=hydrated_dataset_by_user,json=hydratedDatasetByUser,proto3" json:"hydrated_dataset_by_user,omitempty"`
	SharedHydratedDatasets []*HydratedDataset `protobuf:"bytes,2,rep,name=shared_hydrated_datasets,json=sharedHydratedDatasets,proto3" json:"shared_hydrated_datasets,omitempty"`
}

func (x *GetHydratedDatasetByName_Response) Reset() {
	*x = GetHydratedDatasetByName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedDatasetByName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedDatasetByName_Response) ProtoMessage() {}

func (x *GetHydratedDatasetByName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedDatasetByName_Response.ProtoReflect.Descriptor instead.
func (*GetHydratedDatasetByName_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{21, 0}
}

func (x *GetHydratedDatasetByName_Response) GetHydratedDatasetByUser() *HydratedDataset {
	if x != nil {
		return x.HydratedDatasetByUser
	}
	return nil
}

func (x *GetHydratedDatasetByName_Response) GetSharedHydratedDatasets() []*HydratedDataset {
	if x != nil {
		return x.SharedHydratedDatasets
	}
	return nil
}

type GetHydratedDatasetsByProjectId_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydratedDatasets []*HydratedDataset `protobuf:"bytes,1,rep,name=hydrated_datasets,json=hydratedDatasets,proto3" json:"hydrated_datasets,omitempty"`
	TotalRecords     int64              `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
}

func (x *GetHydratedDatasetsByProjectId_Response) Reset() {
	*x = GetHydratedDatasetsByProjectId_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modeldb_HydratedService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydratedDatasetsByProjectId_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydratedDatasetsByProjectId_Response) ProtoMessage() {}

func (x *GetHydratedDatasetsByProjectId_Response) ProtoReflect() protoreflect.Message {
	mi := &file_modeldb_HydratedService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydratedDatasetsByProjectId_Response.ProtoReflect.Descriptor instead.
func (*GetHydratedDatasetsByProjectId_Response) Descriptor() ([]byte, []int) {
	return file_modeldb_HydratedService_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GetHydratedDatasetsByProjectId_Response) GetHydratedDatasets() []*HydratedDataset {
	if x != nil {
		return x.HydratedDatasets
	}
	return nil
}

func (x *GetHydratedDatasetsByProjectId_Response) GetTotalRecords() int64 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

var File_modeldb_HydratedService_proto protoreflect.FileDescriptor

var file_modeldb_HydratedService_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x75, 0x61, 0x63, 0x2f, 0x55, 0x41, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x61, 0x63, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x75,
	0x61, 0x63, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x61, 0x63, 0x2f,
	0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x02,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x7f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x11, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x10, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4e, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x59, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61,
	0x63, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x11, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x75, 0x61, 0x63, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x63, 0x0a,
	0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5e,
	0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3e,
	0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x58, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x48, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x1a, 0x88, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x14, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xd3, 0x02, 0x0a, 0x15, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x92, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x18, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x16,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x6b, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x17, 0x68, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x52, 0x15, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x23, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x18, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x16, 0x68, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x20, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x14, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x13, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x66,
	0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x22, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xa6, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d,
	0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad,
	0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x43, 0x0a,
	0x0d, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x94,
	0x01, 0x0a, 0x1d, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x11, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x10,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x5e,
	0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3e,
	0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x75, 0x61, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01,
	0x0a, 0x1d, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x11, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x10, 0x68,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x75,
	0x61, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x24, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x19, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x17, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9b, 0x02,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x15, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5b,
	0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x7f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x10, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xb4, 0x1f, 0x0a, 0x0f, 0x48, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x67, 0x65, 0x74,
	0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x2e, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0xa6, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0xd2, 0x01, 0x0a, 0x21, 0x67,
	0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x3c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x65,
	0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0xda, 0x01, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x3f,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0xbe, 0x01, 0x0a,
	0x1c, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x37, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x2f, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0xb1, 0x01,
	0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x73, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xae, 0x01, 0x0a, 0x1a, 0x73, 0x6f, 0x72, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x48, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6e, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12,
	0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0xa5,
	0x01, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64,
	0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a,
	0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e,
	0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a, 0x1a, 0x66,
	0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0xcb, 0x01, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb3,
	0x01, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x2f, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e,
	0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x1a,
	0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x66, 0x69, 0x6e,
	0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e,
	0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76,
	0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66,
	0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a,
	0x1b, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x33, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x74,
	0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x48, 0x79, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x65,
	0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x42,
	0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x39, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x65, 0x72, 0x74, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2f,
	0x67, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x42, 0x42,
	0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56,
	0x65, 0x72, 0x74, 0x61, 0x41, 0x49, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modeldb_HydratedService_proto_rawDescOnce sync.Once
	file_modeldb_HydratedService_proto_rawDescData = file_modeldb_HydratedService_proto_rawDesc
)

func file_modeldb_HydratedService_proto_rawDescGZIP() []byte {
	file_modeldb_HydratedService_proto_rawDescOnce.Do(func() {
		file_modeldb_HydratedService_proto_rawDescData = protoimpl.X.CompressGZIP(file_modeldb_HydratedService_proto_rawDescData)
	})
	return file_modeldb_HydratedService_proto_rawDescData
}

var file_modeldb_HydratedService_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_modeldb_HydratedService_proto_goTypes = []interface{}{
	(*GetHydratedProjects)(nil),                           // 0: ai.verta.modeldb.GetHydratedProjects
	(*CollaboratorUserInfo)(nil),                          // 1: ai.verta.modeldb.CollaboratorUserInfo
	(*HydratedProject)(nil),                               // 2: ai.verta.modeldb.HydratedProject
	(*GetHydratedProjectById)(nil),                        // 3: ai.verta.modeldb.GetHydratedProjectById
	(*HydratedExperiment)(nil),                            // 4: ai.verta.modeldb.HydratedExperiment
	(*GetHydratedExperimentsByProjectId)(nil),             // 5: ai.verta.modeldb.GetHydratedExperimentsByProjectId
	(*HydratedExperimentRun)(nil),                         // 6: ai.verta.modeldb.HydratedExperimentRun
	(*GetHydratedExperimentRunsByProjectId)(nil),          // 7: ai.verta.modeldb.GetHydratedExperimentRunsByProjectId
	(*GetHydratedExperimentRunById)(nil),                  // 8: ai.verta.modeldb.GetHydratedExperimentRunById
	(*AdvancedQueryExperimentRunsResponse)(nil),           // 9: ai.verta.modeldb.AdvancedQueryExperimentRunsResponse
	(*AdvancedQueryExperimentsResponse)(nil),              // 10: ai.verta.modeldb.AdvancedQueryExperimentsResponse
	(*FindHydratedProjectsByUser)(nil),                    // 11: ai.verta.modeldb.FindHydratedProjectsByUser
	(*FindHydratedProjectsByOrganization)(nil),            // 12: ai.verta.modeldb.FindHydratedProjectsByOrganization
	(*FindHydratedProjectsByTeam)(nil),                    // 13: ai.verta.modeldb.FindHydratedProjectsByTeam
	(*FindHydratedDatasetsByOrganization)(nil),            // 14: ai.verta.modeldb.FindHydratedDatasetsByOrganization
	(*FindHydratedDatasetsByTeam)(nil),                    // 15: ai.verta.modeldb.FindHydratedDatasetsByTeam
	(*AdvancedQueryProjectsResponse)(nil),                 // 16: ai.verta.modeldb.AdvancedQueryProjectsResponse
	(*HydratedDataset)(nil),                               // 17: ai.verta.modeldb.HydratedDataset
	(*AdvancedQueryDatasetsResponse)(nil),                 // 18: ai.verta.modeldb.AdvancedQueryDatasetsResponse
	(*HydratedDatasetVersion)(nil),                        // 19: ai.verta.modeldb.HydratedDatasetVersion
	(*AdvancedQueryDatasetVersionsResponse)(nil),          // 20: ai.verta.modeldb.AdvancedQueryDatasetVersionsResponse
	(*GetHydratedDatasetByName)(nil),                      // 21: ai.verta.modeldb.GetHydratedDatasetByName
	(*GetHydratedDatasetsByProjectId)(nil),                // 22: ai.verta.modeldb.GetHydratedDatasetsByProjectId
	(*GetHydratedProjects_Response)(nil),                  // 23: ai.verta.modeldb.GetHydratedProjects.Response
	(*GetHydratedProjectById_Response)(nil),               // 24: ai.verta.modeldb.GetHydratedProjectById.Response
	(*GetHydratedExperimentsByProjectId_Response)(nil),    // 25: ai.verta.modeldb.GetHydratedExperimentsByProjectId.Response
	(*GetHydratedExperimentRunsByProjectId_Response)(nil), // 26: ai.verta.modeldb.GetHydratedExperimentRunsByProjectId.Response
	(*GetHydratedExperimentRunById_Response)(nil),         // 27: ai.verta.modeldb.GetHydratedExperimentRunById.Response
	(*GetHydratedDatasetByName_Response)(nil),             // 28: ai.verta.modeldb.GetHydratedDatasetByName.Response
	(*GetHydratedDatasetsByProjectId_Response)(nil),       // 29: ai.verta.modeldb.GetHydratedDatasetsByProjectId.Response
	(*uac.UserInfo)(nil),                                  // 30: ai.verta.uac.UserInfo
	(*uac.Organization)(nil),                              // 31: ai.verta.uac.Organization
	(*uac.Team)(nil),                                      // 32: ai.verta.uac.Team
	(common.CollaboratorTypeEnum_CollaboratorType)(0),     // 33: ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	(common.TernaryEnum_Ternary)(0),                       // 34: ai.verta.common.TernaryEnum.Ternary
	(common.EntitiesEnum_EntitiesTypes)(0),                // 35: ai.verta.common.EntitiesEnum.EntitiesTypes
	(*Project)(nil),                                       // 36: ai.verta.modeldb.Project
	(*uac.Action)(nil),                                    // 37: ai.verta.uac.Action
	(*Experiment)(nil),                                    // 38: ai.verta.modeldb.Experiment
	(*ExperimentRun)(nil),                                 // 39: ai.verta.modeldb.ExperimentRun
	(*Comment)(nil),                                       // 40: ai.verta.modeldb.Comment
	(*FindProjects)(nil),                                  // 41: ai.verta.modeldb.FindProjects
	(*FindDatasets)(nil),                                  // 42: ai.verta.modeldb.FindDatasets
	(*Dataset)(nil),                                       // 43: ai.verta.modeldb.Dataset
	(*DatasetVersion)(nil),                                // 44: ai.verta.modeldb.DatasetVersion
	(*FindExperimentRuns)(nil),                            // 45: ai.verta.modeldb.FindExperimentRuns
	(*SortExperimentRuns)(nil),                            // 46: ai.verta.modeldb.SortExperimentRuns
	(*TopExperimentRunsSelector)(nil),                     // 47: ai.verta.modeldb.TopExperimentRunsSelector
	(*FindExperiments)(nil),                               // 48: ai.verta.modeldb.FindExperiments
	(*FindDatasetVersions)(nil),                           // 49: ai.verta.modeldb.FindDatasetVersions
}
var file_modeldb_HydratedService_proto_depIdxs = []int32{
	30, // 0: ai.verta.modeldb.CollaboratorUserInfo.collaborator_user_info:type_name -> ai.verta.uac.UserInfo
	31, // 1: ai.verta.modeldb.CollaboratorUserInfo.collaborator_organization:type_name -> ai.verta.uac.Organization
	32, // 2: ai.verta.modeldb.CollaboratorUserInfo.collaborator_team:type_name -> ai.verta.uac.Team
	33, // 3: ai.verta.modeldb.CollaboratorUserInfo.collaborator_type:type_name -> ai.verta.common.CollaboratorTypeEnum.CollaboratorType
	34, // 4: ai.verta.modeldb.CollaboratorUserInfo.can_deploy:type_name -> ai.verta.common.TernaryEnum.Ternary
	35, // 5: ai.verta.modeldb.CollaboratorUserInfo.entity_type:type_name -> ai.verta.common.EntitiesEnum.EntitiesTypes
	36, // 6: ai.verta.modeldb.HydratedProject.project:type_name -> ai.verta.modeldb.Project
	1,  // 7: ai.verta.modeldb.HydratedProject.collaborator_user_infos:type_name -> ai.verta.modeldb.CollaboratorUserInfo
	30, // 8: ai.verta.modeldb.HydratedProject.owner_user_info:type_name -> ai.verta.uac.UserInfo
	37, // 9: ai.verta.modeldb.HydratedProject.allowed_actions:type_name -> ai.verta.uac.Action
	38, // 10: ai.verta.modeldb.HydratedExperiment.experiment:type_name -> ai.verta.modeldb.Experiment
	30, // 11: ai.verta.modeldb.HydratedExperiment.owner_user_info:type_name -> ai.verta.uac.UserInfo
	37, // 12: ai.verta.modeldb.HydratedExperiment.allowed_actions:type_name -> ai.verta.uac.Action
	39, // 13: ai.verta.modeldb.HydratedExperimentRun.experiment_run:type_name -> ai.verta.modeldb.ExperimentRun
	40, // 14: ai.verta.modeldb.HydratedExperimentRun.comments:type_name -> ai.verta.modeldb.Comment
	30, // 15: ai.verta.modeldb.HydratedExperimentRun.owner_user_info:type_name -> ai.verta.uac.UserInfo
	38, // 16: ai.verta.modeldb.HydratedExperimentRun.experiment:type_name -> ai.verta.modeldb.Experiment
	37, // 17: ai.verta.modeldb.HydratedExperimentRun.allowed_actions:type_name -> ai.verta.uac.Action
	6,  // 18: ai.verta.modeldb.AdvancedQueryExperimentRunsResponse.hydrated_experiment_runs:type_name -> ai.verta.modeldb.HydratedExperimentRun
	4,  // 19: ai.verta.modeldb.AdvancedQueryExperimentsResponse.hydrated_experiments:type_name -> ai.verta.modeldb.HydratedExperiment
	41, // 20: ai.verta.modeldb.FindHydratedProjectsByUser.find_projects:type_name -> ai.verta.modeldb.FindProjects
	41, // 21: ai.verta.modeldb.FindHydratedProjectsByOrganization.find_projects:type_name -> ai.verta.modeldb.FindProjects
	41, // 22: ai.verta.modeldb.FindHydratedProjectsByTeam.find_projects:type_name -> ai.verta.modeldb.FindProjects
	42, // 23: ai.verta.modeldb.FindHydratedDatasetsByOrganization.find_datasets:type_name -> ai.verta.modeldb.FindDatasets
	42, // 24: ai.verta.modeldb.FindHydratedDatasetsByTeam.find_datasets:type_name -> ai.verta.modeldb.FindDatasets
	2,  // 25: ai.verta.modeldb.AdvancedQueryProjectsResponse.hydrated_projects:type_name -> ai.verta.modeldb.HydratedProject
	43, // 26: ai.verta.modeldb.HydratedDataset.dataset:type_name -> ai.verta.modeldb.Dataset
	1,  // 27: ai.verta.modeldb.HydratedDataset.collaborator_user_infos:type_name -> ai.verta.modeldb.CollaboratorUserInfo
	30, // 28: ai.verta.modeldb.HydratedDataset.owner_user_info:type_name -> ai.verta.uac.UserInfo
	37, // 29: ai.verta.modeldb.HydratedDataset.allowed_actions:type_name -> ai.verta.uac.Action
	17, // 30: ai.verta.modeldb.AdvancedQueryDatasetsResponse.hydrated_datasets:type_name -> ai.verta.modeldb.HydratedDataset
	44, // 31: ai.verta.modeldb.HydratedDatasetVersion.dataset_version:type_name -> ai.verta.modeldb.DatasetVersion
	30, // 32: ai.verta.modeldb.HydratedDatasetVersion.owner_user_info:type_name -> ai.verta.uac.UserInfo
	37, // 33: ai.verta.modeldb.HydratedDatasetVersion.allowed_actions:type_name -> ai.verta.uac.Action
	19, // 34: ai.verta.modeldb.AdvancedQueryDatasetVersionsResponse.hydrated_dataset_versions:type_name -> ai.verta.modeldb.HydratedDatasetVersion
	2,  // 35: ai.verta.modeldb.GetHydratedProjects.Response.hydrated_projects:type_name -> ai.verta.modeldb.HydratedProject
	2,  // 36: ai.verta.modeldb.GetHydratedProjectById.Response.hydrated_project:type_name -> ai.verta.modeldb.HydratedProject
	4,  // 37: ai.verta.modeldb.GetHydratedExperimentsByProjectId.Response.hydrated_experiments:type_name -> ai.verta.modeldb.HydratedExperiment
	6,  // 38: ai.verta.modeldb.GetHydratedExperimentRunsByProjectId.Response.hydrated_experiment_runs:type_name -> ai.verta.modeldb.HydratedExperimentRun
	6,  // 39: ai.verta.modeldb.GetHydratedExperimentRunById.Response.hydrated_experiment_run:type_name -> ai.verta.modeldb.HydratedExperimentRun
	17, // 40: ai.verta.modeldb.GetHydratedDatasetByName.Response.hydrated_dataset_by_user:type_name -> ai.verta.modeldb.HydratedDataset
	17, // 41: ai.verta.modeldb.GetHydratedDatasetByName.Response.shared_hydrated_datasets:type_name -> ai.verta.modeldb.HydratedDataset
	17, // 42: ai.verta.modeldb.GetHydratedDatasetsByProjectId.Response.hydrated_datasets:type_name -> ai.verta.modeldb.HydratedDataset
	0,  // 43: ai.verta.modeldb.HydratedService.getHydratedProjects:input_type -> ai.verta.modeldb.GetHydratedProjects
	0,  // 44: ai.verta.modeldb.HydratedService.getHydratedPublicProjects:input_type -> ai.verta.modeldb.GetHydratedProjects
	3,  // 45: ai.verta.modeldb.HydratedService.getHydratedProjectById:input_type -> ai.verta.modeldb.GetHydratedProjectById
	5,  // 46: ai.verta.modeldb.HydratedService.getHydratedExperimentsByProjectId:input_type -> ai.verta.modeldb.GetHydratedExperimentsByProjectId
	7,  // 47: ai.verta.modeldb.HydratedService.getHydratedExperimentRunsInProject:input_type -> ai.verta.modeldb.GetHydratedExperimentRunsByProjectId
	8,  // 48: ai.verta.modeldb.HydratedService.getHydratedExperimentRunById:input_type -> ai.verta.modeldb.GetHydratedExperimentRunById
	45, // 49: ai.verta.modeldb.HydratedService.findHydratedExperimentRuns:input_type -> ai.verta.modeldb.FindExperimentRuns
	46, // 50: ai.verta.modeldb.HydratedService.sortHydratedExperimentRuns:input_type -> ai.verta.modeldb.SortExperimentRuns
	47, // 51: ai.verta.modeldb.HydratedService.getTopHydratedExperimentRuns:input_type -> ai.verta.modeldb.TopExperimentRunsSelector
	48, // 52: ai.verta.modeldb.HydratedService.findHydratedExperiments:input_type -> ai.verta.modeldb.FindExperiments
	41, // 53: ai.verta.modeldb.HydratedService.findHydratedProjects:input_type -> ai.verta.modeldb.FindProjects
	41, // 54: ai.verta.modeldb.HydratedService.findHydratedPublicProjects:input_type -> ai.verta.modeldb.FindProjects
	11, // 55: ai.verta.modeldb.HydratedService.findHydratedProjectsByUser:input_type -> ai.verta.modeldb.FindHydratedProjectsByUser
	12, // 56: ai.verta.modeldb.HydratedService.findHydratedProjectsByOrganization:input_type -> ai.verta.modeldb.FindHydratedProjectsByOrganization
	13, // 57: ai.verta.modeldb.HydratedService.findHydratedProjectsByTeam:input_type -> ai.verta.modeldb.FindHydratedProjectsByTeam
	14, // 58: ai.verta.modeldb.HydratedService.findHydratedDatasetsByOrganization:input_type -> ai.verta.modeldb.FindHydratedDatasetsByOrganization
	15, // 59: ai.verta.modeldb.HydratedService.findHydratedDatasetsByTeam:input_type -> ai.verta.modeldb.FindHydratedDatasetsByTeam
	42, // 60: ai.verta.modeldb.HydratedService.findHydratedDatasets:input_type -> ai.verta.modeldb.FindDatasets
	42, // 61: ai.verta.modeldb.HydratedService.findHydratedPublicDatasets:input_type -> ai.verta.modeldb.FindDatasets
	49, // 62: ai.verta.modeldb.HydratedService.findHydratedDatasetVersions:input_type -> ai.verta.modeldb.FindDatasetVersions
	21, // 63: ai.verta.modeldb.HydratedService.getHydratedDatasetByName:input_type -> ai.verta.modeldb.GetHydratedDatasetByName
	22, // 64: ai.verta.modeldb.HydratedService.getHydratedDatasetsByProjectId:input_type -> ai.verta.modeldb.GetHydratedDatasetsByProjectId
	23, // 65: ai.verta.modeldb.HydratedService.getHydratedProjects:output_type -> ai.verta.modeldb.GetHydratedProjects.Response
	23, // 66: ai.verta.modeldb.HydratedService.getHydratedPublicProjects:output_type -> ai.verta.modeldb.GetHydratedProjects.Response
	24, // 67: ai.verta.modeldb.HydratedService.getHydratedProjectById:output_type -> ai.verta.modeldb.GetHydratedProjectById.Response
	25, // 68: ai.verta.modeldb.HydratedService.getHydratedExperimentsByProjectId:output_type -> ai.verta.modeldb.GetHydratedExperimentsByProjectId.Response
	26, // 69: ai.verta.modeldb.HydratedService.getHydratedExperimentRunsInProject:output_type -> ai.verta.modeldb.GetHydratedExperimentRunsByProjectId.Response
	27, // 70: ai.verta.modeldb.HydratedService.getHydratedExperimentRunById:output_type -> ai.verta.modeldb.GetHydratedExperimentRunById.Response
	9,  // 71: ai.verta.modeldb.HydratedService.findHydratedExperimentRuns:output_type -> ai.verta.modeldb.AdvancedQueryExperimentRunsResponse
	9,  // 72: ai.verta.modeldb.HydratedService.sortHydratedExperimentRuns:output_type -> ai.verta.modeldb.AdvancedQueryExperimentRunsResponse
	9,  // 73: ai.verta.modeldb.HydratedService.getTopHydratedExperimentRuns:output_type -> ai.verta.modeldb.AdvancedQueryExperimentRunsResponse
	10, // 74: ai.verta.modeldb.HydratedService.findHydratedExperiments:output_type -> ai.verta.modeldb.AdvancedQueryExperimentsResponse
	16, // 75: ai.verta.modeldb.HydratedService.findHydratedProjects:output_type -> ai.verta.modeldb.AdvancedQueryProjectsResponse
	16, // 76: ai.verta.modeldb.HydratedService.findHydratedPublicProjects:output_type -> ai.verta.modeldb.AdvancedQueryProjectsResponse
	16, // 77: ai.verta.modeldb.HydratedService.findHydratedProjectsByUser:output_type -> ai.verta.modeldb.AdvancedQueryProjectsResponse
	16, // 78: ai.verta.modeldb.HydratedService.findHydratedProjectsByOrganization:output_type -> ai.verta.modeldb.AdvancedQueryProjectsResponse
	16, // 79: ai.verta.modeldb.HydratedService.findHydratedProjectsByTeam:output_type -> ai.verta.modeldb.AdvancedQueryProjectsResponse
	18, // 80: ai.verta.modeldb.HydratedService.findHydratedDatasetsByOrganization:output_type -> ai.verta.modeldb.AdvancedQueryDatasetsResponse
	18, // 81: ai.verta.modeldb.HydratedService.findHydratedDatasetsByTeam:output_type -> ai.verta.modeldb.AdvancedQueryDatasetsResponse
	18, // 82: ai.verta.modeldb.HydratedService.findHydratedDatasets:output_type -> ai.verta.modeldb.AdvancedQueryDatasetsResponse
	18, // 83: ai.verta.modeldb.HydratedService.findHydratedPublicDatasets:output_type -> ai.verta.modeldb.AdvancedQueryDatasetsResponse
	20, // 84: ai.verta.modeldb.HydratedService.findHydratedDatasetVersions:output_type -> ai.verta.modeldb.AdvancedQueryDatasetVersionsResponse
	28, // 85: ai.verta.modeldb.HydratedService.getHydratedDatasetByName:output_type -> ai.verta.modeldb.GetHydratedDatasetByName.Response
	29, // 86: ai.verta.modeldb.HydratedService.getHydratedDatasetsByProjectId:output_type -> ai.verta.modeldb.GetHydratedDatasetsByProjectId.Response
	65, // [65:87] is the sub-list for method output_type
	43, // [43:65] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_modeldb_HydratedService_proto_init() }
func file_modeldb_HydratedService_proto_init() {
	if File_modeldb_HydratedService_proto != nil {
		return
	}
	file_modeldb_Comment_proto_init()
	file_modeldb_ProjectService_proto_init()
	file_modeldb_ExperimentService_proto_init()
	file_modeldb_ExperimentRunService_proto_init()
	file_modeldb_DatasetService_proto_init()
	file_modeldb_DatasetVersionService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_modeldb_HydratedService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedProjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaboratorUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HydratedProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedProjectById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HydratedExperiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedExperimentsByProjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HydratedExperimentRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedExperimentRunsByProjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedExperimentRunById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedQueryExperimentRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedQueryExperimentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHydratedProjectsByUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHydratedProjectsByOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHydratedProjectsByTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHydratedDatasetsByOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHydratedDatasetsByTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedQueryProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HydratedDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedQueryDatasetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HydratedDatasetVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedQueryDatasetVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedDatasetByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedDatasetsByProjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedProjects_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedProjectById_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedExperimentsByProjectId_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedExperimentRunsByProjectId_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedExperimentRunById_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedDatasetByName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modeldb_HydratedService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydratedDatasetsByProjectId_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_modeldb_HydratedService_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CollaboratorUserInfo_CollaboratorUserInfo)(nil),
		(*CollaboratorUserInfo_CollaboratorOrganization)(nil),
		(*CollaboratorUserInfo_CollaboratorTeam)(nil),
	}
	file_modeldb_HydratedService_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*FindHydratedProjectsByUser_Email)(nil),
		(*FindHydratedProjectsByUser_Username)(nil),
		(*FindHydratedProjectsByUser_VertaId)(nil),
	}
	file_modeldb_HydratedService_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*FindHydratedProjectsByOrganization_Name)(nil),
		(*FindHydratedProjectsByOrganization_Id)(nil),
	}
	file_modeldb_HydratedService_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*FindHydratedProjectsByTeam_Name)(nil),
		(*FindHydratedProjectsByTeam_Id)(nil),
	}
	file_modeldb_HydratedService_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*FindHydratedDatasetsByOrganization_Name)(nil),
		(*FindHydratedDatasetsByOrganization_Id)(nil),
	}
	file_modeldb_HydratedService_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*FindHydratedDatasetsByTeam_Name)(nil),
		(*FindHydratedDatasetsByTeam_Id)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modeldb_HydratedService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modeldb_HydratedService_proto_goTypes,
		DependencyIndexes: file_modeldb_HydratedService_proto_depIdxs,
		MessageInfos:      file_modeldb_HydratedService_proto_msgTypes,
	}.Build()
	File_modeldb_HydratedService_proto = out.File
	file_modeldb_HydratedService_proto_rawDesc = nil
	file_modeldb_HydratedService_proto_goTypes = nil
	file_modeldb_HydratedService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HydratedServiceClient is the client API for HydratedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HydratedServiceClient interface {
	GetHydratedProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error)
	GetHydratedPublicProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error)
	GetHydratedProjectById(ctx context.Context, in *GetHydratedProjectById, opts ...grpc.CallOption) (*GetHydratedProjectById_Response, error)
	GetHydratedExperimentsByProjectId(ctx context.Context, in *GetHydratedExperimentsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentsByProjectId_Response, error)
	GetHydratedExperimentRunsInProject(ctx context.Context, in *GetHydratedExperimentRunsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentRunsByProjectId_Response, error)
	GetHydratedExperimentRunById(ctx context.Context, in *GetHydratedExperimentRunById, opts ...grpc.CallOption) (*GetHydratedExperimentRunById_Response, error)
	// queries
	FindHydratedExperimentRuns(ctx context.Context, in *FindExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error)
	SortHydratedExperimentRuns(ctx context.Context, in *SortExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error)
	GetTopHydratedExperimentRuns(ctx context.Context, in *TopExperimentRunsSelector, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error)
	// queries
	FindHydratedExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*AdvancedQueryExperimentsResponse, error)
	// queries
	FindHydratedProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedPublicProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByUser(ctx context.Context, in *FindHydratedProjectsByUser, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByOrganization(ctx context.Context, in *FindHydratedProjectsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByTeam(ctx context.Context, in *FindHydratedProjectsByTeam, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedDatasetsByOrganization(ctx context.Context, in *FindHydratedDatasetsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetsByTeam(ctx context.Context, in *FindHydratedDatasetsByTeam, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedPublicDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*AdvancedQueryDatasetVersionsResponse, error)
	GetHydratedDatasetByName(ctx context.Context, in *GetHydratedDatasetByName, opts ...grpc.CallOption) (*GetHydratedDatasetByName_Response, error)
	GetHydratedDatasetsByProjectId(ctx context.Context, in *GetHydratedDatasetsByProjectId, opts ...grpc.CallOption) (*GetHydratedDatasetsByProjectId_Response, error)
}

type hydratedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHydratedServiceClient(cc grpc.ClientConnInterface) HydratedServiceClient {
	return &hydratedServiceClient{cc}
}

func (c *hydratedServiceClient) GetHydratedProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error) {
	out := new(GetHydratedProjects_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedPublicProjects(ctx context.Context, in *GetHydratedProjects, opts ...grpc.CallOption) (*GetHydratedProjects_Response, error) {
	out := new(GetHydratedProjects_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedPublicProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedProjectById(ctx context.Context, in *GetHydratedProjectById, opts ...grpc.CallOption) (*GetHydratedProjectById_Response, error) {
	out := new(GetHydratedProjectById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedExperimentsByProjectId(ctx context.Context, in *GetHydratedExperimentsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentsByProjectId_Response, error) {
	out := new(GetHydratedExperimentsByProjectId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedExperimentsByProjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedExperimentRunsInProject(ctx context.Context, in *GetHydratedExperimentRunsByProjectId, opts ...grpc.CallOption) (*GetHydratedExperimentRunsByProjectId_Response, error) {
	out := new(GetHydratedExperimentRunsByProjectId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedExperimentRunsInProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedExperimentRunById(ctx context.Context, in *GetHydratedExperimentRunById, opts ...grpc.CallOption) (*GetHydratedExperimentRunById_Response, error) {
	out := new(GetHydratedExperimentRunById_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedExperimentRunById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedExperimentRuns(ctx context.Context, in *FindExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error) {
	out := new(AdvancedQueryExperimentRunsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) SortHydratedExperimentRuns(ctx context.Context, in *SortExperimentRuns, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error) {
	out := new(AdvancedQueryExperimentRunsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/sortHydratedExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetTopHydratedExperimentRuns(ctx context.Context, in *TopExperimentRunsSelector, opts ...grpc.CallOption) (*AdvancedQueryExperimentRunsResponse, error) {
	out := new(AdvancedQueryExperimentRunsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getTopHydratedExperimentRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedExperiments(ctx context.Context, in *FindExperiments, opts ...grpc.CallOption) (*AdvancedQueryExperimentsResponse, error) {
	out := new(AdvancedQueryExperimentsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedPublicProjects(ctx context.Context, in *FindProjects, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedPublicProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjectsByUser(ctx context.Context, in *FindHydratedProjectsByUser, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjectsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjectsByOrganization(ctx context.Context, in *FindHydratedProjectsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjectsByOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedProjectsByTeam(ctx context.Context, in *FindHydratedProjectsByTeam, opts ...grpc.CallOption) (*AdvancedQueryProjectsResponse, error) {
	out := new(AdvancedQueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedProjectsByTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasetsByOrganization(ctx context.Context, in *FindHydratedDatasetsByOrganization, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasetsByOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasetsByTeam(ctx context.Context, in *FindHydratedDatasetsByTeam, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasetsByTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedPublicDatasets(ctx context.Context, in *FindDatasets, opts ...grpc.CallOption) (*AdvancedQueryDatasetsResponse, error) {
	out := new(AdvancedQueryDatasetsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedPublicDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) FindHydratedDatasetVersions(ctx context.Context, in *FindDatasetVersions, opts ...grpc.CallOption) (*AdvancedQueryDatasetVersionsResponse, error) {
	out := new(AdvancedQueryDatasetVersionsResponse)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/findHydratedDatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedDatasetByName(ctx context.Context, in *GetHydratedDatasetByName, opts ...grpc.CallOption) (*GetHydratedDatasetByName_Response, error) {
	out := new(GetHydratedDatasetByName_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedDatasetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydratedServiceClient) GetHydratedDatasetsByProjectId(ctx context.Context, in *GetHydratedDatasetsByProjectId, opts ...grpc.CallOption) (*GetHydratedDatasetsByProjectId_Response, error) {
	out := new(GetHydratedDatasetsByProjectId_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.HydratedService/getHydratedDatasetsByProjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HydratedServiceServer is the server API for HydratedService service.
type HydratedServiceServer interface {
	GetHydratedProjects(context.Context, *GetHydratedProjects) (*GetHydratedProjects_Response, error)
	GetHydratedPublicProjects(context.Context, *GetHydratedProjects) (*GetHydratedProjects_Response, error)
	GetHydratedProjectById(context.Context, *GetHydratedProjectById) (*GetHydratedProjectById_Response, error)
	GetHydratedExperimentsByProjectId(context.Context, *GetHydratedExperimentsByProjectId) (*GetHydratedExperimentsByProjectId_Response, error)
	GetHydratedExperimentRunsInProject(context.Context, *GetHydratedExperimentRunsByProjectId) (*GetHydratedExperimentRunsByProjectId_Response, error)
	GetHydratedExperimentRunById(context.Context, *GetHydratedExperimentRunById) (*GetHydratedExperimentRunById_Response, error)
	// queries
	FindHydratedExperimentRuns(context.Context, *FindExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error)
	SortHydratedExperimentRuns(context.Context, *SortExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error)
	GetTopHydratedExperimentRuns(context.Context, *TopExperimentRunsSelector) (*AdvancedQueryExperimentRunsResponse, error)
	// queries
	FindHydratedExperiments(context.Context, *FindExperiments) (*AdvancedQueryExperimentsResponse, error)
	// queries
	FindHydratedProjects(context.Context, *FindProjects) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedPublicProjects(context.Context, *FindProjects) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByUser(context.Context, *FindHydratedProjectsByUser) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByOrganization(context.Context, *FindHydratedProjectsByOrganization) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedProjectsByTeam(context.Context, *FindHydratedProjectsByTeam) (*AdvancedQueryProjectsResponse, error)
	// queries
	FindHydratedDatasetsByOrganization(context.Context, *FindHydratedDatasetsByOrganization) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetsByTeam(context.Context, *FindHydratedDatasetsByTeam) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasets(context.Context, *FindDatasets) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedPublicDatasets(context.Context, *FindDatasets) (*AdvancedQueryDatasetsResponse, error)
	// queries
	FindHydratedDatasetVersions(context.Context, *FindDatasetVersions) (*AdvancedQueryDatasetVersionsResponse, error)
	GetHydratedDatasetByName(context.Context, *GetHydratedDatasetByName) (*GetHydratedDatasetByName_Response, error)
	GetHydratedDatasetsByProjectId(context.Context, *GetHydratedDatasetsByProjectId) (*GetHydratedDatasetsByProjectId_Response, error)
}

// UnimplementedHydratedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHydratedServiceServer struct {
}

func (*UnimplementedHydratedServiceServer) GetHydratedProjects(context.Context, *GetHydratedProjects) (*GetHydratedProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedPublicProjects(context.Context, *GetHydratedProjects) (*GetHydratedProjects_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedPublicProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedProjectById(context.Context, *GetHydratedProjectById) (*GetHydratedProjectById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedProjectById not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedExperimentsByProjectId(context.Context, *GetHydratedExperimentsByProjectId) (*GetHydratedExperimentsByProjectId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedExperimentsByProjectId not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedExperimentRunsInProject(context.Context, *GetHydratedExperimentRunsByProjectId) (*GetHydratedExperimentRunsByProjectId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedExperimentRunsInProject not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedExperimentRunById(context.Context, *GetHydratedExperimentRunById) (*GetHydratedExperimentRunById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedExperimentRunById not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedExperimentRuns(context.Context, *FindExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedExperimentRuns not implemented")
}
func (*UnimplementedHydratedServiceServer) SortHydratedExperimentRuns(context.Context, *SortExperimentRuns) (*AdvancedQueryExperimentRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortHydratedExperimentRuns not implemented")
}
func (*UnimplementedHydratedServiceServer) GetTopHydratedExperimentRuns(context.Context, *TopExperimentRunsSelector) (*AdvancedQueryExperimentRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopHydratedExperimentRuns not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedExperiments(context.Context, *FindExperiments) (*AdvancedQueryExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedExperiments not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjects(context.Context, *FindProjects) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedPublicProjects(context.Context, *FindProjects) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedPublicProjects not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjectsByUser(context.Context, *FindHydratedProjectsByUser) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjectsByUser not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjectsByOrganization(context.Context, *FindHydratedProjectsByOrganization) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjectsByOrganization not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedProjectsByTeam(context.Context, *FindHydratedProjectsByTeam) (*AdvancedQueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedProjectsByTeam not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasetsByOrganization(context.Context, *FindHydratedDatasetsByOrganization) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasetsByOrganization not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasetsByTeam(context.Context, *FindHydratedDatasetsByTeam) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasetsByTeam not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasets(context.Context, *FindDatasets) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasets not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedPublicDatasets(context.Context, *FindDatasets) (*AdvancedQueryDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedPublicDatasets not implemented")
}
func (*UnimplementedHydratedServiceServer) FindHydratedDatasetVersions(context.Context, *FindDatasetVersions) (*AdvancedQueryDatasetVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHydratedDatasetVersions not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedDatasetByName(context.Context, *GetHydratedDatasetByName) (*GetHydratedDatasetByName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedDatasetByName not implemented")
}
func (*UnimplementedHydratedServiceServer) GetHydratedDatasetsByProjectId(context.Context, *GetHydratedDatasetsByProjectId) (*GetHydratedDatasetsByProjectId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedDatasetsByProjectId not implemented")
}

func RegisterHydratedServiceServer(s *grpc.Server, srv HydratedServiceServer) {
	s.RegisterService(&_HydratedService_serviceDesc, srv)
}

func _HydratedService_GetHydratedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedProjects(ctx, req.(*GetHydratedProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedPublicProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedPublicProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedPublicProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedPublicProjects(ctx, req.(*GetHydratedProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedProjectById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedProjectById(ctx, req.(*GetHydratedProjectById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedExperimentsByProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedExperimentsByProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedExperimentsByProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedExperimentsByProjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedExperimentsByProjectId(ctx, req.(*GetHydratedExperimentsByProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedExperimentRunsInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedExperimentRunsByProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunsInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedExperimentRunsInProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunsInProject(ctx, req.(*GetHydratedExperimentRunsByProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedExperimentRunById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedExperimentRunById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedExperimentRunById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedExperimentRunById(ctx, req.(*GetHydratedExperimentRunById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedExperimentRuns(ctx, req.(*FindExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_SortHydratedExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortExperimentRuns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).SortHydratedExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/SortHydratedExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).SortHydratedExperimentRuns(ctx, req.(*SortExperimentRuns))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetTopHydratedExperimentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopExperimentRunsSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetTopHydratedExperimentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetTopHydratedExperimentRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetTopHydratedExperimentRuns(ctx, req.(*TopExperimentRunsSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExperiments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedExperiments(ctx, req.(*FindExperiments))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjects(ctx, req.(*FindProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedPublicProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedPublicProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedPublicProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedPublicProjects(ctx, req.(*FindProjects))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjectsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedProjectsByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjectsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjectsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjectsByUser(ctx, req.(*FindHydratedProjectsByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjectsByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedProjectsByOrganization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjectsByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjectsByOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjectsByOrganization(ctx, req.(*FindHydratedProjectsByOrganization))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedProjectsByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedProjectsByTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedProjectsByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedProjectsByTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedProjectsByTeam(ctx, req.(*FindHydratedProjectsByTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasetsByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedDatasetsByOrganization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasetsByOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByOrganization(ctx, req.(*FindHydratedDatasetsByOrganization))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasetsByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHydratedDatasetsByTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasetsByTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasetsByTeam(ctx, req.(*FindHydratedDatasetsByTeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasets(ctx, req.(*FindDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedPublicDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedPublicDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedPublicDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedPublicDatasets(ctx, req.(*FindDatasets))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_FindHydratedDatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDatasetVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).FindHydratedDatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/FindHydratedDatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).FindHydratedDatasetVersions(ctx, req.(*FindDatasetVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedDatasetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedDatasetByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedDatasetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedDatasetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedDatasetByName(ctx, req.(*GetHydratedDatasetByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydratedService_GetHydratedDatasetsByProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedDatasetsByProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydratedServiceServer).GetHydratedDatasetsByProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.HydratedService/GetHydratedDatasetsByProjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydratedServiceServer).GetHydratedDatasetsByProjectId(ctx, req.(*GetHydratedDatasetsByProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

var _HydratedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.HydratedService",
	HandlerType: (*HydratedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getHydratedProjects",
			Handler:    _HydratedService_GetHydratedProjects_Handler,
		},
		{
			MethodName: "getHydratedPublicProjects",
			Handler:    _HydratedService_GetHydratedPublicProjects_Handler,
		},
		{
			MethodName: "getHydratedProjectById",
			Handler:    _HydratedService_GetHydratedProjectById_Handler,
		},
		{
			MethodName: "getHydratedExperimentsByProjectId",
			Handler:    _HydratedService_GetHydratedExperimentsByProjectId_Handler,
		},
		{
			MethodName: "getHydratedExperimentRunsInProject",
			Handler:    _HydratedService_GetHydratedExperimentRunsInProject_Handler,
		},
		{
			MethodName: "getHydratedExperimentRunById",
			Handler:    _HydratedService_GetHydratedExperimentRunById_Handler,
		},
		{
			MethodName: "findHydratedExperimentRuns",
			Handler:    _HydratedService_FindHydratedExperimentRuns_Handler,
		},
		{
			MethodName: "sortHydratedExperimentRuns",
			Handler:    _HydratedService_SortHydratedExperimentRuns_Handler,
		},
		{
			MethodName: "getTopHydratedExperimentRuns",
			Handler:    _HydratedService_GetTopHydratedExperimentRuns_Handler,
		},
		{
			MethodName: "findHydratedExperiments",
			Handler:    _HydratedService_FindHydratedExperiments_Handler,
		},
		{
			MethodName: "findHydratedProjects",
			Handler:    _HydratedService_FindHydratedProjects_Handler,
		},
		{
			MethodName: "findHydratedPublicProjects",
			Handler:    _HydratedService_FindHydratedPublicProjects_Handler,
		},
		{
			MethodName: "findHydratedProjectsByUser",
			Handler:    _HydratedService_FindHydratedProjectsByUser_Handler,
		},
		{
			MethodName: "findHydratedProjectsByOrganization",
			Handler:    _HydratedService_FindHydratedProjectsByOrganization_Handler,
		},
		{
			MethodName: "findHydratedProjectsByTeam",
			Handler:    _HydratedService_FindHydratedProjectsByTeam_Handler,
		},
		{
			MethodName: "findHydratedDatasetsByOrganization",
			Handler:    _HydratedService_FindHydratedDatasetsByOrganization_Handler,
		},
		{
			MethodName: "findHydratedDatasetsByTeam",
			Handler:    _HydratedService_FindHydratedDatasetsByTeam_Handler,
		},
		{
			MethodName: "findHydratedDatasets",
			Handler:    _HydratedService_FindHydratedDatasets_Handler,
		},
		{
			MethodName: "findHydratedPublicDatasets",
			Handler:    _HydratedService_FindHydratedPublicDatasets_Handler,
		},
		{
			MethodName: "findHydratedDatasetVersions",
			Handler:    _HydratedService_FindHydratedDatasetVersions_Handler,
		},
		{
			MethodName: "getHydratedDatasetByName",
			Handler:    _HydratedService_GetHydratedDatasetByName_Handler,
		},
		{
			MethodName: "getHydratedDatasetsByProjectId",
			Handler:    _HydratedService_GetHydratedDatasetsByProjectId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/HydratedService.proto",
}
