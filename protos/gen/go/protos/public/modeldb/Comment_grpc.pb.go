// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: modeldb/Comment.proto

package modeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	AddExperimentRunComment(ctx context.Context, in *AddComment, opts ...grpc.CallOption) (*AddComment_Response, error)
	UpdateExperimentRunComment(ctx context.Context, in *UpdateComment, opts ...grpc.CallOption) (*UpdateComment_Response, error)
	GetExperimentRunComments(ctx context.Context, in *GetComments, opts ...grpc.CallOption) (*GetComments_Response, error)
	DeleteExperimentRunComment(ctx context.Context, in *DeleteComment, opts ...grpc.CallOption) (*DeleteComment_Response, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) AddExperimentRunComment(ctx context.Context, in *AddComment, opts ...grpc.CallOption) (*AddComment_Response, error) {
	out := new(AddComment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.CommentService/addExperimentRunComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateExperimentRunComment(ctx context.Context, in *UpdateComment, opts ...grpc.CallOption) (*UpdateComment_Response, error) {
	out := new(UpdateComment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.CommentService/updateExperimentRunComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetExperimentRunComments(ctx context.Context, in *GetComments, opts ...grpc.CallOption) (*GetComments_Response, error) {
	out := new(GetComments_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.CommentService/getExperimentRunComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteExperimentRunComment(ctx context.Context, in *DeleteComment, opts ...grpc.CallOption) (*DeleteComment_Response, error) {
	out := new(DeleteComment_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.modeldb.CommentService/deleteExperimentRunComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	AddExperimentRunComment(context.Context, *AddComment) (*AddComment_Response, error)
	UpdateExperimentRunComment(context.Context, *UpdateComment) (*UpdateComment_Response, error)
	GetExperimentRunComments(context.Context, *GetComments) (*GetComments_Response, error)
	DeleteExperimentRunComment(context.Context, *DeleteComment) (*DeleteComment_Response, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) AddExperimentRunComment(context.Context, *AddComment) (*AddComment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperimentRunComment not implemented")
}
func (UnimplementedCommentServiceServer) UpdateExperimentRunComment(context.Context, *UpdateComment) (*UpdateComment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperimentRunComment not implemented")
}
func (UnimplementedCommentServiceServer) GetExperimentRunComments(context.Context, *GetComments) (*GetComments_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentRunComments not implemented")
}
func (UnimplementedCommentServiceServer) DeleteExperimentRunComment(context.Context, *DeleteComment) (*DeleteComment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentRunComment not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_AddExperimentRunComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).AddExperimentRunComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.CommentService/addExperimentRunComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).AddExperimentRunComment(ctx, req.(*AddComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateExperimentRunComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateExperimentRunComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.CommentService/updateExperimentRunComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateExperimentRunComment(ctx, req.(*UpdateComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetExperimentRunComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetExperimentRunComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.CommentService/getExperimentRunComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetExperimentRunComments(ctx, req.(*GetComments))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteExperimentRunComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteExperimentRunComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.modeldb.CommentService/deleteExperimentRunComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteExperimentRunComment(ctx, req.(*DeleteComment))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.modeldb.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addExperimentRunComment",
			Handler:    _CommentService_AddExperimentRunComment_Handler,
		},
		{
			MethodName: "updateExperimentRunComment",
			Handler:    _CommentService_UpdateExperimentRunComment_Handler,
		},
		{
			MethodName: "getExperimentRunComments",
			Handler:    _CommentService_GetExperimentRunComments_Handler,
		},
		{
			MethodName: "deleteExperimentRunComment",
			Handler:    _CommentService_DeleteExperimentRunComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modeldb/Comment.proto",
}
