// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: artifactstore/ArtifactStore.proto

package artifactstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtifactStoreClient is the client API for ArtifactStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactStoreClient interface {
	StoreArtifact(ctx context.Context, in *StoreArtifact, opts ...grpc.CallOption) (*StoreArtifact_Response, error)
	StoreArtifactWithStream(ctx context.Context, in *StoreArtifactWithStream, opts ...grpc.CallOption) (*StoreArtifactWithStream_Response, error)
	GetArtifact(ctx context.Context, in *GetArtifact, opts ...grpc.CallOption) (*GetArtifact_Response, error)
	DeleteArtifact(ctx context.Context, in *DeleteArtifact, opts ...grpc.CallOption) (*DeleteArtifact_Response, error)
}

type artifactStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactStoreClient(cc grpc.ClientConnInterface) ArtifactStoreClient {
	return &artifactStoreClient{cc}
}

func (c *artifactStoreClient) StoreArtifact(ctx context.Context, in *StoreArtifact, opts ...grpc.CallOption) (*StoreArtifact_Response, error) {
	out := new(StoreArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.artifactstore.ArtifactStore/storeArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactStoreClient) StoreArtifactWithStream(ctx context.Context, in *StoreArtifactWithStream, opts ...grpc.CallOption) (*StoreArtifactWithStream_Response, error) {
	out := new(StoreArtifactWithStream_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.artifactstore.ArtifactStore/storeArtifactWithStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactStoreClient) GetArtifact(ctx context.Context, in *GetArtifact, opts ...grpc.CallOption) (*GetArtifact_Response, error) {
	out := new(GetArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.artifactstore.ArtifactStore/getArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactStoreClient) DeleteArtifact(ctx context.Context, in *DeleteArtifact, opts ...grpc.CallOption) (*DeleteArtifact_Response, error) {
	out := new(DeleteArtifact_Response)
	err := c.cc.Invoke(ctx, "/ai.verta.artifactstore.ArtifactStore/deleteArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactStoreServer is the server API for ArtifactStore service.
// All implementations must embed UnimplementedArtifactStoreServer
// for forward compatibility
type ArtifactStoreServer interface {
	StoreArtifact(context.Context, *StoreArtifact) (*StoreArtifact_Response, error)
	StoreArtifactWithStream(context.Context, *StoreArtifactWithStream) (*StoreArtifactWithStream_Response, error)
	GetArtifact(context.Context, *GetArtifact) (*GetArtifact_Response, error)
	DeleteArtifact(context.Context, *DeleteArtifact) (*DeleteArtifact_Response, error)
	mustEmbedUnimplementedArtifactStoreServer()
}

// UnimplementedArtifactStoreServer must be embedded to have forward compatible implementations.
type UnimplementedArtifactStoreServer struct {
}

func (UnimplementedArtifactStoreServer) StoreArtifact(context.Context, *StoreArtifact) (*StoreArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreArtifact not implemented")
}
func (UnimplementedArtifactStoreServer) StoreArtifactWithStream(context.Context, *StoreArtifactWithStream) (*StoreArtifactWithStream_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreArtifactWithStream not implemented")
}
func (UnimplementedArtifactStoreServer) GetArtifact(context.Context, *GetArtifact) (*GetArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedArtifactStoreServer) DeleteArtifact(context.Context, *DeleteArtifact) (*DeleteArtifact_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (UnimplementedArtifactStoreServer) mustEmbedUnimplementedArtifactStoreServer() {}

// UnsafeArtifactStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactStoreServer will
// result in compilation errors.
type UnsafeArtifactStoreServer interface {
	mustEmbedUnimplementedArtifactStoreServer()
}

func RegisterArtifactStoreServer(s grpc.ServiceRegistrar, srv ArtifactStoreServer) {
	s.RegisterService(&ArtifactStore_ServiceDesc, srv)
}

func _ArtifactStore_StoreArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactStoreServer).StoreArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.artifactstore.ArtifactStore/storeArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactStoreServer).StoreArtifact(ctx, req.(*StoreArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactStore_StoreArtifactWithStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreArtifactWithStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactStoreServer).StoreArtifactWithStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.artifactstore.ArtifactStore/storeArtifactWithStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactStoreServer).StoreArtifactWithStream(ctx, req.(*StoreArtifactWithStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactStore_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactStoreServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.artifactstore.ArtifactStore/getArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactStoreServer).GetArtifact(ctx, req.(*GetArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactStore_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtifact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactStoreServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.verta.artifactstore.ArtifactStore/deleteArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactStoreServer).DeleteArtifact(ctx, req.(*DeleteArtifact))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactStore_ServiceDesc is the grpc.ServiceDesc for ArtifactStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.verta.artifactstore.ArtifactStore",
	HandlerType: (*ArtifactStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "storeArtifact",
			Handler:    _ArtifactStore_StoreArtifact_Handler,
		},
		{
			MethodName: "storeArtifactWithStream",
			Handler:    _ArtifactStore_StoreArtifactWithStream_Handler,
		},
		{
			MethodName: "getArtifact",
			Handler:    _ArtifactStore_GetArtifact_Handler,
		},
		{
			MethodName: "deleteArtifact",
			Handler:    _ArtifactStore_DeleteArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifactstore/ArtifactStore.proto",
}
