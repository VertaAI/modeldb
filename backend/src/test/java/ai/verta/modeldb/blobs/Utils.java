package ai.verta.modeldb.blobs;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import ai.verta.modeldb.versioning.blob.diff.ProtoType;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;

public class Utils {
  public static <T extends ProtoType> T enforceOneof(T b) throws ModelDBException {
    Visitor v =
        new Visitor() {
          @Override
          public Blob postVisitBlob(Blob blob) throws ModelDBException {
            if (blob == null) return null;
            Blob other = new Blob();
            if (blob.getDataset() != null) return other.setDataset(blob.getDataset());
            if (blob.getConfig() != null) return other.setConfig(blob.getConfig());
            if (blob.getCode() != null) return other.setCode(blob.getCode());
            if (blob.getEnvironment() != null) return other.setEnvironment(blob.getEnvironment());
            return super.postVisitBlob(blob);
          }

          @Override
          public BlobDiff postVisitBlobDiff(BlobDiff blob) throws ModelDBException {
            if (blob == null) return null;
            BlobDiff other = new BlobDiff();
            if (blob.getDataset() != null) return other.setDataset(blob.getDataset());
            if (blob.getConfig() != null) return other.setConfig(blob.getConfig());
            if (blob.getCode() != null) return other.setCode(blob.getCode());
            if (blob.getEnvironment() != null) return other.setEnvironment(blob.getEnvironment());
            return super.postVisitBlobDiff(blob);
          }

          @Override
          public DatasetBlob postVisitDatasetBlob(DatasetBlob blob) throws ModelDBException {
            if (blob == null) return null;
            DatasetBlob other = new DatasetBlob();
            if (blob.getPath() != null) return other.setPath(blob.getPath());
            if (blob.getS3() != null) return other.setS3(blob.getS3());
            return super.postVisitDatasetBlob(blob);
          }

          @Override
          public DatasetDiff postVisitDatasetDiff(DatasetDiff blob) throws ModelDBException {
            if (blob == null) return null;
            DatasetDiff other = new DatasetDiff();
            if (blob.getPath() != null) return other.setPath(blob.getPath());
            if (blob.getS3() != null) return other.setS3(blob.getS3());
            return super.postVisitDatasetDiff(blob);
          }

          @Override
          public EnvironmentBlob postVisitEnvironmentBlob(EnvironmentBlob blob)
              throws ModelDBException {
            if (blob == null) return null;
            EnvironmentBlob other =
                new EnvironmentBlob()
                    .setCommandLine(blob.getCommandLine())
                    .setEnvironmentVariables(blob.getEnvironmentVariables());
            if (blob.getPython() != null) return other.setPython(blob.getPython());
            if (blob.getDocker() != null) return other.setDocker(blob.getDocker());
            return super.postVisitEnvironmentBlob(blob);
          }

          @Override
          public EnvironmentDiff postVisitEnvironmentDiff(EnvironmentDiff blob)
              throws ModelDBException {
            if (blob == null) return null;
            EnvironmentDiff other =
                new EnvironmentDiff()
                    .setCommandLine(blob.getCommandLine())
                    .setEnvironmentVariables(blob.getEnvironmentVariables());
            if (blob.getPython() != null) return other.setPython(blob.getPython());
            if (blob.getDocker() != null) return other.setDocker(blob.getDocker());
            return super.postVisitEnvironmentDiff(blob);
          }

          @Override
          public CodeBlob postVisitCodeBlob(CodeBlob blob) throws ModelDBException {
            if (blob == null) return null;
            CodeBlob other = new CodeBlob();
            if (blob.getNotebook() != null) return other.setNotebook(blob.getNotebook());
            if (blob.getGit() != null) return other.setGit(blob.getGit());
            return super.postVisitCodeBlob(blob);
          }

          @Override
          public CodeDiff postVisitCodeDiff(CodeDiff blob) throws ModelDBException {
            if (blob == null) return null;
            CodeDiff other = new CodeDiff();
            if (blob.getNotebook() != null) return other.setNotebook(blob.getNotebook());
            if (blob.getGit() != null) return other.setGit(blob.getGit());
            return super.postVisitCodeDiff(blob);
          }

          @Override
          public HyperparameterValuesConfigBlob postVisitHyperparameterValuesConfigBlob(
              HyperparameterValuesConfigBlob blob) throws ModelDBException {
            if (blob == null) return null;
            HyperparameterValuesConfigBlob other = new HyperparameterValuesConfigBlob();
            if (blob.getFloatValue() != null) return other.setFloatValue(blob.getFloatValue());
            if (blob.getIntValue() != null) return other.setIntValue(blob.getIntValue());
            if (blob.getStringValue() != null) return other.setStringValue(blob.getStringValue());
            return super.postVisitHyperparameterValuesConfigBlob(blob);
          }

          @Override
          public HyperparameterSetConfigBlob postVisitHyperparameterSetConfigBlob(
              HyperparameterSetConfigBlob blob) throws ModelDBException {
            if (blob == null) return null;
            HyperparameterSetConfigBlob other =
                new HyperparameterSetConfigBlob().setName(blob.getName());
            if (blob.getDiscrete() != null) return other.setDiscrete(blob.getDiscrete());
            if (blob.getContinuous() != null) return other.setContinuous(blob.getContinuous());
            return super.postVisitHyperparameterSetConfigBlob(blob);
          }
        };

    return v.genericPostVisitDeep(b);
  }
}
