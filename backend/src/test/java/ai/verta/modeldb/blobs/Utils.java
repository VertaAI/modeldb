package ai.verta.modeldb.blobs;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import ai.verta.modeldb.versioning.blob.diff.ProtoType;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;

public class Utils {
  public static <T extends ProtoType> T enforceOneof(T b) throws ModelDBException {
    Visitor v =
        new Visitor() {
          @Override
          public AutogenBlob postVisitAutogenBlob(AutogenBlob blob) throws ModelDBException {
            if (blob == null) return null;
            AutogenBlob other = new AutogenBlob();
            if (blob.getDataset() != null) return other.setDataset(blob.getDataset());
            if (blob.getConfig() != null) return other.setConfig(blob.getConfig());
            if (blob.getCode() != null) return other.setCode(blob.getCode());
            if (blob.getEnvironment() != null) return other.setEnvironment(blob.getEnvironment());
            return super.postVisitAutogenBlob(blob);
          }

          @Override
          public AutogenBlobDiff postVisitAutogenBlobDiff(AutogenBlobDiff blob)
              throws ModelDBException {
            if (blob == null) return null;
            AutogenBlobDiff other = new AutogenBlobDiff();
            if (blob.getDataset() != null) return other.setDataset(blob.getDataset());
            if (blob.getConfig() != null) return other.setConfig(blob.getConfig());
            if (blob.getCode() != null) return other.setCode(blob.getCode());
            if (blob.getEnvironment() != null) return other.setEnvironment(blob.getEnvironment());
            return super.postVisitAutogenBlobDiff(blob);
          }

          @Override
          public AutogenDatasetBlob postVisitAutogenDatasetBlob(AutogenDatasetBlob blob)
              throws ModelDBException {
            if (blob == null) return null;
            AutogenDatasetBlob other = new AutogenDatasetBlob();
            if (blob.getPath() != null) return other.setPath(blob.getPath());
            if (blob.getS3() != null) return other.setS3(blob.getS3());
            return super.postVisitAutogenDatasetBlob(blob);
          }

          @Override
          public AutogenDatasetDiff postVisitAutogenDatasetDiff(AutogenDatasetDiff blob)
              throws ModelDBException {
            if (blob == null) return null;
            AutogenDatasetDiff other = new AutogenDatasetDiff();
            if (blob.getPath() != null) return other.setPath(blob.getPath());
            if (blob.getS3() != null) return other.setS3(blob.getS3());
            return super.postVisitAutogenDatasetDiff(blob);
          }

          @Override
          public AutogenEnvironmentBlob postVisitAutogenEnvironmentBlob(AutogenEnvironmentBlob blob)
              throws ModelDBException {
            if (blob == null) return null;
            AutogenEnvironmentBlob other =
                new AutogenEnvironmentBlob()
                    .setCommandLine(blob.getCommandLine())
                    .setEnvironmentVariables(blob.getEnvironmentVariables());
            if (blob.getPython() != null) return other.setPython(blob.getPython());
            if (blob.getDocker() != null) return other.setDocker(blob.getDocker());
            return super.postVisitAutogenEnvironmentBlob(blob);
          }

          @Override
          public AutogenEnvironmentDiff postVisitAutogenEnvironmentDiff(AutogenEnvironmentDiff blob)
              throws ModelDBException {
            if (blob == null) return null;
            AutogenEnvironmentDiff other =
                new AutogenEnvironmentDiff()
                    .setCommandLine(blob.getCommandLine())
                    .setEnvironmentVariables(blob.getEnvironmentVariables());
            if (blob.getPython() != null) return other.setPython(blob.getPython());
            if (blob.getDocker() != null) return other.setDocker(blob.getDocker());
            return super.postVisitAutogenEnvironmentDiff(blob);
          }

          @Override
          public AutogenCodeBlob postVisitAutogenCodeBlob(AutogenCodeBlob blob)
              throws ModelDBException {
            if (blob == null) return null;
            AutogenCodeBlob other = new AutogenCodeBlob();
            if (blob.getNotebook() != null) return other.setNotebook(blob.getNotebook());
            if (blob.getGit() != null) return other.setGit(blob.getGit());
            return super.postVisitAutogenCodeBlob(blob);
          }

          @Override
          public AutogenCodeDiff postVisitAutogenCodeDiff(AutogenCodeDiff blob)
              throws ModelDBException {
            if (blob == null) return null;
            AutogenCodeDiff other = new AutogenCodeDiff();
            if (blob.getNotebook() != null) return other.setNotebook(blob.getNotebook());
            if (blob.getGit() != null) return other.setGit(blob.getGit());
            return super.postVisitAutogenCodeDiff(blob);
          }

          @Override
          public AutogenHyperparameterValuesConfigBlob
              postVisitAutogenHyperparameterValuesConfigBlob(
                  AutogenHyperparameterValuesConfigBlob blob) throws ModelDBException {
            if (blob == null) return null;
            AutogenHyperparameterValuesConfigBlob other =
                new AutogenHyperparameterValuesConfigBlob();
            if (blob.getFloatValue() != null) return other.setFloatValue(blob.getFloatValue());
            if (blob.getIntValue() != null) return other.setIntValue(blob.getIntValue());
            if (blob.getStringValue() != null) return other.setStringValue(blob.getStringValue());
            return super.postVisitAutogenHyperparameterValuesConfigBlob(blob);
          }

          @Override
          public AutogenHyperparameterSetConfigBlob postVisitAutogenHyperparameterSetConfigBlob(
              AutogenHyperparameterSetConfigBlob blob) throws ModelDBException {
            if (blob == null) return null;
            AutogenHyperparameterSetConfigBlob other =
                new AutogenHyperparameterSetConfigBlob().setName(blob.getName());
            if (blob.getDiscrete() != null) return other.setDiscrete(blob.getDiscrete());
            if (blob.getContinuous() != null) return other.setContinuous(blob.getContinuous());
            return super.postVisitAutogenHyperparameterSetConfigBlob(blob);
          }
        };

    return v.genericPostVisitDeep(b);
  }
}
