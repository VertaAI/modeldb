package ai.verta.modeldb.blobs;

import static ai.verta.modeldb.blobs.Utils.enforceOneof;
import static org.junit.Assert.*;
import static org.junit.Assume.*;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import com.pholser.junit.quickcheck.Property;
import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
import org.junit.runner.RunWith;

@RunWith(JUnitQuickcheck.class)
public class SelfDiff {
  @Property
  public void SelfDiff(Blob a) throws ModelDBException {
    Blob newA = Utils.sortLists(enforceOneof(a));
    BlobDiff d = DiffComputer.computeBlobDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffCode(CodeBlob a) throws ModelDBException {
    CodeBlob newA = Utils.sortLists(enforceOneof(a));
    CodeDiff d = DiffComputer.computeCodeDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffConfig(ConfigBlob a) throws ModelDBException {
    ConfigBlob newA = Utils.sortLists(enforceOneof(a));
    ConfigDiff d = DiffComputer.computeConfigDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffDataset(DatasetBlob a) throws ModelDBException {
    DatasetBlob newA = Utils.sortLists(enforceOneof(a));
    DatasetDiff d = DiffComputer.computeDatasetDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffDockerEnvironment(DockerEnvironmentBlob a) throws ModelDBException {
    DockerEnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
    DockerEnvironmentDiff d = DiffComputer.computeDockerEnvironmentDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffEnvironment(EnvironmentBlob a) throws ModelDBException {
    EnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
    EnvironmentDiff d = DiffComputer.computeEnvironmentDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffGitCode(GitCodeBlob a) throws ModelDBException {
    GitCodeBlob newA = Utils.sortLists(enforceOneof(a));
    GitCodeDiff d = DiffComputer.computeGitCodeDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffNotebookCode(NotebookCodeBlob a) throws ModelDBException {
    NotebookCodeBlob newA = Utils.sortLists(enforceOneof(a));
    NotebookCodeDiff d = DiffComputer.computeNotebookCodeDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffPathDataset(PathDatasetBlob a) throws ModelDBException {
    PathDatasetBlob newA = Utils.sortLists(enforceOneof(a));
    PathDatasetDiff d = DiffComputer.computePathDatasetDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffPythonEnvironment(PythonEnvironmentBlob a) throws ModelDBException {
    PythonEnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
    PythonEnvironmentDiff d = DiffComputer.computePythonEnvironmentDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffS3Dataset(S3DatasetBlob a) throws ModelDBException {
    S3DatasetBlob newA = Utils.sortLists(enforceOneof(a));
    S3DatasetDiff d = DiffComputer.computeS3DatasetDiff(newA, newA);
    assertNull(d);
  }

  @Property
  public void SelfDiffVersionEnvironment(VersionEnvironmentBlob a) throws ModelDBException {
    VersionEnvironmentBlob newA = Utils.sortLists(enforceOneof(a));
    VersionEnvironmentDiff d = DiffComputer.computeVersionEnvironmentDiff(newA, newA);
    assertNull(d);
  }
}
