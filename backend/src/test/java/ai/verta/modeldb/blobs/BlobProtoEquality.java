package ai.verta.modeldb.blobs;

import static ai.verta.modeldb.blobs.Utils.enforceOneof;
import static org.junit.Assert.*;
import static org.junit.Assume.*;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import com.pholser.junit.quickcheck.Property;
import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
import org.junit.runner.RunWith;

@RunWith(JUnitQuickcheck.class)
public class BlobProtoEquality {
  @Property
  public void protoEquality(Blob b) throws ModelDBException {
    Blob newb = enforceOneof(b);
    Blob other = newb == null ? null : Blob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(BlobDiff b) throws ModelDBException {
    BlobDiff newb = enforceOneof(b);
    BlobDiff other = newb == null ? null : BlobDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(CodeBlob b) throws ModelDBException {
    CodeBlob newb = enforceOneof(b);
    CodeBlob other = newb == null ? null : CodeBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(CodeDiff b) throws ModelDBException {
    CodeDiff newb = enforceOneof(b);
    CodeDiff other = newb == null ? null : CodeDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(CommandLineEnvironmentDiff b) throws ModelDBException {
    CommandLineEnvironmentDiff newb = enforceOneof(b);
    CommandLineEnvironmentDiff other =
        newb == null ? null : CommandLineEnvironmentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(ConfigBlob b) throws ModelDBException {
    ConfigBlob newb = enforceOneof(b);
    ConfigBlob other = newb == null ? null : ConfigBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(ConfigDiff b) throws ModelDBException {
    ConfigDiff newb = enforceOneof(b);
    ConfigDiff other = newb == null ? null : ConfigDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(ContinuousHyperparameterSetConfigBlob b) throws ModelDBException {
    ContinuousHyperparameterSetConfigBlob newb = enforceOneof(b);
    ContinuousHyperparameterSetConfigBlob other =
        newb == null
            ? null
            : ContinuousHyperparameterSetConfigBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(DatasetBlob b) throws ModelDBException {
    DatasetBlob newb = enforceOneof(b);
    DatasetBlob other = newb == null ? null : DatasetBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(DatasetDiff b) throws ModelDBException {
    DatasetDiff newb = enforceOneof(b);
    DatasetDiff other = newb == null ? null : DatasetDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(DiscreteHyperparameterSetConfigBlob b) throws ModelDBException {
    DiscreteHyperparameterSetConfigBlob newb = enforceOneof(b);
    DiscreteHyperparameterSetConfigBlob other =
        newb == null ? null : DiscreteHyperparameterSetConfigBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(DockerEnvironmentBlob b) throws ModelDBException {
    DockerEnvironmentBlob newb = enforceOneof(b);
    DockerEnvironmentBlob other =
        newb == null ? null : DockerEnvironmentBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(DockerEnvironmentDiff b) throws ModelDBException {
    DockerEnvironmentDiff newb = enforceOneof(b);
    DockerEnvironmentDiff other =
        newb == null ? null : DockerEnvironmentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(EnvironmentBlob b) throws ModelDBException {
    EnvironmentBlob newb = enforceOneof(b);
    EnvironmentBlob other = newb == null ? null : EnvironmentBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(EnvironmentDiff b) throws ModelDBException {
    EnvironmentDiff newb = enforceOneof(b);
    EnvironmentDiff other = newb == null ? null : EnvironmentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(EnvironmentVariablesBlob b) throws ModelDBException {
    EnvironmentVariablesBlob newb = enforceOneof(b);
    EnvironmentVariablesBlob other =
        newb == null ? null : EnvironmentVariablesBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(EnvironmentVariablesDiff b) throws ModelDBException {
    EnvironmentVariablesDiff newb = enforceOneof(b);
    EnvironmentVariablesDiff other =
        newb == null ? null : EnvironmentVariablesDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(GitCodeBlob b) throws ModelDBException {
    GitCodeBlob newb = enforceOneof(b);
    GitCodeBlob other = newb == null ? null : GitCodeBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(GitCodeDiff b) throws ModelDBException {
    GitCodeDiff newb = enforceOneof(b);
    GitCodeDiff other = newb == null ? null : GitCodeDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(HyperparameterConfigBlob b) throws ModelDBException {
    HyperparameterConfigBlob newb = enforceOneof(b);
    HyperparameterConfigBlob other =
        newb == null ? null : HyperparameterConfigBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(HyperparameterConfigDiff b) throws ModelDBException {
    HyperparameterConfigDiff newb = enforceOneof(b);
    HyperparameterConfigDiff other =
        newb == null ? null : HyperparameterConfigDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(HyperparameterSetConfigBlob b) throws ModelDBException {
    HyperparameterSetConfigBlob newb = enforceOneof(b);
    HyperparameterSetConfigBlob other =
        newb == null ? null : HyperparameterSetConfigBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(HyperparameterSetConfigDiff b) throws ModelDBException {
    HyperparameterSetConfigDiff newb = enforceOneof(b);
    HyperparameterSetConfigDiff other =
        newb == null ? null : HyperparameterSetConfigDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(HyperparameterValuesConfigBlob b) throws ModelDBException {
    HyperparameterValuesConfigBlob newb = enforceOneof(b);
    HyperparameterValuesConfigBlob other =
        newb == null ? null : HyperparameterValuesConfigBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(NotebookCodeBlob b) throws ModelDBException {
    NotebookCodeBlob newb = enforceOneof(b);
    NotebookCodeBlob other =
        newb == null ? null : NotebookCodeBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(NotebookCodeDiff b) throws ModelDBException {
    NotebookCodeDiff newb = enforceOneof(b);
    NotebookCodeDiff other =
        newb == null ? null : NotebookCodeDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PathDatasetBlob b) throws ModelDBException {
    PathDatasetBlob newb = enforceOneof(b);
    PathDatasetBlob other = newb == null ? null : PathDatasetBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PathDatasetComponentBlob b) throws ModelDBException {
    PathDatasetComponentBlob newb = enforceOneof(b);
    PathDatasetComponentBlob other =
        newb == null ? null : PathDatasetComponentBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PathDatasetComponentDiff b) throws ModelDBException {
    PathDatasetComponentDiff newb = enforceOneof(b);
    PathDatasetComponentDiff other =
        newb == null ? null : PathDatasetComponentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PathDatasetDiff b) throws ModelDBException {
    PathDatasetDiff newb = enforceOneof(b);
    PathDatasetDiff other = newb == null ? null : PathDatasetDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PythonEnvironmentBlob b) throws ModelDBException {
    PythonEnvironmentBlob newb = enforceOneof(b);
    PythonEnvironmentBlob other =
        newb == null ? null : PythonEnvironmentBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PythonEnvironmentDiff b) throws ModelDBException {
    PythonEnvironmentDiff newb = enforceOneof(b);
    PythonEnvironmentDiff other =
        newb == null ? null : PythonEnvironmentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PythonRequirementEnvironmentBlob b) throws ModelDBException {
    PythonRequirementEnvironmentBlob newb = enforceOneof(b);
    PythonRequirementEnvironmentBlob other =
        newb == null ? null : PythonRequirementEnvironmentBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(PythonRequirementEnvironmentDiff b) throws ModelDBException {
    PythonRequirementEnvironmentDiff newb = enforceOneof(b);
    PythonRequirementEnvironmentDiff other =
        newb == null ? null : PythonRequirementEnvironmentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(S3DatasetBlob b) throws ModelDBException {
    S3DatasetBlob newb = enforceOneof(b);
    S3DatasetBlob other = newb == null ? null : S3DatasetBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(S3DatasetComponentBlob b) throws ModelDBException {
    S3DatasetComponentBlob newb = enforceOneof(b);
    S3DatasetComponentBlob other =
        newb == null ? null : S3DatasetComponentBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(S3DatasetComponentDiff b) throws ModelDBException {
    S3DatasetComponentDiff newb = enforceOneof(b);
    S3DatasetComponentDiff other =
        newb == null ? null : S3DatasetComponentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(S3DatasetDiff b) throws ModelDBException {
    S3DatasetDiff newb = enforceOneof(b);
    S3DatasetDiff other = newb == null ? null : S3DatasetDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(VersionEnvironmentBlob b) throws ModelDBException {
    VersionEnvironmentBlob newb = enforceOneof(b);
    VersionEnvironmentBlob other =
        newb == null ? null : VersionEnvironmentBlob.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }

  @Property
  public void protoEquality(VersionEnvironmentDiff b) throws ModelDBException {
    VersionEnvironmentDiff newb = enforceOneof(b);
    VersionEnvironmentDiff other =
        newb == null ? null : VersionEnvironmentDiff.fromProto(newb.toProto().build());
    assertEquals(newb, other);
  }
}
