package ai.verta.modeldb.versioning.blob.visitors;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import ai.verta.modeldb.versioning.blob.diff.Utils;
import java.util.ArrayList;
import java.util.List;

public class Visitor {
  public void preVisitListOfBlob(List<Blob> lst) throws ModelDBException {
    if (lst == null) return;
    for (Blob val : lst) {
      preVisitBlob(val);
    }
  }

  public void preVisitDeepListOfBlob(List<Blob> lst) throws ModelDBException {
    if (lst == null) return;
    for (Blob val : lst) {
      preVisitDeepBlob(val);
    }
  }

  public List<Blob> postVisitListOfBlob(List<Blob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Blob> collect = new ArrayList<>(lst.size());
    for (Blob val : lst) {
      collect.add(postVisitBlob(val));
    }
    return collect;
  }

  public List<Blob> postVisitDeepListOfBlob(List<Blob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Blob> collect = new ArrayList<>(lst.size());
    for (Blob val : lst) {
      collect.add(postVisitDeepBlob(val));
    }
    return collect;
  }

  public void preVisitBlob(Blob blob) throws ModelDBException {}

  public void preVisitDeepBlob(Blob blob) throws ModelDBException {}

  public Blob postVisitBlob(Blob blob) throws ModelDBException {
    return blob;
  }

  public Blob postVisitDeepBlob(Blob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfBlobDiff(List<BlobDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (BlobDiff val : lst) {
      preVisitBlobDiff(val);
    }
  }

  public void preVisitDeepListOfBlobDiff(List<BlobDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (BlobDiff val : lst) {
      preVisitDeepBlobDiff(val);
    }
  }

  public List<BlobDiff> postVisitListOfBlobDiff(List<BlobDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<BlobDiff> collect = new ArrayList<>(lst.size());
    for (BlobDiff val : lst) {
      collect.add(postVisitBlobDiff(val));
    }
    return collect;
  }

  public List<BlobDiff> postVisitDeepListOfBlobDiff(List<BlobDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<BlobDiff> collect = new ArrayList<>(lst.size());
    for (BlobDiff val : lst) {
      collect.add(postVisitDeepBlobDiff(val));
    }
    return collect;
  }

  public void preVisitBlobDiff(BlobDiff blob) throws ModelDBException {}

  public void preVisitDeepBlobDiff(BlobDiff blob) throws ModelDBException {}

  public BlobDiff postVisitBlobDiff(BlobDiff blob) throws ModelDBException {
    return blob;
  }

  public BlobDiff postVisitDeepBlobDiff(BlobDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfCodeBlob(List<CodeBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (CodeBlob val : lst) {
      preVisitCodeBlob(val);
    }
  }

  public void preVisitDeepListOfCodeBlob(List<CodeBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (CodeBlob val : lst) {
      preVisitDeepCodeBlob(val);
    }
  }

  public List<CodeBlob> postVisitListOfCodeBlob(List<CodeBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<CodeBlob> collect = new ArrayList<>(lst.size());
    for (CodeBlob val : lst) {
      collect.add(postVisitCodeBlob(val));
    }
    return collect;
  }

  public List<CodeBlob> postVisitDeepListOfCodeBlob(List<CodeBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<CodeBlob> collect = new ArrayList<>(lst.size());
    for (CodeBlob val : lst) {
      collect.add(postVisitDeepCodeBlob(val));
    }
    return collect;
  }

  public void preVisitCodeBlob(CodeBlob blob) throws ModelDBException {}

  public void preVisitDeepCodeBlob(CodeBlob blob) throws ModelDBException {}

  public CodeBlob postVisitCodeBlob(CodeBlob blob) throws ModelDBException {
    return blob;
  }

  public CodeBlob postVisitDeepCodeBlob(CodeBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfCodeDiff(List<CodeDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (CodeDiff val : lst) {
      preVisitCodeDiff(val);
    }
  }

  public void preVisitDeepListOfCodeDiff(List<CodeDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (CodeDiff val : lst) {
      preVisitDeepCodeDiff(val);
    }
  }

  public List<CodeDiff> postVisitListOfCodeDiff(List<CodeDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<CodeDiff> collect = new ArrayList<>(lst.size());
    for (CodeDiff val : lst) {
      collect.add(postVisitCodeDiff(val));
    }
    return collect;
  }

  public List<CodeDiff> postVisitDeepListOfCodeDiff(List<CodeDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<CodeDiff> collect = new ArrayList<>(lst.size());
    for (CodeDiff val : lst) {
      collect.add(postVisitDeepCodeDiff(val));
    }
    return collect;
  }

  public void preVisitCodeDiff(CodeDiff blob) throws ModelDBException {}

  public void preVisitDeepCodeDiff(CodeDiff blob) throws ModelDBException {}

  public CodeDiff postVisitCodeDiff(CodeDiff blob) throws ModelDBException {
    return blob;
  }

  public CodeDiff postVisitDeepCodeDiff(CodeDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfCommandLineEnvironmentDiff(List<CommandLineEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (CommandLineEnvironmentDiff val : lst) {
      preVisitCommandLineEnvironmentDiff(val);
    }
  }

  public void preVisitDeepListOfCommandLineEnvironmentDiff(List<CommandLineEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (CommandLineEnvironmentDiff val : lst) {
      preVisitDeepCommandLineEnvironmentDiff(val);
    }
  }

  public List<CommandLineEnvironmentDiff> postVisitListOfCommandLineEnvironmentDiff(
      List<CommandLineEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<CommandLineEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (CommandLineEnvironmentDiff val : lst) {
      collect.add(postVisitCommandLineEnvironmentDiff(val));
    }
    return collect;
  }

  public List<CommandLineEnvironmentDiff> postVisitDeepListOfCommandLineEnvironmentDiff(
      List<CommandLineEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<CommandLineEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (CommandLineEnvironmentDiff val : lst) {
      collect.add(postVisitDeepCommandLineEnvironmentDiff(val));
    }
    return collect;
  }

  public void preVisitCommandLineEnvironmentDiff(CommandLineEnvironmentDiff blob)
      throws ModelDBException {}

  public void preVisitDeepCommandLineEnvironmentDiff(CommandLineEnvironmentDiff blob)
      throws ModelDBException {}

  public CommandLineEnvironmentDiff postVisitCommandLineEnvironmentDiff(
      CommandLineEnvironmentDiff blob) throws ModelDBException {
    return blob;
  }

  public CommandLineEnvironmentDiff postVisitDeepCommandLineEnvironmentDiff(
      CommandLineEnvironmentDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfConfigBlob(List<ConfigBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (ConfigBlob val : lst) {
      preVisitConfigBlob(val);
    }
  }

  public void preVisitDeepListOfConfigBlob(List<ConfigBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (ConfigBlob val : lst) {
      preVisitDeepConfigBlob(val);
    }
  }

  public List<ConfigBlob> postVisitListOfConfigBlob(List<ConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<ConfigBlob> collect = new ArrayList<>(lst.size());
    for (ConfigBlob val : lst) {
      collect.add(postVisitConfigBlob(val));
    }
    return collect;
  }

  public List<ConfigBlob> postVisitDeepListOfConfigBlob(List<ConfigBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<ConfigBlob> collect = new ArrayList<>(lst.size());
    for (ConfigBlob val : lst) {
      collect.add(postVisitDeepConfigBlob(val));
    }
    return collect;
  }

  public void preVisitConfigBlob(ConfigBlob blob) throws ModelDBException {}

  public void preVisitDeepConfigBlob(ConfigBlob blob) throws ModelDBException {}

  public ConfigBlob postVisitConfigBlob(ConfigBlob blob) throws ModelDBException {
    return blob;
  }

  public ConfigBlob postVisitDeepConfigBlob(ConfigBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfConfigDiff(List<ConfigDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (ConfigDiff val : lst) {
      preVisitConfigDiff(val);
    }
  }

  public void preVisitDeepListOfConfigDiff(List<ConfigDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (ConfigDiff val : lst) {
      preVisitDeepConfigDiff(val);
    }
  }

  public List<ConfigDiff> postVisitListOfConfigDiff(List<ConfigDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<ConfigDiff> collect = new ArrayList<>(lst.size());
    for (ConfigDiff val : lst) {
      collect.add(postVisitConfigDiff(val));
    }
    return collect;
  }

  public List<ConfigDiff> postVisitDeepListOfConfigDiff(List<ConfigDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<ConfigDiff> collect = new ArrayList<>(lst.size());
    for (ConfigDiff val : lst) {
      collect.add(postVisitDeepConfigDiff(val));
    }
    return collect;
  }

  public void preVisitConfigDiff(ConfigDiff blob) throws ModelDBException {}

  public void preVisitDeepConfigDiff(ConfigDiff blob) throws ModelDBException {}

  public ConfigDiff postVisitConfigDiff(ConfigDiff blob) throws ModelDBException {
    return blob;
  }

  public ConfigDiff postVisitDeepConfigDiff(ConfigDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfContinuousHyperparameterSetConfigBlob(
      List<ContinuousHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (ContinuousHyperparameterSetConfigBlob val : lst) {
      preVisitContinuousHyperparameterSetConfigBlob(val);
    }
  }

  public void preVisitDeepListOfContinuousHyperparameterSetConfigBlob(
      List<ContinuousHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (ContinuousHyperparameterSetConfigBlob val : lst) {
      preVisitDeepContinuousHyperparameterSetConfigBlob(val);
    }
  }

  public List<ContinuousHyperparameterSetConfigBlob>
      postVisitListOfContinuousHyperparameterSetConfigBlob(
          List<ContinuousHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<ContinuousHyperparameterSetConfigBlob> collect = new ArrayList<>(lst.size());
    for (ContinuousHyperparameterSetConfigBlob val : lst) {
      collect.add(postVisitContinuousHyperparameterSetConfigBlob(val));
    }
    return collect;
  }

  public List<ContinuousHyperparameterSetConfigBlob>
      postVisitDeepListOfContinuousHyperparameterSetConfigBlob(
          List<ContinuousHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<ContinuousHyperparameterSetConfigBlob> collect = new ArrayList<>(lst.size());
    for (ContinuousHyperparameterSetConfigBlob val : lst) {
      collect.add(postVisitDeepContinuousHyperparameterSetConfigBlob(val));
    }
    return collect;
  }

  public void preVisitContinuousHyperparameterSetConfigBlob(
      ContinuousHyperparameterSetConfigBlob blob) throws ModelDBException {}

  public void preVisitDeepContinuousHyperparameterSetConfigBlob(
      ContinuousHyperparameterSetConfigBlob blob) throws ModelDBException {}

  public ContinuousHyperparameterSetConfigBlob postVisitContinuousHyperparameterSetConfigBlob(
      ContinuousHyperparameterSetConfigBlob blob) throws ModelDBException {
    return blob;
  }

  public ContinuousHyperparameterSetConfigBlob postVisitDeepContinuousHyperparameterSetConfigBlob(
      ContinuousHyperparameterSetConfigBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfDatasetBlob(List<DatasetBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (DatasetBlob val : lst) {
      preVisitDatasetBlob(val);
    }
  }

  public void preVisitDeepListOfDatasetBlob(List<DatasetBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (DatasetBlob val : lst) {
      preVisitDeepDatasetBlob(val);
    }
  }

  public List<DatasetBlob> postVisitListOfDatasetBlob(List<DatasetBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<DatasetBlob> collect = new ArrayList<>(lst.size());
    for (DatasetBlob val : lst) {
      collect.add(postVisitDatasetBlob(val));
    }
    return collect;
  }

  public List<DatasetBlob> postVisitDeepListOfDatasetBlob(List<DatasetBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<DatasetBlob> collect = new ArrayList<>(lst.size());
    for (DatasetBlob val : lst) {
      collect.add(postVisitDeepDatasetBlob(val));
    }
    return collect;
  }

  public void preVisitDatasetBlob(DatasetBlob blob) throws ModelDBException {}

  public void preVisitDeepDatasetBlob(DatasetBlob blob) throws ModelDBException {}

  public DatasetBlob postVisitDatasetBlob(DatasetBlob blob) throws ModelDBException {
    return blob;
  }

  public DatasetBlob postVisitDeepDatasetBlob(DatasetBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfDatasetDiff(List<DatasetDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (DatasetDiff val : lst) {
      preVisitDatasetDiff(val);
    }
  }

  public void preVisitDeepListOfDatasetDiff(List<DatasetDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (DatasetDiff val : lst) {
      preVisitDeepDatasetDiff(val);
    }
  }

  public List<DatasetDiff> postVisitListOfDatasetDiff(List<DatasetDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<DatasetDiff> collect = new ArrayList<>(lst.size());
    for (DatasetDiff val : lst) {
      collect.add(postVisitDatasetDiff(val));
    }
    return collect;
  }

  public List<DatasetDiff> postVisitDeepListOfDatasetDiff(List<DatasetDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<DatasetDiff> collect = new ArrayList<>(lst.size());
    for (DatasetDiff val : lst) {
      collect.add(postVisitDeepDatasetDiff(val));
    }
    return collect;
  }

  public void preVisitDatasetDiff(DatasetDiff blob) throws ModelDBException {}

  public void preVisitDeepDatasetDiff(DatasetDiff blob) throws ModelDBException {}

  public DatasetDiff postVisitDatasetDiff(DatasetDiff blob) throws ModelDBException {
    return blob;
  }

  public DatasetDiff postVisitDeepDatasetDiff(DatasetDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfDiscreteHyperparameterSetConfigBlob(
      List<DiscreteHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (DiscreteHyperparameterSetConfigBlob val : lst) {
      preVisitDiscreteHyperparameterSetConfigBlob(val);
    }
  }

  public void preVisitDeepListOfDiscreteHyperparameterSetConfigBlob(
      List<DiscreteHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (DiscreteHyperparameterSetConfigBlob val : lst) {
      preVisitDeepDiscreteHyperparameterSetConfigBlob(val);
    }
  }

  public List<DiscreteHyperparameterSetConfigBlob>
      postVisitListOfDiscreteHyperparameterSetConfigBlob(
          List<DiscreteHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DiscreteHyperparameterSetConfigBlob> collect = new ArrayList<>(lst.size());
    for (DiscreteHyperparameterSetConfigBlob val : lst) {
      collect.add(postVisitDiscreteHyperparameterSetConfigBlob(val));
    }
    return collect;
  }

  public List<DiscreteHyperparameterSetConfigBlob>
      postVisitDeepListOfDiscreteHyperparameterSetConfigBlob(
          List<DiscreteHyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DiscreteHyperparameterSetConfigBlob> collect = new ArrayList<>(lst.size());
    for (DiscreteHyperparameterSetConfigBlob val : lst) {
      collect.add(postVisitDeepDiscreteHyperparameterSetConfigBlob(val));
    }
    return collect;
  }

  public void preVisitDiscreteHyperparameterSetConfigBlob(DiscreteHyperparameterSetConfigBlob blob)
      throws ModelDBException {}

  public void preVisitDeepDiscreteHyperparameterSetConfigBlob(
      DiscreteHyperparameterSetConfigBlob blob) throws ModelDBException {}

  public DiscreteHyperparameterSetConfigBlob postVisitDiscreteHyperparameterSetConfigBlob(
      DiscreteHyperparameterSetConfigBlob blob) throws ModelDBException {
    return blob;
  }

  public DiscreteHyperparameterSetConfigBlob postVisitDeepDiscreteHyperparameterSetConfigBlob(
      DiscreteHyperparameterSetConfigBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfDockerEnvironmentBlob(List<DockerEnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (DockerEnvironmentBlob val : lst) {
      preVisitDockerEnvironmentBlob(val);
    }
  }

  public void preVisitDeepListOfDockerEnvironmentBlob(List<DockerEnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (DockerEnvironmentBlob val : lst) {
      preVisitDeepDockerEnvironmentBlob(val);
    }
  }

  public List<DockerEnvironmentBlob> postVisitListOfDockerEnvironmentBlob(
      List<DockerEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DockerEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (DockerEnvironmentBlob val : lst) {
      collect.add(postVisitDockerEnvironmentBlob(val));
    }
    return collect;
  }

  public List<DockerEnvironmentBlob> postVisitDeepListOfDockerEnvironmentBlob(
      List<DockerEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DockerEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (DockerEnvironmentBlob val : lst) {
      collect.add(postVisitDeepDockerEnvironmentBlob(val));
    }
    return collect;
  }

  public void preVisitDockerEnvironmentBlob(DockerEnvironmentBlob blob) throws ModelDBException {}

  public void preVisitDeepDockerEnvironmentBlob(DockerEnvironmentBlob blob)
      throws ModelDBException {}

  public DockerEnvironmentBlob postVisitDockerEnvironmentBlob(DockerEnvironmentBlob blob)
      throws ModelDBException {
    return blob;
  }

  public DockerEnvironmentBlob postVisitDeepDockerEnvironmentBlob(DockerEnvironmentBlob blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfDockerEnvironmentDiff(List<DockerEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (DockerEnvironmentDiff val : lst) {
      preVisitDockerEnvironmentDiff(val);
    }
  }

  public void preVisitDeepListOfDockerEnvironmentDiff(List<DockerEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (DockerEnvironmentDiff val : lst) {
      preVisitDeepDockerEnvironmentDiff(val);
    }
  }

  public List<DockerEnvironmentDiff> postVisitListOfDockerEnvironmentDiff(
      List<DockerEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DockerEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (DockerEnvironmentDiff val : lst) {
      collect.add(postVisitDockerEnvironmentDiff(val));
    }
    return collect;
  }

  public List<DockerEnvironmentDiff> postVisitDeepListOfDockerEnvironmentDiff(
      List<DockerEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DockerEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (DockerEnvironmentDiff val : lst) {
      collect.add(postVisitDeepDockerEnvironmentDiff(val));
    }
    return collect;
  }

  public void preVisitDockerEnvironmentDiff(DockerEnvironmentDiff blob) throws ModelDBException {}

  public void preVisitDeepDockerEnvironmentDiff(DockerEnvironmentDiff blob)
      throws ModelDBException {}

  public DockerEnvironmentDiff postVisitDockerEnvironmentDiff(DockerEnvironmentDiff blob)
      throws ModelDBException {
    return blob;
  }

  public DockerEnvironmentDiff postVisitDeepDockerEnvironmentDiff(DockerEnvironmentDiff blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfEnvironmentBlob(List<EnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentBlob val : lst) {
      preVisitEnvironmentBlob(val);
    }
  }

  public void preVisitDeepListOfEnvironmentBlob(List<EnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentBlob val : lst) {
      preVisitDeepEnvironmentBlob(val);
    }
  }

  public List<EnvironmentBlob> postVisitListOfEnvironmentBlob(List<EnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (EnvironmentBlob val : lst) {
      collect.add(postVisitEnvironmentBlob(val));
    }
    return collect;
  }

  public List<EnvironmentBlob> postVisitDeepListOfEnvironmentBlob(List<EnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (EnvironmentBlob val : lst) {
      collect.add(postVisitDeepEnvironmentBlob(val));
    }
    return collect;
  }

  public void preVisitEnvironmentBlob(EnvironmentBlob blob) throws ModelDBException {}

  public void preVisitDeepEnvironmentBlob(EnvironmentBlob blob) throws ModelDBException {}

  public EnvironmentBlob postVisitEnvironmentBlob(EnvironmentBlob blob) throws ModelDBException {
    return blob;
  }

  public EnvironmentBlob postVisitDeepEnvironmentBlob(EnvironmentBlob blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfEnvironmentDiff(List<EnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentDiff val : lst) {
      preVisitEnvironmentDiff(val);
    }
  }

  public void preVisitDeepListOfEnvironmentDiff(List<EnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentDiff val : lst) {
      preVisitDeepEnvironmentDiff(val);
    }
  }

  public List<EnvironmentDiff> postVisitListOfEnvironmentDiff(List<EnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (EnvironmentDiff val : lst) {
      collect.add(postVisitEnvironmentDiff(val));
    }
    return collect;
  }

  public List<EnvironmentDiff> postVisitDeepListOfEnvironmentDiff(List<EnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (EnvironmentDiff val : lst) {
      collect.add(postVisitDeepEnvironmentDiff(val));
    }
    return collect;
  }

  public void preVisitEnvironmentDiff(EnvironmentDiff blob) throws ModelDBException {}

  public void preVisitDeepEnvironmentDiff(EnvironmentDiff blob) throws ModelDBException {}

  public EnvironmentDiff postVisitEnvironmentDiff(EnvironmentDiff blob) throws ModelDBException {
    return blob;
  }

  public EnvironmentDiff postVisitDeepEnvironmentDiff(EnvironmentDiff blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfEnvironmentVariablesBlob(List<EnvironmentVariablesBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentVariablesBlob val : lst) {
      preVisitEnvironmentVariablesBlob(val);
    }
  }

  public void preVisitDeepListOfEnvironmentVariablesBlob(List<EnvironmentVariablesBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentVariablesBlob val : lst) {
      preVisitDeepEnvironmentVariablesBlob(val);
    }
  }

  public List<EnvironmentVariablesBlob> postVisitListOfEnvironmentVariablesBlob(
      List<EnvironmentVariablesBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentVariablesBlob> collect = new ArrayList<>(lst.size());
    for (EnvironmentVariablesBlob val : lst) {
      collect.add(postVisitEnvironmentVariablesBlob(val));
    }
    return collect;
  }

  public List<EnvironmentVariablesBlob> postVisitDeepListOfEnvironmentVariablesBlob(
      List<EnvironmentVariablesBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentVariablesBlob> collect = new ArrayList<>(lst.size());
    for (EnvironmentVariablesBlob val : lst) {
      collect.add(postVisitDeepEnvironmentVariablesBlob(val));
    }
    return collect;
  }

  public void preVisitEnvironmentVariablesBlob(EnvironmentVariablesBlob blob)
      throws ModelDBException {}

  public void preVisitDeepEnvironmentVariablesBlob(EnvironmentVariablesBlob blob)
      throws ModelDBException {}

  public EnvironmentVariablesBlob postVisitEnvironmentVariablesBlob(EnvironmentVariablesBlob blob)
      throws ModelDBException {
    return blob;
  }

  public EnvironmentVariablesBlob postVisitDeepEnvironmentVariablesBlob(
      EnvironmentVariablesBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfEnvironmentVariablesDiff(List<EnvironmentVariablesDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentVariablesDiff val : lst) {
      preVisitEnvironmentVariablesDiff(val);
    }
  }

  public void preVisitDeepListOfEnvironmentVariablesDiff(List<EnvironmentVariablesDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (EnvironmentVariablesDiff val : lst) {
      preVisitDeepEnvironmentVariablesDiff(val);
    }
  }

  public List<EnvironmentVariablesDiff> postVisitListOfEnvironmentVariablesDiff(
      List<EnvironmentVariablesDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentVariablesDiff> collect = new ArrayList<>(lst.size());
    for (EnvironmentVariablesDiff val : lst) {
      collect.add(postVisitEnvironmentVariablesDiff(val));
    }
    return collect;
  }

  public List<EnvironmentVariablesDiff> postVisitDeepListOfEnvironmentVariablesDiff(
      List<EnvironmentVariablesDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<EnvironmentVariablesDiff> collect = new ArrayList<>(lst.size());
    for (EnvironmentVariablesDiff val : lst) {
      collect.add(postVisitDeepEnvironmentVariablesDiff(val));
    }
    return collect;
  }

  public void preVisitEnvironmentVariablesDiff(EnvironmentVariablesDiff blob)
      throws ModelDBException {}

  public void preVisitDeepEnvironmentVariablesDiff(EnvironmentVariablesDiff blob)
      throws ModelDBException {}

  public EnvironmentVariablesDiff postVisitEnvironmentVariablesDiff(EnvironmentVariablesDiff blob)
      throws ModelDBException {
    return blob;
  }

  public EnvironmentVariablesDiff postVisitDeepEnvironmentVariablesDiff(
      EnvironmentVariablesDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfGitCodeBlob(List<GitCodeBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (GitCodeBlob val : lst) {
      preVisitGitCodeBlob(val);
    }
  }

  public void preVisitDeepListOfGitCodeBlob(List<GitCodeBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (GitCodeBlob val : lst) {
      preVisitDeepGitCodeBlob(val);
    }
  }

  public List<GitCodeBlob> postVisitListOfGitCodeBlob(List<GitCodeBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<GitCodeBlob> collect = new ArrayList<>(lst.size());
    for (GitCodeBlob val : lst) {
      collect.add(postVisitGitCodeBlob(val));
    }
    return collect;
  }

  public List<GitCodeBlob> postVisitDeepListOfGitCodeBlob(List<GitCodeBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<GitCodeBlob> collect = new ArrayList<>(lst.size());
    for (GitCodeBlob val : lst) {
      collect.add(postVisitDeepGitCodeBlob(val));
    }
    return collect;
  }

  public void preVisitGitCodeBlob(GitCodeBlob blob) throws ModelDBException {}

  public void preVisitDeepGitCodeBlob(GitCodeBlob blob) throws ModelDBException {}

  public GitCodeBlob postVisitGitCodeBlob(GitCodeBlob blob) throws ModelDBException {
    return blob;
  }

  public GitCodeBlob postVisitDeepGitCodeBlob(GitCodeBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfGitCodeDiff(List<GitCodeDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (GitCodeDiff val : lst) {
      preVisitGitCodeDiff(val);
    }
  }

  public void preVisitDeepListOfGitCodeDiff(List<GitCodeDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (GitCodeDiff val : lst) {
      preVisitDeepGitCodeDiff(val);
    }
  }

  public List<GitCodeDiff> postVisitListOfGitCodeDiff(List<GitCodeDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<GitCodeDiff> collect = new ArrayList<>(lst.size());
    for (GitCodeDiff val : lst) {
      collect.add(postVisitGitCodeDiff(val));
    }
    return collect;
  }

  public List<GitCodeDiff> postVisitDeepListOfGitCodeDiff(List<GitCodeDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<GitCodeDiff> collect = new ArrayList<>(lst.size());
    for (GitCodeDiff val : lst) {
      collect.add(postVisitDeepGitCodeDiff(val));
    }
    return collect;
  }

  public void preVisitGitCodeDiff(GitCodeDiff blob) throws ModelDBException {}

  public void preVisitDeepGitCodeDiff(GitCodeDiff blob) throws ModelDBException {}

  public GitCodeDiff postVisitGitCodeDiff(GitCodeDiff blob) throws ModelDBException {
    return blob;
  }

  public GitCodeDiff postVisitDeepGitCodeDiff(GitCodeDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfHyperparameterConfigBlob(List<HyperparameterConfigBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterConfigBlob val : lst) {
      preVisitHyperparameterConfigBlob(val);
    }
  }

  public void preVisitDeepListOfHyperparameterConfigBlob(List<HyperparameterConfigBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterConfigBlob val : lst) {
      preVisitDeepHyperparameterConfigBlob(val);
    }
  }

  public List<HyperparameterConfigBlob> postVisitListOfHyperparameterConfigBlob(
      List<HyperparameterConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterConfigBlob> collect = new ArrayList<>(lst.size());
    for (HyperparameterConfigBlob val : lst) {
      collect.add(postVisitHyperparameterConfigBlob(val));
    }
    return collect;
  }

  public List<HyperparameterConfigBlob> postVisitDeepListOfHyperparameterConfigBlob(
      List<HyperparameterConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterConfigBlob> collect = new ArrayList<>(lst.size());
    for (HyperparameterConfigBlob val : lst) {
      collect.add(postVisitDeepHyperparameterConfigBlob(val));
    }
    return collect;
  }

  public void preVisitHyperparameterConfigBlob(HyperparameterConfigBlob blob)
      throws ModelDBException {}

  public void preVisitDeepHyperparameterConfigBlob(HyperparameterConfigBlob blob)
      throws ModelDBException {}

  public HyperparameterConfigBlob postVisitHyperparameterConfigBlob(HyperparameterConfigBlob blob)
      throws ModelDBException {
    return blob;
  }

  public HyperparameterConfigBlob postVisitDeepHyperparameterConfigBlob(
      HyperparameterConfigBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfHyperparameterConfigDiff(List<HyperparameterConfigDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterConfigDiff val : lst) {
      preVisitHyperparameterConfigDiff(val);
    }
  }

  public void preVisitDeepListOfHyperparameterConfigDiff(List<HyperparameterConfigDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterConfigDiff val : lst) {
      preVisitDeepHyperparameterConfigDiff(val);
    }
  }

  public List<HyperparameterConfigDiff> postVisitListOfHyperparameterConfigDiff(
      List<HyperparameterConfigDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterConfigDiff> collect = new ArrayList<>(lst.size());
    for (HyperparameterConfigDiff val : lst) {
      collect.add(postVisitHyperparameterConfigDiff(val));
    }
    return collect;
  }

  public List<HyperparameterConfigDiff> postVisitDeepListOfHyperparameterConfigDiff(
      List<HyperparameterConfigDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterConfigDiff> collect = new ArrayList<>(lst.size());
    for (HyperparameterConfigDiff val : lst) {
      collect.add(postVisitDeepHyperparameterConfigDiff(val));
    }
    return collect;
  }

  public void preVisitHyperparameterConfigDiff(HyperparameterConfigDiff blob)
      throws ModelDBException {}

  public void preVisitDeepHyperparameterConfigDiff(HyperparameterConfigDiff blob)
      throws ModelDBException {}

  public HyperparameterConfigDiff postVisitHyperparameterConfigDiff(HyperparameterConfigDiff blob)
      throws ModelDBException {
    return blob;
  }

  public HyperparameterConfigDiff postVisitDeepHyperparameterConfigDiff(
      HyperparameterConfigDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfHyperparameterSetConfigBlob(List<HyperparameterSetConfigBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterSetConfigBlob val : lst) {
      preVisitHyperparameterSetConfigBlob(val);
    }
  }

  public void preVisitDeepListOfHyperparameterSetConfigBlob(List<HyperparameterSetConfigBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterSetConfigBlob val : lst) {
      preVisitDeepHyperparameterSetConfigBlob(val);
    }
  }

  public List<HyperparameterSetConfigBlob> postVisitListOfHyperparameterSetConfigBlob(
      List<HyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterSetConfigBlob> collect = new ArrayList<>(lst.size());
    for (HyperparameterSetConfigBlob val : lst) {
      collect.add(postVisitHyperparameterSetConfigBlob(val));
    }
    return collect;
  }

  public List<HyperparameterSetConfigBlob> postVisitDeepListOfHyperparameterSetConfigBlob(
      List<HyperparameterSetConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterSetConfigBlob> collect = new ArrayList<>(lst.size());
    for (HyperparameterSetConfigBlob val : lst) {
      collect.add(postVisitDeepHyperparameterSetConfigBlob(val));
    }
    return collect;
  }

  public void preVisitHyperparameterSetConfigBlob(HyperparameterSetConfigBlob blob)
      throws ModelDBException {}

  public void preVisitDeepHyperparameterSetConfigBlob(HyperparameterSetConfigBlob blob)
      throws ModelDBException {}

  public HyperparameterSetConfigBlob postVisitHyperparameterSetConfigBlob(
      HyperparameterSetConfigBlob blob) throws ModelDBException {
    return blob;
  }

  public HyperparameterSetConfigBlob postVisitDeepHyperparameterSetConfigBlob(
      HyperparameterSetConfigBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfHyperparameterSetConfigDiff(List<HyperparameterSetConfigDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterSetConfigDiff val : lst) {
      preVisitHyperparameterSetConfigDiff(val);
    }
  }

  public void preVisitDeepListOfHyperparameterSetConfigDiff(List<HyperparameterSetConfigDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterSetConfigDiff val : lst) {
      preVisitDeepHyperparameterSetConfigDiff(val);
    }
  }

  public List<HyperparameterSetConfigDiff> postVisitListOfHyperparameterSetConfigDiff(
      List<HyperparameterSetConfigDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterSetConfigDiff> collect = new ArrayList<>(lst.size());
    for (HyperparameterSetConfigDiff val : lst) {
      collect.add(postVisitHyperparameterSetConfigDiff(val));
    }
    return collect;
  }

  public List<HyperparameterSetConfigDiff> postVisitDeepListOfHyperparameterSetConfigDiff(
      List<HyperparameterSetConfigDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterSetConfigDiff> collect = new ArrayList<>(lst.size());
    for (HyperparameterSetConfigDiff val : lst) {
      collect.add(postVisitDeepHyperparameterSetConfigDiff(val));
    }
    return collect;
  }

  public void preVisitHyperparameterSetConfigDiff(HyperparameterSetConfigDiff blob)
      throws ModelDBException {}

  public void preVisitDeepHyperparameterSetConfigDiff(HyperparameterSetConfigDiff blob)
      throws ModelDBException {}

  public HyperparameterSetConfigDiff postVisitHyperparameterSetConfigDiff(
      HyperparameterSetConfigDiff blob) throws ModelDBException {
    return blob;
  }

  public HyperparameterSetConfigDiff postVisitDeepHyperparameterSetConfigDiff(
      HyperparameterSetConfigDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfHyperparameterValuesConfigBlob(List<HyperparameterValuesConfigBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterValuesConfigBlob val : lst) {
      preVisitHyperparameterValuesConfigBlob(val);
    }
  }

  public void preVisitDeepListOfHyperparameterValuesConfigBlob(
      List<HyperparameterValuesConfigBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (HyperparameterValuesConfigBlob val : lst) {
      preVisitDeepHyperparameterValuesConfigBlob(val);
    }
  }

  public List<HyperparameterValuesConfigBlob> postVisitListOfHyperparameterValuesConfigBlob(
      List<HyperparameterValuesConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterValuesConfigBlob> collect = new ArrayList<>(lst.size());
    for (HyperparameterValuesConfigBlob val : lst) {
      collect.add(postVisitHyperparameterValuesConfigBlob(val));
    }
    return collect;
  }

  public List<HyperparameterValuesConfigBlob> postVisitDeepListOfHyperparameterValuesConfigBlob(
      List<HyperparameterValuesConfigBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<HyperparameterValuesConfigBlob> collect = new ArrayList<>(lst.size());
    for (HyperparameterValuesConfigBlob val : lst) {
      collect.add(postVisitDeepHyperparameterValuesConfigBlob(val));
    }
    return collect;
  }

  public void preVisitHyperparameterValuesConfigBlob(HyperparameterValuesConfigBlob blob)
      throws ModelDBException {}

  public void preVisitDeepHyperparameterValuesConfigBlob(HyperparameterValuesConfigBlob blob)
      throws ModelDBException {}

  public HyperparameterValuesConfigBlob postVisitHyperparameterValuesConfigBlob(
      HyperparameterValuesConfigBlob blob) throws ModelDBException {
    return blob;
  }

  public HyperparameterValuesConfigBlob postVisitDeepHyperparameterValuesConfigBlob(
      HyperparameterValuesConfigBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfNotebookCodeBlob(List<NotebookCodeBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (NotebookCodeBlob val : lst) {
      preVisitNotebookCodeBlob(val);
    }
  }

  public void preVisitDeepListOfNotebookCodeBlob(List<NotebookCodeBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (NotebookCodeBlob val : lst) {
      preVisitDeepNotebookCodeBlob(val);
    }
  }

  public List<NotebookCodeBlob> postVisitListOfNotebookCodeBlob(List<NotebookCodeBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<NotebookCodeBlob> collect = new ArrayList<>(lst.size());
    for (NotebookCodeBlob val : lst) {
      collect.add(postVisitNotebookCodeBlob(val));
    }
    return collect;
  }

  public List<NotebookCodeBlob> postVisitDeepListOfNotebookCodeBlob(List<NotebookCodeBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<NotebookCodeBlob> collect = new ArrayList<>(lst.size());
    for (NotebookCodeBlob val : lst) {
      collect.add(postVisitDeepNotebookCodeBlob(val));
    }
    return collect;
  }

  public void preVisitNotebookCodeBlob(NotebookCodeBlob blob) throws ModelDBException {}

  public void preVisitDeepNotebookCodeBlob(NotebookCodeBlob blob) throws ModelDBException {}

  public NotebookCodeBlob postVisitNotebookCodeBlob(NotebookCodeBlob blob) throws ModelDBException {
    return blob;
  }

  public NotebookCodeBlob postVisitDeepNotebookCodeBlob(NotebookCodeBlob blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfNotebookCodeDiff(List<NotebookCodeDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (NotebookCodeDiff val : lst) {
      preVisitNotebookCodeDiff(val);
    }
  }

  public void preVisitDeepListOfNotebookCodeDiff(List<NotebookCodeDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (NotebookCodeDiff val : lst) {
      preVisitDeepNotebookCodeDiff(val);
    }
  }

  public List<NotebookCodeDiff> postVisitListOfNotebookCodeDiff(List<NotebookCodeDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<NotebookCodeDiff> collect = new ArrayList<>(lst.size());
    for (NotebookCodeDiff val : lst) {
      collect.add(postVisitNotebookCodeDiff(val));
    }
    return collect;
  }

  public List<NotebookCodeDiff> postVisitDeepListOfNotebookCodeDiff(List<NotebookCodeDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<NotebookCodeDiff> collect = new ArrayList<>(lst.size());
    for (NotebookCodeDiff val : lst) {
      collect.add(postVisitDeepNotebookCodeDiff(val));
    }
    return collect;
  }

  public void preVisitNotebookCodeDiff(NotebookCodeDiff blob) throws ModelDBException {}

  public void preVisitDeepNotebookCodeDiff(NotebookCodeDiff blob) throws ModelDBException {}

  public NotebookCodeDiff postVisitNotebookCodeDiff(NotebookCodeDiff blob) throws ModelDBException {
    return blob;
  }

  public NotebookCodeDiff postVisitDeepNotebookCodeDiff(NotebookCodeDiff blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPathDatasetBlob(List<PathDatasetBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetBlob val : lst) {
      preVisitPathDatasetBlob(val);
    }
  }

  public void preVisitDeepListOfPathDatasetBlob(List<PathDatasetBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetBlob val : lst) {
      preVisitDeepPathDatasetBlob(val);
    }
  }

  public List<PathDatasetBlob> postVisitListOfPathDatasetBlob(List<PathDatasetBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetBlob> collect = new ArrayList<>(lst.size());
    for (PathDatasetBlob val : lst) {
      collect.add(postVisitPathDatasetBlob(val));
    }
    return collect;
  }

  public List<PathDatasetBlob> postVisitDeepListOfPathDatasetBlob(List<PathDatasetBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetBlob> collect = new ArrayList<>(lst.size());
    for (PathDatasetBlob val : lst) {
      collect.add(postVisitDeepPathDatasetBlob(val));
    }
    return collect;
  }

  public void preVisitPathDatasetBlob(PathDatasetBlob blob) throws ModelDBException {}

  public void preVisitDeepPathDatasetBlob(PathDatasetBlob blob) throws ModelDBException {}

  public PathDatasetBlob postVisitPathDatasetBlob(PathDatasetBlob blob) throws ModelDBException {
    return blob;
  }

  public PathDatasetBlob postVisitDeepPathDatasetBlob(PathDatasetBlob blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPathDatasetComponentBlob(List<PathDatasetComponentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetComponentBlob val : lst) {
      preVisitPathDatasetComponentBlob(val);
    }
  }

  public void preVisitDeepListOfPathDatasetComponentBlob(List<PathDatasetComponentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetComponentBlob val : lst) {
      preVisitDeepPathDatasetComponentBlob(val);
    }
  }

  public List<PathDatasetComponentBlob> postVisitListOfPathDatasetComponentBlob(
      List<PathDatasetComponentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetComponentBlob> collect = new ArrayList<>(lst.size());
    for (PathDatasetComponentBlob val : lst) {
      collect.add(postVisitPathDatasetComponentBlob(val));
    }
    return collect;
  }

  public List<PathDatasetComponentBlob> postVisitDeepListOfPathDatasetComponentBlob(
      List<PathDatasetComponentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetComponentBlob> collect = new ArrayList<>(lst.size());
    for (PathDatasetComponentBlob val : lst) {
      collect.add(postVisitDeepPathDatasetComponentBlob(val));
    }
    return collect;
  }

  public void preVisitPathDatasetComponentBlob(PathDatasetComponentBlob blob)
      throws ModelDBException {}

  public void preVisitDeepPathDatasetComponentBlob(PathDatasetComponentBlob blob)
      throws ModelDBException {}

  public PathDatasetComponentBlob postVisitPathDatasetComponentBlob(PathDatasetComponentBlob blob)
      throws ModelDBException {
    return blob;
  }

  public PathDatasetComponentBlob postVisitDeepPathDatasetComponentBlob(
      PathDatasetComponentBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPathDatasetComponentDiff(List<PathDatasetComponentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetComponentDiff val : lst) {
      preVisitPathDatasetComponentDiff(val);
    }
  }

  public void preVisitDeepListOfPathDatasetComponentDiff(List<PathDatasetComponentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetComponentDiff val : lst) {
      preVisitDeepPathDatasetComponentDiff(val);
    }
  }

  public List<PathDatasetComponentDiff> postVisitListOfPathDatasetComponentDiff(
      List<PathDatasetComponentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetComponentDiff> collect = new ArrayList<>(lst.size());
    for (PathDatasetComponentDiff val : lst) {
      collect.add(postVisitPathDatasetComponentDiff(val));
    }
    return collect;
  }

  public List<PathDatasetComponentDiff> postVisitDeepListOfPathDatasetComponentDiff(
      List<PathDatasetComponentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetComponentDiff> collect = new ArrayList<>(lst.size());
    for (PathDatasetComponentDiff val : lst) {
      collect.add(postVisitDeepPathDatasetComponentDiff(val));
    }
    return collect;
  }

  public void preVisitPathDatasetComponentDiff(PathDatasetComponentDiff blob)
      throws ModelDBException {}

  public void preVisitDeepPathDatasetComponentDiff(PathDatasetComponentDiff blob)
      throws ModelDBException {}

  public PathDatasetComponentDiff postVisitPathDatasetComponentDiff(PathDatasetComponentDiff blob)
      throws ModelDBException {
    return blob;
  }

  public PathDatasetComponentDiff postVisitDeepPathDatasetComponentDiff(
      PathDatasetComponentDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPathDatasetDiff(List<PathDatasetDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetDiff val : lst) {
      preVisitPathDatasetDiff(val);
    }
  }

  public void preVisitDeepListOfPathDatasetDiff(List<PathDatasetDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (PathDatasetDiff val : lst) {
      preVisitDeepPathDatasetDiff(val);
    }
  }

  public List<PathDatasetDiff> postVisitListOfPathDatasetDiff(List<PathDatasetDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetDiff> collect = new ArrayList<>(lst.size());
    for (PathDatasetDiff val : lst) {
      collect.add(postVisitPathDatasetDiff(val));
    }
    return collect;
  }

  public List<PathDatasetDiff> postVisitDeepListOfPathDatasetDiff(List<PathDatasetDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<PathDatasetDiff> collect = new ArrayList<>(lst.size());
    for (PathDatasetDiff val : lst) {
      collect.add(postVisitDeepPathDatasetDiff(val));
    }
    return collect;
  }

  public void preVisitPathDatasetDiff(PathDatasetDiff blob) throws ModelDBException {}

  public void preVisitDeepPathDatasetDiff(PathDatasetDiff blob) throws ModelDBException {}

  public PathDatasetDiff postVisitPathDatasetDiff(PathDatasetDiff blob) throws ModelDBException {
    return blob;
  }

  public PathDatasetDiff postVisitDeepPathDatasetDiff(PathDatasetDiff blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPythonEnvironmentBlob(List<PythonEnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PythonEnvironmentBlob val : lst) {
      preVisitPythonEnvironmentBlob(val);
    }
  }

  public void preVisitDeepListOfPythonEnvironmentBlob(List<PythonEnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PythonEnvironmentBlob val : lst) {
      preVisitDeepPythonEnvironmentBlob(val);
    }
  }

  public List<PythonEnvironmentBlob> postVisitListOfPythonEnvironmentBlob(
      List<PythonEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (PythonEnvironmentBlob val : lst) {
      collect.add(postVisitPythonEnvironmentBlob(val));
    }
    return collect;
  }

  public List<PythonEnvironmentBlob> postVisitDeepListOfPythonEnvironmentBlob(
      List<PythonEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (PythonEnvironmentBlob val : lst) {
      collect.add(postVisitDeepPythonEnvironmentBlob(val));
    }
    return collect;
  }

  public void preVisitPythonEnvironmentBlob(PythonEnvironmentBlob blob) throws ModelDBException {}

  public void preVisitDeepPythonEnvironmentBlob(PythonEnvironmentBlob blob)
      throws ModelDBException {}

  public PythonEnvironmentBlob postVisitPythonEnvironmentBlob(PythonEnvironmentBlob blob)
      throws ModelDBException {
    return blob;
  }

  public PythonEnvironmentBlob postVisitDeepPythonEnvironmentBlob(PythonEnvironmentBlob blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPythonEnvironmentDiff(List<PythonEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PythonEnvironmentDiff val : lst) {
      preVisitPythonEnvironmentDiff(val);
    }
  }

  public void preVisitDeepListOfPythonEnvironmentDiff(List<PythonEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (PythonEnvironmentDiff val : lst) {
      preVisitDeepPythonEnvironmentDiff(val);
    }
  }

  public List<PythonEnvironmentDiff> postVisitListOfPythonEnvironmentDiff(
      List<PythonEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (PythonEnvironmentDiff val : lst) {
      collect.add(postVisitPythonEnvironmentDiff(val));
    }
    return collect;
  }

  public List<PythonEnvironmentDiff> postVisitDeepListOfPythonEnvironmentDiff(
      List<PythonEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (PythonEnvironmentDiff val : lst) {
      collect.add(postVisitDeepPythonEnvironmentDiff(val));
    }
    return collect;
  }

  public void preVisitPythonEnvironmentDiff(PythonEnvironmentDiff blob) throws ModelDBException {}

  public void preVisitDeepPythonEnvironmentDiff(PythonEnvironmentDiff blob)
      throws ModelDBException {}

  public PythonEnvironmentDiff postVisitPythonEnvironmentDiff(PythonEnvironmentDiff blob)
      throws ModelDBException {
    return blob;
  }

  public PythonEnvironmentDiff postVisitDeepPythonEnvironmentDiff(PythonEnvironmentDiff blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPythonRequirementEnvironmentBlob(
      List<PythonRequirementEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (PythonRequirementEnvironmentBlob val : lst) {
      preVisitPythonRequirementEnvironmentBlob(val);
    }
  }

  public void preVisitDeepListOfPythonRequirementEnvironmentBlob(
      List<PythonRequirementEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (PythonRequirementEnvironmentBlob val : lst) {
      preVisitDeepPythonRequirementEnvironmentBlob(val);
    }
  }

  public List<PythonRequirementEnvironmentBlob> postVisitListOfPythonRequirementEnvironmentBlob(
      List<PythonRequirementEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonRequirementEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (PythonRequirementEnvironmentBlob val : lst) {
      collect.add(postVisitPythonRequirementEnvironmentBlob(val));
    }
    return collect;
  }

  public List<PythonRequirementEnvironmentBlob> postVisitDeepListOfPythonRequirementEnvironmentBlob(
      List<PythonRequirementEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonRequirementEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (PythonRequirementEnvironmentBlob val : lst) {
      collect.add(postVisitDeepPythonRequirementEnvironmentBlob(val));
    }
    return collect;
  }

  public void preVisitPythonRequirementEnvironmentBlob(PythonRequirementEnvironmentBlob blob)
      throws ModelDBException {}

  public void preVisitDeepPythonRequirementEnvironmentBlob(PythonRequirementEnvironmentBlob blob)
      throws ModelDBException {}

  public PythonRequirementEnvironmentBlob postVisitPythonRequirementEnvironmentBlob(
      PythonRequirementEnvironmentBlob blob) throws ModelDBException {
    return blob;
  }

  public PythonRequirementEnvironmentBlob postVisitDeepPythonRequirementEnvironmentBlob(
      PythonRequirementEnvironmentBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfPythonRequirementEnvironmentDiff(
      List<PythonRequirementEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (PythonRequirementEnvironmentDiff val : lst) {
      preVisitPythonRequirementEnvironmentDiff(val);
    }
  }

  public void preVisitDeepListOfPythonRequirementEnvironmentDiff(
      List<PythonRequirementEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (PythonRequirementEnvironmentDiff val : lst) {
      preVisitDeepPythonRequirementEnvironmentDiff(val);
    }
  }

  public List<PythonRequirementEnvironmentDiff> postVisitListOfPythonRequirementEnvironmentDiff(
      List<PythonRequirementEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonRequirementEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (PythonRequirementEnvironmentDiff val : lst) {
      collect.add(postVisitPythonRequirementEnvironmentDiff(val));
    }
    return collect;
  }

  public List<PythonRequirementEnvironmentDiff> postVisitDeepListOfPythonRequirementEnvironmentDiff(
      List<PythonRequirementEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<PythonRequirementEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (PythonRequirementEnvironmentDiff val : lst) {
      collect.add(postVisitDeepPythonRequirementEnvironmentDiff(val));
    }
    return collect;
  }

  public void preVisitPythonRequirementEnvironmentDiff(PythonRequirementEnvironmentDiff blob)
      throws ModelDBException {}

  public void preVisitDeepPythonRequirementEnvironmentDiff(PythonRequirementEnvironmentDiff blob)
      throws ModelDBException {}

  public PythonRequirementEnvironmentDiff postVisitPythonRequirementEnvironmentDiff(
      PythonRequirementEnvironmentDiff blob) throws ModelDBException {
    return blob;
  }

  public PythonRequirementEnvironmentDiff postVisitDeepPythonRequirementEnvironmentDiff(
      PythonRequirementEnvironmentDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfS3DatasetBlob(List<S3DatasetBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetBlob val : lst) {
      preVisitS3DatasetBlob(val);
    }
  }

  public void preVisitDeepListOfS3DatasetBlob(List<S3DatasetBlob> lst) throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetBlob val : lst) {
      preVisitDeepS3DatasetBlob(val);
    }
  }

  public List<S3DatasetBlob> postVisitListOfS3DatasetBlob(List<S3DatasetBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetBlob> collect = new ArrayList<>(lst.size());
    for (S3DatasetBlob val : lst) {
      collect.add(postVisitS3DatasetBlob(val));
    }
    return collect;
  }

  public List<S3DatasetBlob> postVisitDeepListOfS3DatasetBlob(List<S3DatasetBlob> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetBlob> collect = new ArrayList<>(lst.size());
    for (S3DatasetBlob val : lst) {
      collect.add(postVisitDeepS3DatasetBlob(val));
    }
    return collect;
  }

  public void preVisitS3DatasetBlob(S3DatasetBlob blob) throws ModelDBException {}

  public void preVisitDeepS3DatasetBlob(S3DatasetBlob blob) throws ModelDBException {}

  public S3DatasetBlob postVisitS3DatasetBlob(S3DatasetBlob blob) throws ModelDBException {
    return blob;
  }

  public S3DatasetBlob postVisitDeepS3DatasetBlob(S3DatasetBlob blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfS3DatasetComponentBlob(List<S3DatasetComponentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetComponentBlob val : lst) {
      preVisitS3DatasetComponentBlob(val);
    }
  }

  public void preVisitDeepListOfS3DatasetComponentBlob(List<S3DatasetComponentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetComponentBlob val : lst) {
      preVisitDeepS3DatasetComponentBlob(val);
    }
  }

  public List<S3DatasetComponentBlob> postVisitListOfS3DatasetComponentBlob(
      List<S3DatasetComponentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetComponentBlob> collect = new ArrayList<>(lst.size());
    for (S3DatasetComponentBlob val : lst) {
      collect.add(postVisitS3DatasetComponentBlob(val));
    }
    return collect;
  }

  public List<S3DatasetComponentBlob> postVisitDeepListOfS3DatasetComponentBlob(
      List<S3DatasetComponentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetComponentBlob> collect = new ArrayList<>(lst.size());
    for (S3DatasetComponentBlob val : lst) {
      collect.add(postVisitDeepS3DatasetComponentBlob(val));
    }
    return collect;
  }

  public void preVisitS3DatasetComponentBlob(S3DatasetComponentBlob blob) throws ModelDBException {}

  public void preVisitDeepS3DatasetComponentBlob(S3DatasetComponentBlob blob)
      throws ModelDBException {}

  public S3DatasetComponentBlob postVisitS3DatasetComponentBlob(S3DatasetComponentBlob blob)
      throws ModelDBException {
    return blob;
  }

  public S3DatasetComponentBlob postVisitDeepS3DatasetComponentBlob(S3DatasetComponentBlob blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfS3DatasetComponentDiff(List<S3DatasetComponentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetComponentDiff val : lst) {
      preVisitS3DatasetComponentDiff(val);
    }
  }

  public void preVisitDeepListOfS3DatasetComponentDiff(List<S3DatasetComponentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetComponentDiff val : lst) {
      preVisitDeepS3DatasetComponentDiff(val);
    }
  }

  public List<S3DatasetComponentDiff> postVisitListOfS3DatasetComponentDiff(
      List<S3DatasetComponentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetComponentDiff> collect = new ArrayList<>(lst.size());
    for (S3DatasetComponentDiff val : lst) {
      collect.add(postVisitS3DatasetComponentDiff(val));
    }
    return collect;
  }

  public List<S3DatasetComponentDiff> postVisitDeepListOfS3DatasetComponentDiff(
      List<S3DatasetComponentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetComponentDiff> collect = new ArrayList<>(lst.size());
    for (S3DatasetComponentDiff val : lst) {
      collect.add(postVisitDeepS3DatasetComponentDiff(val));
    }
    return collect;
  }

  public void preVisitS3DatasetComponentDiff(S3DatasetComponentDiff blob) throws ModelDBException {}

  public void preVisitDeepS3DatasetComponentDiff(S3DatasetComponentDiff blob)
      throws ModelDBException {}

  public S3DatasetComponentDiff postVisitS3DatasetComponentDiff(S3DatasetComponentDiff blob)
      throws ModelDBException {
    return blob;
  }

  public S3DatasetComponentDiff postVisitDeepS3DatasetComponentDiff(S3DatasetComponentDiff blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfS3DatasetDiff(List<S3DatasetDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetDiff val : lst) {
      preVisitS3DatasetDiff(val);
    }
  }

  public void preVisitDeepListOfS3DatasetDiff(List<S3DatasetDiff> lst) throws ModelDBException {
    if (lst == null) return;
    for (S3DatasetDiff val : lst) {
      preVisitDeepS3DatasetDiff(val);
    }
  }

  public List<S3DatasetDiff> postVisitListOfS3DatasetDiff(List<S3DatasetDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetDiff> collect = new ArrayList<>(lst.size());
    for (S3DatasetDiff val : lst) {
      collect.add(postVisitS3DatasetDiff(val));
    }
    return collect;
  }

  public List<S3DatasetDiff> postVisitDeepListOfS3DatasetDiff(List<S3DatasetDiff> lst)
      throws ModelDBException {
    if (lst == null) return null;
    final List<S3DatasetDiff> collect = new ArrayList<>(lst.size());
    for (S3DatasetDiff val : lst) {
      collect.add(postVisitDeepS3DatasetDiff(val));
    }
    return collect;
  }

  public void preVisitS3DatasetDiff(S3DatasetDiff blob) throws ModelDBException {}

  public void preVisitDeepS3DatasetDiff(S3DatasetDiff blob) throws ModelDBException {}

  public S3DatasetDiff postVisitS3DatasetDiff(S3DatasetDiff blob) throws ModelDBException {
    return blob;
  }

  public S3DatasetDiff postVisitDeepS3DatasetDiff(S3DatasetDiff blob) throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfVersionEnvironmentBlob(List<VersionEnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (VersionEnvironmentBlob val : lst) {
      preVisitVersionEnvironmentBlob(val);
    }
  }

  public void preVisitDeepListOfVersionEnvironmentBlob(List<VersionEnvironmentBlob> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (VersionEnvironmentBlob val : lst) {
      preVisitDeepVersionEnvironmentBlob(val);
    }
  }

  public List<VersionEnvironmentBlob> postVisitListOfVersionEnvironmentBlob(
      List<VersionEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<VersionEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (VersionEnvironmentBlob val : lst) {
      collect.add(postVisitVersionEnvironmentBlob(val));
    }
    return collect;
  }

  public List<VersionEnvironmentBlob> postVisitDeepListOfVersionEnvironmentBlob(
      List<VersionEnvironmentBlob> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<VersionEnvironmentBlob> collect = new ArrayList<>(lst.size());
    for (VersionEnvironmentBlob val : lst) {
      collect.add(postVisitDeepVersionEnvironmentBlob(val));
    }
    return collect;
  }

  public void preVisitVersionEnvironmentBlob(VersionEnvironmentBlob blob) throws ModelDBException {}

  public void preVisitDeepVersionEnvironmentBlob(VersionEnvironmentBlob blob)
      throws ModelDBException {}

  public VersionEnvironmentBlob postVisitVersionEnvironmentBlob(VersionEnvironmentBlob blob)
      throws ModelDBException {
    return blob;
  }

  public VersionEnvironmentBlob postVisitDeepVersionEnvironmentBlob(VersionEnvironmentBlob blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfVersionEnvironmentDiff(List<VersionEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (VersionEnvironmentDiff val : lst) {
      preVisitVersionEnvironmentDiff(val);
    }
  }

  public void preVisitDeepListOfVersionEnvironmentDiff(List<VersionEnvironmentDiff> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (VersionEnvironmentDiff val : lst) {
      preVisitDeepVersionEnvironmentDiff(val);
    }
  }

  public List<VersionEnvironmentDiff> postVisitListOfVersionEnvironmentDiff(
      List<VersionEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<VersionEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (VersionEnvironmentDiff val : lst) {
      collect.add(postVisitVersionEnvironmentDiff(val));
    }
    return collect;
  }

  public List<VersionEnvironmentDiff> postVisitDeepListOfVersionEnvironmentDiff(
      List<VersionEnvironmentDiff> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<VersionEnvironmentDiff> collect = new ArrayList<>(lst.size());
    for (VersionEnvironmentDiff val : lst) {
      collect.add(postVisitDeepVersionEnvironmentDiff(val));
    }
    return collect;
  }

  public void preVisitVersionEnvironmentDiff(VersionEnvironmentDiff blob) throws ModelDBException {}

  public void preVisitDeepVersionEnvironmentDiff(VersionEnvironmentDiff blob)
      throws ModelDBException {}

  public VersionEnvironmentDiff postVisitVersionEnvironmentDiff(VersionEnvironmentDiff blob)
      throws ModelDBException {
    return blob;
  }

  public VersionEnvironmentDiff postVisitDeepVersionEnvironmentDiff(VersionEnvironmentDiff blob)
      throws ModelDBException {
    if (blob != null) return blob.postVisitDeep(this);
    return null;
  }

  public void preVisitListOfString(List<String> lst) throws ModelDBException {
    if (lst == null) return;
    for (String val : lst) {
      preVisitString(val);
    }
  }

  public void preVisitDeepListOfString(List<String> lst) throws ModelDBException {
    if (lst == null) return;
    for (String val : lst) {
      preVisitDeepString(val);
    }
  }

  public List<String> postVisitListOfString(List<String> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<String> collect = new ArrayList<>(lst.size());
    for (String val : lst) {
      collect.add(postVisitString(val));
    }
    return collect;
  }

  public List<String> postVisitDeepListOfString(List<String> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<String> collect = new ArrayList<>(lst.size());
    for (String val : lst) {
      collect.add(postVisitDeepString(val));
    }
    return collect;
  }

  public void preVisitString(String blob) throws ModelDBException {}

  public void preVisitDeepString(String blob) throws ModelDBException {}

  public String postVisitString(String blob) throws ModelDBException {
    return blob;
  }

  public String postVisitDeepString(String blob) throws ModelDBException {
    return blob;
  }

  public void preVisitListOfBoolean(List<Boolean> lst) throws ModelDBException {
    if (lst == null) return;
    for (Boolean val : lst) {
      preVisitBoolean(val);
    }
  }

  public void preVisitDeepListOfBoolean(List<Boolean> lst) throws ModelDBException {
    if (lst == null) return;
    for (Boolean val : lst) {
      preVisitDeepBoolean(val);
    }
  }

  public List<Boolean> postVisitListOfBoolean(List<Boolean> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Boolean> collect = new ArrayList<>(lst.size());
    for (Boolean val : lst) {
      collect.add(postVisitBoolean(val));
    }
    return collect;
  }

  public List<Boolean> postVisitDeepListOfBoolean(List<Boolean> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Boolean> collect = new ArrayList<>(lst.size());
    for (Boolean val : lst) {
      collect.add(postVisitDeepBoolean(val));
    }
    return collect;
  }

  public void preVisitBoolean(Boolean blob) throws ModelDBException {}

  public void preVisitDeepBoolean(Boolean blob) throws ModelDBException {}

  public Boolean postVisitBoolean(Boolean blob) throws ModelDBException {
    return blob;
  }

  public Boolean postVisitDeepBoolean(Boolean blob) throws ModelDBException {
    return blob;
  }

  public void preVisitListOfDouble(List<Double> lst) throws ModelDBException {
    if (lst == null) return;
    for (Double val : lst) {
      preVisitDouble(val);
    }
  }

  public void preVisitDeepListOfDouble(List<Double> lst) throws ModelDBException {
    if (lst == null) return;
    for (Double val : lst) {
      preVisitDeepDouble(val);
    }
  }

  public List<Double> postVisitListOfDouble(List<Double> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Double> collect = new ArrayList<>(lst.size());
    for (Double val : lst) {
      collect.add(postVisitDouble(val));
    }
    return collect;
  }

  public List<Double> postVisitDeepListOfDouble(List<Double> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Double> collect = new ArrayList<>(lst.size());
    for (Double val : lst) {
      collect.add(postVisitDeepDouble(val));
    }
    return collect;
  }

  public void preVisitDouble(Double blob) throws ModelDBException {}

  public void preVisitDeepDouble(Double blob) throws ModelDBException {}

  public Double postVisitDouble(Double blob) throws ModelDBException {
    return blob;
  }

  public Double postVisitDeepDouble(Double blob) throws ModelDBException {
    return blob;
  }

  public void preVisitListOfInteger(List<Integer> lst) throws ModelDBException {
    if (lst == null) return;
    for (Integer val : lst) {
      preVisitInteger(val);
    }
  }

  public void preVisitDeepListOfInteger(List<Integer> lst) throws ModelDBException {
    if (lst == null) return;
    for (Integer val : lst) {
      preVisitDeepInteger(val);
    }
  }

  public List<Integer> postVisitListOfInteger(List<Integer> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Integer> collect = new ArrayList<>(lst.size());
    for (Integer val : lst) {
      collect.add(postVisitInteger(val));
    }
    return collect;
  }

  public List<Integer> postVisitDeepListOfInteger(List<Integer> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Integer> collect = new ArrayList<>(lst.size());
    for (Integer val : lst) {
      collect.add(postVisitDeepInteger(val));
    }
    return collect;
  }

  public void preVisitInteger(Integer blob) throws ModelDBException {}

  public void preVisitDeepInteger(Integer blob) throws ModelDBException {}

  public Integer postVisitInteger(Integer blob) throws ModelDBException {
    return blob;
  }

  public Integer postVisitDeepInteger(Integer blob) throws ModelDBException {
    return blob;
  }

  public void preVisitListOfLong(List<Long> lst) throws ModelDBException {
    if (lst == null) return;
    for (Long val : lst) {
      preVisitLong(val);
    }
  }

  public void preVisitDeepListOfLong(List<Long> lst) throws ModelDBException {
    if (lst == null) return;
    for (Long val : lst) {
      preVisitDeepLong(val);
    }
  }

  public List<Long> postVisitListOfLong(List<Long> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Long> collect = new ArrayList<>(lst.size());
    for (Long val : lst) {
      collect.add(postVisitLong(val));
    }
    return collect;
  }

  public List<Long> postVisitDeepListOfLong(List<Long> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Long> collect = new ArrayList<>(lst.size());
    for (Long val : lst) {
      collect.add(postVisitDeepLong(val));
    }
    return collect;
  }

  public void preVisitLong(Long blob) throws ModelDBException {}

  public void preVisitDeepLong(Long blob) throws ModelDBException {}

  public Long postVisitLong(Long blob) throws ModelDBException {
    return blob;
  }

  public Long postVisitDeepLong(Long blob) throws ModelDBException {
    return blob;
  }

  public void preVisitListOfFloat(List<Float> lst) throws ModelDBException {
    if (lst == null) return;
    for (Float val : lst) {
      preVisitFloat(val);
    }
  }

  public void preVisitDeepListOfFloat(List<Float> lst) throws ModelDBException {
    if (lst == null) return;
    for (Float val : lst) {
      preVisitDeepFloat(val);
    }
  }

  public List<Float> postVisitListOfFloat(List<Float> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Float> collect = new ArrayList<>(lst.size());
    for (Float val : lst) {
      collect.add(postVisitFloat(val));
    }
    return collect;
  }

  public List<Float> postVisitDeepListOfFloat(List<Float> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<Float> collect = new ArrayList<>(lst.size());
    for (Float val : lst) {
      collect.add(postVisitDeepFloat(val));
    }
    return collect;
  }

  public void preVisitFloat(Float blob) throws ModelDBException {}

  public void preVisitDeepFloat(Float blob) throws ModelDBException {}

  public Float postVisitFloat(Float blob) throws ModelDBException {
    return blob;
  }

  public Float postVisitDeepFloat(Float blob) throws ModelDBException {
    return blob;
  }

  public void preVisitListOfDiffStatusEnumDiffStatus(List<DiffStatusEnumDiffStatus> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (DiffStatusEnumDiffStatus val : lst) {
      preVisitDiffStatusEnumDiffStatus(val);
    }
  }

  public void preVisitDeepListOfDiffStatusEnumDiffStatus(List<DiffStatusEnumDiffStatus> lst)
      throws ModelDBException {
    if (lst == null) return;
    for (DiffStatusEnumDiffStatus val : lst) {
      preVisitDeepDiffStatusEnumDiffStatus(val);
    }
  }

  public List<DiffStatusEnumDiffStatus> postVisitListOfDiffStatusEnumDiffStatus(
      List<DiffStatusEnumDiffStatus> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DiffStatusEnumDiffStatus> collect = new ArrayList<>(lst.size());
    for (DiffStatusEnumDiffStatus val : lst) {
      collect.add(postVisitDiffStatusEnumDiffStatus(val));
    }
    return collect;
  }

  public List<DiffStatusEnumDiffStatus> postVisitDeepListOfDiffStatusEnumDiffStatus(
      List<DiffStatusEnumDiffStatus> lst) throws ModelDBException {
    if (lst == null) return null;
    final List<DiffStatusEnumDiffStatus> collect = new ArrayList<>(lst.size());
    for (DiffStatusEnumDiffStatus val : lst) {
      collect.add(postVisitDeepDiffStatusEnumDiffStatus(val));
    }
    return collect;
  }

  public void preVisitDiffStatusEnumDiffStatus(DiffStatusEnumDiffStatus blob)
      throws ModelDBException {}

  public void preVisitDeepDiffStatusEnumDiffStatus(DiffStatusEnumDiffStatus blob)
      throws ModelDBException {}

  public DiffStatusEnumDiffStatus postVisitDiffStatusEnumDiffStatus(DiffStatusEnumDiffStatus blob)
      throws ModelDBException {
    return blob;
  }

  public DiffStatusEnumDiffStatus postVisitDeepDiffStatusEnumDiffStatus(
      DiffStatusEnumDiffStatus blob) throws ModelDBException {
    return blob;
  }

  public <T> T genericPostVisitDeep(T b) throws ModelDBException {
    if (b instanceof Blob) {
      return Utils.removeEmpty((T) postVisitDeepBlob((Blob) b));
    }
    if (b instanceof BlobDiff) {
      return Utils.removeEmpty((T) postVisitDeepBlobDiff((BlobDiff) b));
    }
    if (b instanceof CodeBlob) {
      return Utils.removeEmpty((T) postVisitDeepCodeBlob((CodeBlob) b));
    }
    if (b instanceof CodeDiff) {
      return Utils.removeEmpty((T) postVisitDeepCodeDiff((CodeDiff) b));
    }
    if (b instanceof CommandLineEnvironmentDiff) {
      return Utils.removeEmpty(
          (T) postVisitDeepCommandLineEnvironmentDiff((CommandLineEnvironmentDiff) b));
    }
    if (b instanceof ConfigBlob) {
      return Utils.removeEmpty((T) postVisitDeepConfigBlob((ConfigBlob) b));
    }
    if (b instanceof ConfigDiff) {
      return Utils.removeEmpty((T) postVisitDeepConfigDiff((ConfigDiff) b));
    }
    if (b instanceof ContinuousHyperparameterSetConfigBlob) {
      return Utils.removeEmpty(
          (T)
              postVisitDeepContinuousHyperparameterSetConfigBlob(
                  (ContinuousHyperparameterSetConfigBlob) b));
    }
    if (b instanceof DatasetBlob) {
      return Utils.removeEmpty((T) postVisitDeepDatasetBlob((DatasetBlob) b));
    }
    if (b instanceof DatasetDiff) {
      return Utils.removeEmpty((T) postVisitDeepDatasetDiff((DatasetDiff) b));
    }
    if (b instanceof DiscreteHyperparameterSetConfigBlob) {
      return Utils.removeEmpty(
          (T)
              postVisitDeepDiscreteHyperparameterSetConfigBlob(
                  (DiscreteHyperparameterSetConfigBlob) b));
    }
    if (b instanceof DockerEnvironmentBlob) {
      return Utils.removeEmpty((T) postVisitDeepDockerEnvironmentBlob((DockerEnvironmentBlob) b));
    }
    if (b instanceof DockerEnvironmentDiff) {
      return Utils.removeEmpty((T) postVisitDeepDockerEnvironmentDiff((DockerEnvironmentDiff) b));
    }
    if (b instanceof EnvironmentBlob) {
      return Utils.removeEmpty((T) postVisitDeepEnvironmentBlob((EnvironmentBlob) b));
    }
    if (b instanceof EnvironmentDiff) {
      return Utils.removeEmpty((T) postVisitDeepEnvironmentDiff((EnvironmentDiff) b));
    }
    if (b instanceof EnvironmentVariablesBlob) {
      return Utils.removeEmpty(
          (T) postVisitDeepEnvironmentVariablesBlob((EnvironmentVariablesBlob) b));
    }
    if (b instanceof EnvironmentVariablesDiff) {
      return Utils.removeEmpty(
          (T) postVisitDeepEnvironmentVariablesDiff((EnvironmentVariablesDiff) b));
    }
    if (b instanceof GitCodeBlob) {
      return Utils.removeEmpty((T) postVisitDeepGitCodeBlob((GitCodeBlob) b));
    }
    if (b instanceof GitCodeDiff) {
      return Utils.removeEmpty((T) postVisitDeepGitCodeDiff((GitCodeDiff) b));
    }
    if (b instanceof HyperparameterConfigBlob) {
      return Utils.removeEmpty(
          (T) postVisitDeepHyperparameterConfigBlob((HyperparameterConfigBlob) b));
    }
    if (b instanceof HyperparameterConfigDiff) {
      return Utils.removeEmpty(
          (T) postVisitDeepHyperparameterConfigDiff((HyperparameterConfigDiff) b));
    }
    if (b instanceof HyperparameterSetConfigBlob) {
      return Utils.removeEmpty(
          (T) postVisitDeepHyperparameterSetConfigBlob((HyperparameterSetConfigBlob) b));
    }
    if (b instanceof HyperparameterSetConfigDiff) {
      return Utils.removeEmpty(
          (T) postVisitDeepHyperparameterSetConfigDiff((HyperparameterSetConfigDiff) b));
    }
    if (b instanceof HyperparameterValuesConfigBlob) {
      return Utils.removeEmpty(
          (T) postVisitDeepHyperparameterValuesConfigBlob((HyperparameterValuesConfigBlob) b));
    }
    if (b instanceof NotebookCodeBlob) {
      return Utils.removeEmpty((T) postVisitDeepNotebookCodeBlob((NotebookCodeBlob) b));
    }
    if (b instanceof NotebookCodeDiff) {
      return Utils.removeEmpty((T) postVisitDeepNotebookCodeDiff((NotebookCodeDiff) b));
    }
    if (b instanceof PathDatasetBlob) {
      return Utils.removeEmpty((T) postVisitDeepPathDatasetBlob((PathDatasetBlob) b));
    }
    if (b instanceof PathDatasetComponentBlob) {
      return Utils.removeEmpty(
          (T) postVisitDeepPathDatasetComponentBlob((PathDatasetComponentBlob) b));
    }
    if (b instanceof PathDatasetComponentDiff) {
      return Utils.removeEmpty(
          (T) postVisitDeepPathDatasetComponentDiff((PathDatasetComponentDiff) b));
    }
    if (b instanceof PathDatasetDiff) {
      return Utils.removeEmpty((T) postVisitDeepPathDatasetDiff((PathDatasetDiff) b));
    }
    if (b instanceof PythonEnvironmentBlob) {
      return Utils.removeEmpty((T) postVisitDeepPythonEnvironmentBlob((PythonEnvironmentBlob) b));
    }
    if (b instanceof PythonEnvironmentDiff) {
      return Utils.removeEmpty((T) postVisitDeepPythonEnvironmentDiff((PythonEnvironmentDiff) b));
    }
    if (b instanceof PythonRequirementEnvironmentBlob) {
      return Utils.removeEmpty(
          (T) postVisitDeepPythonRequirementEnvironmentBlob((PythonRequirementEnvironmentBlob) b));
    }
    if (b instanceof PythonRequirementEnvironmentDiff) {
      return Utils.removeEmpty(
          (T) postVisitDeepPythonRequirementEnvironmentDiff((PythonRequirementEnvironmentDiff) b));
    }
    if (b instanceof S3DatasetBlob) {
      return Utils.removeEmpty((T) postVisitDeepS3DatasetBlob((S3DatasetBlob) b));
    }
    if (b instanceof S3DatasetComponentBlob) {
      return Utils.removeEmpty((T) postVisitDeepS3DatasetComponentBlob((S3DatasetComponentBlob) b));
    }
    if (b instanceof S3DatasetComponentDiff) {
      return Utils.removeEmpty((T) postVisitDeepS3DatasetComponentDiff((S3DatasetComponentDiff) b));
    }
    if (b instanceof S3DatasetDiff) {
      return Utils.removeEmpty((T) postVisitDeepS3DatasetDiff((S3DatasetDiff) b));
    }
    if (b instanceof VersionEnvironmentBlob) {
      return Utils.removeEmpty((T) postVisitDeepVersionEnvironmentBlob((VersionEnvironmentBlob) b));
    }
    if (b instanceof VersionEnvironmentDiff) {
      return Utils.removeEmpty((T) postVisitDeepVersionEnvironmentDiff((VersionEnvironmentDiff) b));
    }
    return Utils.removeEmpty(b);
  }
}
