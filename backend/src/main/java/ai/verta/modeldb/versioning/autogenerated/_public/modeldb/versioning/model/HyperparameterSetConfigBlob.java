// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import com.pholser.junit.quickcheck.generator.*;
import com.pholser.junit.quickcheck.random.*;
import java.util.*;
import java.util.function.Function;

public class HyperparameterSetConfigBlob implements ProtoType {
  public ContinuousHyperparameterSetConfigBlob Continuous;
  public DiscreteHyperparameterSetConfigBlob Discrete;
  public String Name;

  public HyperparameterSetConfigBlob() {
    this.Continuous = null;
    this.Discrete = null;
    this.Name = "";
  }

  public Boolean isEmpty() {
    if (this.Continuous != null && !this.Continuous.equals(null)) {
      return false;
    }
    if (this.Discrete != null && !this.Discrete.equals(null)) {
      return false;
    }
    if (this.Name != null && !this.Name.equals("")) {
      return false;
    }
    return true;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\"class\": \"HyperparameterSetConfigBlob\", \"fields\": {");
    boolean first = true;
    if (this.Continuous != null && !this.Continuous.equals(null)) {
      if (!first) sb.append(", ");
      sb.append("\"Continuous\": " + Continuous);
      first = false;
    }
    if (this.Discrete != null && !this.Discrete.equals(null)) {
      if (!first) sb.append(", ");
      sb.append("\"Discrete\": " + Discrete);
      first = false;
    }
    if (this.Name != null && !this.Name.equals("")) {
      if (!first) sb.append(", ");
      sb.append("\"Name\": " + "\"" + Name + "\"");
      first = false;
    }
    sb.append("}}");
    return sb.toString();
  }

  // TODO: actually hash
  public String getSHA() {
    StringBuilder sb = new StringBuilder();
    sb.append("HyperparameterSetConfigBlob");
    if (this.Continuous != null && !this.Continuous.equals(null)) {
      sb.append("::Continuous::").append(Continuous);
    }
    if (this.Discrete != null && !this.Discrete.equals(null)) {
      sb.append("::Discrete::").append(Discrete);
    }
    if (this.Name != null && !this.Name.equals("")) {
      sb.append("::Name::").append(Name);
    }

    return sb.toString();
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof HyperparameterSetConfigBlob)) return false;
    HyperparameterSetConfigBlob other = (HyperparameterSetConfigBlob) o;

    {
      Function3<
              ContinuousHyperparameterSetConfigBlob, ContinuousHyperparameterSetConfigBlob, Boolean>
          f = (x, y) -> x.equals(y);
      if (this.Continuous != null || other.Continuous != null) {
        if (this.Continuous == null && other.Continuous != null) return false;
        if (this.Continuous != null && other.Continuous == null) return false;
        if (!f.apply(this.Continuous, other.Continuous)) return false;
      }
    }
    {
      Function3<DiscreteHyperparameterSetConfigBlob, DiscreteHyperparameterSetConfigBlob, Boolean>
          f = (x, y) -> x.equals(y);
      if (this.Discrete != null || other.Discrete != null) {
        if (this.Discrete == null && other.Discrete != null) return false;
        if (this.Discrete != null && other.Discrete == null) return false;
        if (!f.apply(this.Discrete, other.Discrete)) return false;
      }
    }
    {
      Function3<String, String, Boolean> f = (x, y) -> x.equals(y);
      if (this.Name != null || other.Name != null) {
        if (this.Name == null && other.Name != null) return false;
        if (this.Name != null && other.Name == null) return false;
        if (!f.apply(this.Name, other.Name)) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Continuous, this.Discrete, this.Name);
  }

  public HyperparameterSetConfigBlob setContinuous(ContinuousHyperparameterSetConfigBlob value) {
    this.Continuous = Utils.removeEmpty(value);
    return this;
  }

  public HyperparameterSetConfigBlob setDiscrete(DiscreteHyperparameterSetConfigBlob value) {
    this.Discrete = Utils.removeEmpty(value);
    return this;
  }

  public HyperparameterSetConfigBlob setName(String value) {
    this.Name = Utils.removeEmpty(value);
    return this;
  }

  public static HyperparameterSetConfigBlob fromProto(
      ai.verta.modeldb.versioning.HyperparameterSetConfigBlob blob) {
    if (blob == null) {
      return null;
    }

    HyperparameterSetConfigBlob obj = new HyperparameterSetConfigBlob();
    {
      Function<
              ai.verta.modeldb.versioning.HyperparameterSetConfigBlob,
              ContinuousHyperparameterSetConfigBlob>
          f = x -> ContinuousHyperparameterSetConfigBlob.fromProto(blob.getContinuous());
      obj.Continuous = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.HyperparameterSetConfigBlob,
              DiscreteHyperparameterSetConfigBlob>
          f = x -> DiscreteHyperparameterSetConfigBlob.fromProto(blob.getDiscrete());
      obj.Discrete = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<ai.verta.modeldb.versioning.HyperparameterSetConfigBlob, String> f =
          x -> (blob.getName());
      obj.Name = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.Builder toProto() {
    ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.Builder builder =
        ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.newBuilder();
    {
      if (this.Continuous != null && !this.Continuous.equals(null)) {
        Function<ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.Builder, Void> f =
            x -> {
              builder.setContinuous(this.Continuous.toProto());
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.Discrete != null && !this.Discrete.equals(null)) {
        Function<ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.Builder, Void> f =
            x -> {
              builder.setDiscrete(this.Discrete.toProto());
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.Name != null && !this.Name.equals("")) {
        Function<ai.verta.modeldb.versioning.HyperparameterSetConfigBlob.Builder, Void> f =
            x -> {
              builder.setName(this.Name);
              return null;
            };
        f.apply(builder);
      }
    }
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitHyperparameterSetConfigBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    visitor.preVisitDeepContinuousHyperparameterSetConfigBlob(this.Continuous);
    visitor.preVisitDeepDiscreteHyperparameterSetConfigBlob(this.Discrete);
    visitor.preVisitDeepString(this.Name);
  }

  public HyperparameterSetConfigBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitHyperparameterSetConfigBlob(this);
  }

  public HyperparameterSetConfigBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    this.setContinuous(visitor.postVisitDeepContinuousHyperparameterSetConfigBlob(this.Continuous));
    this.setDiscrete(visitor.postVisitDeepDiscreteHyperparameterSetConfigBlob(this.Discrete));
    this.setName(visitor.postVisitDeepString(this.Name));
    return this.postVisitShallow(visitor);
  }
}
