package ai.verta.modeldb.versioning.blob.diff;

import static ai.verta.modeldb.versioning.blob.diff.DiffComputer.toMap;

import ai.verta.modeldb.versioning.DiffStatusEnum;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.*;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

// TODO: handle collisions instead of just overwriting? It will be useful for mergingit
public class DiffMerger {
  public static <B, D, F, DF> F merge(
      B a, D d, Function<B, F> getterA, Function<D, DF> getterD, Function3<F, DF, F> merger) {
    if (d == null || Utils.getOrNull(d, getterD) == null) {
      return Utils.getOrNull(a, getterA);
    }
    return merger.apply(Utils.getOrNull(a, getterA), Utils.getOrNull(d, getterD));
  }

  public static <B, D, F extends ProtoType, DF> List<F> mergeList(
      B a,
      D d,
      Function<B, List<F>> getterA,
      Function<D, List<DF>> getterD,
      Function<F, String> hasherA,
      Function<DF, String> hasherD,
      Function<DF, DiffStatusEnumDiffStatus> status,
      Function<DF, F> getA,
      Function<DF, F> getB,
      Function3<Set<F>, DF, F> merger) {
    Map<String, HashSet<F>> mapA = a == null ? new HashMap<>() : toMap(getterA.apply(a), hasherA);
    Map<String, HashSet<DF>> mapD = d == null ? new HashMap<>() : toMap(getterD.apply(d), hasherD);

    HashSet<String> keys = new HashSet<>();
    keys.addAll(mapA.keySet());
    keys.addAll(mapD.keySet());

    List<F> ret =
        keys.stream()
            .flatMap(
                key -> {
                  HashSet<F> elA = mapA.getOrDefault(key, new HashSet<>());
                  HashSet<DF> elD = mapD.get(key);

                  if (elD != null) {
                    for (DF el : elD) {
                      DiffStatusEnumDiffStatus elStatus = status.apply(el);
                      F diffA = getA.apply(el);
                      F diffB = getB.apply(el);
                      if (elStatus == null
                          || elStatus.Status == DiffStatusEnum.DiffStatus.DELETED) {
                        if (diffA != null) {
                          elA.remove(diffA);
                        }
                      } else if (elStatus.Status == DiffStatusEnum.DiffStatus.ADDED) {
                        if (diffB != null) {
                          elA.add(diffB);
                        }
                      } else if (elStatus.Status == DiffStatusEnum.DiffStatus.MODIFIED) {
                        // TODO: error otherwise
                        if (diffA != null && diffB != null) {
                          elA.remove(diffA);
                          // Send the current set of keys colliding in case the merger wants to
                          // handle in a special way
                          // The default behavior should be just to replace A with B
                          if (merger != null) {
                            F merged = merger.apply(elA, el);
                            elA.add(merged);
                          } else {
                            elA.add(diffB);
                          }
                        }
                      }
                    }
                  }
                  if (elA == null || elA.isEmpty()) return null;
                  return elA.stream();
                })
            .map(Utils::removeEmpty)
            .filter(
                Objects::nonNull) // Remove elements that became null in the process of applying the
            // diff for some reason
            .collect(Collectors.toList());
    if (ret.isEmpty()) {
      return null;
    }
    return ret;
  }

  public static <T, T2> T mergeLast(
      T a, T2 d, Function<T2, T> getB, Function<T2, DiffStatusEnumDiffStatus> getStatus) {
    if (d == null) {
      return a;
    }

    DiffStatusEnumDiffStatus status = getStatus.apply(d);
    if (status.Status == DiffStatusEnum.DiffStatus.ADDED
        || status.Status == DiffStatusEnum.DiffStatus.MODIFIED) {
      return getB.apply(d);
    }
    if (status.Status == DiffStatusEnum.DiffStatus.DELETED) {
      return null;
    }
    return a;
  }

  public static Blob mergeBlob(Blob a, BlobDiff d) {
    return Utils.removeEmpty(
        new Blob()
            .setCode(merge(a, d, Blob::getCode, BlobDiff::getCode, DiffMerger::mergeCode))
            .setConfig(merge(a, d, Blob::getConfig, BlobDiff::getConfig, DiffMerger::mergeConfig))
            .setDataset(
                merge(a, d, Blob::getDataset, BlobDiff::getDataset, DiffMerger::mergeDataset))
            .setEnvironment(
                merge(
                    a,
                    d,
                    Blob::getEnvironment,
                    BlobDiff::getEnvironment,
                    DiffMerger::mergeEnvironment)));
  }

  public static CodeBlob mergeCode(CodeBlob a, CodeDiff d) {
    return Utils.removeEmpty(
        new CodeBlob()
            .setGit(merge(a, d, CodeBlob::getGit, CodeDiff::getGit, DiffMerger::mergeGitCode))
            .setNotebook(
                merge(
                    a,
                    d,
                    CodeBlob::getNotebook,
                    CodeDiff::getNotebook,
                    DiffMerger::mergeNotebookCode)));
  }

  public static GitCodeBlob mergeGitCode(GitCodeBlob a, GitCodeDiff d) {
    if (a == null && d == null) return null;
    if (d == null) return a;
    if (d.getStatus().isDeleted()) return null;
    return Utils.removeEmpty(mergeLast(a, d, x -> d.getB(), GitCodeDiff::getStatus));
  }

  public static NotebookCodeBlob mergeNotebookCode(NotebookCodeBlob a, NotebookCodeDiff d) {
    return Utils.removeEmpty(
        new NotebookCodeBlob()
            .setGitRepo(
                merge(
                    a,
                    d,
                    NotebookCodeBlob::getGitRepo,
                    NotebookCodeDiff::getGitRepo,
                    DiffMerger::mergeGitCode))
            .setPath(
                merge(
                    a,
                    d,
                    NotebookCodeBlob::getPath,
                    NotebookCodeDiff::getPath,
                    DiffMerger::mergePathDatasetComponent)));
  }

  public static ConfigBlob mergeConfig(ConfigBlob a, ConfigDiff d) {
    return Utils.removeEmpty(
        new ConfigBlob()
            .setHyperparameters(
                mergeList(
                    a,
                    d,
                    ConfigBlob::getHyperparameters,
                    ConfigDiff::getHyperparameters,
                    HyperparameterConfigBlob::getName,
                    x -> Utils.either(x.getA(), x.getB(), HyperparameterConfigBlob::getName),
                    HyperparameterConfigDiff::getStatus,
                    HyperparameterConfigDiff::getA,
                    HyperparameterConfigDiff::getB,
                    null))
            .setHyperparameterSet(
                mergeList(
                    a,
                    d,
                    ConfigBlob::getHyperparameterSet,
                    ConfigDiff::getHyperparameterSet,
                    HyperparameterSetConfigBlob::getName,
                    x -> Utils.either(x.getA(), x.getB(), HyperparameterSetConfigBlob::getName),
                    HyperparameterSetConfigDiff::getStatus,
                    HyperparameterSetConfigDiff::getA,
                    HyperparameterSetConfigDiff::getB,
                    null)));
  }

  /*
  public static HyperparameterConfigBlob mergeHyperparameterConfig(
      Set<HyperparameterConfigBlob> a, HyperparameterConfigDiff d) {
    return new HyperparameterConfigBlob().setName(d.Name).setValue(d.B);
  }

  public static HyperparameterSetConfigBlob mergeHyperparameterSetConfig(
      Set<HyperparameterSetConfigBlob> a, HyperparameterSetConfigDiff d) {
    return new HyperparameterSetConfigBlob().setName(d.Name).setContinuous(d.ContinuousB).setDiscrete(d.DiscreteB);
  }
   */

  public static DatasetBlob mergeDataset(DatasetBlob a, DatasetDiff d) {
    return Utils.removeEmpty(
        new DatasetBlob()
            .setPath(
                merge(
                    a, d, DatasetBlob::getPath, DatasetDiff::getPath, DiffMerger::mergePathDataset))
            .setS3(
                merge(a, d, DatasetBlob::getS3, DatasetDiff::getS3, DiffMerger::mergeS3Dataset)));
  }

  public static PathDatasetBlob mergePathDataset(PathDatasetBlob a, PathDatasetDiff d) {
    return Utils.removeEmpty(
        new PathDatasetBlob()
            .setComponents(
                mergeList(
                    a,
                    d,
                    PathDatasetBlob::getComponents,
                    PathDatasetDiff::getComponents,
                    PathDatasetComponentBlob::getPath,
                    x -> Utils.either(x.getA(), x.getB(), PathDatasetComponentBlob::getPath),
                    PathDatasetComponentDiff::getStatus,
                    PathDatasetComponentDiff::getA,
                    PathDatasetComponentDiff::getB,
                    null)));
  }

  public static PathDatasetComponentBlob mergePathDatasetComponent(
      PathDatasetComponentBlob a, PathDatasetComponentDiff d) {
    return d.getB();
  }

  public static S3DatasetBlob mergeS3Dataset(S3DatasetBlob a, S3DatasetDiff d) {
    return Utils.removeEmpty(
        new S3DatasetBlob()
            .setComponents(
                mergeList(
                    a,
                    d,
                    S3DatasetBlob::getComponents,
                    S3DatasetDiff::getComponents,
                    x ->
                        Utils.getOrNull(
                            Utils.getOrNull(x, S3DatasetComponentBlob::getPath),
                            PathDatasetComponentBlob::getPath),
                    x ->
                        Utils.either(
                            Utils.getOrNull(
                                Utils.getOrNull(x, S3DatasetComponentDiff::getPath),
                                PathDatasetComponentDiff::getA),
                            Utils.getOrNull(
                                Utils.getOrNull(x, S3DatasetComponentDiff::getPath),
                                PathDatasetComponentDiff::getB),
                            PathDatasetComponentBlob::getPath),
                    x ->
                        Utils.getOrNull(
                            Utils.getOrNull(x, S3DatasetComponentDiff::getPath),
                            PathDatasetComponentDiff::getStatus),
                    x ->
                        new S3DatasetComponentBlob()
                            .setPath(
                                Utils.getOrNull(
                                    Utils.getOrNull(x, S3DatasetComponentDiff::getPath),
                                    PathDatasetComponentDiff::getA)),
                    x ->
                        new S3DatasetComponentBlob()
                            .setPath(
                                Utils.getOrNull(
                                    Utils.getOrNull(x, S3DatasetComponentDiff::getPath),
                                    PathDatasetComponentDiff::getB)),
                    null)));
  }

  /*
  public static S3DatasetComponentBlob mergeS3DatasetComponent(
      Set<S3DatasetComponentBlob> a, S3DatasetComponentDiff d) {
    return new S3DatasetComponentBlob().setPath(d.Path.B);
  }
   */

  public static EnvironmentBlob mergeEnvironment(EnvironmentBlob a, EnvironmentDiff d) {
    return Utils.removeEmpty(
        new EnvironmentBlob()
            .setPython(
                merge(
                    a,
                    d,
                    EnvironmentBlob::getPython,
                    EnvironmentDiff::getPython,
                    DiffMerger::mergePythonEnvironment))
            .setDocker(
                merge(
                    a,
                    d,
                    EnvironmentBlob::getDocker,
                    EnvironmentDiff::getDocker,
                    DiffMerger::mergeDockerEnvironment))
            .setEnvironmentVariables(
                mergeList(
                    a,
                    d,
                    EnvironmentBlob::getEnvironmentVariables,
                    EnvironmentDiff::getEnvironmentVariables,
                    EnvironmentVariablesBlob::getName,
                    x -> Utils.either(x.getA(), x.getB(), EnvironmentVariablesBlob::getName),
                    EnvironmentVariablesDiff::getStatus,
                    EnvironmentVariablesDiff::getA,
                    EnvironmentVariablesDiff::getB,
                    null))
            .setCommandLine(
                merge(
                    a,
                    d,
                    EnvironmentBlob::getCommandLine,
                    EnvironmentDiff::getCommandLine,
                    DiffMerger::mergeCommandLine)));
  }

  public static List<String> mergeCommandLine(List<String> a, CommandLineEnvironmentDiff d) {
    if (a == null && d == null) return null;
    if (d == null) return a;
    if (d.getStatus().isDeleted()) return null;
    return Utils.removeEmpty(
        mergeLast(a, d, CommandLineEnvironmentDiff::getB, CommandLineEnvironmentDiff::getStatus));
  }

  public static PythonEnvironmentBlob mergePythonEnvironment(
      PythonEnvironmentBlob a, PythonEnvironmentDiff d) {
    return Utils.removeEmpty(
        new PythonEnvironmentBlob()
            .setVersion(
                merge(
                    a,
                    d,
                    PythonEnvironmentBlob::getVersion,
                    PythonEnvironmentDiff::getVersion,
                    DiffMerger::mergeVersionEnvironment))
            .setConstraints(
                mergeList(
                    a,
                    d,
                    PythonEnvironmentBlob::getConstraints,
                    PythonEnvironmentDiff::getConstraints,
                    PythonRequirementEnvironmentBlob::getLibrary,
                    x ->
                        Utils.either(
                            x.getA(), x.getB(), PythonRequirementEnvironmentBlob::getLibrary),
                    PythonRequirementEnvironmentDiff::getStatus,
                    PythonRequirementEnvironmentDiff::getA,
                    PythonRequirementEnvironmentDiff::getB,
                    null))
            .setRequirements(
                mergeList(
                    a,
                    d,
                    PythonEnvironmentBlob::getRequirements,
                    PythonEnvironmentDiff::getRequirements,
                    PythonRequirementEnvironmentBlob::getLibrary,
                    x ->
                        Utils.either(
                            x.getA(), x.getB(), PythonRequirementEnvironmentBlob::getLibrary),
                    PythonRequirementEnvironmentDiff::getStatus,
                    PythonRequirementEnvironmentDiff::getA,
                    PythonRequirementEnvironmentDiff::getB,
                    null)));
  }

  public static VersionEnvironmentBlob mergeVersionEnvironment(
      VersionEnvironmentBlob a, VersionEnvironmentDiff d) {
    if (a == null && d == null) return null;
    if (d == null) return a;
    if (d.getStatus().isDeleted()) return null;
    return Utils.removeEmpty(
        mergeLast(a, d, VersionEnvironmentDiff::getB, VersionEnvironmentDiff::getStatus));
  }

  /*
  public static PythonRequirementEnvironmentBlob mergePythonRequirementEnvironment(
      Set<PythonRequirementEnvironmentBlob> a, PythonRequirementEnvironmentDiff d) {
    return d.B;
  }
   */

  public static DockerEnvironmentBlob mergeDockerEnvironment(
      DockerEnvironmentBlob a, DockerEnvironmentDiff d) {
    if (a == null && d == null) return null;
    if (d == null) return a;
    if (d.getStatus().isDeleted()) return null;
    return Utils.removeEmpty(
        mergeLast(a, d, DockerEnvironmentDiff::getB, DockerEnvironmentDiff::getStatus));
  }

  /*
  public static EnvironmentVariablesBlob mergeEnvironmentVariables(
      Set<EnvironmentVariablesBlob> a, EnvironmentVariablesDiff d) {
    return new EnvironmentVariablesBlob().setValue(d.ValueB).setName(d.Name);
  }
  I/
   */
}
