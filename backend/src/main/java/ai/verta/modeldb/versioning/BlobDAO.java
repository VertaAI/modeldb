package ai.verta.modeldb.versioning;

import ai.verta.common.KeyValue;
import ai.verta.modeldb.DatasetVersion;
import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.artifactStore.ArtifactStoreDAO;
import ai.verta.modeldb.entities.versioning.RepositoryEntity;
import ai.verta.modeldb.experimentRun.CommitMultipartFunction;
import ai.verta.modeldb.metadata.MetadataDAO;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.AutogenBlobDiff;
import ai.verta.modeldb.versioning.blob.container.BlobContainer;
import com.google.protobuf.ProtocolStringList;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Map;
import org.hibernate.Session;

public interface BlobDAO {

  String setBlobs(Session session, List<BlobContainer> blobsList, FileHasher fileHasher)
      throws NoSuchAlgorithmException, ModelDBException;

  void setBlobsAttributes(
      Session session,
      Long repoId,
      String commitHash,
      List<BlobContainer> blobsList,
      boolean addAttribute)
      throws ModelDBException;

  void addUpdateBlobAttributes(
      RepositoryEntity repositoryEntity,
      CommitFunction commitFunction,
      List<KeyValue> attributes,
      boolean addAttribute)
      throws ModelDBException;

  void deleteBlobAttributes(
      RepositoryEntity repositoryEntity,
      CommitFunction commitFunction,
      List<String> attributesKeys,
      List<String> location,
      boolean deleteAll)
      throws ModelDBException;

  List<KeyValue> getBlobAttributes(
      Long repoId, String commitHash, List<String> location, List<String> attributeKeysList)
      throws ModelDBException;

  GetCommitComponentRequest.Response getCommitComponent(
      RepositoryFunction repositoryFunction, String commitHash, ProtocolStringList locationList)
      throws NoSuchAlgorithmException, ModelDBException;

  ListCommitBlobsRequest.Response getCommitBlobsList(
      RepositoryFunction repositoryFunction, String commitHash, List<String> locationList)
      throws NoSuchAlgorithmException, ModelDBException;

  DatasetVersion convertToDatasetVersion(
      MetadataDAO metadataDAO, RepositoryEntity repositoryEntity, String commitHash)
      throws ModelDBException;

  Map<String, BlobExpanded> getCommitBlobMap(
      Session session, String folderHash, List<String> locationList) throws ModelDBException;

  Map<String, Map.Entry<BlobExpanded, String>> getCommitBlobMapWithHash(
      Session session, String folderHash, List<String> locationList, List<BlobType> blobTypeList)
      throws ModelDBException;

  ComputeRepositoryDiffRequest.Response computeRepositoryDiff(
      RepositoryDAO repositoryDAO, ComputeRepositoryDiffRequest request) throws ModelDBException;

  List<BlobContainer> convertBlobDiffsToBlobs(
      List<AutogenBlobDiff> blobDiffs,
      RepositoryFunction repositoryFunction,
      CommitFunction commitFunction)
      throws ModelDBException;

  MergeRepositoryCommitsRequest.Response mergeCommit(
      RepositoryDAO repositoryDAO, MergeRepositoryCommitsRequest request)
      throws ModelDBException, NoSuchAlgorithmException;

  RevertRepositoryCommitsRequest.Response revertCommit(
      RepositoryDAO repositoryDAO, RevertRepositoryCommitsRequest request)
      throws ModelDBException, NoSuchAlgorithmException;

  GetUrlForBlobVersioned.Response getUrlForVersionedBlob(
      ArtifactStoreDAO artifactStoreDAO,
      RepositoryFunction repositoryFunction,
      CommitFunction commitFunction,
      GetUrlForBlobVersioned request)
      throws ModelDBException;

  CommitVersionedBlobArtifactPart.Response commitVersionedBlobArtifactPart(
      RepositoryFunction repositoryFunction,
      CommitFunction commitFunction,
      CommitVersionedBlobArtifactPart request)
      throws ModelDBException;

  GetCommittedVersionedBlobArtifactParts.Response getCommittedVersionedBlobArtifactParts(
      RepositoryFunction repositoryFunction,
      CommitFunction commitFunction,
      GetCommittedVersionedBlobArtifactParts request)
      throws ModelDBException;

  CommitMultipartVersionedBlobArtifact.Response commitMultipartVersionedBlobArtifact(
      RepositoryFunction repositoryFunction,
      CommitFunction commitFunction,
      CommitMultipartVersionedBlobArtifact request,
      CommitMultipartFunction commitMultipartFunction)
      throws ModelDBException;

  FindRepositoriesBlobs.Response findRepositoriesBlobs(
      CommitDAO commitDAO, FindRepositoriesBlobs request) throws ModelDBException;
}
