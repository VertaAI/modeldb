package ai.verta.modeldb.versioning.blob.container;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.HyperparameterValuesConfigBlob.ValueCase;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.AutogenContinuousHyperparameterSetConfigBlob;
import ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model.AutogenHyperparameterValuesConfigBlob;
import ai.verta.modeldb.versioning.blob.visitors.Validator;
import io.grpc.Status.Code;

public class ContinuousHyperparameterSetConfigContainer implements BlobContainerBase {

  private final AutogenContinuousHyperparameterSetConfigBlob autogenContinuousHyperparameterSetConfigBlob;

  public ContinuousHyperparameterSetConfigContainer(
      AutogenContinuousHyperparameterSetConfigBlob autogenContinuousHyperparameterSetConfigBlob) {
    this.autogenContinuousHyperparameterSetConfigBlob = autogenContinuousHyperparameterSetConfigBlob;
  }

  @Override
  public void validate() throws ModelDBException {
    AutogenHyperparameterValuesConfigBlob beginSetConfigBlob = autogenContinuousHyperparameterSetConfigBlob
        .getIntervalBegin();
    AutogenHyperparameterValuesConfigBlob endSetConfigBlob = autogenContinuousHyperparameterSetConfigBlob
        .getIntervalEnd();
    AutogenHyperparameterValuesConfigBlob stepSetConfigBlob = autogenContinuousHyperparameterSetConfigBlob
        .getIntervalStep();
    if (autogenContinuousHyperparameterSetConfigBlob.getIntervalBegin() != null) {
      throw new ModelDBException(
          "Hyperparameter set doesn't have interval begin",
          Code.INVALID_ARGUMENT);
    }
    if (autogenContinuousHyperparameterSetConfigBlob.getIntervalEnd() != null) {
      throw new ModelDBException(
          "Hyperparameter set doesn't have interval end", Code.INVALID_ARGUMENT);
    }
    if (autogenContinuousHyperparameterSetConfigBlob.getIntervalStep() != null) {
      throw new ModelDBException(
          "Hyperparameter set doesn't have interval step",
          Code.INVALID_ARGUMENT);
    }


    if (isNull(beginSetConfigBlob) || isNull(endSetConfigBlob) || isNull(stepSetConfigBlob)) {
      throw new ModelDBException(
          "Hyperparameter continuous set doesn't have one of the INT_VALUE, FLOAT_VALUE, STRING_VALUE",
          Code.INVALID_ARGUMENT);
    }

    if (beginSetConfigBlob.getStringValue() != null) {
      try {
        Double.parseDouble(beginSetConfigBlob.getStringValue());
      } catch (Exception ex) {
        throw new ModelDBException(
            "beginSetConfigBlob has a STRING_VALUE which is not in a valid numeric notation");
      }
    }
    if (endSetConfigBlob.getStringValue() != null) {
      try {
        Double.parseDouble(endSetConfigBlob.getStringValue());
      } catch (Exception ex) {
        throw new ModelDBException(
            "endSetConfigBlob has a STRING_VALUE which is not in a valid numeric notation");
      }
    }
    if (stepSetConfigBlob.getStringValue() != null) {
      try {
        Double.parseDouble(stepSetConfigBlob.getStringValue());
      } catch (Exception ex) {
        throw new ModelDBException(
            "stepSetConfigBlob has a STRING_VALUE which is not in a valid numeric notation");
      }
    }
  }

  public static boolean isNull(AutogenHyperparameterValuesConfigBlob beginSetConfigBlob) {
    return beginSetConfigBlob.getFloatValue() == null && beginSetConfigBlob.getIntValue() == null && beginSetConfigBlob.getStringValue() == null;
  }

}
